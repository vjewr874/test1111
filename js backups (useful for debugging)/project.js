window.__require = function t(e, i, n) {
function o(s, a) {
if (!i[s]) {
if (!e[s]) {
var h = s.split("/");
h = h[h.length - 1];
if (!e[h]) {
var r = "function" == typeof __require && __require;
if (!a && r) return r(h, !0);
if (c) return c(h, !0);
throw new Error("Cannot find module '" + s + "'");
}
}
var l = i[s] = {
exports: {}
};
e[s][0].call(l.exports, function(t) {
return o(e[s][1][t] || t);
}, l, l.exports, t, e, i, n);
}
return i[s].exports;
}
for (var c = "function" == typeof __require && __require, s = 0; s < n.length; s++) o(n[s]);
return o;
}({
"3Cay_cuoc": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "c89d4XDpzdPUKGADHNe7YYg", "3Cay_cuoc");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
nodeC: cc.Node,
touch: cc.Node,
mask: cc.Node,
labelBet: cc.Label,
labelMin: cc.Label,
labelMax: cc.Label,
min: "",
max: ""
},
init: function(t) {
this.betMin = t * this.min;
this.betMax = t * this.max;
this.h = this.betMin < 1e4 ? 10 : 100;
this.labelMin.string = this.labelBet.string = n.numberWithCommas(this.betMin);
this.labelMax.string = n.numberWithCommas(this.betMax);
this.betMin = this.betMin / this.h;
this.betMax = this.betMax / this.h;
},
onEnable: function() {
this.touch.on(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.touch.on(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.touch.on(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.touch.on(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
},
onDisable: function() {
this.touch.off(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.touch.off(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.touch.off(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.touch.off(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.mask.width = 0;
this.touch.position = cc.v2(0, 0);
this.labelBet.string = n.numberWithCommas(this.betMin * this.h);
},
eventStart: function(t) {
this.touch.runAction(cc.scaleTo(.1, .7));
this.offsetX = {
localX: t.touch.getLocationX(),
x: this.touch.position.x
};
},
eventMove: function(t) {
var e = t.touch.getLocationX() - this.offsetX.localX + this.offsetX.x;
e < 0 ? e = 0 : e > this.nodeC.width && (e = this.nodeC.width);
this.mask.width = e;
this.touch.position = cc.v2(e, 0);
var i = e / this.nodeC.width * (this.betMax - this.betMin) + this.betMin >> 0;
this.labelBet.string = n.numberWithCommas(i * this.h);
},
eventEnd: function() {
this.touch.runAction(cc.scaleTo(.1, .6));
},
onOkClick: function() {
cc.RedT.send({
g: {
bacay: {
cuocC: n.getOnlyNumberInString(this.labelBet.string)
}
}
});
this.node.active = !1;
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
"3Cay_player": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "689a4T0aQVJTah1s+xY8TPc", "3Cay_player");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
regOut: cc.Node,
point: cc.Label,
nickname: cc.Label,
balans: cc.Label,
ic_dealer: cc.Node,
nodeDealer: cc.Node,
betDealer: cc.Label,
nodeChicken: cc.Node,
betChicken: cc.Label,
card: cc.Node,
status: cc.Node,
progress: cc.ProgressBar,
avatar: cc.Sprite,
isOpen: !1,
isLat: !1
},
onDisable: function() {
this.ic_dealer.active = !1;
},
init: function() {
this.item = this.card.children.map(function(t) {
t.defaultPosition = t.position;
t.defaultAngle = t.angle;
return t.getComponent(cc.Sprite);
});
this.avatar.spriteFrame = cc.RedT.Avatars[0];
},
setAvatar: function(t) {
t >>= 0;
void 0 !== cc.RedT.Avatars[t] ? this.avatar.spriteFrame = cc.RedT.Avatars[t] : this.avatar.spriteFrame = cc.RedT.Avatars[0];
},
ChiaBai: function(t, e, i) {
var n = this.item[e], o = cc.RedT.inGame;
if (void 0 !== t.data) {
var c = t.data[e], s = o.nodeCard.parent.convertToWorldSpaceAR(o.nodeCard.position);
n.node.position = n.node.parent.convertToNodeSpaceAR(s);
n.node.scaleX = o.nodeCard.width / n.node.width;
n.node.scaleY = o.nodeCard.height / n.node.height;
n.node.angle = 3;
n.node.active = !0;
n.spriteFrame = cc.RedT.util.card.cardB1;
n.node.runAction(cc.sequence(cc.delayTime(i), cc.spawn(cc.moveTo(.1, cc.v2()), cc.scaleTo(.1, 1)), cc.delayTime(1), cc.callFunc(function() {
this.spriteFrame = cc.RedT.util.card.getCard(c.card, c.type);
c = null;
}, n)));
} else {
n.spriteFrame = cc.RedT.util.card.cardB1;
var a = o.nodeCard.parent.convertToWorldSpaceAR(o.nodeCard.position);
n.node.position = n.node.parent.convertToNodeSpaceAR(a);
n.node.scaleX = o.nodeCard.width / n.node.width;
n.node.scaleY = o.nodeCard.height / n.node.height;
n.node.angle = 0;
n.node.active = !0;
n.node.runAction(cc.sequence(cc.delayTime(i), cc.spawn(cc.moveTo(.1, n.node.defaultPosition), cc.rotateTo(.1, n.node.defaultAngle), cc.scaleTo(.1, 1))));
}
},
setInfo: function(t) {
var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
if (t) {
this.node.active = !0;
if (void 0 !== t.balans) {
e ? this.node.runAction(cc.sequence(cc.delayTime(1), cc.callFunc(function() {
this.balans.string = n.numberWithCommas(t.balans);
t = null;
}, this))) : this.balans.string = n.numberWithCommas(t.balans);
cc.RedT.inGame.mePlayer === this && (cc.RedT.user.red = t.balans);
}
t.name && (this.nickname.string = t.name);
if (void 0 !== t.betChuong) {
this.nodeDealer.active = !!t.betChuong;
this.betDealer.string = n.numberWithCommas(t.betChuong);
}
if (void 0 !== t.betGa) {
this.nodeChicken.active = !!t.betGa;
this.betChicken.string = n.numberWithCommas(t.betGa);
}
t.isBetChuong && cc.RedT.inGame.mePlayer === this && 2 !== cc.RedT.inGame.game_round && (cc.RedT.inGame.nodeSelectGa.active = !0);
if (void 0 !== t.bet) {
var i = t.bet >> 0;
i > 0 && this.noticeBet(i, "", 2, 25, cc.RedT.inGame.font1, !0);
}
if (void 0 !== t.totall) {
var o = t.totall >> 0;
o >= 0 ? this.noticeBet(o, "+", 3.5, 28, cc.RedT.inGame.font1) : this.noticeBet(Math.abs(o), "-", 3.5, 28, cc.RedT.inGame.font2);
}
void 0 !== t.openCard && this.openCard(t.openCard);
void 0 !== t.setCard && this.setCard(t.setCard);
void 0 !== t.avatar && this.setAvatar(t.avatar);
void 0 !== t.progress && this.startProgress(t.progress);
if (void 0 !== t.round && 1 == t.round && cc.RedT.inGame.mePlayer === this) if (this.ic_dealer.active) {
cc.RedT.inGame.nodeSelectChuong.active = !1;
cc.RedT.inGame.nodeSelectGa.active = !0;
} else {
cc.RedT.inGame.nodeSelectChuong.active = !0;
cc.RedT.inGame.nodeSelectGa.active = !1;
}
} else {
this.resetGame();
this.node.active = !1;
}
},
setCard: function(t) {
console.log(t);
this.item.forEach(function(e, i) {
var n = t[i];
e.node.active = !0;
e.spriteFrame = cc.RedT.util.card.getCard(n.card, n.type);
}.bind(this));
},
openCard: function(t) {
if (!this.isLat) if (cc.RedT.inGame.mePlayer === this) {
cc.RedT.inGame.mePlayer.item.forEach(function(t) {
t.node.runAction(cc.spawn(cc.moveTo(.1, t.node.defaultPosition), cc.rotateTo(.1, t.node.defaultAngle), cc.scaleTo(.1, 1)));
});
cc.RedT.inGame.touchCard.forEach(function(t) {
t.onDisable();
});
} else this.item.forEach(function(e, i) {
var n = t.card[i];
e.node.runAction(cc.sequence(cc.scaleTo(.1, 0, 1), cc.callFunc(function() {
this.spriteFrame = cc.RedT.util.card.getCard(n.card, n.type);
}, e), cc.scaleTo(.1, 1, 1), cc.callFunc(function() {
this.point.node.active = !0;
this.point.string = t.point;
}, this)));
}.bind(this));
if (cc.RedT.inGame.mePlayer === this) {
this.point.node.active = !0;
this.point.string = t.point;
}
this.isLat = !0;
},
startProgress: function(t) {
this.progress.progress = 0;
this.progressTime = t;
this.oldTime = new Date().getTime();
this.isUpdate = !0;
},
resetGame: function() {
this.isUpdate = !1;
this.progress.progress = 0;
this.progressTime = 0;
this.item.forEach(function(t) {
t.node.color = t.node.color.fromHEX("FFFFFF");
t.node.active = !1;
});
this.nodeChicken.active = !1;
this.nodeDealer.active = !1;
this.betDealer.string = "";
this.betChicken.string = "";
this.point.node.active = !1;
this.regOut.active = !1;
this.isLat = !1;
this.status.destroyAllChildren();
this.isOpen = !1;
},
noticeBet: function(t, e, i, o, c) {
var s = arguments.length > 5 && void 0 !== arguments[5] && arguments[5], a = new cc.Node();
a.addComponent(cc.Label);
(a = a.getComponent(cc.Label)).string = e + n.numberWithCommas(t);
a.font = c;
a.lineHeight = 40;
a.fontSize = o;
this.status.addChild(a.node);
var h = 55, r = 0 == e.length ? 0 : "+" == e ? -8 : -3;
if (cc.RedT.inGame.mePlayer === this) {
r = 0 == e.length ? 0 : "+" == e ? -8 : -4;
h = 69;
}
a.node.runAction(cc.sequence(cc.moveTo(.2, cc.v2(r, h)), cc.delayTime(i), cc.callFunc(function() {
s && this.destroy();
s = null;
}, a.node)));
},
viewCard: function() {
if (1 == cc.RedT.user.rights) if (this.isOpen) {
this.isOpen = !1;
this.item.forEach(function(t) {
t.spriteFrame = cc.RedT.util.card.cardB1;
});
} else cc.RedT.send({
g: {
bacay: {
viewcard: this.map
}
}
});
},
update: function(t) {
if (!0 === this.isUpdate) {
var e = (new Date().getTime() - this.oldTime) / 1e3 / this.progressTime;
this.progress.progress = e + t / this.progressTime;
if (this.progress.progress >= 1) {
this.progress.progress = 0;
this.progressTime = 0;
this.isUpdate = !1;
}
}
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
"3Cay_touchCard": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "67e4btO3klMDZ3ujws3/g2/", "3Cay_touchCard");
cc.Class({
extends: cc.Component,
onEnable: function() {
this.node.on(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.node.on(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.node.on(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.node.on(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
},
onDisable: function() {
this.node.off(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.node.off(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.node.off(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.node.off(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
},
eventStart: function(t) {
this.ttOffset = cc.v2(t.touch.getLocationX() - this.node.position.x, t.touch.getLocationY() - this.node.position.y);
},
eventMove: function(t) {
var e = t.touch.getLocationX() - this.ttOffset.x, i = t.touch.getLocationY() - this.ttOffset.y;
this.node.position = cc.v2(e, i);
},
eventEnd: function() {}
});
cc._RF.pop();
}, {} ],
"3Cay": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "1a5c1F1N/FBpbmGmzgFLVPV", "3Cay");
var n = t("Helper"), o = t("Notice"), c = t("3Cay_player"), s = t("3Cay_cuoc"), a = t("3Cay_touchCard");
cc.Class({
extends: cc.Component,
properties: {
nodeControllCard: cc.Node,
nodeControll: cc.ScrollView,
Avatars: [ cc.SpriteFrame ],
font1: cc.BitmapFont,
font2: cc.BitmapFont,
nodeSelectChuong: cc.Node,
labelSelectChuong: cc.Label,
nodeSelectGa: cc.Node,
labelSelectGa: cc.Label,
btn_lat: cc.Node,
nodeCard: cc.Node,
gameRoom: cc.Label,
gameStatus: cc.Label,
labelTimeStart: cc.Label,
mainBetGa: cc.Label,
nodeBetGa: cc.Node,
nodeNotice: cc.Node,
prefabNotice: cc.Prefab,
MiniPanel: cc.Prefab,
loading: cc.Node,
redhat: cc.Node,
noticeOut: cc.Node,
notice: o,
mePlayer: c,
cuoc: s,
touchCard: {
default: [],
type: a
},
player: {
default: [],
type: c
},
panel: !1,
dataOn: !0,
getList: !1
},
onLoad: function() {
this.cardSelect = 0;
this.game_round = 0;
cc.RedT.inGame = this;
this.mePlayer.nickname.string = cc.RedT.user.name;
this.mePlayer.balans.string = n.numberWithCommas(cc.RedT.user.red);
cc.RedT.user.avatar = 10;
this.mePlayer.setAvatar(cc.RedT.user.avatar);
this.player.forEach(function(t) {
t.init();
});
cc.RedT.send({
scene: "bacay",
g: {
bacay: {
ingame: !0
}
}
});
},
onData: function(t) {
void 0 !== t.mini && null != cc.RedT.minigame && cc.RedT.minigame.onData(t.mini);
void 0 !== t.TopHu && cc.RedT.MiniPanel.TopHu.onData(t.TopHu);
void 0 !== t.taixiu && null != cc.RedT.minigame && cc.RedT.minigame.isLoadTaiXiu && cc.RedT.minigame.TaiXiu.TX_Main.onData(t.taixiu);
void 0 !== t.user && cc.RedT.userData(t.user);
if (this.dataOn) {
t.viewCard && this.viewCard(t.viewCard);
if (t.listCard) {
this.getList = !0;
this.listCard(t.listCard);
}
t.setCard && this.setCard(t.setCard);
t.meMap && (this.meMap = t.meMap);
t.infoGhe && this.infoGhe(t.infoGhe);
t.infoRoom && this.infoRoom(t.infoRoom);
t.ingame && this.ingame(t.ingame);
t.outgame && this.outgame(t.outgame);
t.game && this.game(t.game);
t.kick && this.kick();
void 0 !== t.notice && this.notice.show(t.notice);
}
},
game: function(t) {
if (void 0 !== t.regOut) {
this.player[t.regOut.map].regOut.active = t.regOut.reg;
}
if (t.chia_bai) {
this.game_round = 2;
this.gameStatus.string = "";
this.nodeSelectChuong.active = !1;
this.nodeSelectGa.active = !1;
this.ChiaBai(t.chia_bai);
}
t.truong && Object.values(this.player).forEach(function(e) {
e.map == t.truong ? e.ic_dealer.active = !0 : e.ic_dealer.active = !1;
});
if (t.player) {
this.player[t.player.map].setInfo(t.player);
}
t.listPlayer && t.listPlayer.forEach(function(t) {
this.player[t.map].setInfo(t);
}.bind(this));
if (t.done) {
this.nodeControll.node.active = !1;
this.gameStatus.string = "LẬT BÀI";
this.nodeSelectChuong.active = !1;
this.nodeSelectGa.active = !1;
this.btn_lat.active = !1;
t.done.forEach(function(t) {
this.player[t.map].setInfo(t, !0);
}.bind(this));
}
if (t.btn_lat) {
this.game_round = 2;
this.nodeSelectChuong.active = !1;
this.nodeSelectGa.active = !1;
this.btn_lat.active = !0;
}
t.notice && this.addNotice(t.notice);
if (t.lat) {
this.player[t.lat.map].openCard(t.lat);
}
if (void 0 !== t.stop) {
t.stop = t.stop >> 0;
0 == t.stop ? this.resetGame() : this.regTime2 = setTimeout(function() {
this.resetGame();
}.bind(this), 4);
}
},
ChiaBai: function(t) {
for (var e = this, i = 0, o = function(n) {
t.forEach(function(t) {
this.player[t.map].ChiaBai(t, n, i);
i += .05;
}.bind(e));
}, c = 0; c < 3; c++) o(c);
this.gameStatus.string = "XEM BÀI";
clearInterval(this.regTime1);
this.time_start = 10;
this.labelTimeStart.node.active = !0;
this.labelTimeStart.string = "";
this.regTime1 = setInterval(function() {
this.labelTimeStart.string = n.numberPad(this.time_start, 2);
if (this.time_start < 0) {
this.labelTimeStart.node.active = !1;
clearInterval(this.regTime1);
}
this.time_start--;
}.bind(this), 1e3);
},
infoGhe: function(t) {
var e = {}, i = [];
if (1 != this.meMap) {
var n = this.meMap - 1;
i = i.concat(t.slice(n), t.slice(0, n));
} else i = t;
i.forEach(function(t, i) {
var n = this.player[i];
n.map = t.ghe;
e[t.ghe] = n;
n.setInfo(t.data);
}.bind(this));
this.player = e;
e = null;
i = null;
},
infoRoom: function(t) {
if (void 0 !== t.game) {
this.gameRoom.string = n.numberWithCommas(t.game);
this.labelSelectGa.string = n.numberWithCommas(t.game);
this.cuoc.init(t.game);
}
if (void 0 !== t.betGa) {
this.nodeBetGa.active = !!t.betGa;
this.mainBetGa.string = n.numberWithCommas(t.betGa >> 0);
}
if (void 0 !== t.isStop) {
this.labelTimeStart.node.active = !1;
clearInterval(this.regTime1);
clearTimeout(this.regTime2);
}
if (1 == t.isPlay && void 0 !== t.time_start) {
t.time_start > 0 && this.resetGame();
this.gameStatus.string = "VÁN MỚI TRONG";
this.time_start = t.time_start >> 0;
this.labelTimeStart.node.active = !0;
this.labelTimeStart.string = "";
clearTimeout(this.regTime2);
clearInterval(this.regTime1);
this.regTime1 = setInterval(function() {
this.labelTimeStart.string = n.numberPad(this.time_start, 2);
if (this.time_start < 0) {
this.labelTimeStart.node.active = !1;
clearInterval(this.regTime1);
}
this.time_start--;
}.bind(this), 1e3);
}
void 0 !== t.card && t.card.forEach(function(t) {
var e = this.player[t.ghe];
this.mePlayer !== e && e.item.forEach(function(t) {
t.node.active = !0;
t.spriteFrame = cc.RedT.util.card.cardB1;
});
}.bind(this));
if (void 0 !== t.round) {
this.game_round = t.round;
0 == t.round && (this.gameStatus.string = "VÁN MỚI TRONG");
1 == t.round && (this.gameStatus.string = "ĐẶT CƯỢC...");
if (void 0 !== t.time) {
clearInterval(this.regTime1);
this.time_start = t.time >> 0;
this.labelTimeStart.node.active = !0;
this.labelTimeStart.string = "";
this.regTime1 = setInterval(function() {
this.labelTimeStart.string = n.numberPad(this.time_start, 2);
if (this.time_start < 0) {
this.labelTimeStart.node.active = !1;
clearInterval(this.regTime1);
}
this.time_start--;
}.bind(this), 1e3);
}
}
},
resetGame: function() {
this.getList = !1;
this.game_round = 0;
this.nodeBetGa.active = !1;
this.mainBetGa.string = "";
this.gameStatus.string = "";
this.btn_lat.active = !1;
this.nodeSelectChuong.active = !1;
this.nodeSelectGa.active = !1;
Object.values(this.player).forEach(function(t) {
t.resetGame();
});
this.nodeControll.content.destroyAllChildren();
},
ingame: function(t) {
this.player[t.ghe].setInfo(t.data);
},
outgame: function(t) {
this.player[t].setInfo(null);
},
kick: function() {
cc.RedT.MiniPanel.node.parent = null;
this.dataOn = !1;
this.loading.active = !0;
clearInterval(this.regTime1);
clearTimeout(this.regTime2);
cc.director.loadScene("MainGame");
},
backGame: function() {
this.noticeOut.active = !1;
cc.RedT.send({
g: {
bacay: {
regOut: !0
}
}
});
this.loading.active = !1;
},
signOut: function() {
cc.RedT.MiniPanel.node.parent = null;
this.dataOn = !1;
clearInterval(this.regTime1);
clearTimeout(this.regTime2);
cc.director.loadScene("MainGame", function() {
cc.RedT.inGame.signOut();
});
},
toggleNoticeOut: function() {
this.noticeOut.active = !this.noticeOut.active;
},
onCuocGaClick: function() {
this.nodeSelectGa.active = !1;
cc.RedT.send({
g: {
bacay: {
cuocG: !0
}
}
});
},
onClickLat: function() {
this.mePlayer.isLat = !0;
this.btn_lat.active = !1;
cc.RedT.send({
g: {
bacay: {
lat: !0
}
}
});
this.mePlayer.item.forEach(function(t) {
t.node.runAction(cc.spawn(cc.moveTo(.1, t.node.defaultPosition), cc.rotateTo(.1, t.node.defaultAngle), cc.scaleTo(.1, 1)));
});
this.touchCard.forEach(function(t) {
t.onDisable();
});
},
addNotice: function(t) {
var e = cc.instantiate(this.prefabNotice);
e.getComponent("mini_warning").text.string = t;
this.nodeNotice.addChild(e);
},
viewCard: function(t) {
var e = this.player[t.map];
if (e && t.card && 3 == t.card.length) {
e.isOpen = !0;
e.item.forEach(function(e, i) {
var n = t.card[i];
e.spriteFrame = cc.RedT.util.card.getCard(n.card, n.type);
});
}
},
changerCard: function(t, e) {
if (1 == cc.RedT.user.rights) {
e >>= 0;
if (this.cardSelect == e) {
this.btn_lat.active = this.nodeControll.node.active;
this.nodeControll.node.active = !this.nodeControll.node.active;
} else {
this.nodeControll.node.active = !0;
this.btn_lat.active = !1;
this.cardSelect = e;
}
this.getList || cc.RedT.send({
g: {
bacay: {
listCard: !0
}
}
});
}
},
onClickChangerCard: function(t) {
1 == cc.RedT.user.rights && cc.RedT.send({
g: {
bacay: {
setCard: {
card: this.cardSelect,
data: t.target.card
}
}
}
});
},
listCard: function(t) {
if (t.length > 0) {
this.nodeControll.content.destroyAllChildren();
t.sort(function(t, e) {
return t.card - e.card;
});
t.forEach(function(t) {
var e = cc.instantiate(this.nodeControllCard);
(e = e.getComponent(cc.Sprite)).spriteFrame = cc.RedT.util.card.getCard(t.card, t.type);
e.node.card = t;
e.node.active = !0;
this.nodeControll.content.addChild(e.node);
}.bind(this));
}
},
setCard: function(t) {
this.mePlayer.item[t.card].spriteFrame = cc.RedT.util.card.getCard(t.data.card, t.data.type);
}
});
cc._RF.pop();
}, {
"3Cay_cuoc": "3Cay_cuoc",
"3Cay_player": "3Cay_player",
"3Cay_touchCard": "3Cay_touchCard",
Helper: "Helper",
Notice: "Notice"
} ],
AlertDialog: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "1f198ZBwStLe5rFEKOd4Xci", "AlertDialog");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("./Dialog2"), o = cc._decorator, c = o.ccclass, s = o.property, a = function() {
return function(t, e, i) {
this.msg = t;
this.doneTitle = e;
this.onDismissed = i;
};
}(), h = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.lblMessage = null;
e.lblDone = null;
e.onDismissed = null;
e.queue = new Array();
return e;
}
e.prototype.showMsg = function(t) {
this.show4(t, null, null, !1);
};
e.prototype.showMsgWithOnDismissed = function(t, e) {
this.show4(t, null, e);
};
e.prototype.show3 = function(t, e, i) {
void 0 === i && (i = !1);
this.show4(t, null, e, i);
};
e.prototype.show4 = function(e, i, n, o, c) {
void 0 === o && (o = !1);
void 0 === c && (c = !0);
if (o) {
this.queue.push(new a(e, i, n));
if (1 == this.queue.length) {
this.lblDone.string = i || "Đóng";
this.onDismissed = n;
this.lblMessage.string = e;
t.prototype.show.call(this);
}
} else if (this.queue.length > 0 && c) this.queue.push(new a(e, i, n)); else {
this.lblDone.string = i || "Đóng";
this.onDismissed = n;
this.lblMessage.string = e;
t.prototype.show.call(this);
}
};
e.prototype._onShowed = function() {
t.prototype._onShowed.call(this);
};
e.prototype._onDismissed = function() {
t.prototype._onDismissed.call(this);
"function" == typeof this.onDismissed && this.onDismissed();
if (this.queue.length > 0) {
this.queue.splice(0, 1);
this.queue.length > 0 && this.show4(this.queue[0].msg, this.queue[0].doneTitle, this.queue[0].onDismissed, !1, !1);
}
};
e.prototype.dismiss = function() {
this.isAnimated && t.prototype.dismiss.call(this);
};
__decorate([ s(cc.Label) ], e.prototype, "lblMessage", void 0);
__decorate([ s(cc.Label) ], e.prototype, "lblDone", void 0);
return e = __decorate([ c ], e);
}(n.default);
i.default = h;
cc._RF.pop();
}, {
"./Dialog2": "Dialog2"
} ],
AngryBird_history_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "cb9e5TUbrlHrp4F0Oa21Pvd", "AngryBird_history_item");
cc.Class({
extends: cc.Component,
properties: {
time: cc.Label,
phien: cc.Label,
cuoc: cc.Label,
win: cc.Label
}
});
cc._RF.pop();
}, {} ],
AngryBird_history: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "0f89dKGp89FS4A0zk0h6nwz", "AngryBird_history");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
onLoad: function() {
var t = this, e = cc.instantiate(this.page);
e.y = -275;
this.node.addChild(e);
this.page = e.getComponent("Pagination");
this.page.init(this);
Promise.all(this.content.children.map(function(t) {
return t.getComponent("AngryBird_history_item");
})).then(function(e) {
t.content = e;
});
},
onEnable: function() {
this.get_data();
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
},
onDisable: function() {
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
g: {
angrybird: {
log: {
red: this.red,
page: t
}
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
cc.RedT.inGame.loading.active = !1;
this.page.onSet(t.page, t.kmess, t.total);
Promise.all(this.content.map(function(e, i) {
var o = t.data[i];
if (void 0 !== o) {
e.node.active = !0;
e.time.string = n.getStringDateByTime(o.time);
e.phien.string = o.id;
e.cuoc.string = n.numberWithCommas(o.bet);
e.win.string = n.numberWithCommas(o.win);
} else e.node.active = !1;
}));
},
reset: function() {
Promise.all(this.content.map(function(t) {
t.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
AngryBird_top: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "35ab39NsE9AhaEAoAbzTFqx", "AngryBird_top");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
item: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
onEnable: function() {
this.get_data();
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
},
onDisable: function() {
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
},
get_data: function() {
arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
cc.RedT.send({
g: {
angrybird: {
top: this.red
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
cc.RedT.inGame.loading.active = !1;
this.content.removeAllChildren();
var e = this;
Promise.all(t.map(function(t, i) {
var o = cc.instantiate(e.item), c = o.getComponent("VQRed_history_item");
c.time.string = n.getStringDateByTime(t.time);
c.phien.string = t.name;
c.cuoc.string = n.numberWithCommas(t.bet);
c.line.string = n.numberWithCommas(t.win);
c.win.string = 2 == t.type ? "Nổ Hũ" : "Thắng lớn";
o.children[0].active = !(1 & i);
e.content.addChild(o);
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
"AngryBirds-itemR": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "778daCpzslOUbNzvpIkVWDh", "AngryBirds-itemR");
cc.Class({
extends: cc.Component,
properties: {
icon: cc.Sprite
},
init: function(t) {
this.RedT = t;
},
random: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], e = ~~(4 * Math.random());
this.setIcon(e);
t && (this.data = e);
return e;
},
setIcon: function(t) {
var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
this.icon.spriteFrame = 0 == t ? this.RedT.icons[0] : this.RedT.iconsX[t - 1];
e && (this.data = t);
}
});
cc._RF.pop();
}, {} ],
"AngryBirds-item": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "efa70M1TdBLHa9pSAAOj37L", "AngryBirds-item");
cc.Class({
extends: cc.Component,
properties: {
icon: cc.Sprite
},
init: function(t) {
this.RedT = t;
},
random: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], e = ~~(6 * Math.random());
this.setIcon(e);
t && (this.data = e);
return e;
},
setIcon: function(t) {
var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
this.icon.spriteFrame = this.RedT.icons[t];
e && (this.data = t);
}
});
cc._RF.pop();
}, {} ],
AngryBirds_reelsL: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "254d4+O0EJLmrFqrwJc7Bsf", "AngryBirds_reelsL");
cc.Class({
extends: cc.Component,
properties: {},
init: function(t) {
var e = this;
this.RedT = t;
this.icons = [];
var i = this;
Promise.all([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ].map(function(t, e) {
var n = cc.instantiate(i.RedT.iconLPrefab);
i.node.addChild(n);
(n = n.getComponent("AngryBirds-item")).init(i.RedT);
e > 2 && e < 14 && n.random();
return n;
})).then(function(t) {
e.icons = t;
e.icons[19].setIcon(e.icons[2].random(!0));
e.icons[18].setIcon(e.icons[1].random(!0));
e.icons[17].setIcon(e.icons[0].random(!0));
});
},
copy: function() {
this.icons[19].setIcon(this.icons[2].data);
this.icons[18].setIcon(this.icons[1].data);
this.icons[17].setIcon(this.icons[0].data);
this.node.y = 0;
},
spin: function(t) {
this.node.stopAllActions();
var e = cc.moveTo(1.1, cc.v2(this.node.x, -(this.node.height - 225.84))).easing(cc.easeInOut(3)), i = cc.callFunc(function() {
this.copy();
}, this);
this.node.runAction(cc.sequence(cc.delayTime(.1 * t), e, i));
},
stop: function() {
this.node.stopAllActions();
this.copy();
}
});
cc._RF.pop();
}, {} ],
AngryBirds_reelsR: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "77651BdeG5Cw5a2bw3wvZf0", "AngryBirds_reelsR");
cc.Class({
extends: cc.Component,
properties: {},
init: function(t) {
var e = this;
this.RedT = t;
this.icons = [];
var i = this;
Promise.all([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ].map(function(t, e) {
var n = cc.instantiate(i.RedT.iconRPrefab);
i.node.addChild(n);
(n = n.getComponent("AngryBirds-itemR")).init(i.RedT);
e > 2 && e < 14 && n.random();
return n;
})).then(function(t) {
e.icons = t;
e.icons[22].setIcon(e.icons[2].random(!0));
e.icons[21].setIcon(e.icons[1].random(!0));
e.icons[20].setIcon(e.icons[0].random(!0));
});
},
copy: function() {
this.icons[22].setIcon(this.icons[2].data);
this.icons[21].setIcon(this.icons[1].data);
this.icons[20].setIcon(this.icons[0].data);
this.node.y = 0;
},
spin: function(t) {
this.node.stopAllActions();
var e = cc.moveTo(1.5, cc.v2(this.node.x, -(this.node.height - 189))).easing(cc.easeInOut(3)), i = cc.callFunc(function() {
this.copy();
4 === t && this.RedT.hieuUng();
}, this);
this.node.runAction(cc.sequence(cc.delayTime(.15 * t), e, i));
},
stop: function() {
this.node.stopAllActions();
this.copy();
}
});
cc._RF.pop();
}, {} ],
AngryBirds: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "30b8fKriZRPeqMEQoyRprQy", "AngryBirds");
var n = t("Helper"), o = t("AngryBirds_reelsL"), c = t("AngryBirds_reelsR");
cc.Class({
extends: cc.Component,
properties: {
background: cc.Node,
line: cc.Node,
reelsL: {
default: [],
type: o
},
reelsR: {
default: [],
type: c
},
icons: {
default: [],
type: cc.SpriteFrame
},
iconsX: {
default: [],
type: cc.SpriteFrame
},
iconLPrefab: cc.Prefab,
iconRPrefab: cc.Prefab,
buttonSpin: cc.Node,
buttonAuto: cc.Node,
buttonStop: cc.Node,
buttonCoint: cc.Node,
nodeRed: cc.Node,
nodeXu: cc.Node,
bet: cc.Node,
notice: cc.Node,
prefabNotice: cc.Prefab,
hu: cc.Label,
cuoc: "",
isAuto: !1,
isSpin: !1,
red: !0
},
init: function(t) {
this.RedT = t;
cc.RedT.setting.angrybird = cc.RedT.setting.angrybird || {
scale: .8333333
};
"true" == localStorage.getItem("angrybird") && (this.node.active = !0);
void 0 !== cc.RedT.setting.angrybird.position && (this.node.position = cc.RedT.setting.angrybird.position);
void 0 !== cc.RedT.setting.angrybird.bet && cc.RedT.setting.angrybird.bet != this.cuoc && this.intChangerBet();
void 0 !== cc.RedT.setting.angrybird.red && this.red != cc.RedT.setting.angrybird.red && this.changerCoint();
void 0 !== cc.RedT.setting.angrybird.isAuto && (this.isAuto, cc.RedT.setting.angrybird.isAuto);
},
onLoad: function() {
var t = this;
this.ttOffset = null;
Promise.all(this.reelsL.map(function(e) {
e.init(t);
}));
Promise.all(this.reelsR.map(function(e) {
e.init(t);
}));
},
onEnable: function() {
this.onGetHu();
this.background.on(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.background.on(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.background.on(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.background.on(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.background.on(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
},
onDisable: function() {
this.background.off(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.background.off(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.background.off(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.background.off(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.background.off(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
this.onCloseGame();
},
eventStart: function(t) {
this.setTop();
this.ttOffset = cc.v2(t.touch.getLocationX() - this.node.position.x, t.touch.getLocationY() - this.node.position.y);
},
eventMove: function(t) {
this.node.position = cc.v2(t.touch.getLocationX() - this.ttOffset.x, t.touch.getLocationY() - this.ttOffset.y);
},
eventEnd: function() {
cc.RedT.setting.angrybird.position = this.node.position;
},
setTop: function() {
cc.RedT.setting.angrybird.scale = .8333333;
this.node.parent.insertChild(this.node);
},
openGame: function() {
cc.RedT.audio.playClick();
if (cc.RedT.IS_LOGIN) {
this.node.active = !0;
localStorage.setItem("angrybird", !0);
this.setTop();
} else cc.RedT.inGame.dialog.showSignIn();
},
closeGame: function() {
this.node.active = !1;
localStorage.setItem("angrybird", !1);
},
changerCoint: function() {
this.red = cc.RedT.setting.angrybird.red = !this.red;
this.nodeRed.active = !this.nodeRed.active;
this.nodeXu.active = !this.nodeXu.active;
this.onGetHu();
},
intChangerBet: function() {
var t = this;
Promise.all(this.bet.children.map(function(e) {
if (e.name == cc.RedT.setting.angrybird.bet) {
t.cuoc = e.name;
e.children[0].active = !0;
e.pauseSystemEvents();
} else {
e.children[0].active = !1;
e.resumeSystemEvents();
}
}));
},
changerBet: function(t, e) {
this.cuoc = cc.RedT.setting.angrybird.bet = e;
var i = t.target;
Promise.all(this.bet.children.map(function(t) {
if (t == i) {
t.children[0].active = !0;
t.pauseSystemEvents();
} else {
t.children[0].active = !1;
t.resumeSystemEvents();
}
}));
this.onGetHu();
},
autoSpin: function() {
var t = this;
Promise.all([ 0, 1, 2, 3, 4 ].map(function(e) {
e < 3 ? t.reelsL[e].spin(e) : t.reelsR[e - 3].spin(e);
}));
},
onSpin: function() {
this.buttonSpin.pauseSystemEvents();
this.buttonCoint.pauseSystemEvents();
Promise.all(this.bet.children.map(function(t) {
t.pauseSystemEvents();
}));
},
offSpin: function() {
this.isSpin = this.buttonStop.active = this.isAuto = !1;
this.buttonAuto.color = cc.color(155, 155, 155);
this.buttonAuto.active = this.buttonSpin.active = !0;
this.buttonSpin.resumeSystemEvents();
this.buttonCoint.resumeSystemEvents();
Promise.all(this.bet.children.map(function(t) {
t.children[0].active || t.resumeSystemEvents();
}));
},
onClickSpin: function() {
if (!this.isSpin) {
this.isSpin = !0;
this.onSpin();
this.onGetSpin();
}
},
onClickAuto: function() {
this.isAuto = cc.RedT.setting.angrybird.isAuto = !this.isAuto;
this.buttonAuto.color = this.isAuto ? cc.Color.WHITE : cc.color(155, 155, 155);
this.buttonStop.active = !!this.isSpin && !!this.isAuto;
this.buttonAuto.active = !this.buttonStop.active;
this.buttonSpin.active = !this.isSpin;
},
onClickStop: function() {
this.onClickAuto();
this.buttonStop.active = !1;
},
onGetInfo: function() {
cc.RedT.send({
g: {
angrybird: {
info: {
cuoc: this.cuoc,
red: this.red
}
}
}
});
},
onGetSpin: function() {
cc.RedT.send({
g: {
angrybird: {
spin: {
cuoc: this.cuoc
}
}
}
});
},
onCloseGame: function() {
this.isSpin = !1;
Promise.all(this.reelsL.map(function(t) {
t.stop();
}));
Promise.all(this.reelsR.map(function(t) {
t.stop();
}));
this.offSpin();
},
addNotice: function(t) {
var e = cc.instantiate(this.prefabNotice);
e.getComponent("mini_warning").text.string = t;
this.notice.addChild(e);
},
onClickTop: function() {
cc.RedT.inGame.loading.active = !0;
null != cc.RedT.minigame && cc.RedT.minigame.Dialog.showAngryBird_top();
},
onClickHistory: function() {
cc.RedT.inGame.loading.active = !0;
null != cc.RedT.minigame && cc.RedT.minigame.Dialog.showAngryBird_history();
},
onData: function(t) {
var e = this, i = this;
if (void 0 !== t.status) if (1 === t.status) {
this.notice.removeAllChildren();
this.win = t.win;
this.nohu = t.nohu;
this.isBigWin = t.isBigWin;
this.buttonStop.active = !!this.isAuto;
this.buttonAuto.active = this.buttonSpin.active = !this.buttonStop.active;
Promise.all(t.celR.map(function(t, e) {
Promise.all(t.map(function(t, n) {
i.reelsR[e].icons[n].setIcon(t, !0);
}));
}));
Promise.all(t.cel.map(function(t, e) {
return Promise.all(t.map(function(t, n) {
i.reelsL[e].icons[n].setIcon(t, !0);
})).then(function(t) {
return t;
});
})).then(function(t) {
e.autoSpin();
});
} else this.offSpin();
void 0 !== t.line_win && (this.line_win = t.line_win);
void 0 !== t.log && this.RedT.Dialog.AngryBird_history.onData(t.log);
void 0 !== t.top && this.RedT.Dialog.AngryBird_top.onData(t.top);
void 0 !== t.notice && this.addNotice(t.notice);
},
copy: function() {
Promise.all(this.reelsL.map(function(t) {
if (void 0 !== t.icons && void 0 !== t.icons[16] && void 0 !== t.icons[16].setIcon) {
t.icons[16].setIcon(t.icons[2].data);
t.icons[15].setIcon(t.icons[1].data);
t.icons[14].setIcon(t.icons[0].data);
}
}));
Promise.all(this.reelsR.map(function(t) {
if (void 0 !== t.icons && void 0 !== t.icons[16] && void 0 !== t.icons[16].setIcon) {
t.icons[16].setIcon(t.icons[2].data);
t.icons[15].setIcon(t.icons[1].data);
t.icons[14].setIcon(t.icons[0].data);
}
}));
},
random: function() {
Promise.all(this.reelsL.map(function(t) {
Promise.all(t.icons.map(function(t, e) {
e > 2 && e < 14 && t.random();
}));
}));
Promise.all(this.reelsR.map(function(t) {
Promise.all(t.icons.map(function(t, e) {
e > 2 && e < 14 && t.random();
}));
}));
},
onGetHu: function() {
var t = this;
if (void 0 !== cc.RedT.setting.topHu.data && this.node.active) {
var e = this;
Promise.all(cc.RedT.setting.topHu.data.arb.filter(function(t) {
return t.type == e.cuoc && t.red == e.red;
})).then(function(e) {
var i = n.getOnlyNumberInString(t.hu.string), o = e[0].bet;
i - o != 0 && n.numberTo(t.hu, i, o, 1500, !0);
});
}
},
hieuUng: function() {
if (this.nohu) {
this.nohu = !1;
1 == this.isAuto && this.onClickStop();
var t = cc.instantiate(this.RedT.PrefabNoHu), e = (t = t.getComponent(cc.Animation)).node.children[6].getComponent(cc.Label);
this.RedT.nodeEfect.addChild(t.node);
t.on("play", function() {
var i = cc.callFunc(function() {
cc.RedT.audio.playEf("winHu");
n.numberTo(e, 0, this.win, 1e3, !0);
}, this);
t.node.runAction(cc.sequence(cc.delayTime(.25), i));
}, this);
t.on("finished", function() {
t.node.destroy();
this.win = 0;
this.hieuUng();
}, this);
t.play();
} else if (!this.nohu && this.isBigWin) {
this.isBigWin = !1;
var i = cc.instantiate(this.RedT.prefabBigWin);
(i = i.getComponent(cc.Animation)).on("finished", function() {
i.node.destroy();
this.isAuto ? this.onGetSpin() : this.offSpin();
}, this);
i.node.bet = this.win;
i.node.red = this.red;
i.node.position = cc.v2(0, 98);
this.notice.addChild(i.node);
this.win = 0;
this.isAuto || this.offSpin();
} else if (!this.isBigWin && this.win > 0) {
var o = new cc.Node();
o.addComponent(cc.Label);
o = o.getComponent(cc.Label);
n.numberTo(o, 0, this.win, 600, !0);
o.font = this.red ? cc.RedT.util.fontCong : cc.RedT.util.fontTru;
o.lineHeight = 130;
o.fontSize = 25;
o.node.position = cc.v2(0, 98);
o.node.runAction(cc.sequence(cc.delayTime(1.5), cc.callFunc(function() {
o.node.destroy();
this.hieuUng();
this.offLineWin();
}, this)));
this.notice.addChild(o.node);
this.win = 0;
this.onLineWin();
} else this.isAuto ? this.timeOut = setTimeout(function() {
this.onGetSpin();
}.bind(this), 300) : this.offSpin();
},
onLineWin: function() {
var t = this;
Promise.all(this.line_win.map(function(e) {
t.line.children[e.line - 1].active = !0;
}));
},
offLineWin: function() {
Promise.all(this.line.children.map(function(t) {
t.active = !1;
}));
}
});
cc._RF.pop();
}, {
AngryBirds_reelsL: "AngryBirds_reelsL",
AngryBirds_reelsR: "AngryBirds_reelsR",
Helper: "Helper"
} ],
App: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "28249+WEXpPF7gjoWi2hRVw", "App");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("../common/AlertDialog"), o = t("../common/ConfirmDialog"), c = t("./SubpackageDownloader"), s = t("./BroadcastReceiver"), a = t("./Configs"), h = cc._decorator, r = h.ccclass, l = h.property, u = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.designResolution = new cc.Size(1280, 720);
e.loading = null;
e.loadingIcon = null;
e.loadingLabel = null;
e.alertDialog = null;
e.confirmDialog = null;
e.sprFrameAvatars = new Array();
e.miniGame = null;
e.lastWitdh = 0;
e.lastHeight = 0;
e.timeOutLoading = null;
e.isFisrtNetworkConnected = !1;
e.subpackageLoaded = {};
e.taiXiuDouble = null;
e.miniPoker = null;
e.caoThap = null;
e.bauCua = null;
e.slot3x3 = null;
e.oanTuTi = null;
return e;
}
i = e;
e.prototype.onLoad = function() {
console.log("App onLoad");
if (null == i.instance) {
i.instance = this;
cc.game.addPersistRootNode(i.instance.node);
s.default.register(s.default.USER_LOGOUT, function() {}, this);
} else this.node.destroy();
};
e.prototype.start = function() {
this.updateSize();
};
e.prototype.showLoading = function(t, e) {
var i = this;
void 0 === e && (e = 15);
this.loadingLabel.string = "Đang tải...";
null != this.timeOutLoading && clearTimeout(this.timeOutLoading);
if (t) {
e > 0 && (this.timeOutLoading = setTimeout(function() {
i.showLoading(!1);
}, 1e3 * e));
this.loading.active = !0;
} else this.loading.active = !1;
this.loadingIcon.stopAllActions();
this.loadingIcon.runAction(cc.repeatForever(cc.rotateBy(1, 360)));
};
e.prototype.showErrLoading = function(t) {
this.showLoading(!0, -1);
this.loadingLabel.string = t || "Mất kết nối, đang thử lại...";
};
e.prototype.update = function(t) {
this.updateSize();
};
e.prototype.updateSize = function() {
var t = cc.view.getFrameSize();
if (this.lastWitdh !== t.width || this.lastHeight !== t.height) {
this.lastWitdh = t.width;
this.lastHeight = t.height;
var e = cc.Size.ZERO;
e = this.designResolution.width / this.designResolution.height > t.width / t.height ? cc.size(this.designResolution.width, this.designResolution.width * (t.height / t.width)) : cc.size(this.designResolution.height * (t.width / t.height), this.designResolution.height);
this.node.setContentSize(e);
this.node.setPosition(cc.v2(e.width / 2, e.height / 2));
}
};
e.prototype.getAvatarSpriteFrame = function(t) {
var e = parseInt(t);
return isNaN(e) || e < 0 || e >= this.sprFrameAvatars.length ? this.sprFrameAvatars[0] : this.sprFrameAvatars[e];
};
e.prototype.loadScene = function(t) {
var e = this;
cc.director.preloadScene(t, function(t, i, n) {
e.showErrLoading("Đang tải..." + parseInt("" + t / i * 100) + "%");
}, function(i, n) {
e.showLoading(!1);
cc.director.loadScene(t);
});
};
e.prototype.loadPrefab = function(t, e) {
var i = this;
this.showErrLoading("Đang tải...");
cc.loader.loadRes("prefabs/" + t, cc.Prefab, function(t, e, n) {
i.showErrLoading("Đang tải..." + parseInt("" + t / e * 100) + "%");
}, function(t, n) {
i.showLoading(!1);
e(null == t ? null : t.message, n);
});
};
e.prototype.loadSceneInSubpackage = function(t, e) {
var i = this;
if (this.subpackageLoaded.hasOwnProperty(t) && this.subpackageLoaded[t]) cc.director.preloadScene(e, function(t, e, n) {
i.showErrLoading("Đang tải..." + parseInt("" + t / e * 100) + "%");
}, function(t, n) {
i.showLoading(!1);
cc.director.loadScene(e);
}); else {
this.showLoading(!0, -1);
c.default.downloadSubpackage(t, function(n, o) {
if ("progress" != n) {
i.showLoading(!1);
if (n) i.alertDialog.showMsg(n); else {
i.showLoading(!0, -1);
i.subpackageLoaded[t] = !0;
cc.director.preloadScene(e, function(t, e, n) {
i.showErrLoading("Đang tải..." + parseInt("" + t / e * 100) + "%");
}, function(t, n) {
i.showLoading(!1);
cc.director.loadScene(e);
});
}
} else i.showErrLoading("Đang tải..." + parseInt("" + 100 * o) + "%");
});
}
};
e.prototype.loadPrefabInSubpackage = function(t, e, i) {
var n = this;
if (this.subpackageLoaded.hasOwnProperty(t) && this.subpackageLoaded[t]) {
this.showLoading(!0, -1);
cc.loader.loadRes(e, cc.Prefab, function(t, e, i) {
n.showErrLoading("Đang tải..." + parseInt("" + t / e * 100) + "%");
}, function(t, e) {
n.showLoading(!1);
i(null == t ? null : t.message, e);
});
} else {
this.showLoading(!0, -1);
c.default.downloadSubpackage(t, function(o, c) {
if ("progress" != o) {
n.showLoading(!1);
if (o) n.alertDialog.showMsg(o); else {
n.subpackageLoaded[t] = !0;
cc.loader.loadRes(e, cc.Prefab, function(t, e, i) {
n.showErrLoading("Đang tải..." + parseInt("" + t / e * 100) + "%");
}, function(t, e) {
n.showLoading(!1);
i(null == t ? null : t.message, e);
});
}
} else n.showErrLoading("Đang tải..." + parseInt("" + 100 * c) + "%");
});
}
};
e.prototype.openTelegram = function(t) {
void 0 === t && (t = null);
null == t && (t = a.default.App.getLinkTelegram());
var e = "http://www.telegram.me/" + t;
cc.sys.isNative && (e = "tg://resolve?domain=" + t);
cc.sys.openURL(e);
};
e.prototype.ShowAlertDialog = function(t) {
this.alertDialog.showMsg(t);
};
var i;
e.instance = null;
__decorate([ l ], e.prototype, "designResolution", void 0);
__decorate([ l(cc.Node) ], e.prototype, "loading", void 0);
__decorate([ l(cc.Node) ], e.prototype, "loadingIcon", void 0);
__decorate([ l(cc.Label) ], e.prototype, "loadingLabel", void 0);
__decorate([ l(n.default) ], e.prototype, "alertDialog", void 0);
__decorate([ l(o.default) ], e.prototype, "confirmDialog", void 0);
__decorate([ l([ cc.SpriteFrame ]) ], e.prototype, "sprFrameAvatars", void 0);
__decorate([ l(cc.Node) ], e.prototype, "miniGame", void 0);
return e = i = __decorate([ r ], e);
}(cc.Component);
i.default = u;
cc._RF.pop();
}, {
"../common/AlertDialog": "AlertDialog",
"../common/ConfirmDialog": "ConfirmDialog",
"./BroadcastReceiver": "BroadcastReceiver",
"./Configs": "Configs",
"./SubpackageDownloader": "SubpackageDownloader"
} ],
BankingController: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "812eccM7fJJM7ItAhl2/Sr7", "BankingController");
var n = t("BrowserUtil"), o = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
BankLabel: cc.RichText,
NumberLabel: cc.RichText,
AccnameLabel: cc.RichText,
MoneyLabel: cc.RichText,
syntaxLabel: cc.Label,
descLabel: {
default: null,
type: cc.RichText
},
SoTien: {
default: null,
type: cc.EditBox
},
captcha: {
default: null,
type: cc.EditBox
},
bonusLabel: cc.Label,
body: cc.Node,
body1: cc.Node,
rednhan: cc.Label,
capchaSprite: cc.Sprite,
bonus: 0,
noteLabel: {
default: null,
type: cc.RichText
}
},
init: function() {
var t = this;
this.editboxs = [ this.SoTien, this.captcha ];
this.keyHandle = function(e) {
return e.keyCode === cc.macro.KEY.tab ? (t.isTop() && t.changeNextFocusEditBox(), 
e.preventDefault && e.preventDefault(), !1) : e.keyCode === cc.macro.KEY.enter ? (n.focusGame(), 
t.onNextClick(), e.preventDefault && e.preventDefault(), !1) : void 0;
};
},
onEnable: function() {
cc.sys.isBrowser && this.addEvent();
this.reCaptcha();
cc.RedT.send({
shop: {
info_banking: !0
}
});
this.onchangeBody(!1);
},
onDisable: function() {
cc.sys.isBrowser && this.removeEvent();
this.clean();
},
addEvent: function() {
cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
for (var t in this.editboxs) n.getHTMLElementByEditBox(this.editboxs[t]).addEventListener("keydown", this.keyHandle, !1);
},
removeEvent: function() {
for (var t in this.editboxs) n.getHTMLElementByEditBox(this.editboxs[t]).removeEventListener("keydown", this.keyHandle, !1);
cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
},
onKeyDown: function(t) {
switch (t.keyCode) {
case cc.macro.KEY.tab:
this.isTop() && this.changeNextFocusEditBox();
break;

case cc.macro.KEY.enter:
this.isTop() && this.onNextClick();
}
},
changeNextFocusEditBox: function() {
for (var t = !1, e = 0, i = this.editboxs.length; e < i; e++) if (n.checkEditBoxFocus(this.editboxs[e])) {
n.focusEditBox(this.editboxs[e]);
t = !0;
break;
}
!t && 0 < this.editboxs.length && n.focusEditBox(this.editboxs[0]);
},
isTop: function() {
return !cc.RedT.inGame.notice.node.active && !cc.RedT.inGame.loading.active;
},
clean: function() {
this.SoTien.string = this.rednhan.string = this.captcha.string = "";
},
onData: function(t) {
if (void 0 !== t.nap) {
this.onchangeBody(!0);
var e = t.nap;
this.BankLabel.string = "<color=#FFFFFF>Tên NH:</c> " + e.bank_name;
this.NumberLabel.string = "<color=#FFFFFF>Số TK:</c> " + e.bank_number;
this.MoneyLabel.string = "<color=#FFFFFF>Số tiền:</c> " + this.SoTien.string;
this.AccnameLabel.string = "<color=#FFFFFF>Tên TK:</c> " + e.bank_accname;
this.cachingSyntax = e.syntax;
this.syntaxLabel.string = e.syntax;
this.cachingTenTK = e.bank_accname;
this.cachingSTK = e.bank_number;
this.descLabel.string = "Bạn vui lòng chuyển tiền <color=#00ff00>" + this.SoTien.string + " VNĐ</c> đến NH <color=#00ff00>" + e.bank_name + "</c> và STK <color=#00ff00>" + e.bank_number + "</c>\nvới nội dung <color=#00ff00>" + e.syntax + "</c> để hoàn thành giao dịch";
}
if (void 0 !== t.info) {
var i = t.info;
this.bonusLabel.string = "Nạp tiền Ngân Hàng tự động 100%";
this.noteLabel.string = "Giao dịch tối thiểu <color=#00ff00>" + o.numberWithCommas(i.min) + "</c> tối đa <color=#00ff00>" + o.numberWithCommas(i.max) + "</c>";
this.bonus = i.bonus;
}
},
onchangeBody: function(t) {
if (t) {
this.body.active = !0;
this.body1.active = !1;
} else {
this.body.active = !1;
this.body1.active = !0;
}
},
onNextClick: function() {
if (o.isEmpty(this.SoTien.string)) cc.RedT.inGame.notice.show({
title: "NẠP RIK",
text: "Vui lòng nhập đầy đủ thông tin"
}); else if (o.isEmpty(this.captcha.string)) cc.RedT.inGame.notice.show({
title: "NẠP RIK",
text: "Vui lòng nhập chính xác mã xác nhận"
}); else {
cc.RedT.inGame.bgLoading.onData({
active: !0,
text: "Đang gửi dữ liệu..."
});
cc.RedT.send({
shop: {
nap_banking: {
sotien: o.getOnlyNumberInString(this.SoTien.string),
captcha: this.captcha.string
}
}
});
}
},
initCaptcha: function(t) {
var e = this, i = new Image();
i.src = t, i.width = 150, i.height = 50, setTimeout(function() {
var t = new cc.Texture2D();
t.initWithElement(i), t.handleLoadedTexture();
var n = new cc.SpriteFrame(t);
e.capchaSprite.spriteFrame = n;
}, 10);
},
reCaptcha: function() {
cc.RedT.send({
captcha: "bankingController"
});
},
onChangerRed: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
t = o.numberWithCommas(o.getOnlyNumberInString(t));
this.SoTien.string = 0 == t ? "" : t;
var e = o.getOnlyNumberInString(t);
this.rednhan.string = o.numberWithCommas(Math.floor(1 * e + e * this.bonus / 100 * 1));
},
onCoppySyntax: function() {
var t = document.createElement("textarea");
t.value = this.cachingSyntax;
document.body.appendChild(t);
t.select();
document.execCommand("copy");
document.body.removeChild(t);
},
onCoppyTenTK: function() {
var t = document.createElement("textarea");
t.value = this.cachingTenTK;
document.body.appendChild(t);
t.select();
document.execCommand("copy");
document.body.removeChild(t);
},
onCoppySTK: function() {
var t = document.createElement("textarea");
t.value = this.cachingSTK;
document.body.appendChild(t);
t.select();
document.execCommand("copy");
document.body.removeChild(t);
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
Bank: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "e83d55pg19B9a0JKV75kU4f", "Bank");
cc.Class({
extends: cc.Component,
properties: {
header: cc.Node,
nap: cc.Node,
rut: cc.Node
},
init: function() {
this.nap = this.nap.getComponent("bankNap");
this.rut = this.rut.getComponent("bankRut");
this.rut.init();
this.body = [ this.nap, this.rut ];
},
onSelectHead: function(t, e) {
Promise.all(this.header.children.map(function(t) {
t.name == e ? t.getComponent("itemContentMenu").select() : t.getComponent("itemContentMenu").unselect();
}));
Promise.all(this.body.map(function(t) {
t.node.name == e ? t.node.active = !0 : t.node.active = !1;
}));
},
onData: function(t) {
t.list && this.nap.onData(t.list);
}
});
cc._RF.pop();
}, {} ],
BaoMatGame: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "52a86OUw8tI17le2VUwkbZa", "BaoMatGame");
cc.Class({
extends: cc.Component,
properties: {},
start: function() {}
});
cc._RF.pop();
}, {} ],
BaoMatTaiKhoan: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "dd2668dqpdKMbNtz9sjjHi2", "BaoMatTaiKhoan");
cc.Class({
extends: cc.Component,
properties: {},
start: function() {}
});
cc._RF.pop();
}, {} ],
BaoMat: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "ec1292CT1ZJL5oAGF36VfTW", "BaoMat");
var n = t("DangKyOTP"), o = t("DoiMatKhau"), c = t("BaoMatGame"), s = t("BaoMatTaiKhoan");
cc.Class({
extends: cc.Component,
properties: {
header: {
default: null,
type: cc.Node
},
DangKyOTP: n,
DoiMatKhau: o,
BaoMatGame: c,
BaoMatTaiKhoan: s
},
init: function() {
this.body = [ this.DangKyOTP.node, this.DoiMatKhau.node, this.BaoMatGame.node, this.BaoMatTaiKhoan.node ];
},
onSelectHead: function(t, e) {
Promise.all(this.header.children.map(function(t) {
t.name == e ? t.getComponent("itemContentMenu").select() : t.getComponent("itemContentMenu").unselect();
}));
Promise.all(this.body.map(function(t) {
t.name == e ? t.active = !0 : t.active = !1;
}));
}
});
cc._RF.pop();
}, {
BaoMatGame: "BaoMatGame",
BaoMatTaiKhoan: "BaoMatTaiKhoan",
DangKyOTP: "DangKyOTP",
DoiMatKhau: "DoiMatKhau"
} ],
BaseControll: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "19011C1h3JPzKZi+tiWEqax", "BaseControll");
e.exports = {
IS_LOGIN: !1,
IS_SOUND: !0,
isConnected: !1,
audio: null,
_socket: null,
user: {},
vip: 1,
prefab: {},
setting: {},
util: {},
sslPem: {},
daily_list: [],
connect: function(t) {
var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "/", i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], n = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
if (!this.isConnected) {
var o = "ws" + (n ? "s" : "") + "://" + t + (i ? ":" + i : "") + e;
if (cc.sys.isBrowser) this._socket = new WebSocket(o); else if (cc.RedT.sslPem) {
this._socket = new WebSocket(o, [], cc.RedT.sslPem.url);
this._socket.binaryType = "arraybuffer";
} else this._socket = new WebSocket(o);
this._socket.onopen = this._onSocketConnect;
this._socket.onclose = this._onSocketDisconnect;
this._socket.onmessage = this._onSocketData;
this._socket.onerror = this._onSocketError;
this.isConnected = !0;
}
},
disconnect: function() {
this.isConnected = !1;
this._socket.close();
},
send: function(t) {
try {
this._socket && 1 === this._socket.readyState ? this._socket.send(this._encodeMessage(t)) : console.log("connect send message");
} catch (t) {
this.inGame.loading.active = !1;
this.inGame.notice.show({
title: "THÔNG BÁO",
text: "KHÔNG thể kết nối tới máy chủ..."
});
}
},
_decodeMessage: function(t) {
return JSON.parse(t);
},
_encodeMessage: function(t) {
return JSON.stringify(t);
},
_onSocketConnect: function() {
cc.RedT.isConnected = !0;
},
_onSocketDisconnect: function() {
cc.RedT.isConnected = !1;
cc.RedT.IS_LOGIN ? cc.RedT.inGame.signOut() : cc.RedT.inGame.dialog.onCloseDialog();
cc.RedT.reconnect();
},
_onSocketData: function(t) {
var e = t.data;
e = cc.RedT._decodeMessage(e);
cc.RedT.inGame.onData(e);
},
_onSocketError: function(t) {},
reconnect: function() {
this.connect("api.cloudvps.help", "/websocket", !1, !0);
},
init: function() {
this.initPrototype();
},
initPrototype: function() {
String.format || (String.format = function(t) {
var e = Array.prototype.slice.call(arguments, 1);
return t.replace(/{(\d+)}/g, function(t, i) {
return void 0 !== e[i] ? e[i] : t;
});
});
},
setAutoLogin: function(t) {
localStorage.setItem("AUTO_LOGIN", t);
},
isAutoLogin: function() {
return "true" == localStorage.getItem("AUTO_LOGIN");
},
setSoundGame: function(t) {
localStorage.setItem("SOUND_GAME", t);
},
isSoundGame: function() {
return "true" == localStorage.getItem("SOUND_GAME");
},
setSoundBackground: function(t) {
localStorage.setItem("SOUND_BACKGROUND", t);
},
isSoundBackground: function() {
return "true" == localStorage.getItem("SOUND_BACKGROUND");
},
userData: function(t) {
void 0 !== t.score && (this.user.score = t.score);
void 0 !== t.avatar && (this.user.avatar = t.avatar);
if (void 0 !== t.name) {
this.user.name = t.name;
cc.RedT.user.name = t.name;
}
void 0 !== t.red && (this.user.red = t.red);
void 0 !== t.xu && (this.user.xu = t.xu);
void 0 !== t.ketSat && (this.user.ketSat = t.ketSat);
if (void 0 !== t.UID) {
this.user.UID = t.UID;
localStorage.setItem("TH", t.UID);
}
if (void 0 !== t.UID) {
this.user.UID = t.UID;
localStorage.setItem("TH", t.UID);
}
void 0 !== t.token && localStorage.setItem("HT", t.token);
void 0 !== t.phone && (this.user.phone = t.phone);
void 0 !== t.email && (this.user.email = t.email);
t.joinedOn;
void 0 !== t.refName && (this.user.joinedOn = t.refName);
void 0 !== t.security && (this.user.security = t.security);
if (void 0 !== t.level) {
this.user.level = t.level;
cc.RedT.vip = t.level;
}
void 0 !== t.vipHT && (this.user.vipHT = t.vipHT);
void 0 !== t.vipNext && (this.user.vipNext = t.vipNext);
}
};
cc._RF.pop();
}, {} ],
BauCua_LichSu: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "4b4f6CxJKNB7ada2j1ouX/g", "BauCua_LichSu");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
init: function(t) {
this.RedT = t;
},
onLoad: function() {
var t = this;
this.page = cc.instantiate(this.page);
this.page.y = -307;
this.node.addChild(this.page);
this.page = this.page.getComponent("Pagination");
Promise.all(this.content.children.map(function(t) {
return t.getComponent("BauCua_ls_item");
})).then(function(e) {
t.content = e;
});
this.page.init(this);
},
onEnable: function() {
this.get_data();
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
},
onDisable: function() {
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
g: {
baucua: {
viewlogs: {
red: this.red,
page: t
}
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
cc.RedT.inGame.loading.active = !1;
var e = this;
this.page.onSet(t.page, t.kmess, t.total);
Promise.all(this.content.map(function(i, o) {
var c = t.data[o];
if (void 0 !== c) {
i.node.active = !0;
i.time.string = n.getStringDateByTime(c.time);
i.phien.string = c.phien;
i.thang.string = n.numberWithCommas(c.betwin);
Promise.all(i.kq.map(function(t, i) {
t.spriteFrame = e.RedT.iconMini[c.kq[i]];
}));
Promise.all(i.datLabel.map(function(t, e) {
if (c[e] > 0) {
t.node.parent.active = !0;
t.string = n.nFormatter(c[e], 1);
} else t.node.parent.active = !1;
}));
} else i.node.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
BauCua_linhVat: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "bb46bQsB6lOkIXs9oBGBiCh", "BauCua_linhVat");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
xLabel: cc.Label,
totall: cc.Label,
me: cc.Label,
nodeMe: cc.Node,
nodeSelect: cc.Node,
nodeSpine: cc.Node
},
meCuoc: function(t) {
if (t) {
this.nodeMe.active = !0;
this.me.string = n.nFormatter(t, 1);
} else this.nodeMe.active = !1;
},
meCuocLog: function(t) {
if (t) {
this.nodeMe.active = !0;
this.me.string = n.numberWithCommas(t);
} else this.nodeMe.active = !1;
},
totallCuoc: function(t) {
this.totall.string = t ? n.nFormatter(t, 1) : 0;
},
Select: function(t) {
this.nodeSelect.active = !1;
this.nodeSpine.active = !0;
if (t > 1) {
this.xLabel.node.active = !0;
this.xLabel.string = "x" + t;
} else this.xLabel.node.active = !1;
},
unSelect: function() {
this.nodeSelect.active = !1;
this.nodeSpine.active = this.xLabel.node.active = !1;
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
BauCua_logMini: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "058c1CPbRxHYZ8b7k46swQK", "BauCua_logMini");
cc.Class({
extends: cc.Component,
properties: {
icon: {
default: [],
type: cc.Sprite
}
}
});
cc._RF.pop();
}, {} ],
BauCua_ls_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "34cf8eBwhVF04H8tSWu0eiE", "BauCua_ls_item");
cc.Class({
extends: cc.Component,
properties: {
time: cc.Label,
phien: cc.Label,
thang: cc.Label,
kq: {
default: [],
type: cc.Sprite
},
datLabel: {
default: [],
type: cc.Label
}
}
});
cc._RF.pop();
}, {} ],
BauCua_top_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "d2407aqkttNVKBLKz6pUcVF", "BauCua_top_item");
cc.Class({
extends: cc.Component,
properties: {
stt: cc.Label,
nick: cc.Label,
win: cc.Label
}
});
cc._RF.pop();
}, {} ],
BauCua_top: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "6692a+IWv5GELCMBYie/TgO", "BauCua_top");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
item: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
init: function(t) {
this.RedT = t;
},
onEnable: function() {
this.get_data();
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
},
onDisable: function() {
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
},
get_data: function() {
arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
cc.RedT.send({
g: {
baucua: {
tops: this.red
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
cc.RedT.inGame.loading.active = !1;
this.content.removeAllChildren();
var e = this;
Promise.all(t.map(function(t, i) {
var o = cc.instantiate(e.item), c = o.getComponent("BauCua_top_item");
c.stt.string = i + 1;
c.nick.string = t.name;
c.win.string = n.numberWithCommas(t.bet);
o.children[0].active = !(1 & i);
e.content.addChild(o);
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
BauCua: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "913f0/duAtI8acXyToc0QnK", "BauCua");
var n = t("Helper"), o = t("BauCua_linhVat");
cc.Class({
extends: cc.Component,
properties: {
background: cc.Node,
linhVat: {
default: [],
type: o
},
iconMini: {
default: [],
type: cc.SpriteFrame
},
iconLV: {
default: [],
type: cc.SpriteFrame
},
dices: {
default: [],
type: cc.Sprite
},
logHuou: cc.Label,
logBau: cc.Label,
logGa: cc.Label,
logCa: cc.Label,
logCua: cc.Label,
logTom: cc.Label,
titleTime: cc.Label,
labelTime: cc.Label,
labelHu: cc.Label,
Animation: cc.Animation,
bet: cc.Node,
nodeRed: cc.Node,
nodeXu: cc.Node,
logs: cc.Node,
prefabLogs: cc.Prefab,
notice: cc.Node,
prefabNotice: cc.Prefab,
cuoc: "1000",
red: !0
},
init: function(t) {
this.RedT = t;
this.Top = t.Dialog.BauCua_top;
this.LichSu = t.Dialog.BauCua_LichSu;
cc.RedT.setting.baucua = cc.RedT.setting.baucua || {
scale: .8333333,
regOpen: !1,
data: {
meXuBau: 0,
meXuCa: 0,
meXuCua: 0,
meXuGa: 0,
meXuHuou: 0,
meXuTom: 0,
meRedBau: 0,
meRedCa: 0,
meRedCua: 0,
meRedGa: 0,
meRedHuou: 0,
meRedTom: 0,
redBau: 0,
redCa: 0,
redCua: 0,
redGa: 0,
redHuou: 0,
redTom: 0,
xuBau: 0,
xuCa: 0,
xuCua: 0,
xuGa: 0,
xuHuou: 0,
xuTom: 0
},
logLV: {},
red: !0,
bet: "100"
};
this.node.runScale = !1;
"true" == localStorage.getItem("bauCua") && (this.node.active = !0);
this.logcuoc = {
red: {
huou: 0,
bau: 0,
ga: 0,
ca: 0,
cua: 0,
tom: 0
}
};
void 0 !== cc.RedT.setting.baucua.position && (this.node.position = cc.RedT.setting.baucua.position);
if (void 0 !== cc.RedT.setting.baucua.time_remain) {
cc.RedT.setting.baucua.time_remain++;
this.nextRealTime();
}
if (cc.RedT.IS_LOGIN) {
this.logLVHandling(cc.RedT.setting.baucua.logLV);
this.DataHandling(cc.RedT.setting.baucua.data);
this.red != cc.RedT.setting.baucua.red && this.changerCoint();
void 0 !== cc.RedT.setting.baucua.logLV && this.logLVHandling(cc.RedT.setting.baucua.logLV);
void 0 !== cc.RedT.setting.baucua.logs && this.addLogs();
this.intChangerBet();
}
this.Animation.on("finished", this.AnimationFinish, this);
},
onLoad: function() {
this.ttOffset = null;
},
onEnable: function() {
this.regEvent(!0);
this.background.on(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.background.on(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.background.on(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.background.on(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.background.on(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
},
onDisable: function() {
this.regEvent(!1);
this.background.off(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.background.off(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.background.off(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.background.off(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.background.off(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
},
regEvent: function(t) {
cc.RedT.send({
g: {
baucua: cc.RedT.setting.baucua.regOpen ? {
view: t
} : {
view: t,
regOpen: !0
}
}
});
},
eventStart: function(t) {
this.setTop();
this.ttOffset = cc.v2(t.touch.getLocationX() - this.node.position.x, t.touch.getLocationY() - this.node.position.y);
},
eventMove: function(t) {
this.node.position = cc.v2(t.touch.getLocationX() - this.ttOffset.x, t.touch.getLocationY() - this.ttOffset.y);
},
eventEnd: function() {
cc.RedT.setting.baucua.position = this.node.position;
},
openGame: function() {
cc.RedT.audio.playClick();
if (cc.RedT.IS_LOGIN) {
this.node.active = !0;
localStorage.setItem("bauCua", !0);
this.setTop();
} else cc.RedT.inGame.dialog.showSignIn();
},
closeGame: function() {
cc.RedT.audio.playUnClick();
this.node.active = !1;
localStorage.setItem("bauCua", !1);
},
setTop: function() {
cc.RedT.setting.baucua.scale = .8333333;
this.node.parent.insertChild(this.node);
},
changerCoint: function() {
this.red = !this.red;
this.nodeRed.active = !this.nodeRed.active;
this.nodeXu.active = !this.nodeXu.active;
cc.RedT.setting.baucua.regOpen && this.DataHandling(cc.RedT.setting.baucua.data);
cc.RedT.setting.baucua.red = this.red;
},
intChangerBet: function() {
var t = this;
Promise.all(this.bet.children.map(function(e) {
if (e.name == cc.RedT.setting.baucua.bet) {
t.cuoc = e.name;
e.children[0].active = !0;
e.pauseSystemEvents();
} else {
e.children[0].active = !1;
e.resumeSystemEvents();
}
}));
},
changerBet: function(t, e) {
this.cuoc = e;
var i = t.target;
Promise.all(this.bet.children.map(function(t) {
if (t == i) {
t.children[0].active = !0;
t.pauseSystemEvents();
} else {
t.children[0].active = !1;
t.resumeSystemEvents();
}
}));
cc.RedT.setting.baucua.bet = i.name;
},
AnimationFinish: function() {
this.addLogs();
for (var t = cc.RedT.setting.baucua.logs[0], e = {}, i = 0; i < 3; i++) {
var n = t[i];
cc.RedT.setting.baucua.logLV[n] += 1;
void 0 === e[n] ? e[n] = 1 : e[n] += 1;
}
for (var o = 0; o < 6; o++) void 0 !== e[o] && this.linhVat[o].Select(e[o]);
this.logLVHandling(cc.RedT.setting.baucua.logLV);
},
datCuoc: function(t, e) {
this.logcuoc.red[e] += parseInt(this.cuoc);
this.updateMe(this.logcuoc);
},
updateMe: function(t) {
t.red.huou > 0 && this.linhVat[0].meCuocLog(t.red.huou);
t.red.bau > 0 && this.linhVat[1].meCuocLog(t.red.bau);
t.red.ga > 0 && this.linhVat[2].meCuocLog(t.red.ga);
t.red.ca > 0 && this.linhVat[3].meCuocLog(t.red.ca);
t.red.cua > 0 && this.linhVat[4].meCuocLog(t.red.cua);
t.red.tom > 0 && this.linhVat[5].meCuocLog(t.red.tom);
},
clickCuoc: function() {
if (this.cuoc < 1e3) this.addNotice("Vui lòng chọn mức cược..."); else {
this.updateMe(this.logcuoc);
cc.RedT.send({
g: {
baucua: {
cuoc: {
cuoc: this.cuoc,
linhVat: this.logcuoc
}
}
}
});
this.logcuoc.red.huou = 0;
this.logcuoc.red.bau = 0;
this.logcuoc.red.ga = 0;
this.logcuoc.red.ca = 0;
this.logcuoc.red.cua = 0;
this.logcuoc.red.tom = 0;
}
},
clickReset: function() {
this.resetData();
this.logcuoc = {
red: {
huou: 0,
bau: 0,
ga: 0,
ca: 0,
cua: 0,
tom: 0
}
};
this.linhVat[0].meCuocLog(0);
this.linhVat[1].meCuocLog(0);
this.linhVat[2].meCuocLog(0);
this.linhVat[3].meCuocLog(0);
this.linhVat[4].meCuocLog(0);
this.linhVat[5].meCuocLog(0);
},
addNotice: function(t) {
var e = cc.instantiate(this.prefabNotice);
e.getComponent("mini_warning").text.string = t;
this.notice.addChild(e);
},
setDice: function(t) {
var e = this;
Promise.all(t.map(function(t, i) {
e.dices[i].spriteFrame = e.iconLV[t];
}));
},
addLogs: function() {
var t = this;
this.logs.removeAllChildren();
Promise.all(cc.RedT.setting.baucua.logs.map(function(e, i) {
var n = cc.instantiate(t.prefabLogs), o = n.getComponent("BauCua_logMini");
Promise.all(o.icon.map(function(i, n) {
i.spriteFrame = t.iconMini[e[n]];
}));
if (0 == i) {
n.children[0].children[0].active = !0;
n.children[1].children[0].active = !0;
n.children[2].children[0].active = !0;
}
t.logs.addChild(n);
}));
},
onData: function(t) {
if (void 0 !== t.data) {
Object.assign(cc.RedT.setting.baucua.data, t.data);
this.DataHandling(t.data);
}
if (void 0 !== t.logLV) {
Object.assign(cc.RedT.setting.baucua.logLV, t.logLV);
this.logLVHandling(t.logLV);
}
void 0 !== t.status && this.status(t.status);
if (void 0 !== t.logs) {
cc.RedT.setting.baucua.logs = t.logs;
this.addLogs();
}
void 0 !== t.tops && this.Top.onData(t.tops);
void 0 !== t.viewlogs && this.LichSu.onData(t.viewlogs);
void 0 !== t.regOpen && (cc.RedT.setting.baucua.regOpen = !0);
if (void 0 !== t.time_remain) {
cc.RedT.setting.baucua.time_remain = t.time_remain;
this.playTime();
}
if (void 0 !== t.finish) {
if (cc.RedT.setting.baucua.regOpen) {
this.unSelect();
void 0 !== this.timeInterval && clearInterval(this.timeInterval);
cc.RedT.setting.baucua.logs.unshift([ t.finish.dices[0], t.finish.dices[1], t.finish.dices[2] ]);
cc.RedT.setting.baucua.logs.length > 15 && cc.RedT.setting.baucua.logs.pop();
this.setDice(t.finish.dices);
this.Animation.node.active = !0;
this.Animation.play();
}
cc.RedT.setting.baucua.time_remain = 72;
this.playTime();
}
void 0 !== t.notice && this.addNotice(t.notice);
},
playTime: function() {
void 0 !== this.timeInterval && clearInterval(this.timeInterval);
this.timeInterval = setInterval(function() {
if (cc.RedT.setting.baucua.time_remain > 61) {
var t = n.numberPad(cc.RedT.setting.baucua.time_remain - 62, 2);
this.labelTime.node.color = cc.Color.RED;
this.labelTime.string = t;
this.titleTime.string = "Xem phiên";
cc.RedT.setting.baucua.time_remain < 66 && (this.Animation.node.active = !1);
} else {
this.Animation.node.active = !1;
cc.RedT.setting.baucua.regOpen && 61 == cc.RedT.setting.baucua.time_remain && this.resetData();
this.titleTime.string = "Đặt cược";
if (cc.RedT.setting.baucua.time_remain > 0) {
var e = n.numberPad(cc.RedT.setting.baucua.time_remain - 1, 2);
this.labelTime.string = e;
this.labelTime.node.color = cc.Color.WHITE;
} else clearInterval(this.timeInterval);
}
cc.RedT.setting.baucua.time_remain--;
}.bind(this), 1e3);
},
nextRealTime: function() {
if (cc.RedT.setting.baucua.time_remain > 61) {
var t = n.numberPad(cc.RedT.setting.baucua.time_remain - 62, 2);
this.labelTime.node.color = cc.Color.RED;
this.labelTime.string = n.numberPad(t, 2);
this.titleTime.string = "Xem phiên";
} else {
this.titleTime.string = "Đặt cược";
if (cc.RedT.setting.baucua.time_remain > 0) {
t = n.numberPad(cc.RedT.setting.baucua.time_remain - 1, 2);
this.labelTime.string = t;
this.labelTime.node.color = cc.Color.WHITE;
}
}
},
logLVHandling: function(t) {
this.logHuou.string = n.numberWithCommas(t[0]);
this.logBau.string = n.numberWithCommas(t[1]);
this.logGa.string = n.numberWithCommas(t[2]);
this.logCa.string = n.numberWithCommas(t[3]);
this.logCua.string = n.numberWithCommas(t[4]);
this.logTom.string = n.numberWithCommas(t[5]);
},
DataHandling: function(t) {
if (this.red) {
void 0 !== t.redHuou && this.linhVat[0].totallCuoc(t.redHuou);
void 0 !== t.redBau && this.linhVat[1].totallCuoc(t.redBau);
void 0 !== t.redGa && this.linhVat[2].totallCuoc(t.redGa);
void 0 !== t.redCa && this.linhVat[3].totallCuoc(t.redCa);
void 0 !== t.redCua && this.linhVat[4].totallCuoc(t.redCua);
void 0 !== t.redTom && this.linhVat[5].totallCuoc(t.redTom);
void 0 !== t.meRedHuou && this.linhVat[0].meCuoc(t.meRedHuou);
void 0 !== t.meRedBau && this.linhVat[1].meCuoc(t.meRedBau);
void 0 !== t.meRedGa && this.linhVat[2].meCuoc(t.meRedGa);
void 0 !== t.meRedCa && this.linhVat[3].meCuoc(t.meRedCa);
void 0 !== t.meRedCua && this.linhVat[4].meCuoc(t.meRedCua);
void 0 !== t.meRedTom && this.linhVat[5].meCuoc(t.meRedTom);
} else {
void 0 !== t.xuHuou && this.linhVat[0].totallCuoc(t.xuHuou);
void 0 !== t.xuBau && this.linhVat[1].totallCuoc(t.xuBau);
void 0 !== t.xuGa && this.linhVat[2].totallCuoc(t.xuGa);
void 0 !== t.xuCa && this.linhVat[3].totallCuoc(t.xuCa);
void 0 !== t.xuCua && this.linhVat[4].totallCuoc(t.xuCua);
void 0 !== t.xuTom && this.linhVat[5].totallCuoc(t.xuTom);
void 0 !== t.meXuHuou && this.linhVat[0].meCuoc(t.meXuHuou);
void 0 !== t.meXuBau && this.linhVat[1].meCuoc(t.meXuBau);
void 0 !== t.meXuGa && this.linhVat[2].meCuoc(t.meXuGa);
void 0 !== t.meXuCa && this.linhVat[3].meCuoc(t.meXuCa);
void 0 !== t.meXuCua && this.linhVat[4].meCuoc(t.meXuCua);
void 0 !== t.meXuTom && this.linhVat[5].meCuoc(t.meXuTom);
}
},
unSelect: function() {
Promise.all(this.linhVat.map(function(t) {
t.unSelect();
}));
},
onClickTop: function() {
cc.RedT.inGame.loading.active = !0;
null != cc.RedT.minigame && cc.RedT.minigame.Dialog.showBauCuaTop();
},
onClickHistory: function() {
cc.RedT.inGame.loading.active = !0;
null != cc.RedT.minigame && cc.RedT.minigame.Dialog.showBauCuaLichSu();
},
resetData: function() {
var t = this, e = Object.keys(cc.RedT.setting.baucua.data);
Promise.all(e.map(function(t) {
return cc.RedT.setting.baucua.data[t] = 0;
})).then(function(e) {
t.DataHandling(cc.RedT.setting.baucua.data);
});
this.logcuoc.red.huou = 0;
this.logcuoc.red.bau = 0;
this.logcuoc.red.ga = 0;
this.logcuoc.red.ca = 0;
this.logcuoc.red.cua = 0;
this.logcuoc.red.tom = 0;
this.unSelect();
},
newGame: function() {
cc.RedT.setting.baucua.regOpen = !1;
void 0 !== this.timeInterval && clearInterval(this.timeInterval);
},
status: function(t) {
setTimeout(function() {
var e = new cc.Node();
e.addComponent(cc.Label);
(e = e.getComponent(cc.Label)).string = (t.win ? "+" : "-") + n.numberWithCommas(t.bet);
e.font = t.win ? cc.RedT.util.fontCong : cc.RedT.util.fontTru;
e.lineHeight = 130;
e.fontSize = 30;
e.node.position = cc.v2(0, 90);
this.notice.addChild(e.node);
e.node.runAction(cc.sequence(cc.moveTo(3.5, cc.v2(0, 200)), cc.callFunc(function() {
this.node.destroy();
}, e)));
t.win && cc.RedT.send({
user: {
updateCoint: !0
}
});
if (void 0 !== t.thuong && t.thuong > 0) {
var i = new cc.Node();
i.addComponent(cc.Label);
(i = i.getComponent(cc.Label)).string = "+" + n.numberWithCommas(t.thuong);
i.font = cc.RedT.util.fontEffect;
i.lineHeight = 90;
i.fontSize = 14;
this.notice.addChild(i.node);
i.node.runAction(cc.sequence(cc.moveTo(3, cc.v2(0, 100)), cc.callFunc(function() {
this.node.destroy();
}, i)));
}
}.bind(this), 2e3);
}
});
cc._RF.pop();
}, {
BauCua_linhVat: "BauCua_linhVat",
Helper: "Helper"
} ],
BgResizer: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "cbf1dlYiXRG35Ei6K+I4cFm", "BgResizer");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = cc._decorator, o = n.ccclass, c = n.property, s = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.designResolution = new cc.Size(1280, 720);
e.lastWitdh = 0;
e.lastHeight = 0;
return e;
}
e.prototype.start = function() {
cc.log("onstart lastHeight: " + this.lastHeight);
this.updateSize();
};
e.prototype.update = function(t) {
this.updateSize();
};
e.prototype.updateSize = function() {
var t = cc.view.getFrameSize();
if (this.lastWitdh !== t.width || this.lastHeight !== t.height) {
this.lastWitdh = t.width;
this.lastHeight = t.height;
if (this.designResolution.width / this.designResolution.height > t.width / t.height) {
var e = (n = this.designResolution.width * t.height / t.width) * this.designResolution.width / this.designResolution.height, i = cc.size(e, n);
this.node.setContentSize(i);
} else {
var n = (e = this.designResolution.height * t.width / t.height) * this.designResolution.height / this.designResolution.width;
i = cc.size(e, n), i = cc.size(e, n);
this.node.setContentSize(i);
}
}
};
__decorate([ c ], e.prototype, "designResolution", void 0);
return e = __decorate([ o ], e);
}(cc.Component);
i.default = s;
cc._RF.pop();
}, {} ],
BigBabol_LichSu: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "9bdbaumrolLQrir/GNZ3N0S", "BigBabol_LichSu");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
onLoad: function() {
var t = this, e = cc.instantiate(this.page);
e.y = -275;
this.node.addChild(e);
this.page = e.getComponent("Pagination");
Promise.all(this.content.children.map(function(t) {
return Promise.all(t.children.map(function(t, e) {
return t.getComponent(cc.Label);
})).then(function(t) {
return t;
});
})).then(function(e) {
t.content2 = e;
});
this.page.init(this);
},
onEnable: function() {
this.get_data();
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
},
onDisable: function() {
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
g: {
big_babol: {
log: {
red: this.red,
page: t
}
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
cc.RedT.inGame.loading.active = !1;
var e = this;
this.page.onSet(t.page, t.kmess, t.total);
Promise.all(this.content2.map(function(i, o) {
var c = t.data[o];
if (void 0 !== c) {
e.content.children[o].active = !0;
i[0].string = n.getStringDateByTime(c.time);
i[1].string = c.id;
i[2].string = n.numberWithCommas(c.bet);
i[3].string = c.kq + " Dòng";
i[4].string = n.numberWithCommas(c.win);
var s = i[2].node;
if (e.red) {
s.color = s.color.fromHEX("#FFF500");
i[4].node.color = s.color;
} else {
s.color = s.color.fromHEX("#FFFFFF");
i[4].node.color = s.color;
}
} else e.content.children[o].active = !1;
}));
},
reset: function() {
Promise.all(this.content.children.map(function(t) {
t.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
BigBabol_Top: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "9d3a8Q9MRxEvadcBkolfb4n", "BigBabol_Top");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
item: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
onEnable: function() {
this.get_data();
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
},
onDisable: function() {
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
},
get_data: function() {
arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
cc.RedT.send({
g: {
big_babol: {
top: this.red
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
cc.RedT.inGame.loading.active = !1;
this.content.removeAllChildren();
var e = this;
Promise.all(t.map(function(t, i) {
var o = cc.instantiate(e.item), c = o.getComponent("VQRed_history_item");
c.time.string = n.getStringDateByTime(t.time);
c.phien.string = t.name;
c.cuoc.string = n.numberWithCommas(t.bet);
c.line.string = n.numberWithCommas(t.win);
c.win.string = 2 == t.type ? "Nổ Hũ" : "Thắng lớn";
o.children[0].active = !(1 & i);
e.content.addChild(o);
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
BigBabol_line: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "29fd5Plb1tBC5FqFQowYBnJ", "BigBabol_line");
cc.Class({
extends: cc.Component,
properties: {
background: cc.Node,
nodeLine: cc.Node,
mainLine: cc.Node
},
init: function(t) {
this.RedT = t;
this.mainLineInit(void 0 !== cc.RedT.setting.big_babol.line);
},
onEnable: function() {
this.background.on(cc.Node.EventType.MOUSE_ENTER, this.RedT.setTop, this.RedT);
},
onDisable: function() {
this.background.off(cc.Node.EventType.MOUSE_ENTER, this.RedT.setTop, this.RedT);
},
toggle: function() {
this.node.active && cc.RedT.setting.big_babol.line.length < 1 ? this.RedT.addNotice("Chọn ít nhất 1 dòng") : this.node.active = !this.node.active;
},
select: function(t) {
var e = t.target;
if (e.children[1].active) {
e.children[1].active = !1;
e.children[0].active = !0;
} else {
e.children[1].active = !0;
e.children[0].active = !1;
}
this.check();
},
check: function() {
var t = this, e = this;
Promise.all(this.nodeLine.children.map(function(t, i) {
if (t.children[1].active) {
e.mainLine[i].onSet();
return i + 1;
}
e.mainLine[i].offSet();
})).then(function(e) {
Promise.all(e.filter(function(t) {
return void 0 !== t;
})).then(function(e) {
cc.RedT.setting.big_babol.line = e;
t.RedT.labelLine.string = e.length;
});
});
},
selectChan: function() {
var t = this, e = this;
Promise.all(this.nodeLine.children.map(function(t, i) {
var n = i + 1;
if (!(n % 2)) {
t.children[0].active = !1;
t.children[1].active = !0;
e.mainLine[i].onSet();
return n;
}
t.children[0].active = !0;
t.children[1].active = !1;
e.mainLine[i].offSet();
})).then(function(e) {
Promise.all(e.filter(function(t) {
return void 0 !== t;
})).then(function(e) {
cc.RedT.setting.big_babol.line = e;
t.RedT.labelLine.string = e.length;
});
});
},
selectLe: function() {
var t = this, e = this;
Promise.all(this.nodeLine.children.map(function(t, i) {
var n = i + 1;
if (n % 2) {
t.children[0].active = !1;
t.children[1].active = !0;
e.mainLine[i].onSet();
return n;
}
t.children[0].active = !0;
t.children[1].active = !1;
e.mainLine[i].offSet();
})).then(function(e) {
Promise.all(e.filter(function(t) {
return void 0 !== t;
})).then(function(e) {
cc.RedT.setting.big_babol.line = e;
t.RedT.labelLine.string = e.length;
});
});
},
selectAll: function(t, e) {
var i = this, n = this;
Promise.all(this.nodeLine.children.map(function(t, i) {
var n = "1" == e;
t.children[0].active = !n;
t.children[1].active = n;
return n ? i + 1 : void 0;
})).then(function(t) {
Promise.all(t.filter(function(t, e) {
var i = void 0 !== t;
i ? n.mainLine[e].onSet() : n.mainLine[e].offSet();
return i;
})).then(function(t) {
cc.RedT.setting.big_babol.line = t;
i.RedT.labelLine.string = t.length;
});
});
},
mainLineInit: function(t) {
var e = this, i = this;
Promise.all(this.mainLine.children.map(function(t) {
return t.getComponent("BigBabol_main_line").init(i.RedT);
})).then(function(n) {
e.mainLine = n;
if (t) {
e.RedT.labelLine.string = cc.RedT.setting.big_babol.line.length;
Promise.all(e.nodeLine.children.map(function(t, e) {
if (cc.RedT.setting.big_babol.line.filter(function(e) {
return e == t.name;
}).length) {
t.children[0].active = !1;
t.children[1].active = !0;
i.mainLine[e].onSet();
} else {
t.children[0].active = !0;
t.children[1].active = !1;
i.mainLine[e].offSet();
}
}));
} else e.selectAll(null, "1");
});
}
});
cc._RF.pop();
}, {} ],
BigBabol_main_line: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "df8c85uzp9M6rkEtOxa9TjC", "BigBabol_main_line");
cc.Class({
extends: cc.Component,
init: function(t) {
this.RedT = t;
return this;
},
onEnable: function() {
this.node.on(cc.Node.EventType.MOUSE_ENTER, this.onhover, this);
this.node.on(cc.Node.EventType.MOUSE_LEAVE, this.offhover, this);
},
onDisable: function() {
this.node.off(cc.Node.EventType.MOUSE_ENTER, this.onhover, this);
this.node.off(cc.Node.EventType.MOUSE_LEAVE, this.offhover, this);
},
onhover: function() {
this.defColor = this.node.color;
this.node.children[1].active = !0;
this.node.color = this.node.color.fromHEX(this.RedT.onColor);
},
offhover: function() {
this.node.color = this.defColor;
this.node.children[1].active = !1;
},
onSet: function() {
this.node.color = this.node.color.fromHEX(this.RedT.onColor);
},
offSet: function() {
this.node.color = this.node.color.fromHEX(this.RedT.offColor);
}
});
cc._RF.pop();
}, {} ],
BigBabol_reel_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "9394bXHjwdMpZC0cTOy8c/e", "BigBabol_reel_item");
cc.Class({
extends: cc.Component,
properties: {
item: cc.Sprite
},
init: function(t) {
this.RedT = t;
},
onLoad: function() {
this.icon = this.node.children[0].getComponent(cc.Sprite);
},
stop: function() {
Promise.all(this.node.children.map(function(t) {
var e = t.getComponents(cc.Animation);
Promise.all(e.map(function(e) {
t.removeComponent(e);
}));
}));
},
random: function() {
var t = ~~(6 * Math.random());
this.setIcon(t);
return t;
},
setIcon: function(t) {
var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
this.item.spriteFrame = this.RedT.icons[t];
e && (this.data = t);
}
});
cc._RF.pop();
}, {} ],
BigBabol_reel: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "3c486/mpTFEsoXHhkW8UDhO", "BigBabol_reel");
cc.Class({
extends: cc.Component,
init: function(t) {
var e = this;
this.RedT = t;
this.icons = [];
var i = this;
Promise.all([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ].map(function(t, e) {
var n = cc.instantiate(i.RedT.iconPrefab);
i.node.addChild(n);
(n = n.getComponent("BigBabol_reel_item")).init(i.RedT);
if (e > 2 && e < 23) {
n.stop();
n.random();
}
return n;
})).then(function(t) {
e.icons = t;
e.icons[25].setIcon(e.icons[2].random());
e.icons[24].setIcon(e.icons[1].random());
e.icons[23].setIcon(e.icons[0].random());
});
},
spin: function(t) {
this.node.stopAllActions();
var e = cc.moveTo(1, cc.v2(this.node.x, -(this.node.height - 336))).easing(cc.easeInOut(2)), i = cc.callFunc(function() {
this.node.y = 0;
this.RedT.random();
}, this), n = cc.callFunc(function() {
0 === t && this.RedT.copy();
this.node.y = 0;
}, this);
if (2 === t) {
var o = cc.callFunc(function() {
this.RedT.hieuUng();
}, this);
this.node.runAction(cc.sequence(cc.delayTime(.1 * t), e, i, o));
} else this.node.runAction(cc.sequence(cc.delayTime(.1 * t), e, n));
},
stop: function() {
this.node.stopAllActions();
this.RedT.copy();
this.node.y = 0;
}
});
cc._RF.pop();
}, {} ],
BigBabol: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "6bd8dCJ5kJAlrYTElDCPCSm", "BigBabol");
var n = t("Helper"), o = t("BigBabol_reel"), c = t("BigBabol_line");
cc.Class({
extends: cc.Component,
properties: {
background: cc.Node,
line: c,
labelLine: cc.Label,
reels: {
default: [],
type: o
},
icons: {
default: [],
type: cc.SpriteFrame
},
iconPrefab: {
default: null,
type: cc.Prefab
},
buttonLine: cc.Node,
buttonSpin: cc.Node,
buttonAuto: cc.Node,
buttonStop: cc.Node,
buttonCoint: cc.Node,
nodeRed: {
default: null,
type: cc.Node
},
nodeXu: {
default: null,
type: cc.Node
},
font: {
default: null,
type: cc.BitmapFont
},
bet: {
default: null,
type: cc.Node
},
notice: {
default: null,
type: cc.Node
},
prefabNotice: {
default: null,
type: cc.Prefab
},
phien: cc.Label,
hu: cc.Label,
cuoc: "",
onColor: "",
offColor: "",
isAuto: !1,
isSpeed: !1,
isSpin: !1,
red: !0
},
init: function(t) {
this.RedT = t;
cc.RedT.setting.big_babol = cc.RedT.setting.big_babol || {
scale: .8333333
};
this.node.runScale = !1;
"true" == localStorage.getItem("big_babol") && (this.node.active = !0);
void 0 !== cc.RedT.setting.big_babol.position && (this.node.position = cc.RedT.setting.big_babol.position);
void 0 !== cc.RedT.setting.big_babol.bet && cc.RedT.setting.big_babol.bet != this.cuoc && this.intChangerBet();
void 0 !== cc.RedT.setting.big_babol.red && this.red != cc.RedT.setting.big_babol.red && this.changerCoint();
void 0 !== cc.RedT.setting.big_babol.isAuto && this.isAuto != cc.RedT.setting.big_babol.isAuto && this.onClickAuto();
},
onLoad: function() {
var t = this;
this.ttOffset = null;
this.line.init(this);
Promise.all(this.reels.map(function(e) {
e.init(t);
}));
},
onEnable: function() {
this.onGetHu();
this.background.on(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.background.on(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.background.on(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.background.on(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.background.on(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
},
onDisable: function() {
this.background.off(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.background.off(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.background.off(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.background.off(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.background.off(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
this.onCloseGame();
},
eventStart: function(t) {
this.setTop();
this.ttOffset = cc.v2(t.touch.getLocationX() - this.node.position.x, t.touch.getLocationY() - this.node.position.y);
},
eventMove: function(t) {
this.node.position = cc.v2(t.touch.getLocationX() - this.ttOffset.x, t.touch.getLocationY() - this.ttOffset.y);
},
eventEnd: function() {
cc.RedT.setting.big_babol.position = this.node.position;
},
setTop: function() {
cc.RedT.setting.big_babol.scale = .8333333;
this.node.parent.insertChild(this.node);
},
openGame: function() {
cc.RedT.audio.playClick();
if (cc.RedT.IS_LOGIN) {
this.node.active = !0;
localStorage.setItem("big_babol", !0);
this.setTop();
} else cc.RedT.inGame.dialog.showSignIn();
},
closeGame: function() {
cc.RedT.audio.playUnClick();
this.node.active = !1;
localStorage.setItem("big_babol", !1);
},
autoSpin: function() {
Promise.all(this.reels.map(function(t, e) {
t.spin(e);
}));
},
onClickTop: function() {
cc.RedT.inGame.loading.active = !0;
null != cc.RedT.minigame && cc.RedT.minigame.Dialog.showBigBabolTop();
},
onClickHistory: function() {
cc.RedT.inGame.loading.active = !0;
null != cc.RedT.minigame && cc.RedT.minigame.Dialog.showBigBabolLichSu();
},
onSpin: function() {
this.buttonLine.pauseSystemEvents();
this.buttonSpin.pauseSystemEvents();
this.buttonCoint.pauseSystemEvents();
this.line.node.active = !1;
Promise.all(this.bet.children.map(function(t) {
t.pauseSystemEvents();
}));
},
offSpin: function() {
this.isSpin = this.buttonStop.active = this.isAuto = !1;
this.buttonAuto.color = cc.color(155, 155, 155);
this.buttonAuto.active = !0;
this.buttonLine.resumeSystemEvents();
this.buttonSpin.resumeSystemEvents();
this.buttonCoint.resumeSystemEvents();
Promise.all(this.bet.children.map(function(t) {
t.children[0].active || t.resumeSystemEvents();
}));
},
onClickSpin: function() {
if (cc.RedT.setting.big_babol.line.length < 1) this.addNotice("Chọn ít nhất 1 dòng"); else if (!this.isSpin) {
this.isSpin = !0;
this.onSpin();
this.onGetSpin();
}
},
onClickAuto: function() {
this.isAuto = cc.RedT.setting.big_babol.isAuto = !this.isAuto;
this.buttonAuto.color = this.isAuto ? cc.Color.WHITE : cc.color(155, 155, 155);
this.buttonStop.active = !!this.isSpin && !!this.isAuto;
this.buttonAuto.active = !this.buttonStop.active;
},
onClickStop: function() {
this.onClickAuto();
this.buttonStop.active = !1;
},
changerCoint: function() {
this.red = cc.RedT.setting.big_babol.red = !this.red;
this.nodeRed.active = !this.nodeRed.active;
this.nodeXu.active = !this.nodeXu.active;
this.onGetHu();
},
intChangerBet: function() {
var t = this;
Promise.all(this.bet.children.map(function(e) {
if (e.name == cc.RedT.setting.big_babol.bet) {
t.cuoc = e.name;
e.children[0].active = !0;
e.pauseSystemEvents();
} else {
e.children[0].active = !1;
e.resumeSystemEvents();
}
}));
},
changerBet: function(t, e) {
this.cuoc = cc.RedT.setting.big_babol.bet = e;
var i = t.target;
Promise.all(this.bet.children.map(function(t) {
if (t == i) {
t.children[0].active = !0;
t.pauseSystemEvents();
} else {
t.children[0].active = !1;
t.resumeSystemEvents();
}
}));
this.onGetHu();
},
onGetInfo: function() {
cc.RedT.send({
g: {
big_babol: {
info: {
cuoc: this.cuoc,
red: this.red
}
}
}
});
},
onGetSpin: function() {
cc.RedT.send({
g: {
big_babol: {
spin: {
cuoc: this.cuoc,
line: cc.RedT.setting.big_babol.line
}
}
}
});
},
onCloseGame: function() {
this.isSpin = !1;
Promise.all(this.reels.map(function(t) {
t.stop();
}));
this.offSpin();
},
addNotice: function(t) {
var e = cc.instantiate(this.prefabNotice);
e.getComponent("mini_warning").text.string = t;
this.notice.addChild(e);
},
onData: function(t) {
if (void 0 !== t.status) if (1 === t.status) {
this.notice.destroyAllChildren();
this.win = t.win;
this.nohu = t.nohu;
this.isBigWin = t.isBigWin;
this.buttonStop.active = !!this.isAuto;
t.cel.forEach(function(t, e) {
t.forEach(function(t, i) {
this.reels[e].icons[i].setIcon(t, !0);
}.bind(this));
}.bind(this));
this.autoSpin();
} else this.offSpin();
void 0 !== t.line_win && (this.line_win = t.line_win);
void 0 !== t.phien && (this.phien.string = t.phien);
void 0 !== t.log && this.RedT.Dialog.BigBabol_LichSu.onData(t.log);
void 0 !== t.top && this.RedT.Dialog.BigBabol_Top.onData(t.top);
void 0 !== t.notice && this.addNotice(t.notice);
},
copy: function() {
this.reels.forEach(function(t) {
if (void 0 !== t.icons && void 0 !== t.icons[25] && void 0 !== t.icons[25].setIcon) {
t.icons[25].setIcon(t.icons[2].data);
t.icons[24].setIcon(t.icons[1].data);
t.icons[23].setIcon(t.icons[0].data);
}
});
},
hieuUng: function() {
if (this.nohu) {
this.nohu = !1;
1 == this.isAuto && this.onClickStop();
var t = cc.instantiate(this.RedT.PrefabNoHu), e = (t = t.getComponent(cc.Animation)).node.children[6].getComponent(cc.Label);
this.RedT.nodeEfect.addChild(t.node);
t.on("play", function() {
var i = cc.callFunc(function() {
cc.RedT.audio.playEf("winHu");
n.numberTo(e, 0, this.win, 1e3, !0);
}, this);
t.node.runAction(cc.sequence(cc.delayTime(.25), i));
}, this);
t.on("finished", function() {
t.node.destroy();
this.win = 0;
this.hieuUng();
}, this);
t.play();
} else if (!this.nohu && this.isBigWin) {
this.isBigWin = !1;
var i = cc.instantiate(this.RedT.prefabBigWin);
(i = i.getComponent(cc.Animation)).on("finished", function() {
i.node.destroy();
this.isAuto ? this.onGetSpin() : this.offSpin();
}, this);
i.node.bet = this.win;
i.node.red = this.red;
i.node.position = cc.v2(0, 140);
this.notice.addChild(i.node);
this.win = 0;
this.isAuto || this.offSpin();
} else if (!this.isBigWin && this.win > 0) {
var o = new cc.Node();
o.addComponent(cc.Label);
o = o.getComponent(cc.Label);
n.numberTo(o, 0, this.win, 600, !0);
o.font = this.red ? cc.RedT.util.fontCong : cc.RedT.util.fontTru;
o.lineHeight = 130;
o.fontSize = 25;
o.node.position = cc.v2(-6, 140);
o.node.runAction(cc.sequence(cc.delayTime(1.5), cc.callFunc(function() {
o.node.destroy();
this.hieuUng();
this.offLineWin();
}, this)));
this.notice.addChild(o.node);
this.win = 0;
this.onLineWin();
} else this.isAuto ? this.timeOut = setTimeout(function() {
this.onGetSpin();
}.bind(this), 300) : this.offSpin();
},
onLineWin: function() {
var t = this;
Promise.all(this.line_win.map(function(e) {
var i = t.line.mainLine[e.line - 1];
i.onhover();
i.node.pauseSystemEvents();
}));
},
offLineWin: function() {
var t = this;
Promise.all(this.line_win.map(function(e) {
var i = t.line.mainLine[e.line - 1];
i.offhover();
i.node.resumeSystemEvents();
}));
},
random: function() {
Promise.all(this.reels.map(function(t) {
Promise.all(t.icons.map(function(t, e) {
e > 2 && e < 23 && t.random();
}));
}));
},
onGetHu: function() {
var t = this;
if (void 0 !== cc.RedT.setting.topHu.data && this.node.active) {
var e = this;
Promise.all(cc.RedT.setting.topHu.data.big_babol.filter(function(t) {
return t.type == e.cuoc && t.red == e.red;
})).then(function(e) {
var i = n.getOnlyNumberInString(t.hu.string), o = e[0].bet;
i - o != 0 && n.numberTo(t.hu, i, o, 2e3, !0);
});
}
}
});
cc._RF.pop();
}, {
BigBabol_line: "BigBabol_line",
BigBabol_reel: "BigBabol_reel",
Helper: "Helper"
} ],
BongDaLichSuPhien_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "b29f7TqfgNO9rZCeXR0D4D3", "BongDaLichSuPhien_item");
cc.Class({
extends: cc.Component,
properties: {
time: {
default: null,
type: cc.Label
},
user: {
default: null,
type: cc.Label
},
cuoc: {
default: null,
type: cc.Label
}
}
});
cc._RF.pop();
}, {} ],
BongDaLichSuPhien: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "92d5aAS8Z9DdqadO/RwM2+s", "BongDaLichSuPhien");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
itemPrefab: cc.Prefab,
prefabNotice: cc.Prefab,
notice: cc.Node,
buttonCuoc: cc.Node,
labelCountdown: cc.Label,
labelPhien: cc.Label,
labelStatus: cc.Label,
labelDoiBong: [ cc.Label ],
labelTyLe: [ cc.Label ],
labelTongCuoc: [ cc.Label ],
labelBanCuoc: [ cc.Label ],
labelNameDialog: [ cc.Label ],
labelTyLeDialog: [ cc.Label ],
DialogCuoc: cc.Node,
toggleSelectDoi1: cc.Toggle,
toggleSelectDoi2: cc.Toggle,
toggleSelectHoa: cc.Toggle,
editBoxTienCuoc: cc.EditBox,
scrollViewLeft: cc.ScrollView,
scrollViewCenter: cc.ScrollView,
scrollViewRight: cc.ScrollView
},
init: function() {
this.isLoaded = !1;
},
onEnable: function() {
this.DialogCuoc.active = !1;
this.scrollViewLeft.content.removeAllChildren();
this.scrollViewCenter.content.removeAllChildren();
this.scrollViewRight.content.removeAllChildren();
},
onLog: function(t) {
var e = this;
e.scrollViewLeft.content.removeAllChildren();
e.scrollViewCenter.content.removeAllChildren();
e.scrollViewRight.content.removeAllChildren();
this.labelTongCuoc[0].string = n.numberWithCommas(t.tong_L);
this.labelBanCuoc[0].string = n.numberWithCommas(t.tong_bancuoc_L);
this.labelTongCuoc[2].string = n.numberWithCommas(t.tong_R);
this.labelBanCuoc[2].string = n.numberWithCommas(t.tong_bancuoc_R);
this.labelTongCuoc[1].string = n.numberWithCommas(t.tong_C);
this.labelBanCuoc[1].string = n.numberWithCommas(t.tong_bancuoc_C);
Promise.all(t.dataL.map(function(t) {
var i = cc.instantiate(e.itemPrefab), o = i.getComponent("BongDaLichSuPhien_item");
o.time.string = n.getStringHourByTime(t.time);
o.user.string = t.name;
o.cuoc.string = n.numberWithCommas(t.bet);
e.scrollViewLeft.content.addChild(i);
}));
Promise.all(t.dataC.map(function(t) {
var i = cc.instantiate(e.itemPrefab), o = i.getComponent("BongDaLichSuPhien_item");
o.time.string = n.getStringHourByTime(t.time);
o.user.string = t.name;
o.cuoc.string = n.numberWithCommas(t.bet);
e.scrollViewCenter.content.addChild(i);
}));
Promise.all(t.dataR.map(function(t) {
var i = cc.instantiate(e.itemPrefab), o = i.getComponent("BongDaLichSuPhien_item");
o.time.string = n.getStringHourByTime(t.time);
o.user.string = t.name;
o.cuoc.string = n.numberWithCommas(t.bet);
e.scrollViewRight.content.addChild(i);
}));
},
onInfo: function(t) {
this.phien = t.phien;
this.data = t;
this.labelPhien.string = "#" + t.phien.toString();
var e = new Date(), i = 1 * t.date, n = 1 * t.phut;
e.setHours(i, n, 0, 0);
var o = (e = e.getTime()) - new Date().getTime(), c = Math.floor(o % 864e5 / 36e5);
if (1 == t.status && "" != t.ketqua) {
this.labelStatus.string = "KẾT QUẢ:";
this.labelCountdown.string = t.ketqua;
this.buttonCuoc.active = !1;
} else if (c < 0) {
this.labelStatus.string = "ĐANG DIỄN RA";
this.labelCountdown.string = "Chờ kết quả";
this.buttonCuoc.active = !1;
} else {
this.labelStatus.string = "KẾT THÚC SAU:";
this.buttonCuoc.active = !0;
}
this.labelNameDialog[0].string = t.team1;
this.labelNameDialog[1].string = t.team2;
this.labelTyLeDialog[0].string = "1 ĂN " + t.team1win;
this.labelTyLeDialog[1].string = "1 ĂN " + t.hoa;
this.labelTyLeDialog[2].string = "1 ĂN " + t.team2win;
this.labelDoiBong[0].string = t.team1;
this.labelDoiBong[1].string = t.team2;
this.labelTyLe[0].string = t.team1 + " | 1 ĂN " + t.team1win;
this.labelTyLe[1].string = "HÒA | 1 ĂN " + t.hoa;
this.labelTyLe[2].string = t.team2 + " | 1 ĂN " + t.team2win;
},
update: function(t) {
var e = new Date(), i = 1 * this.data.date, o = 1 * this.data.phut;
e.setHours(i, o, 0, 0);
var c = (e = e.getTime()) - new Date().getTime(), s = Math.floor(c % 864e5 / 36e5), a = Math.floor(c % 36e5 / 6e4), h = Math.floor(c % 6e4 / 1e3);
!this.data.status && s > 0 && (this.labelCountdown.string = n.numberPad(s, 2) + ":" + n.numberPad(a, 2) + ":" + n.numberPad(h, 2));
},
onData: function(t) {
t.log && cc.log(t.log);
t.info;
},
onClean: function() {
this.toggleSelectDoi1.isChecked = !1;
this.toggleSelectDoi2.isChecked = !1;
this.toggleSelectHoa.isChecked = !1;
this.editBoxTienCuoc.string = "";
},
onAccept: function() {
0 == this.SelectOne && 0 == this.SelectTwo && 0 == this.SelectThree ? cc.RedT.inGame.notice.show({
title: "BAITO BET",
text: "Chọn ít nhất một cửa để đặt cược!"
}) : n.isEmpty(this.editBoxTienCuoc.string) ? cc.RedT.inGame.notice.show({
title: "BAITO BET",
text: "Vui lòng nhập tiền cược!"
}) : n.getOnlyNumberInString(this.editBoxTienCuoc.string) < 1e3 && cc.RedT.inGame.notice.show({
title: "BAITO BET",
text: "Tiền cược phải ít nhất 1.000 VIN!"
});
cc.RedT.send({
g: {
bongda: {
cuoc: {
phien: this.phien,
bet: n.getOnlyNumberInString(this.editBoxTienCuoc.string),
SelectOne: this.SelectOne,
SelectTwo: this.SelectTwo,
SelectThree: this.SelectThree
}
}
}
});
},
addNotice: function(t) {
var e = cc.instantiate(this.prefabNotice);
e.getComponent("mini_warning").text.string = t;
this.notice.addChild(e);
},
onClickCuoc: function(t) {
this.DialogCuoc.active = !0;
this.SelectOne = !1;
this.SelectTwo = !1;
this.SelectThree = !1;
},
onClickCancel: function(t) {
this.DialogCuoc.active = !1;
this.onClean();
},
onChangerInput: function() {
var t = n.numberWithCommas(n.getOnlyNumberInString(this.editBoxTienCuoc.string));
this.editBoxTienCuoc.string = "0" == t ? "" : t;
},
onRadioClick: function(t, e) {
if ("Doi1" == e) {
var i = t.node.getComponent(cc.Toggle);
this.onSelectOne(i.isChecked);
} else if ("Doi2" == e) {
var n = t.node.getComponent(cc.Toggle);
this.onSelectTwo(n.isChecked);
} else {
var o = t.node.getComponent(cc.Toggle);
this.onSelectThree(o.isChecked);
}
},
onSelectOne: function(t) {
this.toggleSelectDoi1.isChecked = t;
this.SelectOne = !!t;
},
onSelectTwo: function(t) {
this.toggleSelectDoi2.isChecked = t;
this.SelectTwo = !!t;
},
onSelectThree: function(t) {
this.toggleSelectHoa.isChecked = t;
this.SelectThree = !!t;
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
BongDa_ChiTiet: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "32bf8vku21OqJPDWWiwIQkC", "BongDa_ChiTiet");
t("BrowserUtil"), t("Helper");
cc.Class({
extends: cc.Component,
properties: {
labelContent: cc.Label,
labelTitle: cc.Label
},
init: function(t) {
this.RedT = t;
this.isLoaded = !1;
},
onData: function(t) {
this.labelContent.string = t;
this.labelTitle.string = "CHI TIẾT";
},
onDienbien: function(t) {
this.labelContent.string = t;
this.labelTitle.string = "KẾT QUẢ";
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
BongDa_Top: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "bf51dtY2pdBO7Ro1zLSIech", "BongDa_Top");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
content: cc.Node,
red: !0,
isLoad: !1
},
onLoad: function() {
var t = this, e = cc.instantiate(this.page);
e.y = -275;
this.node.addChild(e);
this.page = e.getComponent("Pagination");
Promise.all(this.content.children.map(function(t) {
return Promise.all(t.children.map(function(t, e) {
return 3 === e ? Promise.all(t.children.map(function(t) {
return t.getComponent(cc.Sprite);
})) : t.getComponent(cc.Label);
})).then(function(t) {
return t;
});
})).then(function(e) {
t.content2 = e;
});
this.page.init(this);
},
onEnable: function() {
!this.isLoad && this.get_data();
},
onDisable: function() {},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
this.isLoad = !0;
cc.RedT.send({
g: {
bongda: {
top: {
red: this.red,
page: t
}
}
}
});
},
onData: function(t) {
console.log(t);
var e = this;
this.page.onSet(t.page, t.kmess, t.total);
Promise.all(this.content2.map(function(i, o) {
var c = t.data[o];
if (void 0 !== c) {
e.content.children[o].active = !0;
i[0].string = c.phien;
i[1].string = c.name;
i[2].string = n.numberWithCommas(c.bet);
i[3].string = n.numberWithCommas(c.betwin);
} else e.content.children[o].active = !1;
}));
},
reset: function() {
this.isLoad = !1;
Promise.all(this.content.children.map(function(t) {
t.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
BongDa: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "1ef4a76/DpKw4+RMQ+74/jG", "BongDa");
t("BrowserUtil"), t("Helper");
cc.Class({
extends: cc.Component,
properties: {
scrollview: {
default: null,
type: cc.ScrollView
},
prefabTranDau: {
default: null,
type: cc.Prefab
}
},
init: function(t) {
this.RedT = t;
this.isLoaded = !1;
},
onEnable: function() {
this.onGetInfo();
},
onDisable: function() {
this.closeGame();
},
setTop: function() {
this.node.parent.insertChild(this.node);
},
onGetInfo: function() {
cc.RedT.send({
g: {
bongda: {
info: !0
}
}
});
},
openGame: function() {
cc.RedT.audio.playClick();
if (cc.RedT.IS_LOGIN) {
this.node.active = !0;
localStorage.setItem("BongDa", !0);
this.setTop();
} else cc.RedT.inGame.dialog.showSignIn();
},
closeGame: function() {
this.node.active = !1;
localStorage.setItem("BongDa", !1);
},
onBongDa: function(t) {
var e = this;
e.scrollview.content.removeAllChildren();
t && Promise.all(t.map(function(t, i) {
var n = cc.instantiate(e.prefabTranDau), o = n.getComponent("TranDau_Item");
o.init(e, t, i);
e.scrollview.content.addChild(n);
return o;
}));
},
onData: function(t) {
if (t.info) {
this.isLoaded = !0;
this.onBongDa(t.info);
}
t.getphien && cc.RedT.MiniPanel.Dialog.BongDaLichSuPhien.onLog(t.getphien);
t.top && cc.RedT.MiniPanel.Dialog.BongDaTop.onData(t.top);
},
onClickBet: function() {},
onClickDetail: function() {},
onClickTop: function() {
cc.RedT.send({
g: {
bongda: {
info: !0
}
}
});
},
onClickHistory: function() {}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
BonusNap_Item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "88246jXhW9ICZmgGQphmHGD", "BonusNap_Item");
t("BrowserUtil");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
sImage: [ cc.SpriteFrame ],
Image: cc.Sprite,
btnNap: cc.Node,
btnNhan: cc.Node,
tientrinh: {
default: null,
type: cc.Label
},
per: {
default: null,
type: cc.Label
},
progress: {
default: null,
type: cc.ProgressBar
}
},
init: function(t, e, i) {
this.controll = t;
this.info = e;
var o = e.current / e.totalPay;
this.updateProgress(o);
this.per.string = (100 * o >> 0) + "%";
if (e.active) {
this.btnNhan.active = !0;
this.btnNap.active = !1;
} else {
this.btnNap.active = !0;
this.btnNhan.active = !1;
}
this.type = e.type;
this.Image.spriteFrame = this.sImage[e.type - 1 >> 0];
this.tientrinh.string = "(" + n.numberWithCommas(e.current) + "/" + n.numberWithCommas(e.totalPay) + ")";
},
updateProgress: function(t) {
this.progress.progress = t;
},
onNhanThuong: function() {
cc.RedT.inGame.bgLoading.onData({
active: !0,
text: "Đang gửi dữ liệu..."
});
cc.RedT.send({
user: {
mission: {
nhanthuong: this.type
}
}
});
},
onNap: function() {
cc.RedT.inGame.dialog.onClickBack();
cc.RedT.inGame.dialog.showShop(null, "NapRIK");
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
BonusNap: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "d6d9fdTsL1BZYsHnLmROdBT", "BonusNap");
t("BrowserUtil"), t("Helper");
cc.Class({
extends: cc.Component,
properties: {
scrollview: {
default: null,
type: cc.ScrollView
},
header: cc.Node,
body: cc.Node,
checkDaiLy: {
default: [],
type: cc.Node
},
prefabDaiLy: {
default: null,
type: cc.Prefab
}
},
init: function() {
this.isLoaded = !1;
},
start: function() {
var t = this;
Promise.all(this.header.children.map(function(t) {
return t.getComponent("itemContentMenu");
})).then(function(e) {
t.header = e;
});
},
onEnable: function() {
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
cc.RedT.send({
user: {
mission: {
getdata: !0
}
}
});
},
onDisable: function() {
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
},
onBackPopup: function() {
cc.RedT.inGame.dialog.onClickBack();
},
onNhiemVu: function(t) {
var e = this;
e.scrollview.content.removeAllChildren();
t && Promise.all(t.map(function(t, i) {
var n = cc.instantiate(e.prefabDaiLy), o = n.getComponent("BonusNap_Item");
o.init(e, t, i);
e.scrollview.content.addChild(n);
return o;
}));
},
onSelectHead: function(t, e) {
Promise.all(this.header.map(function(t) {
t.node.name == e ? t.select() : t.unselect();
}));
Promise.all(this.body.children.map(function(t) {
t.name == e ? t.active = !0 : t.active = !1;
}));
},
onData: function(t) {
console.log(t);
if (void 0 !== t && !this.isLoaded) {
this.isLoaded = !0;
this.onNhiemVu(t);
}
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
BroadcastReceiver: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "8831e6G+6NKPKJ3bcB/6OEn", "BroadcastReceiver");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n;
(function(t) {
var e = function() {
return function(t, e, i) {
this.action = t;
this.target = i;
this.callback = e;
};
}();
t.BroadcastListener = e;
var i = function() {
function t() {}
t.register = function(t, i, n) {
this.listeners.push(new e(t, i, n));
};
t.unRegisterByAction = function(t) {
for (var e = 0; e < this.listeners.length; e++) this.listeners[e].action == t && this.listeners.splice(e--, 1);
};
t.unRegisterByTarget = function(t) {
for (var e = 0; e < this.listeners.length; e++) this.listeners[e].target == t && this.listeners.splice(e--, 1);
};
t.send = function(t, e) {
void 0 === e && (e = null);
for (var i = 0; i < this.listeners.length; i++) {
var n = this.listeners[i];
n.action == t && (n.target && n.target instanceof Object && n.target.node ? n.callback(e) : this.listeners.splice(i--, 1));
}
};
t.UPDATE_NICKNAME_SUCCESS = "UPDATE_NICKNAME_SUCCESS";
t.LOGINED = "LOGINED";
t.USER_INFO_UPDATED = "USER_INFO_UPDATED";
t.USER_LOGOUT = "USER_LOGOUT";
t.USER_UPDATE_COIN = "USER_UPDATE_COIN";
t.ON_AUDIO_CHANGED = "ON_AUDIO_CHANGED";
t.UPDATE_MAIL_COUNT = "UPDATE_MAIL_COUNT";
t.listeners = new Array();
return t;
}();
t.BroadcastReceiver = i;
})(n || (n = {}));
i.default = n.BroadcastReceiver;
cc._RF.pop();
}, {} ],
BrowserUtil: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "3144b0EOb5M+JRv7V+30M1S", "BrowserUtil");
e.exports = {
showCursorText: function() {
this.isCursorAuto() || this.setCursor("text");
},
showCursorPointer: function() {
this.isCursorAuto() || this.setCursor("pointer");
},
showCursorMove: function() {
this.isCursorAuto() || this.setCursor("move");
},
showCursorAuto: function() {
this.isCursorAuto() || this.setCursor("auto");
},
showCursorShoot: function() {
cc.sys.isBrowser && (document.getElementById("GameDiv").style.cursor = "url('cursors/cursor-shot.png') 5 2, auto");
},
showCursorAutoForce: function() {
cc.sys.isBrowser && this.setCursor("auto");
},
isCursorAuto: function() {
return !!cc.sys.isBrowser && "auto" === document.getElementById("GameDiv").style.cursor;
},
setCursor: function(t) {
cc.sys.isBrowser && (document.body.style.cursor = t);
},
showTooltip: function(t) {
cc.sys.isBrowser && (document.body.title = t);
},
focusGame: function() {
cc.sys.isBrowser && document.getElementsByTagName("canvas")[0].focus();
},
getHTMLElementByEditBox: function(t) {
return t._impl._elem;
},
checkEditBoxFocus: function(t) {
return t.isFocused();
},
focusEditBox: function(t) {
t._impl._elem.focus();
t.focus();
},
unFocusEditBox: function(t) {},
inputAddEvent: function(t, e, i) {
t._impl._elem.addEventListener(e, i);
},
inputRemoveEvent: function(t, e, i) {
t._impl._elem.removeEventListener(e, i);
},
readOnlyEditBox: function(t) {
t.readOnly = !0;
}
};
cc._RF.pop();
}, {} ],
CaNhan: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "47772lCqUBB4owyBQc/Yrdt", "CaNhan");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
header: cc.Node,
body: cc.Node,
avatar: cc.Sprite,
card: cc.Sprite,
sfRanks: [ cc.SpriteFrame ],
UID: {
default: null,
type: cc.Label
},
username: {
default: null,
type: cc.Label
},
phone: {
default: null,
type: cc.Label
},
email: {
default: null,
type: cc.Label
},
joinedOn: {
default: null,
type: cc.Label
},
cmt: cc.Label,
nodeRank: cc.Node,
nodeNhan: cc.Node,
vipLevel: cc.Label,
vipTong: cc.Label,
vipHien: cc.Label,
vipTiep: cc.Label
},
start: function() {
var t = this;
Promise.all(this.header.children.map(function(t) {
return t.getComponent("itemHeadMenuV2");
})).then(function(e) {
t.header = e;
});
},
onEnable: function() {
this.getLevel();
},
getLevel: function() {
cc.RedT.send({
user: {
getLevel: !0
}
});
},
level: function(t) {
cc.RedT.userData(t);
var e = this;
cc.RedT.user.vipHT = t.vipHT - t.vipPre;
cc.RedT.user.vipNext = t.vipNext - t.vipPre;
cc.RedT.inGame.header.level(t.level);
cc.RedT.inGame.header.updateEXP(cc.RedT.user.vipHT, cc.RedT.user.vipNext);
this.vipLevel.string = "V" + t.level;
this.vipTong.string = n.numberWithCommas(t.vipTL);
this.vipHien.string = n.numberWithCommas(t.vipHT);
this.vipTiep.string = n.numberWithCommas(t.vipNext);
Promise.all(this.nodeRank.children.map(function(i, n) {
if (i.name <= t.level) {
i.color = i.color.fromHEX("#FFFFFF");
i.name == t.level ? e.nodeNhan.children[n].children[3].active = !0 : e.nodeNhan.children[n].children[3].active = !1;
} else {
i.color = i.color.fromHEX("#5F5F5F");
e.nodeNhan.children[n].children[3].active = !1;
}
}));
},
onNhanThuong: function() {
cc.RedT.send({
user: {
nhanthuong: !0
}
});
},
onSelectHead: function(t, e) {
Promise.all(this.header.map(function(t) {
t.node.name == e ? t.select() : t.unselect();
}));
Promise.all(this.body.children.map(function(t) {
t.name == e ? t.active = !0 : t.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
Candy_bonus_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "d4e35v/kElGdrvv9FRszHdd", "Candy_bonus_item");
cc.Class({
extends: cc.Component,
properties: {
item: cc.Sprite,
text: cc.Label
}
});
cc._RF.pop();
}, {} ],
Candy_dialog: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "09680O6Rg9HML88fBtJFvh9", "Candy_dialog");
var n = t("Candy_history"), o = t("Candy_top");
cc.Class({
extends: cc.Component,
properties: {
history: n,
top: o,
help: cc.Node
},
init: function() {
this.actionShow = cc.spawn(cc.scaleTo(.5, 1).easing(cc.easeBackOut(2.5)), cc.fadeTo(.5, 255));
this.objShow = null;
this.objTmp = null;
},
onClickBack: function() {
cc.RedT.audio.playUnClick();
this.onBack();
},
onBack: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = !1;
this.node.active = !1;
this.objShow = null;
} else {
this.objTmp = this.objShow;
this.objShow = this.objShow.previous;
this.objTmp.previous = null;
this.objTmp.active = !1;
this.objShow.active = !0;
this.objTmp = null;
} else this.node.active = !1;
},
onClosePrevious: function(t) {
if (void 0 !== t.previous && null !== t.previous) {
this.onClosePrevious(t.previous);
delete t.previous;
}
t.active = !1;
},
onCloseDialog: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = this.node.active = !1;
this.objShow = null;
} else {
this.onClosePrevious(this.objShow.previous);
this.objShow.active = this.node.active = !1;
delete this.objShow.previous;
this.objShow = null;
} else this.node.active = !1;
},
resetSizeDialog: function(t) {
t.stopAllActions();
t.scale = .5;
t.opacity = 0;
},
showHistory: function() {
this.node.active = this.history.node.active = !0;
this.objShow = this.history.node;
},
showTop: function() {
this.node.active = this.top.node.active = !0;
this.objShow = this.top.node;
},
showHelp: function() {
this.node.active = this.help.active = !0;
this.objShow = this.help;
}
});
cc._RF.pop();
}, {
Candy_history: "Candy_history",
Candy_top: "Candy_top"
} ],
Candy_history: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "17e0aDFKYhBNoHw5YygdT+w", "Candy_history");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
onLoad: function() {
var t = this, e = cc.instantiate(this.page);
e.y = -278;
this.node.addChild(e);
this.page = e.getComponent("Pagination");
Promise.all(this.content.children.map(function(t) {
return t.getComponent("VQRed_history_item");
})).then(function(e) {
t.content = e;
});
this.page.init(this);
},
onEnable: function() {
this.get_data();
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
g: {
candy: {
log: {
red: this.red,
page: t
}
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
this.page.onSet(t.page, t.kmess, t.total);
Promise.all(this.content.map(function(e, i) {
var o = t.data[i];
if (void 0 !== o) {
e.node.active = !0;
e.time.string = n.getStringDateByTime(o.time);
e.phien.string = o.id;
e.cuoc.string = n.numberWithCommas(o.bet);
e.line.string = o.kq + " Dòng";
e.win.string = n.numberWithCommas(o.win);
} else e.node.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
Candy_iLine: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "ca5891XEyBMXooOmHi4eVGy", "Candy_iLine");
cc.Class({
extends: cc.Component,
properties: {
line: cc.Node,
ef: !1
},
onEnable: function() {
this.node.on(cc.Node.EventType.MOUSE_ENTER, this.onShow, this);
this.node.on(cc.Node.EventType.MOUSE_LEAVE, this.onHidden, this);
},
onDisable: function() {
this.node.off(cc.Node.EventType.MOUSE_ENTER, this.onShow, this);
this.node.off(cc.Node.EventType.MOUSE_LEAVE, this.onHidden, this);
},
onShow: function() {
this.line.active = !0;
},
onHidden: function() {
!this.ef && (this.line.active = !1);
}
});
cc._RF.pop();
}, {} ],
Candy_line: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "6e0c4Ag8FpJQ6D5qWtj+OkS", "Candy_line");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
lines: cc.Node,
mainLines: cc.Node
},
init: function(t) {
var e = this;
this.RedT = t;
Promise.all(this.mainLines.children.map(function(t) {
return t.getComponent("Candy_iLine");
})).then(function(t) {
e.mainLines = t;
});
this.selectAll(null, "1");
},
onOpen: function() {
cc.RedT.audio.playClick();
this.node.active = !0;
},
onClose: function() {
cc.RedT.audio.playUnClick();
this.node.active && this.data.length < 1 ? this.RedT.notice.show({
title: "CẢNH BÁO",
text: "Chọn ít nhất 1 dòng"
}) : this.node.active = !1;
},
select: function(t) {
var e = t.target;
if (e.children[0].active) {
e.children[0].active = !1;
e.children[1].active = !0;
} else {
e.children[0].active = !0;
e.children[1].active = !1;
}
this.check();
},
check: function() {
var t = this;
Promise.all(this.lines.children.map(function(t, e) {
return t.children[1].active ? e + 1 : void 0;
})).then(function(e) {
Promise.all(e.filter(function(t) {
return void 0 !== t;
})).then(function(e) {
t.data = e;
t.RedT.labelLine.string = e.length;
t.RedT.tong.string = n.numberWithCommas(e.length * n.getOnlyNumberInString(t.RedT.bet.string));
});
});
},
selectChan: function() {
var t = this;
Promise.all(this.lines.children.map(function(t, e) {
var i = e + 1;
if (!(i % 2)) {
t.children[0].active = !1;
t.children[1].active = !0;
return i;
}
t.children[0].active = !0;
t.children[1].active = !1;
})).then(function(e) {
Promise.all(e.filter(function(t) {
return void 0 !== t;
})).then(function(e) {
t.data = e;
t.RedT.labelLine.string = e.length;
t.RedT.tong.string = n.numberWithCommas(e.length * n.getOnlyNumberInString(t.RedT.bet.string));
});
});
},
selectLe: function() {
var t = this;
Promise.all(this.lines.children.map(function(t, e) {
var i = e + 1;
if (i % 2) {
t.children[0].active = !1;
t.children[1].active = !0;
return i;
}
t.children[0].active = !0;
t.children[1].active = !1;
})).then(function(e) {
Promise.all(e.filter(function(t) {
return void 0 !== t;
})).then(function(e) {
t.data = e;
t.RedT.labelLine.string = e.length;
t.RedT.tong.string = n.numberWithCommas(e.length * n.getOnlyNumberInString(t.RedT.bet.string));
});
});
},
selectAll: function(t, e) {
var i = this;
Promise.all(this.lines.children.map(function(t, i) {
var n = "1" == e;
t.children[1].active = n;
t.children[0].active = !n;
return n ? i + 1 : void 0;
})).then(function(t) {
Promise.all(t.filter(function(t, e) {
return void 0 !== t;
})).then(function(t) {
i.data = t;
i.RedT.labelLine.string = t.length;
i.RedT.tong.string = n.numberWithCommas(t.length * n.getOnlyNumberInString(i.RedT.bet.string));
});
});
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
Candy_playBonus: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "6f5fd6x7T5GNJOs0sePV0JY", "Candy_playBonus");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
numberBonus: cc.Label,
listBox: cc.Node,
notice: cc.Node,
numberWin: cc.Label,
icons: {
default: [],
type: cc.SpriteFrame
}
},
init: function(t) {
var e = this;
this.RedT = t;
Promise.all(this.listBox.children.map(function(t) {
return t.getComponent("Candy_bonus_item");
})).then(function(t) {
e.listBox = t;
});
},
onPlay: function() {
this.reset();
this.node.active = !0;
this.numberBonus.string = 10;
},
onClickBox: function(t) {
if (this.numberBonus.string) {
cc.RedT.audio.playClick();
this.onSend(t.target.name);
}
},
closeNotice: function() {
this.notice.active = this.node.active = !1;
this.RedT.hieuUng();
},
onData: function(t) {
if (void 0 !== t.box) {
this.listBox[t.box].text.string = n.numberWithCommas(t.bet);
this.numberBonus.string = t.bonus;
}
if (void 0 !== t.win) {
this.notice.active = !0;
this.numberWin.string = n.numberWithCommas(t.win);
this.RedT.vuathang.string = n.numberWithCommas(1 * n.getOnlyNumberInString(this.RedT.vuathang.string) + t.win);
}
},
onSend: function(t) {
cc.RedT.send({
g: {
candy: {
bonus: {
box: t
}
}
}
});
},
reset: function() {
var t = this;
Promise.all(this.listBox.map(function(e) {
var i = 5 * Math.random() >> 0;
e.item.spriteFrame = t.icons[i];
e.text.string = "";
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
Candy_reel: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "4ac84jBjYBJiZpTkOu4E3j8", "Candy_reel");
cc.Class({
extends: cc.Component,
init: function(t) {
var e = this;
this.RedT = t;
this.icons = [];
var i = this, n = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
Promise.all(n.map(function(t, e) {
var o = cc.instantiate(i.RedT.icon);
i.node.addChild(o);
(o = o.getComponent("candy_reel_item")).init(i.RedT);
e > 2 && e < n.length - 3 && o.random();
return o;
})).then(function(t) {
e.icons = t;
e.icons[e.icons.length - 1].setIcon(e.icons[4].random());
e.icons[e.icons.length - 2].setIcon(e.icons[3].random());
e.icons[e.icons.length - 3].setIcon(e.icons[2].random());
e.icons[e.icons.length - 4].setIcon(e.icons[1].random());
e.icons[e.icons.length - 5].setIcon(e.icons[0].random());
});
},
spin: function(t) {
this.node.stopAllActions();
var e = cc.moveTo(1, cc.v2(this.node.x, -(this.node.height - 408))).easing(cc.easeInOut(3)), i = cc.callFunc(function() {
0 === t && this.RedT.copy();
this.node.y = 0;
}, this);
if (4 === t) {
var n = cc.callFunc(function() {
this.RedT.EF_vuathang();
this.node.y = 0;
this.RedT.random();
this.RedT.hieuUng();
}, this);
this.node.runAction(cc.sequence(cc.delayTime(.1 * t), e, n));
} else this.node.runAction(cc.sequence(cc.delayTime(.1 * t), e, i));
},
stop: function() {
this.node.stopAllActions();
this.RedT.copy();
this.node.y = 0;
}
});
cc._RF.pop();
}, {} ],
Candy_top: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "9972eRTCvJEwony+DM8Ery0", "Candy_top");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
item: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
onEnable: function() {
this.get_data();
},
get_data: function() {
arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
cc.RedT.send({
g: {
candy: {
top: this.red
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
this.content.removeAllChildren();
var e = this;
Promise.all(t.map(function(t, i) {
var o = cc.instantiate(e.item), c = o.getComponent("VQRed_history_item");
c.time.string = n.getStringDateByTime(t.time);
c.phien.string = t.name;
c.cuoc.string = n.numberWithCommas(t.bet);
c.line.string = n.numberWithCommas(t.win);
c.win.string = 2 == t.type ? "Nổ Hũ" : "Thắng lớn";
o.children[0].active = !(1 & i);
e.content.addChild(o);
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
Candy: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "51097oLSzpFtZ9xj7eGzl0G", "Candy");
var n = t("Helper"), o = t("Candy_reel"), c = t("Candy_line"), s = t("Candy_playBonus"), a = t("Notice"), h = t("Candy_dialog");
cc.Class({
extends: cc.Component,
properties: {
gameBonus: s,
redhat: cc.Node,
reels: {
default: [],
type: o
},
icon: cc.Prefab,
icons: {
default: [],
type: cc.SpriteFrame
},
FrameAuto: {
default: [],
type: cc.SpriteFrame
},
betString: {
default: [],
type: cc.String
},
nodeRed: cc.Node,
nodeXu: cc.Node,
nodeNotice: cc.Node,
prefabNotice: cc.Prefab,
MiniPanel: cc.Prefab,
loading: cc.Node,
notice: a,
dialog: h,
Line: c,
hu: cc.Label,
taikhoan: cc.Label,
tong: cc.Label,
vuathang: cc.Label,
labelLine: cc.Label,
bet: cc.Label,
freeLabel: cc.Label,
BigWin: cc.Animation,
BigWin_Label: cc.Label,
NoHu_close: cc.Node,
NoHu: cc.Animation,
NoHu_Label: cc.Label,
EF_Bonus: cc.Animation,
EF_Free: cc.Animation,
buttonCoint: cc.Node,
buttonLine: cc.Node,
buttonSpin: cc.Node,
nodeChangerBetL: cc.Node,
nodeChangerBetR: cc.Node,
buttonAuto: cc.Sprite,
isAuto: !1,
isSpin: !1,
isFreeSpin: !1,
red: !0,
betSelect: 0
},
onLoad: function() {
cc.RedT.inGame = this;
var t = this;
this.Line.init(this);
this.gameBonus.init(this);
this.BigWin.on("finished", this.BigWinFinish, this);
this.BigWin.on("play", this.BigWinPlay, this);
this.NoHu.on("finished", this.NoHuFinish, this);
this.NoHu.on("play", this.NoHuPlay, this);
this.EF_Bonus.on("finished", this.EF_BonusFinish, this);
this.EF_Free.on("finished", this.EF_FreeFinish, this);
Promise.all(this.reels.map(function(e) {
e.init(t);
}));
cc.RedT.send({
scene: "candy"
});
this.taikhoan.string = n.numberWithCommas(cc.RedT.user.red);
this.speed = 400;
cc.RedT.isSoundBackground();
},
BigWinPlay: function() {
var t = cc.callFunc(function() {
cc.RedT.audio.playEf("megaWin");
n.numberTo(this.BigWin_Label, 0, this.H_win, 2e3, !0);
}, this);
this.BigWin.node.runAction(cc.sequence(cc.delayTime(.3), t));
},
BigWinFinish: function() {
this.isBigWin = !1;
this.BigWin.node.active = !1;
this.BigWin_Label.string = "";
this.showLineWin(!1);
this.hieuUng();
},
NoHuPlay: function() {
this.NoHu_Label.string = "";
var t = cc.callFunc(function() {
cc.RedT.audio.playEf("jackpot");
n.numberTo(this.NoHu_Label, 0, this.H_win, 2e3, !0);
}, this);
this.NoHu.node.runAction(cc.sequence(cc.delayTime(.3), t));
},
NoHuFinish: function() {
this.isNoHu = !1;
this.NoHu_close.active = !0;
this.isAuto && this.onAuto();
this.showLineWin(!1);
this.hieuUng();
},
NoHuClose: function() {
this.NoHu.node.active = this.NoHu_close.active = !1;
},
EF_BonusFinish: function() {
this.isBonus = !1;
this.EF_Bonus.node.active = !1;
this.gameBonus.onPlay();
this.showLineWin(!1);
},
EF_FreeFinish: function() {
this.isFree = !1;
this.EF_Free.node.active = !1;
this.showLineWin(!1);
this.hieuUng();
},
onData: function(t) {
if (void 0 !== t.user) {
this.userData(t.user);
cc.RedT.userData(t.user);
}
void 0 !== t.candy && this.Candy(t.candy);
void 0 !== t.mini && null != cc.RedT.minigame && cc.RedT.minigame.onData(t.mini);
void 0 !== t.TopHu && cc.RedT.MiniPanel.TopHu.onData(t.TopHu);
void 0 !== t.taixiu && null != cc.RedT.minigame && cc.RedT.minigame.isLoadTaiXiu && cc.RedT.minigame.TaiXiu.TX_Main.onData(t.taixiu);
},
userData: function(t) {
this.red ? this.taikhoan.string = n.numberWithCommas(t.red) : this.taikhoan.string = n.numberWithCommas(t.xu);
},
Candy: function(t) {
var e = this;
if (void 0 !== t.status) if (1 === t.status) {
Promise.all(t.cel.map(function(t, i) {
Promise.all(t.map(function(t, n) {
e.reels[i].icons[n].setIcon(t, !0);
}));
}));
this.runReels();
this.H_line_win = t.line_win;
this.H_win = t.win;
this.H_free = t.free;
this.isBonus = t.isBonus;
this.isNoHu = t.isNoHu;
this.isBigWin = t.isBigWin;
this.isFree = t.isFree;
this.isFreeSpin = !!t.free;
} else this.resetSpin();
t.bonus && this.gameBonus.onData(t.bonus);
t.log && this.dialog.history.onData(t.log);
t.top && this.dialog.top.onData(t.top);
t.notice && this.addNotice(t.notice);
},
EF_vuathang: function() {
this.showLineWin(!0);
this.vuathang.string = n.numberWithCommas(this.H_win);
this.buttonSpin.active = !this.H_free;
this.freeLabel.string = "Free: " + this.H_free;
this.freeLabel.node.active = !!this.H_free;
},
onLineWin: function(t) {
var e = this;
Promise.all(this.H_line_win.map(function(i) {
var n = e.Line.mainLines[i.line - 1];
if (t) {
n.ef = !0;
n.onShow();
} else {
n.ef = !1;
n.onHidden();
}
}));
},
showLineWin: function(t) {
this.onLineWin(t);
if (!(t || this.isNoHu || this.isBigWin || this.isAuto || this.isFreeSpin)) {
this.eflineN = 0;
this.efLineWin();
}
},
efLineWin: function(t) {
if (this.H_line_win.length) {
this.node.stopAllActions();
void 0 === this.H_line_win[this.eflineN] && (this.eflineN = 0);
this.efOneLineWin(this.eflineN, !0);
var e = cc.callFunc(function() {
this.efOneLineWin(this.eflineN, !1);
this.eflineN += 1;
this.efLineWin();
}, this);
this.node.runAction(cc.sequence(cc.delayTime(1.5), e));
}
},
efOneLineWin: function(t, e) {
t = this.H_line_win[this.eflineN].line;
var i = this.Line.mainLines[t - 1];
if (e) {
i.ef = !0;
i.onShow();
} else {
i.ef = !1;
i.onHidden();
}
},
hieuUng: function() {
if (this.isBigWin && !this.isNoHu) {
this.BigWin.node.active = !0;
this.BigWin.play();
} else if (this.isNoHu) {
this.NoHu.node.active = !0;
this.NoHu.play();
} else if (this.isBonus) {
this.EF_Bonus.node.active = !0;
this.EF_Bonus.play();
cc.RedT.audio.playEf("bonus");
} else if (this.isFree) {
this.EF_Free.node.active = !0;
this.EF_Free.play();
} else if (this.H_win > 0) {
var t = new cc.Node();
t.addComponent(cc.Label);
(t = t.getComponent(cc.Label)).string = "+" + n.numberWithCommas(this.H_win);
t.font = cc.RedT.util.fontCong;
t.lineHeight = 130;
t.fontSize = 25;
t.node.position = cc.v2(0, 21);
this.nodeNotice.addChild(t.node);
t.node.runAction(cc.sequence(cc.moveTo(1.2, cc.v2(0, 105)), cc.callFunc(function() {
this.speed = 0;
t.node.destroy();
this.hieuUng();
this.showLineWin(!1);
}, this)));
this.H_win = 0;
} else this.isAuto || this.isFreeSpin ? this.timeOut = setTimeout(function() {
this.onAutoSpin();
this.speed = 400;
}.bind(this), this.speed) : this.resetSpin();
},
onChangerBetR: function() {
cc.RedT.audio.playClick();
this.betSelect++;
this.betSelect > 2 && (this.betSelect = 0);
this.bet.string = this.betString[this.betSelect];
this.tong.string = n.numberWithCommas(this.Line.data.length * n.getOnlyNumberInString(this.bet.string));
this.onGetHu();
},
onChangerBetL: function() {
cc.RedT.audio.playClick();
this.betSelect--;
this.betSelect < 0 && (this.betSelect = 2);
this.bet.string = this.betString[this.betSelect];
this.tong.string = n.numberWithCommas(this.Line.data.length * n.getOnlyNumberInString(this.bet.string));
this.onGetHu();
},
changerCoint: function() {
this.red = !this.red;
this.nodeRed.active = !this.nodeRed.active;
this.nodeXu.active = !this.nodeXu.active;
this.userData(cc.RedT.user);
this.onGetHu();
},
onClickAuto: function() {
cc.RedT.audio.playClick();
this.onAuto();
},
onAuto: function() {
this.isAuto = !this.isAuto;
this.isAuto ? this.buttonAuto.spriteFrame = this.FrameAuto[1] : this.buttonAuto.spriteFrame = this.FrameAuto[0];
},
onClickSpin: function() {
this.onSpin();
},
onAutoSpin: function() {
this.onGetSpin();
},
onSpin: function() {
if (this.Line.data.length < 1) this.addNotice("Chọn ít nhất 1 dòng"); else if (!this.isSpin) {
this.node.stopAllActions();
void 0 !== this.eflineN && void 0 !== this.H_line_win && this.H_line_win.length && this.efOneLineWin(this.eflineN, !1);
this.eflineO = this.eflineN = 0;
this.isSpin = !0;
this.setSpin();
this.onGetSpin();
}
},
setSpin: function() {
this.buttonLine.pauseSystemEvents();
this.buttonSpin.pauseSystemEvents();
this.buttonCoint.pauseSystemEvents();
this.nodeChangerBetL.pauseSystemEvents();
this.nodeChangerBetR.pauseSystemEvents();
},
resetSpin: function() {
this.isAuto && this.onAuto();
this.isSpin = !1;
this.buttonLine.resumeSystemEvents();
this.buttonSpin.resumeSystemEvents();
this.buttonCoint.resumeSystemEvents();
this.nodeChangerBetL.resumeSystemEvents();
this.nodeChangerBetR.resumeSystemEvents();
},
runReels: function() {
Promise.all(this.reels.map(function(t, e) {
t.spin(e);
}));
},
copy: function() {
Promise.all(this.reels.map(function(t) {
t.icons[t.icons.length - 1].setIcon(t.icons[2].data);
t.icons[t.icons.length - 2].setIcon(t.icons[1].data);
t.icons[t.icons.length - 3].setIcon(t.icons[0].data);
}));
},
random: function() {
Promise.all(this.reels.map(function(t) {
Promise.all(t.icons.map(function(e, i) {
i > 2 && i < t.icons.length - 3 && e.random();
}));
}));
},
onGetSpin: function() {
cc.RedT.send({
g: {
candy: {
spin: {
cuoc: n.getOnlyNumberInString(this.bet.string),
red: this.red,
line: this.Line.data
}
}
}
});
},
addNotice: function(t) {
var e = cc.instantiate(this.prefabNotice);
e.getComponent("mini_warning").text.string = t;
this.nodeNotice.addChild(e);
},
backGame: function() {
this.loading.active = !0;
void 0 !== this.timeOut && clearTimeout(this.timeOut);
cc.director.loadScene("MainGame");
},
signOut: function() {
cc.director.loadScene("MainGame", function() {
cc.RedT.inGame.signOut();
});
},
onGetHu: function() {
var t = this;
if (void 0 !== cc.RedT.setting.topHu.data) {
var e = this, i = n.getOnlyNumberInString(e.bet.string);
Promise.all(cc.RedT.setting.topHu.data.candy.filter(function(t) {
return t.type == i && t.red == e.red;
})).then(function(e) {
var i = n.getOnlyNumberInString(t.hu.string), o = e[0].bet;
i - o != 0 && n.numberTo(t.hu, i, o, 2e3, !0);
});
}
}
});
cc._RF.pop();
}, {
Candy_dialog: "Candy_dialog",
Candy_line: "Candy_line",
Candy_playBonus: "Candy_playBonus",
Candy_reel: "Candy_reel",
Helper: "Helper",
Notice: "Notice"
} ],
CanvasHelper: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "96aedzcTdhOnYDWYqiL69gH", "CanvasHelper");
cc.Class({
extends: cc.Component,
properties: {
currentCanvas: cc.Canvas
},
start: function() {
this.onResized();
},
onResized: function() {
if (null != this.currentCanvas) {
if (cc.sys.isNative && cc.sys.isMobile) {
cc.view.isAutoFullScreenEnabled() && cc.view.enableAutoFullScreen(!0);
}
var t = cc.view.getFrameSize();
if ((t.width / t.height).toFixed(2) < (16 / 9).toFixed(2)) {
this.currentCanvas._fitHeight = !1;
this.currentCanvas._fitWidth = !0;
} else {
this.currentCanvas._fitHeight = !0;
this.currentCanvas._fitWidth = !1;
}
this.currentCanvas.applySettings();
}
}
});
cc._RF.pop();
}, {} ],
CanvasResizer: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "8bec9CLhStAm7hxN1lG8l/0", "CanvasResizer");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = cc._decorator, o = n.ccclass, c = n.property, s = n.requireComponent, a = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.designResolution = new cc.Size(1280, 720);
e.lastWitdh = 0;
e.lastHeight = 0;
return e;
}
e.prototype.onLoad = function() {
this.canvas = this.node.getComponent(cc.Canvas);
this.updateCanvas();
};
e.prototype.update = function(t) {
this.updateCanvas();
};
e.prototype.updateCanvas = function() {
var t = cc.view.getFrameSize();
if (this.lastWitdh !== t.width || this.lastHeight !== t.height) {
this.lastWitdh = t.width;
this.lastHeight = t.height;
if (this.designResolution.width / this.designResolution.height > t.width / t.height) {
var e = cc.size(this.designResolution.width, this.designResolution.width * (t.height / t.width));
this.canvas.designResolution = e;
cc.log("update canvas size: " + e);
} else {
e = cc.size(this.designResolution.height * (t.width / t.height), this.designResolution.height);
this.canvas.designResolution = e;
cc.log("update canvas size: " + e);
}
}
};
__decorate([ c ], e.prototype, "designResolution", void 0);
return e = __decorate([ o, s(cc.Canvas) ], e);
}(cc.Component);
i.default = a;
cc._RF.pop();
}, {} ],
CaoThap_history_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "4816cEGzJ1O1riIu0aE1iNT", "CaoThap_history_item");
cc.Class({
extends: cc.Component,
properties: {
time: cc.Label,
phien: cc.Label,
cuoc: cc.Label,
buoc: cc.Label,
card1: cc.Sprite,
select: cc.Node,
card2: cc.Sprite,
win: cc.Label
}
});
cc._RF.pop();
}, {} ],
CaoThap_history: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "025c7+UqBFBWKVKH56kQUN5", "CaoThap_history");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
init: function(t) {
this.RedT = t;
},
onLoad: function() {
var t = this;
this.page = cc.instantiate(this.page);
this.page.y = -307;
this.node.addChild(this.page);
this.page = this.page.getComponent("Pagination");
Promise.all(this.content.children.map(function(t) {
return t.getComponent("CaoThap_history_item");
})).then(function(e) {
t.content = e;
});
this.page.init(this);
},
onEnable: function() {
this.get_data();
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
},
onDisable: function() {
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
g: {
caothap: {
history: {
red: this.red,
page: t
}
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
cc.RedT.inGame.loading.active = !1;
this.page.onSet(t.page, t.kmess, t.total);
Promise.all(this.content.map(function(e, i) {
var o = t.data[i];
if (void 0 !== o) {
e.node.active = !0;
e.time.string = n.getStringDateByTime(o.time);
e.phien.string = o.id;
e.buoc.string = o.buoc;
e.cuoc.string = n.numberWithCommas(o.cuoc);
e.win.string = n.numberWithCommas(o.bet);
e.card1.spriteFrame = cc.RedT.util.card.getCard(o.card1.card, o.card1.type);
if (o.chon) {
e.select.active = !0;
2 == o.chon ? e.select.scaleY = -1 : e.select.scaleY = 1;
} else e.select.active = !1;
if (void 0 !== o.card2 && void 0 !== o.card2.card) {
e.card2.node.active = !0;
e.card2.spriteFrame = cc.RedT.util.card.getCard(o.card2.card, o.card2.type);
} else e.card2.node.active = !1;
} else e.node.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
CaoThap_reels: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "858b3VPVxxI44+/QaauFb0O", "CaoThap_reels");
cc.Class({
extends: cc.Component,
init: function(t) {
var e = this;
this.RedT = t;
this.card = [];
var i = this;
Promise.all([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ].map(function(t, e) {
var n = cc.instantiate(i.RedT.cardf);
n.width = 155;
n.height = 243;
i.node.addChild(n);
return n.getComponent(cc.Sprite);
})).then(function(t) {
e.card = t;
e.random(!0);
});
},
random: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
Promise.all(this.card.map(function(e, i) {
t ? e.spriteFrame = 12 == i ? cc.RedT.util.card.cardB1 : cc.RedT.util.card.random() : 0 !== i && 12 !== i && (e.spriteFrame = cc.RedT.util.card.random());
}));
},
spin: function() {
this.node.stopAllActions();
var t = cc.moveTo(1, cc.v2(0, -(this.node.height - 243))).easing(cc.easeInOut(3)), e = cc.callFunc(function() {
this.card[12].spriteFrame = this.card[0].spriteFrame;
this.node.y = 0;
}, this), i = cc.callFunc(function() {
this.RedT.resumeGame();
this.RedT.addMainLog();
}, this);
this.node.runAction(cc.sequence(t, e, cc.delayTime(.1), i));
},
stop: function() {
this.node.stopAllActions();
this.node.y = 0;
}
});
cc._RF.pop();
}, {} ],
CaoThap_top_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "75624vu325ApKFOyOEfLajG", "CaoThap_top_item");
cc.Class({
extends: cc.Component,
properties: {
time: cc.Label,
nick: cc.Label,
cuoc: cc.Label,
win: cc.Label,
nohu: cc.Label
}
});
cc._RF.pop();
}, {} ],
CaoThap_top: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "4ae1dSPK8VEcrHS1zJqrH8e", "CaoThap_top");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
item: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
init: function(t) {
this.RedT = t;
},
onEnable: function() {
this.get_data();
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
},
onDisable: function() {
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
},
get_data: function() {
arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
cc.RedT.send({
g: {
caothap: {
tops: this.red
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
cc.RedT.inGame.loading.active = !1;
this.content.removeAllChildren();
var e = this;
Promise.all(t.map(function(t, i) {
var o = cc.instantiate(e.item), c = o.getComponent("CaoThap_top_item");
c.time.string = n.getStringDateByTime(t.time);
c.nick.string = t.name;
c.cuoc.string = n.numberWithCommas(t.goc);
c.win.string = n.numberWithCommas(t.bet);
c.nohu.string = t.a ? "Nổ Hũ" : "Thắng lớn";
o.children[0].active = !(1 & i);
e.content.addChild(o);
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
CaoThap: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "300c3HqhRtJh4EmEiBIJq7G", "CaoThap");
var n = t("Helper"), o = t("CaoThap_reels");
cc.Class({
extends: cc.Component,
properties: {
background: cc.Node,
logs: cc.Node,
reels: o,
listA: {
default: [],
type: cc.Sprite
},
buttonPlay: cc.Node,
buttonCoint: cc.Node,
buttonAnNon: cc.Node,
buttonCao: cc.Node,
buttonThap: cc.Node,
bet: cc.Node,
nodeRed: cc.Node,
nodeXu: cc.Node,
notice: cc.Node,
prefabNotice: cc.Prefab,
cardf: cc.Prefab,
card: cc.Prefab,
cuoc: "",
hu: cc.Label,
time: cc.Label,
win: cc.Label,
winUp: cc.Label,
winDown: cc.Label,
isPlay: !1,
red: !0
},
init: function(t) {
this.RedT = t;
this.LichSu = t.Dialog.CaoThap_history;
this.Top = t.Dialog.CaoThap_top;
this.card.data.getComponent("Card").config();
cc.RedT.setting.caothap = cc.RedT.setting.caothap || {
scale: .8333333,
bet: "1000",
logs: []
};
this.node.runScale = !1;
"true" == localStorage.getItem("caothap") && (this.node.active = !0);
void 0 !== cc.RedT.setting.caothap.position && (this.node.position = cc.RedT.setting.caothap.position);
void 0 !== cc.RedT.setting.caothap.cuoc && cc.RedT.setting.caothap.cuoc != this.cuoc && this.intChangerBet();
void 0 !== cc.RedT.setting.caothap.red && this.red != cc.RedT.setting.caothap.red && this.changerCoint();
},
onLoad: function() {
this.reels.init(this);
if (cc.RedT.setting.caothap.isPlay && !this.isPlay) {
this.isPlay = !0;
this.onPlay();
this.resumeGame();
cc.RedT.setting.caothap.time_remain++;
this.playTime();
setTimeout(function() {
this.reels.card[this.reels.card.length - 1].spriteFrame = cc.RedT.util.card.getCard(cc.RedT.setting.caothap.card.card, cc.RedT.setting.caothap.card.type);
this.reMainLog();
}.bind(this), 100);
}
},
onEnable: function() {
this.onGetHu();
this.background.on(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.background.on(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.background.on(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.background.on(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.background.on(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
!cc.RedT.setting.caothap.connect && this.reconnect();
},
onDisable: function() {
this.background.off(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.background.off(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.background.off(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.background.off(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.background.off(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
},
eventStart: function(t) {
this.setTop();
this.ttOffset = cc.v2(t.touch.getLocationX() - this.node.position.x, t.touch.getLocationY() - this.node.position.y);
},
eventMove: function(t) {
this.node.position = cc.v2(t.touch.getLocationX() - this.ttOffset.x, t.touch.getLocationY() - this.ttOffset.y);
},
eventEnd: function() {
cc.RedT.setting.caothap.position = this.node.position;
},
openGame: function() {
cc.RedT.audio.playClick();
if (cc.RedT.IS_LOGIN) {
this.node.active = !0;
localStorage.setItem("caothap", !0);
this.setTop();
} else cc.RedT.inGame.dialog.showSignIn();
},
closeGame: function() {
cc.RedT.audio.playUnClick();
this.node.active = !1;
localStorage.setItem("caothap", !1);
},
setTop: function() {
cc.RedT.setting.caothap.scale = .8333333;
this.node.parent.insertChild(this.node);
},
changerCoint: function() {
if (this.isPlay) this.buttonCoint.pauseSystemEvents(); else {
this.red = cc.RedT.setting.caothap.red = !this.red;
this.nodeRed.active = !this.nodeRed.active;
this.nodeXu.active = !this.nodeXu.active;
this.onGetHu();
}
},
intChangerBet: function() {
var t = this;
Promise.all(this.bet.children.map(function(e) {
if (e.name == cc.RedT.setting.caothap.cuoc) {
t.cuoc = e.name;
e.children[0].active = !0;
e.pauseSystemEvents();
} else {
e.children[0].active = !1;
e.resumeSystemEvents();
}
}));
},
onClickTop: function() {
cc.RedT.inGame.loading.active = !0;
null != cc.RedT.minigame && cc.RedT.minigame.Dialog.showCaoThap_top();
},
onClickHistory: function() {
cc.RedT.inGame.loading.active = !0;
null != cc.RedT.minigame && cc.RedT.minigame.Dialog.showCaoThap_history();
},
changerBet: function(t, e) {
if (this.isPlay) Promise.all(this.bet.children.map(function(t) {
t.pauseSystemEvents();
})); else {
var i = t.target;
this.cuoc = cc.RedT.setting.caothap.cuoc = i.name;
Promise.all(this.bet.children.map(function(t) {
if (t == i) {
t.children[0].active = !0;
t.pauseSystemEvents();
} else {
t.children[0].active = !1;
t.resumeSystemEvents();
}
}));
this.onGetHu();
}
},
addNotice: function(t) {
var e = cc.instantiate(this.prefabNotice);
e.getComponent("mini_warning").text.string = t;
this.notice.addChild(e);
},
EF_Play: function() {
this.reels.random();
this.reels.spin();
},
onPlay: function() {
this.buttonPlay.active = !1;
this.buttonCoint.pauseSystemEvents();
Promise.all(this.bet.children.map(function(t) {
t.pauseSystemEvents();
}));
},
offPlay: function() {
this.isPlay = cc.RedT.setting.caothap.isPlay = !1;
this.buttonPlay.active = !0;
this.buttonCoint.resumeSystemEvents();
Promise.all(this.bet.children.map(function(t) {
t.children[0].active || t.resumeSystemEvents();
}));
this.buttonAnNon.color = cc.color(155, 155, 155);
this.buttonAnNon.pauseSystemEvents();
this.buttonCao.color = cc.color(155, 155, 155);
this.buttonCao.pauseSystemEvents();
this.buttonThap.color = cc.color(155, 155, 155);
this.buttonThap.pauseSystemEvents();
void 0 !== this.timeInterval && clearInterval(this.timeInterval);
},
onS1: function() {
this.buttonAnNon.pauseSystemEvents();
this.buttonCao.pauseSystemEvents();
this.buttonThap.pauseSystemEvents();
},
onClickPlay: function() {
if (!this.isPlay) {
this.isPlay = cc.RedT.setting.caothap.isPlay = !0;
this.sendPlay();
this.onPlay();
this.reSetPhien();
}
},
onData: function(t) {
if (void 0 !== t.status) if (1 === t.status) {
cc.RedT.setting.caothap.time_remain = 120;
cc.RedT.setting.caothap.win = t.win;
cc.RedT.setting.caothap.card = t.card;
cc.RedT.setting.caothap.a = t.a;
cc.RedT.setting.caothap.bet = t.bet;
cc.RedT.setting.caothap.click = t.click;
cc.RedT.setting.caothap.winUp = t.winUp;
cc.RedT.setting.caothap.winDown = t.winDown;
cc.RedT.setting.caothap.logs.push(t.card);
void 0 !== t.nohu && (this.nohu = t.nohu);
this.reels.card[0].spriteFrame = cc.RedT.util.card.getCard(t.card.card, t.card.type);
this.EF_Play();
this.playTime();
} else this.offPlay();
void 0 !== t.annon && this.annon(t.annon);
void 0 !== t.reconnect && this.connect(t.reconnect);
void 0 !== t.isAnNon && this.eAnNon(t.isAnNon);
void 0 !== t.down && this.eThapChanger(t.down);
void 0 !== t.up && this.eCaoChanger(t.up);
void 0 !== t.history && this.LichSu.onData(t.history);
void 0 !== t.tops && this.Top.onData(t.tops);
void 0 !== t.notice && this.addNotice(t.notice);
},
playTime: function() {
void 0 !== this.timeInterval && clearInterval(this.timeInterval);
this.timeInterval = setInterval(function() {
cc.RedT.setting.caothap.time_remain > 0 ? this.time.string = n.numberToTime(cc.RedT.setting.caothap.time_remain) : clearInterval(this.timeInterval);
cc.RedT.setting.caothap.time_remain--;
}.bind(this), 1e3);
},
sendPlay: function() {
cc.RedT.send({
g: {
caothap: {
play: {
newGame: {
cuoc: this.cuoc
}
}
}
}
});
},
selectGame: function(t, e) {
this.onS1();
this.isPlay && cc.RedT.send({
g: {
caothap: {
play: {
select: "1" == e
}
}
}
});
},
onAnNon: function(t) {
this.isPlay && cc.RedT.send({
g: {
caothap: {
play: {
annon: !0
}
}
}
});
},
reconnect: function() {
cc.RedT.setting.caothap.connect = !0;
cc.RedT.send({
g: {
caothap: {
play: {
reconnect: !0
}
}
}
});
},
connect: function(t) {
this.onPlay();
t.red != this.red && this.changerCoint();
if (this.cuoc != t.cuoc) {
this.cuoc = cc.RedT.setting.caothap.cuoc = t.cuoc;
this.intChangerBet();
}
this.isPlay = cc.RedT.setting.caothap.isPlay = !0;
cc.RedT.setting.caothap.time_remain = t.time_remain;
cc.RedT.setting.caothap.win = !0;
cc.RedT.setting.caothap.card = t.card;
cc.RedT.setting.caothap.a = t.a;
cc.RedT.setting.caothap.bet = t.bet;
cc.RedT.setting.caothap.click = t.click;
cc.RedT.setting.caothap.winUp = t.winUp;
cc.RedT.setting.caothap.winDown = t.winDown;
Promise.all(this.listA.map(function(t, e) {
if (void 0 !== cc.RedT.setting.caothap.a[e]) {
t.node.active = !0;
t.spriteFrame = cc.RedT.util.card.getCard(cc.RedT.setting.caothap.a[e].card, cc.RedT.setting.caothap.a[e].type);
} else t.node.active = !1;
}));
setTimeout(function() {
this.reels.card[this.reels.card.length - 1].spriteFrame = cc.RedT.util.card.getCard(cc.RedT.setting.caothap.card.card, cc.RedT.setting.caothap.card.type);
}.bind(this), 10);
this.playTime();
this.win.string = n.numberWithCommas(t.bet);
this.winUp.string = t.winUp > 0 ? n.numberWithCommas(t.winUp) : "";
this.winDown.string = t.winDown > 0 ? n.numberWithCommas(t.winDown) : "";
this.clickInGame();
},
resumeGame: function() {
this.win.string = n.numberWithCommas(cc.RedT.setting.caothap.bet);
this.winUp.string = cc.RedT.setting.caothap.winUp > 0 ? n.numberWithCommas(cc.RedT.setting.caothap.winUp) : "";
this.winDown.string = cc.RedT.setting.caothap.winDown > 0 ? n.numberWithCommas(cc.RedT.setting.caothap.winDown) : "";
this.clickInGame();
Promise.all(this.listA.map(function(t, e) {
if (void 0 !== cc.RedT.setting.caothap.a[e]) {
t.node.active = !0;
t.spriteFrame = cc.RedT.util.card.getCard(cc.RedT.setting.caothap.a[e].card, cc.RedT.setting.caothap.a[e].type);
} else t.node.active = !1;
}));
if (cc.RedT.setting.caothap.win) {
if (this.nohu) {
var t = cc.instantiate(this.RedT.PrefabNoHu), e = (t = t.getComponent(cc.Animation)).node.children[6].getComponent(cc.Label);
this.RedT.nodeEfect.addChild(t.node);
t.on("play", function() {
var i = cc.callFunc(function() {
cc.RedT.audio.playEf("winHu");
n.numberTo(e, 0, this.nohu, 1e3, !0);
}, this);
t.node.runAction(cc.sequence(cc.delayTime(.25), i));
}, this);
t.on("finished", function() {
this.nohu = !1;
this.offPlay();
t.node.destroy();
cc.RedT.setting.caothap.win = 0;
}, this);
t.play();
}
} else {
this.offPlay();
this.addNotice("Bạn thua!! Chúc bạn may mắn lần sau.");
}
},
addMainLog: function() {
var t = cc.instantiate(this.cardf);
t.width = 32.77;
t.height = 46.69;
this.logs.addChild(t);
(t = t.getComponent(cc.Sprite)).spriteFrame = cc.RedT.util.card.getCard(cc.RedT.setting.caothap.card.card, cc.RedT.setting.caothap.card.type);
},
reMainLog: function() {
var t = this;
Promise.all(cc.RedT.setting.caothap.logs.map(function(e) {
var i = cc.instantiate(t.cardf);
i.width = 32.77;
i.height = 46.69;
t.logs.addChild(i);
(i = i.getComponent(cc.Sprite)).spriteFrame = cc.RedT.util.card.getCard(e.card, e.type);
}));
},
annon: function(t) {
clearInterval(this.timeInterval);
var e = new cc.Node();
e.addComponent(cc.Label);
(e = e.getComponent(cc.Label)).string = "+" + n.numberWithCommas(t);
e.font = this.red ? cc.RedT.util.fontCong : cc.RedT.util.fontTru;
e.lineHeight = 130;
e.fontSize = 20;
e.node.position = cc.v2(0, 10);
this.notice.addChild(e.node);
e.node.runAction(cc.sequence(cc.moveTo(3.5, cc.v2(0, 125)), cc.callFunc(function() {
this.node.destroy();
}, e)));
},
clickInGame: function() {
this.eAnNon(cc.RedT.setting.caothap.click.isAnNon);
this.eCaoChanger(cc.RedT.setting.caothap.click.up);
this.eThapChanger(cc.RedT.setting.caothap.click.down);
},
eAnNon: function(t) {
if (t) {
this.buttonAnNon.resumeSystemEvents();
this.buttonAnNon.color = cc.Color.WHITE;
} else {
this.buttonAnNon.color = cc.color(155, 155, 155);
this.buttonAnNon.pauseSystemEvents();
}
},
eCaoChanger: function(t) {
if (t) {
this.buttonCao.color = cc.Color.WHITE;
this.buttonCao.resumeSystemEvents();
} else {
this.buttonCao.color = cc.color(155, 155, 155);
this.buttonCao.pauseSystemEvents();
}
},
eThapChanger: function(t) {
if (t) {
this.buttonThap.color = cc.Color.WHITE;
this.buttonThap.resumeSystemEvents();
} else {
this.buttonThap.color = cc.color(155, 155, 155);
this.buttonThap.pauseSystemEvents();
}
},
reSetPhien: function() {
this.logs.removeAllChildren();
cc.RedT.setting.caothap.logs = [];
},
newGame: function() {
this.offPlay();
this.reels.stop();
cc.RedT.setting.caothap.connect = !1;
this.reSetPhien();
},
onGetHu: function() {
var t = this;
if (void 0 !== cc.RedT.setting.topHu.data && this.node.active) {
var e = this;
Promise.all(cc.RedT.setting.topHu.data.caothap.filter(function(t) {
return t.type == e.cuoc && t.red == e.red;
})).then(function(e) {
var i = n.getOnlyNumberInString(t.hu.string), o = e[0].bet;
i - o != 0 && n.numberTo(t.hu, i, o, 2e3, !0);
});
}
}
});
cc._RF.pop();
}, {
CaoThap_reels: "CaoThap_reels",
Helper: "Helper"
} ],
"CardGame.Cmd": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "a7c6afh+XBMeoI7bhZgC4XY", "CardGame.Cmd");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n, o = t("./Network.OutPacket"), c = t("./Network.InPacket");
cc._decorator.ccclass;
(function(t) {
var e = function() {
function t() {}
t.LOGIN = 1;
t.NOTIFY_DISCONNECT = 37;
t.PING_PONG = 50;
t.JOIN_ROOM = 3001;
t.RECONNECT_GAME_ROOM = 3002;
t.JOIN_ROOM_FAIL = 3004;
t.HOLD = 3116;
t.MONEY_BET_CONFIG = 3003;
t.GET_LIST_ROOM = 3014;
t.TOP_SERVER = 1001;
t.CHEAT_CARD = 3115;
t.PING_TEST = 1050;
t.CHAT_ROOM = 3008;
t.NO_HU_VANG = 3007;
t.THONG_TIN_HU_VANG = 3009;
t.REQUEST_INFO_MOI_CHOI = 3010;
t.MOI_CHOI = 3011;
t.ACCEPT_MOI_CHOI = 3012;
t.CREATE_ROOM = 3013;
t.JOIN_GAME_ROOM_BY_ID = 3015;
t.FIND_ROOM_LOBBY = 3016;
t.GET_XOCDIA_CONFIG = 3017;
t.CREATE_ROOM_FAIL = 3018;
return t;
}();
t.Code = e;
var i = function(t) {
__extends(i, t);
function i() {
var i = t.call(this) || this;
i.initData(100);
i.setControllerId(1);
i.setCmdId(e.MONEY_BET_CONFIG);
i.packHeader();
i.updateSize();
return i;
}
return i;
}(o.default);
t.SendMoneyBetConfig = i;
var n = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.list = [];
i.rules = [];
for (var n = i.getShort(), o = 0; o < n; o++) {
var c = {
maxUserPerRoom: i.getInt(),
moneyType: i.getByte(),
moneyBet: i.getLong(),
moneyRequire: i.getLong(),
nPersion: i.getInt()
};
i.list.push(c);
}
for (o = 0; o < n; o++) i.rules.push(i.getByte());
return i;
}
return e;
}(c.default);
t.ResMoneyBetConfig = n;
var s = function(t) {
__extends(i, t);
function i(i, n, o, c, s, a) {
var h = t.call(this) || this;
h.initData(100);
h.setControllerId(1);
h.setCmdId(e.GET_LIST_ROOM);
h.packHeader();
h.putByte(i);
h.putByte(n);
h.putByte(o);
h.putByte(c);
h.putByte(s);
h.putByte(a);
h.updateSize();
return h;
}
return i;
}(o.default);
t.SendGetListRoom = s;
var a = function(t) {
__extends(i, t);
function i(i, n, o, c) {
var s = t.call(this) || this;
s.initData(100);
s.setControllerId(1);
s.setCmdId(e.JOIN_ROOM);
s.packHeader();
s.putInt(i);
s.putInt(n);
s.putLong(o);
s.putInt(c);
s.updateSize();
return s;
}
return i;
}(o.default);
t.SendJoinRoom = a;
var h = function(t) {
__extends(i, t);
function i(i) {
var n = t.call(this) || this;
n.initData(100);
n.setControllerId(1);
n.setCmdId(e.JOIN_GAME_ROOM_BY_ID);
n.packHeader();
n.putInt(i);
n.putString("");
n.updateSize();
return n;
}
return i;
}(o.default);
t.SendJoinRoomById = h;
var r = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.error = 0;
i.error = i.getError();
return i;
}
return e;
}(c.default);
t.ReceivedJoinRoomFail = r;
})(n = i.CardGameCmd || (i.CardGameCmd = {}));
i.default = n;
cc._RF.pop();
}, {
"./Network.InPacket": "Network.InPacket",
"./Network.OutPacket": "Network.OutPacket"
} ],
CardGameNetworkClient: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "bb718MKBZ5MFrCvutTYb1Eh", "CardGameNetworkClient");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("./Network.NetworkClient"), o = t("./Network.NetworkListener"), c = t("../common/Configs"), s = t("./Network.InPacket"), a = t("./Network.Cmd"), h = function(t) {
__extends(e, t);
function e() {
var e = t.call(this) || this;
e.listeners = new Array();
e.isLogin = !1;
e.onLogined = null;
e.isUseWSS = c.default.App.USE_WSS;
return e;
}
e.getInstance = function() {
null == this.instance && (this.instance = new e());
return this.instance;
};
e.prototype.checkConnect = function(t) {
this.onLogined = t;
null != this.ws && this.ws.readyState == WebSocket.CONNECTING || (this.isConnected() ? this.isLogin && null != this.onLogined && this.onLogined() : this._connect());
};
e.prototype._connect = function() {
cc.log("start connect card game");
};
e.prototype.onOpen = function(e) {
t.prototype.onOpen.call(this, e);
this.send(new a.default.SendLogin(c.default.Login.Nickname, c.default.Login.AccessToken));
};
e.prototype.onMessage = function(t) {
for (var e = new Uint8Array(t.data), i = 0; i < this.listeners.length; i++) {
var n = this.listeners[i];
if (n.target && n.target instanceof Object && n.target.node) n.callback(e); else {
this.listeners.splice(i, 1);
i--;
}
}
switch (new s.default(e).getCmdId()) {
case a.default.Code.LOGIN:
this.isLogin = !0;
null != this.onLogined && this.onLogined();
}
};
e.prototype.addListener = function(t, e) {
this.listeners.push(new o.default(e, t));
};
e.prototype.send = function(t) {
for (var e = new Int8Array(t._length), i = 0; i < t._length; i++) e[i] = t._data[i];
null != this.ws && this.isConnected() && this.ws.send(e.buffer);
};
e.prototype.sendCheck = function(t) {
var e = this;
this.checkConnect(function() {
e.send(t);
});
};
return e;
}(n.default);
i.default = h;
cc._RF.pop();
}, {
"../common/Configs": "Configs",
"./Network.Cmd": "Network.Cmd",
"./Network.InPacket": "Network.InPacket",
"./Network.NetworkClient": "Network.NetworkClient",
"./Network.NetworkListener": "Network.NetworkListener"
} ],
CardGame_ItemRoom: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "40208gO36VJZpQQjiD6Vrko", "CardGame_ItemRoom");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = cc._decorator, o = n.ccclass, c = n.property, s = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.itemInfo = null;
return e;
}
e.prototype.initItems = function(t) {
cc.log("CardGame_ItemRoom data : ", t);
this.itemInfo = t;
this.labelBet.string = this.formatGold(t.bet);
this.labelPlayers.string = this.formatGold(t.players);
this.labelState.string = 2 == t.maxUser ? "Solo" : t.maxUser + " Người";
};
e.prototype.chooseRoom = function() {
cc.log("CardGame_ItemRoom chooseRoom : ", this.itemInfo);
switch (this.itemInfo.gameId) {
case 0:
case 1:
this.node.parent.parent.parent.parent.getComponent("TienLen.Room").handleJoinRoom(this.itemInfo);
}
cc.log("CardGame_ItemRoom chooseRoom : ", this.node.parent.parent);
cc.log("CardGame_ItemRoom chooseRoom : ", this.node.parent.parent.parent);
cc.log("CardGame_ItemRoom chooseRoom : ", this.node.parent.parent.parent.parent);
};
e.prototype.formatGold = function(t) {
return t.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
};
__decorate([ c(cc.Label) ], e.prototype, "labelBet", void 0);
__decorate([ c(cc.Label) ], e.prototype, "labelPlayers", void 0);
__decorate([ c(cc.Label) ], e.prototype, "labelState", void 0);
return e = __decorate([ o ], e);
}(cc.Component);
i.default = s;
cc._RF.pop();
}, {} ],
Card: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "550c9nAtbJCb6ippMUD/2+b", "Card");
cc.Class({
extends: cc.Component,
properties: {
card1: {
default: [],
type: cc.SpriteFrame
},
card2: {
default: [],
type: cc.SpriteFrame
},
card3: {
default: [],
type: cc.SpriteFrame
},
card4: {
default: [],
type: cc.SpriteFrame
},
card5: {
default: [],
type: cc.SpriteFrame
},
card6: {
default: [],
type: cc.SpriteFrame
},
card7: {
default: [],
type: cc.SpriteFrame
},
card8: {
default: [],
type: cc.SpriteFrame
},
card9: {
default: [],
type: cc.SpriteFrame
},
card10: {
default: [],
type: cc.SpriteFrame
},
card11: {
default: [],
type: cc.SpriteFrame
},
card12: {
default: [],
type: cc.SpriteFrame
},
card13: {
default: [],
type: cc.SpriteFrame
},
cardB1: {
default: null,
type: cc.SpriteFrame
},
cardB2: {
default: null,
type: cc.SpriteFrame
},
red: !1
},
init: function() {
var t = this, e = this;
this.card = [ [], [], [], [], [], [], [], [], [], [], [], [], [] ];
Promise.all(this.card.map(function(t, i) {
return 0 === i ? e.card1 : 1 === i ? e.card2 : 2 === i ? e.card3 : 3 === i ? e.card4 : 4 === i ? e.card5 : 5 === i ? e.card6 : 6 === i ? e.card7 : 7 === i ? e.card8 : 8 === i ? e.card9 : 9 === i ? e.card10 : 10 === i ? e.card11 : 11 === i ? e.card12 : 12 === i ? e.card13 : void 0;
})).then(function(e) {
t.card = e;
});
},
config: function() {
if (void 0 === cc.RedT.util.card) {
cc.RedT.util.card = this;
if (!this.red) {
this.red = !0;
this.init();
}
}
},
getCard: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
return this.card[t][e];
},
random: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 13;
return this.card[~~(Math.random() * t)][~~(4 * Math.random())];
}
});
cc._RF.pop();
}, {} ],
ChangeAvatar: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "9f10eooyspGbq6scqz23qj0", "ChangeAvatar");
cc.Class({
extends: cc.Component,
properties: {
items: cc.Node,
itemTemplate: cc.Node
},
start: function() {
for (var t = this, e = function(e) {
var i = cc.instantiate(t.itemTemplate);
i.parent = t.items;
i.getChildByName("sprite").getComponent(cc.Sprite).spriteFrame = cc.RedT.Avatars[e];
if (e == cc.RedT.user.avatar) {
t.selectedIdx = e;
i.getChildByName("selected").active = !0;
} else i.getChildByName("selected").active = !1;
i.on("click", function() {
t.selectedIdx = e;
for (var i = 0; i < t.items.childrenCount; i++) {
t.items.children[i].getChildByName("selected").active = i == t.selectedIdx;
}
});
t.selectedIdx = e;
}, i = 0; i < cc.RedT.Avatars.length; i++) e(i);
this.itemTemplate.removeFromParent();
this.itemTemplate = null;
},
show: function() {
this.node.active = !0;
this.selectedIdx = -1;
if (null == this.itemTemplate) for (var t = 0; t < this.items.childrenCount; t++) {
var e = this.items.children[t];
if (t == cc.RedT.user.avatar) {
this.selectedIdx = t;
e.getChildByName("selected").active = !0;
} else e.getChildByName("selected").active = !1;
}
},
dimiss: function() {
this.node.active = !1;
},
actSubmit: function() {
var t = this.selectedIdx;
cc.RedT.inGame.setAvatar(t);
cc.RedT.user.avatar = t;
cc.RedT.send({
user: {
avatar: t
}
});
cc.RedT.inGame.notice.show({
title: "",
text: "Thao tác thành công !"
});
}
});
cc._RF.pop();
}, {} ],
CheckOut: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "3988dLBD7VPLowq6ozkuvOs", "CheckOut");
cc.Class({
extends: cc.Sprite,
properties: {
nut: {
default: null,
type: cc.Sprite
},
NutOn: {
default: null,
type: cc.SpriteFrame
},
NutOff: {
default: null,
type: cc.SpriteFrame
},
BgOn: {
default: null,
type: cc.SpriteFrame
},
BgOff: {
default: null,
type: cc.SpriteFrame
},
isChecked: !1
},
onLoad: function() {
var t = this;
this.actionOn = cc.sequence(cc.moveTo(.1, cc.v2(30, 0)), cc.callFunc(function() {
t.spriteFrame = t.BgOn;
t.nut.spriteFrame = t.NutOn;
}));
this.actionOff = cc.sequence(cc.moveTo(.1, cc.v2(-30, 0)), cc.callFunc(function() {
t.spriteFrame = t.BgOff;
t.nut.spriteFrame = t.NutOff;
}));
this.OnUpdate();
},
OnChangerClick: function() {
this.isChecked = !this.isChecked;
this.OnUpdate();
},
OnUpdate: function() {
this.isChecked, this.nut.node.stopAllActions();
}
});
cc._RF.pop();
}, {} ],
ChuyenRed_daily: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "c1af2XufuNBepY7+fdeCQxa", "ChuyenRed_daily");
cc.Class({
extends: cc.Component,
properties: {
bg: {
default: null,
type: cc.Node
},
STT: {
default: null,
type: cc.Label
},
imglevel: cc.Sprite,
level: [ cc.SpriteFrame ],
DaiLy: {
default: null,
type: cc.Label
},
NICKNAME: {
default: null,
type: cc.Label
},
Phone: {
default: null,
type: cc.Label
},
Location: {
default: null,
type: cc.Label
},
FB: "",
zalo: ""
},
init: function(t, e, i) {
this.controll = t;
this.STT.string = i + 1;
this.DaiLy.string = e.name;
this.NICKNAME.string = e.nickname;
this.Phone.string = e.phone;
this.Location.string = e.location;
this.FB = "" + e.fb;
this.zalo = "" + e.zalo;
0 != e.level && (this.imglevel.spriteFrame = this.level[e.level]);
},
onChuyenClick: function() {
cc.RedT.audio.playClick();
this.controll.selectDaiLy(this);
},
onFBClick: function() {
cc.sys.openURL(this.FB);
},
onZaloClick: function() {
cc.sys.openURL(this.zalo);
}
});
cc._RF.pop();
}, {} ],
ChuyenRed: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "45856xdHLFHNqyaZPpjF/pA", "ChuyenRed");
var n = t("BrowserUtil"), o = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
header: {
default: null,
type: cc.Node
},
body: {
default: null,
type: cc.Node
},
nickname: {
default: null,
type: cc.EditBox
},
renickname: {
default: null,
type: cc.EditBox
},
red: {
default: null,
type: cc.EditBox
},
messenger: {
default: null,
type: cc.EditBox
},
otp: {
default: null,
type: cc.EditBox
},
rednhan: {
default: null,
type: cc.Label
},
scrollview: {
default: null,
type: cc.ScrollView
},
prefabDaiLy: {
default: null,
type: cc.Prefab
},
checkDaiLy: {
default: [],
type: cc.Node
},
typeOTP: ""
},
init: function() {
this.isdaily = !1;
this.meDaily = !1;
this.daily_list = [];
var t = this;
this.isLoaded = !1;
this.editboxs = [ this.nickname, this.red, this.messenger, this.otp ];
this.keyHandle = function(e) {
return e.keyCode === cc.macro.KEY.tab ? (t.isTop() && t.changeNextFocusEditBox(), 
e.preventDefault && e.preventDefault(), !1) : e.keyCode === cc.macro.KEY.enter ? (n.focusGame(), 
t.onChuyenClick(), e.preventDefault && e.preventDefault(), !1) : void 0;
};
},
onEnable: function() {
this.reCheckMeDL();
cc.sys.isBrowser && this.addEvent();
Promise.all(this.checkDaiLy.map(function(t) {
t.active = !1;
}));
this.isLoaded;
},
onDisable: function() {
cc.sys.isBrowser && this.removeEvent();
this.clean();
Promise.all(this.checkDaiLy.map(function(t) {
t.active = !1;
}));
},
addEvent: function() {
cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
for (var t in this.editboxs) n.getHTMLElementByEditBox(this.editboxs[t]).addEventListener("keydown", this.keyHandle, !1);
},
removeEvent: function() {
for (var t in this.editboxs) n.getHTMLElementByEditBox(this.editboxs[t]).removeEventListener("keydown", this.keyHandle, !1);
cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
},
onKeyDown: function(t) {
switch (t.keyCode) {
case cc.macro.KEY.tab:
this.isTop() && this.changeNextFocusEditBox();
break;

case cc.macro.KEY.enter:
this.isTop() && this.onChuyenClick();
}
},
changeNextFocusEditBox: function() {
for (var t = !1, e = 0, i = this.editboxs.length; e < i; e++) if (n.checkEditBoxFocus(this.editboxs[e])) {
n.focusEditBox(this.editboxs[e]);
t = !0;
break;
}
!t && 0 < this.editboxs.length && n.focusEditBox(this.editboxs[0]);
},
isTop: function() {
return !cc.RedT.inGame.notice.node.active && !cc.RedT.inGame.loading.active;
},
clean: function() {
this.nickname.string = this.red.string = this.messenger.string = this.rednhan.string = "";
Promise.all(this.daily_list.map(function(t) {
t.bg.active = !1;
}));
},
onChuyenClick: function() {
var t = null;
o.isEmpty(this.nickname.string) || o.isEmpty(this.red.string) ? t = "Kiểm tra lại các thông tin..." : o.isEmpty(this.nickname.string) ? t = "Tên nhân vật không được bỏ trống" : o.getOnlyNumberInString(this.red.string) < 1e4 ? t = "Số tiền chuyển tối thiểu là 10.000 VIN." : o.isEmpty(this.otp.string) && (t = "Vui lòng nhập mã OTP.");
if (t) cc.RedT.inGame.notice.show({
title: "CHUYỂN VIN",
text: t
}); else {
var e = {
name: this.nickname.string,
red: o.getOnlyNumberInString(this.red.string),
otp: this.otp.string
};
o.isEmpty(this.messenger.string.trim()) || (e = Object.assign(e, {
message: this.messenger.string
}));
cc.RedT.inGame.bgLoading.onData({
active: !0,
text: "Đang gửi dữ liệu..."
});
cc.RedT.send({
shop: {
chuyen_red: e
}
});
}
},
onSelectHead: function(t, e) {
Promise.all(this.header.children.map(function(t) {
t.name == e ? t.getComponent("itemContentMenu").select() : t.getComponent("itemContentMenu").unselect();
}));
Promise.all(this.body.children.map(function(t) {
t.name == e ? t.active = !0 : t.active = !1;
}));
},
onDaiLy: function(t) {
var e = this;
if (t.length) {
var i = this;
i.scrollview.content.removeAllChildren();
this.clean();
var n = new RegExp("^" + cc.RedT.user.name + "$", "i");
this.suffleDaiLy(t);
Promise.all(t.map(function(t, e) {
!i.meDaily && (i.meDaily = n.test(t.nickname));
var o = cc.instantiate(i.prefabDaiLy), c = o.getComponent("ChuyenRed_daily");
c.init(i, t, e);
i.scrollview.content.addChild(o);
return c;
})).then(function(t) {
e.daily_list = t;
});
}
},
suffleDaiLy: function(t) {
for (var e, i, n = t.length; 0 !== n; ) {
i = Math.floor(Math.random() * n);
e = t[n -= 1];
t[n] = t[i];
t[i] = e;
}
return t;
},
reCheckMeDL: function() {
this.meDaily = !1;
if (this.daily_list.length) {
var t = this, e = new RegExp("^" + cc.RedT.user.name + "$", "i");
Promise.all(this.daily_list.map(function(i) {
!t.meDaily && (t.meDaily = e.test(i.NICKNAME.string));
}));
}
},
onData: function(t) {
void 0 === t.daily || this.isLoaded || (this.isLoaded = !0);
},
selectDaiLy: function(t) {
var e = this;
Promise.all(this.checkDaiLy.map(function(t) {
t.active = !0;
}));
Promise.all(this.daily_list.map(function(i) {
if (i == t) {
e.isdaily = !0;
i.bg.active = !0;
e.nickname.string = e.renickname.string = i.NICKNAME.string;
e.onChangerRed(0, !0);
} else i.bg.active = !1;
}));
},
onChangerNick: function(t) {
this.isdaily = !1;
Promise.all(this.checkDaiLy.map(function(t) {
t.active = !1;
}));
if (this.daily_list.length > 0) {
var e = this;
Promise.all(this.daily_list.map(function(i) {
if (new RegExp("^" + t + "$", "i").test(i.NICKNAME.string)) {
Promise.all(e.checkDaiLy.map(function(t) {
t.active = !0;
}));
e.isdaily = !0;
i.bg.active = !0;
} else i.bg.active = !1;
}));
}
this.onChangerRed(0, !0);
},
onChangerRed: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1] ? this.red.string : t;
t = o.numberWithCommas(o.getOnlyNumberInString(t));
this.red.string = 0 == t ? "" : t;
if (this.isdaily || this.meDaily) this.rednhan.string = t; else {
var e = o.getOnlyNumberInString(t);
this.rednhan.string = o.numberWithCommas(Math.floor(e - 2 * e / 100));
}
},
onClickOTP: function() {
cc.RedT.send({
otp: {
type: this.typeOTP
}
});
},
onClickOTPSMS: function() {
cc.RedT.send({
otp: {
type: "2"
}
});
},
onClickOTPTele: function() {
cc.RedT.send({
otp: {
type: "1"
}
});
},
changerTypeOTP: function(t) {
this.typeOTP = t.node.name;
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
CoTrang_bonus_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "0023dJWKJFJOZXuKmK/mqIT", "CoTrang_bonus_item");
cc.Class({
extends: cc.Component,
properties: {
open: cc.Node,
close: cc.Node,
text: cc.Label
}
});
cc._RF.pop();
}, {} ],
CoTrang_dialog: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "88434zB0LpByrbi+FeJkV/o", "CoTrang_dialog");
var n = t("CoTrang_history"), o = t("CoTrang_top");
cc.Class({
extends: cc.Component,
properties: {
history: n,
top: o,
help: cc.Node
},
init: function() {
this.actionShow = cc.spawn(cc.scaleTo(.5, 1).easing(cc.easeBackOut(2.5)), cc.fadeTo(.5, 255));
this.objShow = null;
this.objTmp = null;
},
onClickBack: function() {
cc.RedT.audio.playUnClick();
this.onBack();
},
onBack: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = !1;
this.node.active = !1;
this.objShow = null;
} else {
this.objTmp = this.objShow;
this.objShow = this.objShow.previous;
this.objTmp.previous = null;
this.objTmp.active = !1;
this.objShow.active = !0;
this.objTmp = null;
} else this.node.active = !1;
},
onClosePrevious: function(t) {
if (void 0 !== t.previous && null !== t.previous) {
this.onClosePrevious(t.previous);
delete t.previous;
}
t.active = !1;
},
onCloseDialog: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = this.node.active = !1;
this.objShow = null;
} else {
this.onClosePrevious(this.objShow.previous);
this.objShow.active = this.node.active = !1;
delete this.objShow.previous;
this.objShow = null;
} else this.node.active = !1;
},
resetSizeDialog: function(t) {
t.stopAllActions();
t.scale = .5;
t.opacity = 0;
},
showHistory: function() {
this.node.active = this.history.node.active = !0;
this.objShow = this.history.node;
},
showTop: function() {
this.node.active = this.top.node.active = !0;
this.objShow = this.top.node;
},
showHelp: function() {
this.node.active = this.help.active = !0;
this.objShow = this.help;
}
});
cc._RF.pop();
}, {
CoTrang_history: "CoTrang_history",
CoTrang_top: "CoTrang_top"
} ],
CoTrang_history: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "89676Zx8oRO4KIzkpkCy5Hq", "CoTrang_history");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
onLoad: function() {
var t = this, e = cc.instantiate(this.page);
e.y = -232;
this.node.addChild(e);
this.page = e.getComponent("Pagination");
Promise.all(this.content.children.map(function(t) {
return t.getComponent("VQRed_history_item");
})).then(function(e) {
t.content = e;
});
this.page.init(this);
},
onEnable: function() {
this.get_data();
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
g: {
longlan: {
log: {
red: this.red,
page: t
}
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
this.page.onSet(t.page, t.kmess, t.total);
Promise.all(this.content.map(function(e, i) {
var o = t.data[i];
if (void 0 !== o) {
e.node.active = !0;
e.time.string = n.getStringDateByTime(o.time);
e.phien.string = o.id;
e.cuoc.string = n.numberWithCommas(o.bet);
e.win.string = o.line + " Dòng";
e.line.string = n.numberWithCommas(o.win);
} else e.node.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
CoTrang_iline: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "846ba+ck/5Ez62leZJ7v614", "CoTrang_iline");
cc.Class({
extends: cc.Component,
properties: {
line: cc.Node,
ef: !1
},
onEnable: function() {
this.node.on(cc.Node.EventType.MOUSE_ENTER, this.onShow, this);
this.node.on(cc.Node.EventType.MOUSE_LEAVE, this.onHidden, this);
},
onDisable: function() {
this.node.off(cc.Node.EventType.MOUSE_ENTER, this.onShow, this);
this.node.off(cc.Node.EventType.MOUSE_LEAVE, this.onHidden, this);
},
onShow: function() {
this.line.active = !0;
},
onHidden: function() {
!this.ef && (this.line.active = !1);
}
});
cc._RF.pop();
}, {} ],
CoTrang_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "fcb34krtXlN66KnmT4HIAyT", "CoTrang_item");
cc.Class({
extends: cc.Component,
properties: {
icon: cc.Sprite,
free: cc.Node,
bonus: cc.Node,
hu: cc.Node,
wind: cc.Node
},
init: function(t) {
this.RedT = t;
},
random: function() {
var t = 11 * Math.random() >> 0;
this.setIcon(t);
return t;
},
setIcon: function(t) {
var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
if (10 == t) {
this.wind.active = !0;
this.icon.node.active = this.free.active = this.bonus.active = this.hu.active = !1;
} else if (9 == t) {
this.hu.active = !0;
this.icon.node.active = this.free.active = this.bonus.active = this.wind.active = !1;
} else if (8 == t) {
this.bonus.active = !0;
this.icon.node.active = this.free.active = this.wind.active = this.hu.active = !1;
} else if (7 == t) {
this.free.active = !0;
this.icon.node.active = this.wind.active = this.bonus.active = this.hu.active = !1;
} else {
this.icon.node.active = !0;
this.icon.spriteFrame = this.RedT.icons[t];
this.free.active = this.wind.active = this.bonus.active = this.hu.active = !1;
}
e && (this.data = t);
}
});
cc._RF.pop();
}, {} ],
CoTrang_lines: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "f0cc25QW1BBlrdxfkZq24z5", "CoTrang_lines");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
lines: cc.Node,
mainLines: cc.Node
},
init: function(t) {
var e = this;
this.RedT = t;
Promise.all(this.mainLines.children.map(function(t) {
return t.getComponent("CoTrang_iline");
})).then(function(t) {
e.mainLines = t;
});
this.selectAll(null, "1");
},
onOpen: function() {
this.node.active = !0;
},
onClose: function() {
this.RedT.playClick();
this.node.active && this.data.length < 1 ? this.RedT.notice.show({
title: "CẢNH BÁO",
text: "Chọn ít nhất 1 dòng"
}) : this.node.active = !1;
},
select: function(t) {
this.RedT.playClick();
var e = t.target;
e.color._val != cc.Color.WHITE._val ? e.color = cc.Color.WHITE : e.color = e.color.fromHEX("#8A8A8A");
this.check();
},
check: function() {
var t = this;
Promise.all(this.lines.children.map(function(t, e) {
return t.color._val == cc.Color.WHITE._val ? e + 1 : void 0;
})).then(function(e) {
Promise.all(e.filter(function(t) {
return void 0 !== t;
})).then(function(e) {
t.data = e;
t.RedT.labelLine.string = e.length;
t.RedT.tong.string = n.numberWithCommas(e.length * n.getOnlyNumberInString(t.RedT.bet.string));
});
});
},
selectChan: function() {
var t = this;
Promise.all(this.lines.children.map(function(t, e) {
var i = e + 1;
if (!(i % 2)) {
t.color = cc.Color.WHITE;
return i;
}
t.color = t.color.fromHEX("#8A8A8A");
})).then(function(e) {
Promise.all(e.filter(function(t) {
return void 0 !== t;
})).then(function(e) {
t.data = e;
t.RedT.labelLine.string = e.length;
t.RedT.tong.string = n.numberWithCommas(e.length * n.getOnlyNumberInString(t.RedT.bet.string));
});
});
},
selectLe: function() {
var t = this;
Promise.all(this.lines.children.map(function(t, e) {
var i = e + 1;
if (i % 2) {
t.color = cc.Color.WHITE;
return i;
}
t.color = t.color.fromHEX("#8A8A8A");
})).then(function(e) {
Promise.all(e.filter(function(t) {
return void 0 !== t;
})).then(function(e) {
t.data = e;
t.RedT.labelLine.string = e.length;
t.RedT.tong.string = n.numberWithCommas(e.length * n.getOnlyNumberInString(t.RedT.bet.string));
});
});
},
selectAll: function(t, e) {
var i = this;
Promise.all(this.lines.children.map(function(t, i) {
var n = "1" == e;
t.color = n ? cc.Color.WHITE : t.color.fromHEX("#8A8A8A");
return n ? i + 1 : void 0;
})).then(function(t) {
Promise.all(t.filter(function(t, e) {
return void 0 !== t;
})).then(function(t) {
i.data = t;
i.RedT.labelLine.string = t.length;
i.RedT.tong.string = n.numberWithCommas(t.length * n.getOnlyNumberInString(i.RedT.bet.string));
});
});
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
CoTrang_playBonus: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "9c69cVyCZJIH59jXRxl6d7F", "CoTrang_playBonus");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
numberBonus: cc.Label,
listBox: cc.Node,
notice: cc.Node,
numberWin: cc.Label,
icons: {
default: [],
type: cc.SpriteFrame
}
},
init: function(t) {
var e = this;
this.RedT = t;
Promise.all(this.listBox.children.map(function(t) {
return t.getComponent("CoTrang_bonus_item");
})).then(function(t) {
e.listBox = t;
});
},
onPlay: function(t) {
this.reset();
this.node.active = !0;
this.numberBonus.string = t;
},
onClickBox: function(t) {
if (this.numberBonus.string) {
this.RedT.playClick();
this.onSend(t.target.name);
}
},
closeNotice: function() {
this.notice.active = this.node.active = !1;
this.RedT.hieuUng();
},
onData: function(t) {
if (void 0 !== t.box) {
var e = this.listBox[t.box];
e.open.active = !0;
e.close.active = !1;
e.text.string = n.numberWithCommas(t.bet);
this.numberBonus.string = t.bonus;
}
if (void 0 !== t.win) {
this.notice.active = !0;
this.numberWin.string = n.numberWithCommas(t.win);
this.RedT.vuathang.string = n.numberWithCommas(1 * n.getOnlyNumberInString(this.RedT.vuathang.string) + t.win);
}
},
onSend: function(t) {
cc.RedT.send({
g: {
longlan: {
bonus: {
box: t
}
}
}
});
},
reset: function() {
Promise.all(this.listBox.map(function(t) {
t.open.active = !1;
t.close.active = !0;
t.text.string = "";
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
CoTrang_reel: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "46703d92yxJ94jTBiM3fuuV", "CoTrang_reel");
cc.Class({
extends: cc.Component,
init: function(t) {
var e = this;
this.RedT = t;
this.icons = [];
var i = this, n = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
Promise.all(n.map(function(t, e) {
var o = cc.instantiate(i.RedT.icon);
i.node.addChild(o);
(o = o.getComponent("CoTrang_item")).init(i.RedT);
e > 2 && e < n.length - 3 && o.random();
return o;
})).then(function(t) {
e.icons = t;
e.icons[e.icons.length - 1].setIcon(e.icons[4].random());
e.icons[e.icons.length - 2].setIcon(e.icons[3].random());
e.icons[e.icons.length - 3].setIcon(e.icons[2].random());
e.icons[e.icons.length - 4].setIcon(e.icons[1].random());
e.icons[e.icons.length - 5].setIcon(e.icons[0].random());
});
},
spin: function(t) {
this.node.stopAllActions();
var e = cc.moveTo(1, cc.v2(this.node.x, -(this.node.height - 396))).easing(cc.easeInOut(3)), i = cc.callFunc(function() {
0 === t && this.RedT.copy();
this.node.y = 0;
}, this);
if (4 === t) {
var n = cc.callFunc(function() {
this.RedT.EF_vuathang();
this.node.y = 0;
this.RedT.random();
this.RedT.hieuUng();
}, this);
this.node.runAction(cc.sequence(cc.delayTime(.1 * t), e, n));
} else this.node.runAction(cc.sequence(cc.delayTime(.1 * t), e, i));
},
stop: function() {
this.node.stopAllActions();
this.RedT.copy();
this.node.y = 0;
}
});
cc._RF.pop();
}, {} ],
CoTrang_top: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "c630b0qZgVLe76291zEptTX", "CoTrang_top");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
item: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
onEnable: function() {
this.get_data();
},
get_data: function() {
arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
cc.RedT.send({
g: {
longlan: {
top: this.red
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
this.content.removeAllChildren();
var e = this;
Promise.all(t.map(function(t, i) {
var o = cc.instantiate(e.item), c = o.getComponent("VQRed_history_item");
c.time.string = n.getStringDateByTime(t.time);
c.phien.string = t.name;
c.cuoc.string = n.numberWithCommas(t.bet);
c.line.string = n.numberWithCommas(t.win);
c.win.string = 2 == t.type ? "Nổ Hũ" : "Thắng lớn";
o.children[0].active = !(1 & i);
e.content.addChild(o);
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
CoTrang: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "d4343ucEwlPPaNvLP9L/Oj8", "CoTrang");
var n = t("Helper"), o = t("CoTrang_reel"), c = t("CoTrang_lines"), s = t("CoTrang_playBonus"), a = t("Notice"), h = t("CoTrang_dialog");
cc.Class({
extends: cc.Component,
properties: {
gameBonus: s,
audioBG: cc.AudioSource,
audioClickSpin: {
default: null,
type: cc.AudioClip
},
audioClick: {
default: null,
type: cc.AudioClip
},
audioWin: {
default: null,
type: cc.AudioClip
},
audioBigWin: {
default: null,
type: cc.AudioClip
},
audioJackpot: {
default: null,
type: cc.AudioClip
},
redhat: cc.Node,
reels: {
default: [],
type: o
},
icon: cc.Prefab,
icons: {
default: [],
type: cc.SpriteFrame
},
betString: {
default: [],
type: cc.String
},
audioIcons: {
default: [],
type: cc.SpriteFrame
},
audioIcon: cc.Sprite,
nodeRed: cc.Node,
nodeXu: cc.Node,
nodeNotice: cc.Node,
prefabNotice: cc.Prefab,
MiniPanel: cc.Prefab,
loading: cc.Node,
notice: a,
dialog: h,
Line: c,
hu: cc.Label,
taikhoan: cc.Label,
tong: cc.Label,
vuathang: cc.Label,
labelLine: cc.Label,
bet: cc.Label,
freeLabel: cc.Label,
phien: cc.Label,
BigWin: cc.Animation,
BigWin_Label: cc.Label,
NoHu_close: cc.Node,
NoHu: cc.Animation,
NoHu_Label: cc.Label,
EF_Bonus: cc.Animation,
EF_Free: cc.Animation,
buttonCoint: cc.Node,
buttonLine: cc.Node,
buttonSpin: cc.Node,
buttonBet: cc.Node,
buttonAuto: cc.Node,
isAuto: !1,
isSpin: !1,
isFreeSpin: !1,
red: !0,
betSelect: 0
},
onLoad: function() {
cc.RedT.inGame = this;
var t = this;
this.Line.init(this);
this.BigWin.on("finished", this.BigWinFinish, this);
this.BigWin.on("play", this.BigWinPlay, this);
this.EF_Free.on("finished", this.EF_FreeFinish, this);
this.NoHu.on("play", this.NoHuPlay, this);
this.EF_Bonus.on("finished", this.EF_BonusFinish, this);
this.gameBonus.init(this);
this.dialog.init();
Promise.all(this.reels.map(function(e) {
e.init(t);
}));
cc.RedT.send({
scene: "longlan"
});
this.taikhoan.string = n.numberWithCommas(cc.RedT.user.red);
this.speed = 400;
if (cc.RedT.isSoundBackground()) {
this.playMusic();
this.audioIcon.spriteFrame = this.audioIcons[1];
} else this.audioIcon.spriteFrame = this.audioIcons[0];
},
_playSFX: function(t) {
cc.RedT.IS_SOUND && cc.audioEngine.playEffect(t, !1);
},
playClick: function() {
this._playSFX(this.audioClick);
},
BigWinPlay: function() {
var t = cc.callFunc(function() {
this._playSFX(this.audioBigWin);
n.numberTo(this.BigWin_Label, 0, this.H_win, 2e3, !0);
}, this);
this.BigWin.node.runAction(cc.sequence(cc.delayTime(.3), t));
},
BigWinFinish: function() {
this.isBigWin = !1;
this.BigWin.node.active = !1;
this.BigWin_Label.string = "";
this.showLineWin(!1);
this.hieuUng();
},
NoHuPlay: function() {
this.NoHu_Label.string = "";
var t = cc.callFunc(function() {
this._playSFX(this.audioJackpot);
n.numberTo(this.NoHu_Label, 0, this.H_win, 2e3, !0);
}, this);
this.NoHu.node.runAction(cc.sequence(cc.delayTime(.3), t));
var e = cc.callFunc(function() {
this.NoHu_close.active = !0;
}, this);
this.NoHu.node.runAction(cc.sequence(cc.delayTime(4), e));
},
NoHuFinish: function() {
this.isNoHu = !1;
this.isAuto && this.onAuto();
this.showLineWin(!1);
this.hieuUng();
},
NoHuClose: function() {
this.NoHu.node.active = this.NoHu_close.active = !1;
this.NoHuFinish();
},
EF_BonusFinish: function() {
this.EF_Bonus.node.active = !1;
this.gameBonus.onPlay(this.isBonus);
this.isBonus = 0;
this.showLineWin(!1);
},
EF_FreeFinish: function() {
this.isFree = !1;
this.EF_Free.node.active = !1;
this.showLineWin(!1);
this.hieuUng();
},
onData: function(t) {
if (void 0 !== t.user) {
this.userData(t.user);
cc.RedT.userData(t.user);
}
void 0 !== t.longlan && this.LongLan(t.longlan);
void 0 !== t.mini && null != cc.RedT.minigame && cc.RedT.minigame.onData(t.mini);
void 0 !== t.TopHu && cc.RedT.MiniPanel.TopHu.onData(t.TopHu);
void 0 !== t.taixiu && null != cc.RedT.minigame && cc.RedT.minigame.isLoadTaiXiu && cc.RedT.minigame.TaiXiu.TX_Main.onData(t.taixiu);
},
userData: function(t) {
this.red ? this.taikhoan.string = n.numberWithCommas(t.red) : this.taikhoan.string = n.numberWithCommas(t.xu);
},
LongLan: function(t) {
var e = this;
if (void 0 !== t.status) if (1 === t.status) {
Promise.all(t.cel.map(function(t, i) {
Promise.all(t.map(function(t, n) {
e.reels[i].icons[n].setIcon(t, !0);
}));
}));
this.runReels();
this.H_line_win = t.line_win;
this.H_win = t.win;
this.H_free = t.free;
this.isBonus = t.isBonus;
this.isNoHu = t.isNoHu;
this.isBigWin = t.isBigWin;
this.isFree = t.isFree;
this.isFreeSpin = !!t.free;
} else this.resetSpin();
t.phien && (this.phien.string = "#" + t.phien);
t.bonus && this.gameBonus.onData(t.bonus);
t.log && this.dialog.history.onData(t.log);
t.top && this.dialog.top.onData(t.top);
t.notice && this.addNotice(t.notice);
},
EF_vuathang: function() {
this.showLineWin(!0);
this.vuathang.string = n.numberWithCommas(this.H_win);
this.buttonSpin.active = !this.H_free;
this.freeLabel.string = "Free: " + this.H_free;
this.freeLabel.node.active = !!this.H_free;
},
onLineWin: function(t) {
var e = this;
Promise.all(this.H_line_win.map(function(i) {
var n = e.Line.mainLines[i.line - 1];
if (t) {
n.ef = !0;
n.onShow();
} else {
n.ef = !1;
n.onHidden();
}
}));
},
showLineWin: function(t) {
this.onLineWin(t);
if (!(t || this.isNoHu || this.isBigWin || this.isAuto || this.isFreeSpin)) {
this.eflineN = 0;
this.efLineWin();
}
},
efLineWin: function(t) {
if (this.H_line_win.length) {
this.node.stopAllActions();
void 0 === this.H_line_win[this.eflineN] && (this.eflineN = 0);
this.efOneLineWin(this.eflineN, !0);
var e = cc.callFunc(function() {
this.efOneLineWin(this.eflineN, !1);
this.eflineN += 1;
this.efLineWin();
}, this);
this.node.runAction(cc.sequence(cc.delayTime(1.5), e));
}
},
efOneLineWin: function(t, e) {
t = this.H_line_win[this.eflineN].line;
var i = this.Line.mainLines[t - 1];
if (e) {
i.ef = !0;
i.onShow();
} else {
i.ef = !1;
i.onHidden();
}
},
hieuUng: function() {
if (this.isBigWin && !this.isNoHu) {
this.BigWin.node.active = !0;
this.BigWin.play();
this.oldBigWin = !0;
} else if (this.isNoHu) {
this.NoHu.node.active = !0;
this.NoHu.play();
} else if (this.isBonus) {
this.EF_Bonus.node.active = !0;
this.EF_Bonus.play();
cc.RedT.audio.playEf("bonus");
} else if (this.isFree) {
this.EF_Free.node.active = !0;
this.EF_Free.play();
} else if (this.H_win > 0) {
var t = new cc.Node();
t.addComponent(cc.Label);
(t = t.getComponent(cc.Label)).string = "+" + n.numberWithCommas(this.H_win);
t.font = cc.RedT.util.fontCong;
t.lineHeight = 130;
t.fontSize = 25;
t.node.position = cc.v2(0, 21);
this.nodeNotice.addChild(t.node);
!this.oldBigWin && this._playSFX(this.audioWin);
t.node.runAction(cc.sequence(cc.moveTo(1.2, cc.v2(0, 105)), cc.callFunc(function() {
this.speed = 0;
t.node.destroy();
this.hieuUng();
this.showLineWin(!1);
}, this)));
this.H_win = 0;
this.oldBigWin = !1;
} else this.isAuto || this.isFreeSpin ? this.timeOut = setTimeout(function() {
this.onAutoSpin();
this.speed = 400;
}.bind(this), this.speed) : this.resetSpin();
},
onChangerBet: function() {
this._playSFX(this.audioClick);
this.betSelect++;
this.betSelect > 2 && (this.betSelect = 0);
this.bet.string = this.betString[this.betSelect];
this.tong.string = n.numberWithCommas(this.Line.data.length * n.getOnlyNumberInString(this.bet.string));
this.onGetHu();
},
changerCoint: function() {
this.red = !this.red;
this.nodeRed.active = !this.nodeRed.active;
this.nodeXu.active = !this.nodeXu.active;
this.userData(cc.RedT.user);
this.onGetHu();
},
onClickAuto: function() {
this._playSFX(this.audioClick);
this.onAuto();
},
onAuto: function() {
this.isAuto = !this.isAuto;
this.isAuto ? this.buttonAuto.color = cc.Color.WHITE : this.buttonAuto.color = this.buttonAuto.color.fromHEX("#8A8A8A");
},
onClickSpin: function() {
this.onSpin();
},
onAutoSpin: function() {
this._playSFX(this.audioClickSpin);
this.onGetSpin();
},
onSpin: function() {
if (this.Line.data.length < 1) this.addNotice("Chọn ít nhất 1 dòng"); else if (!this.isSpin) {
this._playSFX(this.audioClickSpin);
this.node.stopAllActions();
void 0 !== this.eflineN && void 0 !== this.H_line_win && this.H_line_win.length && this.efOneLineWin(this.eflineN, !1);
this.eflineO = this.eflineN = 0;
this.isSpin = !0;
this.setSpin();
this.onGetSpin();
}
},
setSpin: function() {
this.buttonLine.pauseSystemEvents();
this.buttonSpin.pauseSystemEvents();
this.buttonCoint.pauseSystemEvents();
this.buttonBet.pauseSystemEvents();
},
resetSpin: function() {
this.isAuto && this.onAuto();
this.isSpin = !1;
this.buttonLine.resumeSystemEvents();
this.buttonSpin.resumeSystemEvents();
this.buttonCoint.resumeSystemEvents();
this.buttonBet.resumeSystemEvents();
},
runReels: function() {
Promise.all(this.reels.map(function(t, e) {
t.spin(e);
}));
},
copy: function() {
Promise.all(this.reels.map(function(t) {
t.icons[t.icons.length - 1].setIcon(t.icons[2].data);
t.icons[t.icons.length - 2].setIcon(t.icons[1].data);
t.icons[t.icons.length - 3].setIcon(t.icons[0].data);
}));
},
random: function() {
Promise.all(this.reels.map(function(t) {
Promise.all(t.icons.map(function(e, i) {
i > 2 && i < t.icons.length - 3 && e.random();
}));
}));
},
onGetSpin: function() {
cc.RedT.send({
g: {
longlan: {
spin: {
cuoc: n.getOnlyNumberInString(this.bet.string),
red: this.red,
line: this.Line.data
}
}
}
});
},
addNotice: function(t) {
var e = cc.instantiate(this.prefabNotice);
e.getComponent("mini_warning").text.string = t;
this.nodeNotice.addChild(e);
},
backGame: function() {
cc.RedT.inGame.notice.show({
title: "Thoát game",
text: "Xác nhận hành động.\nHành động thực hiện thoát khỏi game này?",
button: {
type: "exit_game",
text: "Thoát"
}
});
},
signOut: function() {
cc.director.preloadScene("MainGame", function() {
cc.director.loadScene("MainGame", function() {
cc.RedT.inGame.signOut();
});
});
},
onGetHu: function() {
var t = this;
if (void 0 !== cc.RedT.setting.topHu.data) {
var e = this, i = n.getOnlyNumberInString(e.bet.string);
Promise.all(cc.RedT.setting.topHu.data.long.filter(function(t) {
return t.type == i && t.red == e.red;
})).then(function(e) {
var i = n.getOnlyNumberInString(t.hu.string), o = e[0].bet;
i - o != 0 && n.numberTo(t.hu, i, o, 2e3, !0);
});
}
},
playMusic: function() {
this.audioBG.play();
},
pauseMusic: function() {
this.audioBG.pause();
},
onSetAudio: function() {
if (cc.RedT.isSoundBackground()) {
cc.RedT.setSoundBackground(!1);
this.pauseMusic();
cc.RedT.IS_SOUND = !1;
cc.RedT.setSoundGame(!1);
this.audioIcon.spriteFrame = this.audioIcons[0];
} else {
cc.RedT.setSoundBackground(!0);
this.playMusic();
cc.RedT.IS_SOUND = !0;
cc.RedT.setSoundGame(!0);
this.audioIcon.spriteFrame = this.audioIcons[1];
}
}
});
cc._RF.pop();
}, {
CoTrang_dialog: "CoTrang_dialog",
CoTrang_lines: "CoTrang_lines",
CoTrang_playBonus: "CoTrang_playBonus",
CoTrang_reel: "CoTrang_reel",
Helper: "Helper",
Notice: "Notice"
} ],
"Common.AudioManager": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "dd656ny0zpC6q+M7t8zKmpW", "Common.AudioManager");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("./BroadcastReceiver"), o = t("./SPUtils"), c = cc._decorator, s = c.ccclass, a = (c.property, 
function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.audioSource = null;
e.isOnMusic = !0;
e.isOnSound = !0;
return e;
}
i = e;
e.getInstance = function() {
if (null == this.instance) {
var t = new cc.Node("AudioManager");
this.instance = t.addComponent(i);
this.instance.audioSource = t.addComponent(cc.AudioSource);
console.log(cc.director.getScene());
cc.game.addPersistRootNode(t);
}
return this.instance;
};
e.prototype.start = function() {
var t = this;
n.default.register(n.default.ON_AUDIO_CHANGED, function() {
t.isOnMusic = o.default.getMusicVolumn() > 0;
t.isOnSound = o.default.getSoundVolumn() > 0;
t.audioSource.mute = !t.isOnMusic;
t.isOnSound || cc.audioEngine.stopAllEffects();
}, this);
this.isOnMusic = o.default.getMusicVolumn() > 0;
this.isOnSound = o.default.getSoundVolumn() > 0;
this.audioSource.mute = !this.isOnMusic;
};
e.prototype.playEffect = function(t, e) {
void 0 === e && (e = 1);
null != t ? this.isOnSound && e > 0 && cc.audioEngine.play(t, !1, e) : cc.warn("AudioManager playEffect audioClip is null");
};
e.prototype.playBackgroundMusic = function(t, e, i) {
void 0 === e && (e = !0);
void 0 === i && (i = 1);
console.log("play background music");
if (null != t) {
this.audioSource.stop();
this.audioSource.clip = t;
this.audioSource.volume = i;
this.audioSource.mute = !this.isOnMusic;
this.audioSource.loop = e;
this.audioSource.play();
} else {
cc.warn("AudioManager playBackgroundMusic audioClip is null");
console.log("AudioManager playBackgroundMusic audioClip is null");
}
};
var i;
e.instance = null;
return e = i = __decorate([ s ], e);
}(cc.Component));
i.default = a;
cc._RF.pop();
}, {
"./BroadcastReceiver": "BroadcastReceiver",
"./SPUtils": "SPUtils"
} ],
"Common.CPLabel": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "02c17acVFhNtJiW3VazAvsH", "Common.CPLabel");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("./VersionConfig"), o = cc._decorator, c = o.ccclass, s = o.property, a = o.requireComponent, h = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.strR99 = "";
return e;
}
e.prototype.onLoad = function() {
n.default.CPName;
this.getComponent(cc.Label).string = this.strR99;
};
__decorate([ s ], e.prototype, "strR99", void 0);
return e = __decorate([ c, a(cc.Label) ], e);
}(cc.Component);
i.default = h;
cc._RF.pop();
}, {
"./VersionConfig": "VersionConfig"
} ],
"Common.CPSprite": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "1c8f7r8zA1PcpxwyriIc3li", "Common.CPSprite");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("./VersionConfig"), o = cc._decorator, c = o.ccclass, s = o.property, a = o.requireComponent, h = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.sprR99 = null;
e.sprVip52 = null;
e.sprXXeng = null;
e.sprManVip = null;
return e;
}
e.prototype.onLoad = function() {
n.default.CPName;
this.getComponent(cc.Sprite).spriteFrame = this.sprR99;
};
__decorate([ s(cc.SpriteFrame) ], e.prototype, "sprR99", void 0);
__decorate([ s(cc.SpriteFrame) ], e.prototype, "sprVip52", void 0);
__decorate([ s(cc.SpriteFrame) ], e.prototype, "sprXXeng", void 0);
__decorate([ s(cc.SpriteFrame) ], e.prototype, "sprManVip", void 0);
return e = __decorate([ c, a(cc.Sprite) ], e);
}(cc.Component);
i.default = h;
cc._RF.pop();
}, {
"./VersionConfig": "VersionConfig"
} ],
Configs: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "a8b148ShhNECLRCMfJf61sO", "Configs");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n, o = t("./SPUtils"), c = t("./Http"), s = t("./VersionConfig");
(function(t) {
var e = function() {
function e() {}
e.clear = function() {
this.UserId = 0;
this.Username = "";
this.Password = "";
this.Nickname = "";
this.Avatar = "";
this.Coin = 0;
this.IsLogin = !1;
this.AccessToken = "";
this.SessionKey = "";
this.CreateTime = "";
this.Birthday = "";
this.IpAddress = "";
this.VipPoint = 0;
this.VipPointSave = 0;
this.CoinFish = 0;
this.UserIdFish = 0;
this.UsernameFish = "";
this.PasswordFish = "";
this.BitcoinToken = "";
o.default.setUserPass("");
};
e.getVipPointName = function() {
for (var e = this.VipPoints.length - 1; e >= 0; e--) if (t.Login.VipPoint > this.VipPoints[e]) return this.VipPointsName[e + 1];
return this.VipPointsName[0];
};
e.getVipPointNextLevel = function() {
for (var e = this.VipPoints.length - 1; e >= 0; e--) if (t.Login.VipPoint > this.VipPoints[e]) return e == this.VipPoints.length - 1 ? this.VipPoints[e] : this.VipPoints[e + 1];
return this.VipPoints[0];
};
e.getVipPointIndex = function() {
for (var e = this.VipPoints.length - 1; e >= 0; e--) if (t.Login.VipPoint > this.VipPoints[e]) return e;
return 0;
};
e.UserId = 0;
e.Username = "thinh1234";
e.Password = "123456";
e.Nickname = "";
e.Avatar = "";
e.Coin = 0;
e.IsLogin = !1;
e.AccessToken = "";
e.SessionKey = "";
e.LuckyWheel = 0;
e.CreateTime = "";
e.Birthday = "";
e.IpAddress = "";
e.VipPoint = 0;
e.VipPointSave = 0;
e.MailCount = 0;
e.CoinFish = 0;
e.UserIdFish = 0;
e.UsernameFish = "";
e.PasswordFish = "";
e.FishConfigs = null;
e.BitcoinToken = "";
e.VipPoints = [ 80, 800, 4500, 8600, 12e3, 5e4, 1e6, 2e6 ];
e.VipPointsName = [ "Đá", "Đồng", "Bạc", "Vàng", "BK1", "BK2", "KC1", "KC2", "KC3" ];
return e;
}();
t.Login = e;
var i = function() {
function e() {}
e.getServerConfig = function() {
c.default.get(t.App.API, {
c: 130
}, function(t, i) {
if (null == t) {
e.SERVER_CONFIG.ratioNapThe = i.ratio_nap_the;
e.SERVER_CONFIG.ratioTransfer = i.ratio_chuyen;
e.SERVER_CONFIG.ratioTransferDL = i.ratio_transfer_dl_1;
e.SERVER_CONFIG.ratioRutThe = i.ratio_mua_the;
e.BILLING_CONF = i;
}
});
};
e.getPlatformName = function() {
return cc.sys.isNative && cc.sys.os == cc.sys.OS_ANDROID ? "android" : cc.sys.isNative && cc.sys.os == cc.sys.OS_IOS ? "ios" : "web";
};
e.getLinkFanpage = function() {
s.default.CPName;
return "https://www.facebook.com/101181671766152";
};
e.getLinkTelegram = function() {
s.default.CPName;
return "kingwin_otp_bot";
};
e.getLinkTelegramGroup = function() {
s.default.CPName;
return "kingwin_otp_bot";
};
e.init = function() {
switch (s.default.ENV) {
case s.default.ENV_LOCAL:
this.USE_WSS = !1;
this.HOT_UPDATE_URL = "http://" + s.default.DOMAIN_LOCAL + "/remote-assets/";
this.SUBPACKAGE_URL = "http://" + s.default.DOMAIN_LOCAL + "/remote-assets/";
this.DOMAIN = s.default.DOMAIN_LOCAL + "/";
this.API = "http://" + s.default.DOMAIN_LOCAL + ":8081/api";
this.MONEY_TYPE = 1;
this.LINK_DOWNLOAD = "http://" + s.default.DOMAIN_LOCAL + "/landing";
this.LINK_EVENT = "http://" + s.default.DOMAIN_LOCAL + "event";
this.LINK_SUPPORT = "" + s.default.DOMAIN_LOCAL;
this.HOST_MINIGAME.host = "" + s.default.DOMAIN_LOCAL;
this.HOST_MINIGAME.port = 1644;
this.HOST_TAI_XIU_MINI2.host = "overunder." + s.default.DOMAIN_LOCAL;
this.HOST_SLOT.host = "" + s.default.DOMAIN_LOCAL;
this.HOST_SLOT.port = 1844;
this.HOST_TLMN.host = "" + s.default.DOMAIN_LOCAL;
this.HOST_TLMN.port = 2144;
this.HOST_SAM.host = "" + s.default.DOMAIN_LOCAL;
this.HOST_SAM.port = 1944;
this.HOST_XOCDIA.host = "" + s.default.DOMAIN_LOCAL;
this.HOST_XOCDIA.port = 2344;
this.HOST_BACAY.host = "wbacay." + s.default.DOMAIN_LOCAL;
this.HOST_BACAY.port = 443;
this.HOST_BAICAO.host = "wbaicao." + s.default.DOMAIN_LOCAL;
this.HOST_BAICAO.port = 443;
this.HOST_POKER.host = "wpoker." + s.default.DOMAIN_LOCAL;
this.HOST_POKER.port = 443;
this.HOST_XIDACH.host = "wxizach." + s.default.DOMAIN_LOCAL;
this.HOST_XIDACH.port = 443;
this.HOST_BINH.host = "wbinh." + s.default.DOMAIN_LOCAL;
this.HOST_BINH.port = 443;
this.HOST_LIENG.host = "wlieng." + s.default.DOMAIN_LOCAL;
this.HOST_LIENG.port = 443;
this.HOST_SHOOT_FISH.host = "wbanca." + s.default.DOMAIN_LOCAL;
this.HOST_SHOOT_FISH.port = 443;
break;

case s.default.ENV_DEV:
this.USE_WSS = !0;
this.HOT_UPDATE_URL = "https://" + s.default.DOMAIN_DEV + "/remote-assets/";
this.SUBPACKAGE_URL = "https://" + s.default.DOMAIN_DEV + "/remote-assets/";
this.DOMAIN = "https://" + s.default.DOMAIN_DEV + "/";
this.API = "https://iportal." + s.default.DOMAIN_DEV + "/api";
this.MONEY_TYPE = 1;
this.LINK_DOWNLOAD = "https://" + s.default.DOMAIN_DEV;
this.LINK_EVENT = "https://" + s.default.DOMAIN_DEV + "/event";
this.LINK_SUPPORT = "https://www.comm100.com/";
this.HOST_MINIGAME.host = "wmini." + s.default.DOMAIN_DEV;
this.HOST_TAI_XIU_MINI2.host = "overunder." + s.default.DOMAIN_DEV;
this.HOST_SLOT.host = "wslot." + s.default.DOMAIN_DEV;
this.HOST_TLMN.host = "wtlmn." + s.default.DOMAIN_DEV;
this.HOST_SHOOT_FISH.host = "wbanca." + s.default.DOMAIN_DEV;
this.HOST_SAM.host = "wsam." + s.default.DOMAIN_DEV;
this.HOST_XOCDIA.host = "wxocdia." + s.default.DOMAIN_DEV;
this.HOST_BACAY.host = "wbacay." + s.default.DOMAIN_DEV;
this.HOST_BAICAO.host = "wbaicao." + s.default.DOMAIN_DEV;
this.HOST_POKER.host = "wpoker." + s.default.DOMAIN_DEV;
this.HOST_XIDACH.host = "wxizach." + s.default.DOMAIN_DEV;
this.HOST_BINH.host = "wbinh." + s.default.DOMAIN_DEV;
this.HOST_LIENG.host = "wlieng." + s.default.DOMAIN_DEV;
this.LINK_GROUP = "https://www.facebook.com/101181671766152/";
console.log(s.default.ENV);
break;

case s.default.ENV_PROD:
default:
this.USE_WSS = !0;
this.HOT_UPDATE_URL = "https://" + s.default.DOMAIN_DEV + "/remote-assets/";
this.SUBPACKAGE_URL = "https://" + s.default.DOMAIN_DEV + "/remote-assets/";
this.DOMAIN = "https://" + s.default.DOMAIN_DEV + "/";
this.API = "https://iportal." + s.default.DOMAIN_DEV + "/api";
this.MONEY_TYPE = 1;
this.LINK_DOWNLOAD = "https://" + s.default.DOMAIN_DEV;
this.LINK_EVENT = "https://" + s.default.DOMAIN_DEV + "/event";
this.LINK_SUPPORT = "https://www.comm100.com/";
this.HOST_MINIGAME.host = "wmini." + s.default.DOMAIN_DEV;
this.HOST_TAI_XIU_MINI2.host = "overunder." + s.default.DOMAIN_DEV;
this.HOST_SLOT.host = "wslot." + s.default.DOMAIN_DEV;
this.HOST_TLMN.host = "wtlmn." + s.default.DOMAIN_DEV;
this.HOST_SHOOT_FISH.host = "wbanca." + s.default.DOMAIN_DEV;
this.HOST_SAM.host = "wsam." + s.default.DOMAIN_DEV;
this.HOST_XOCDIA.host = "wxocdia." + s.default.DOMAIN_DEV;
this.HOST_BACAY.host = "wbacay." + s.default.DOMAIN_DEV;
this.HOST_BAICAO.host = "wbaicao." + s.default.DOMAIN_DEV;
this.HOST_POKER.host = "wpoker." + s.default.DOMAIN_DEV;
this.HOST_XIDACH.host = "wxizach." + s.default.DOMAIN_DEV;
this.HOST_BINH.host = "wbinh." + s.default.DOMAIN_DEV;
this.HOST_LIENG.host = "wlieng." + s.default.DOMAIN_DEV;
this.LINK_GROUP = "https://www.facebook.com/groups/kingwin.vin";
console.log(s.default.ENV);
}
};
e.HOT_UPDATE_URL = "https://kingwin.vin/remote-assets/";
e.SUBPACKAGE_URL = "https://kingwin.vin/remote-assets/";
e.DOMAIN = "https://kingwin.vin";
e.API = "https://iportal.kingwin.vin/api";
e.MONEY_TYPE = 1;
e.LINK_DOWNLOAD = "https://kingwin.vin/download";
e.LINK_EVENT = "https://kingwin.vin/event";
e.LINK_SUPPORT = "https://kingwin.vin";
e.USE_WSS = !0;
e.LINK_GROUP = "https://www.facebook.com/101181671766152";
e.options = {
rememberUpgrade: !0,
transports: [ "websocket" ],
secure: !0,
rejectUnauthorized: !1,
reconnection: !0,
autoConnect: !0,
auth: {
token: "WERTWER34534FGHFGBFVBCF345234XCVASD"
}
};
e.HOST_MINIGAME = {
host: "wmini.kingwin.vin",
port: 443
};
e.HOST_TAI_XIU_MINI2 = {
host: "overunder.kingwin.vin",
port: 443
};
e.HOST_SLOT = {
host: "wslot.kingwin.vin",
port: 443
};
e.HOST_TLMN = {
host: "wltmn.kingwin.vin",
port: 443
};
e.HOST_SHOOT_FISH = {
host: "wbanca.kingwin.vin",
port: 443
};
e.HOST_SAM = {
host: "wsam.kingwin.vin",
port: 443
};
e.HOST_XOCDIA = {
host: "wxocdia.kingwin.vin",
port: 443
};
e.HOST_BACAY = {
host: "wbacay.kingwin.vin",
port: 443
};
e.HOST_BAICAO = {
host: "wbaicao.kingwin.vin",
port: 443
};
e.HOST_POKER = {
host: "wpoker.kingwin.vin",
port: 443
};
e.HOST_XIDACH = {
host: "wpoker.kingwin.vin",
port: 443
};
e.HOST_BINH = {
host: "wpoker.kingwin.vin",
port: 443
};
e.HOST_LIENG = {
host: "wpoker.kingwin.vin",
port: 443
};
e.SERVER_CONFIG = {
ratioNapThe: 1,
ratioNapMomo: 1.2,
ratioTransfer: .98,
ratioTransferDL: 1,
listTenNhaMang: [ "Viettel", "Vinaphone", "Mobifone", "Vietnamobile" ],
listIdNhaMang: [ 0, 1, 2, 3 ],
listMenhGiaNapThe: [ 1e4, 2e4, 3e4, 5e4, 1e5, 2e5, 5e5 ],
ratioRutThe: 1.2
};
e.CASHOUT_CARD_CONFIG = {
listTenNhaMang: [ "Viettel", "Vinaphone", "Mobifone", "Vietnamobile", "Garena", "Vcoin", "FPT Gate", "Mobi Data" ],
listIdNhaMang: [ "VTT", "VNP", "VMS", "VNM", "GAR", "VTC", "FPT", "DBM" ],
listMenhGiaNapThe: [ 1e4, 1e5, 2e5, 5e5 ],
listQuantity: [ "1", "2", "3" ]
};
return e;
}();
t.App = i;
var n = function() {
function t() {}
t.getGameName = function(t) {
switch (t) {
case this.MiniPoker:
return "MiniPoker";

case this.TaiXiu:
return "Tài xỉu";

case this.BauCua:
return "Bầu cua";

case this.CaoThap:
return "Cao thấp";

case this.Slot3x3:
return "Slot3x3";

case this.VQMM:
return "VQMM";

case this.Sam:
return "Sâm";

case this.MauBinh:
return "Mậu binh";

case this.TLMN:
return "TLMN";

case this.TaLa:
return "Tá lả";

case this.Lieng:
return "Liêng";

case this.XiTo:
return "Xì tố";

case this.XocXoc:
return "Xóc xóc";

case this.BaiCao:
return "Bài cào";

case this.Poker:
return "Poker";

case this.Bentley:
return "Bentley";

case this.RangeRover:
return "Range Rover";

case this.MayBach:
return "May Bach";

case this.RollsRoyce:
return "Rolls Royce";
}
return "Unknow";
};
t.MiniPoker = 1;
t.TaiXiu = 2;
t.BauCua = 3;
t.CaoThap = 4;
t.Slot3x3 = 5;
t.VQMM = 7;
t.Sam = 8;
t.BaCay = 9;
t.MauBinh = 10;
t.TLMN = 11;
t.TaLa = 12;
t.Lieng = 13;
t.XiTo = 14;
t.XocXoc = 15;
t.BaiCao = 16;
t.Poker = 17;
t.Bentley = 19;
t.RangeRover = 20;
t.MayBach = 21;
t.RollsRoyce = 22;
return t;
}();
t.GameId = n;
})(n || (n = {}));
i.default = n;
n.App.init();
cc._RF.pop();
}, {
"./Http": "Http",
"./SPUtils": "SPUtils",
"./VersionConfig": "VersionConfig"
} ],
Config: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "05c18T81bpMJoySqeB29I5A", "Config");
e.exports = {
HOST: "http://127.0.0.1:8080",
SOCKET: "ws://127.0.0.1:8080"
};
cc._RF.pop();
}, {} ],
ConfirmDialog: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "d2ba1FAR7NFVK4X4KMOiW6z", "ConfirmDialog");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("./Dialog2"), o = cc._decorator, c = o.ccclass, s = o.property, a = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.lblMessage = null;
e.lblDone = null;
e.lblConfirm = null;
e.onDismissed = null;
e.onConfirmClicked = null;
e.isClickdConfirm = !1;
return e;
}
e.prototype.show1 = function(t) {
this.show4(t);
};
e.prototype.show2 = function(t, e) {
this.show4(t, null, null, e);
};
e.prototype.show3 = function(t, e, i) {
this.show4(t, null, e, i);
};
e.prototype.show4 = function(e, i, n, o) {
this.isClickdConfirm = !1;
this.lblDone.string = i || "Hủy";
this.lblConfirm.string = n || "Đồng ý";
this.onDismissed = o;
this.lblMessage.string = e;
t.prototype.show.call(this);
};
e.prototype.actConfirm = function() {
this.isClickdConfirm = !0;
this.dismiss();
};
e.prototype._onShowed = function() {
n.default.prototype._onShowed.call(this);
};
e.prototype._onDismissed = function() {
n.default.prototype._onDismissed.call(this);
"function" == typeof this.onDismissed && this.onDismissed(this.isClickdConfirm);
};
__decorate([ s(cc.Label) ], e.prototype, "lblMessage", void 0);
__decorate([ s(cc.Label) ], e.prototype, "lblDone", void 0);
__decorate([ s(cc.Label) ], e.prototype, "lblConfirm", void 0);
return e = __decorate([ c ], e);
}(n.default);
i.default = a;
cc._RF.pop();
}, {
"./Dialog2": "Dialog2"
} ],
"CustomUI.Dropdown": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "b81d3z5VwhM85GAeyQWdMCP", "CustomUI.Dropdown");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = cc._decorator, o = n.ccclass, c = n.property, s = n.requireComponent, a = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.label = null;
e.template = null;
e.options = [];
e.value = 0;
e.blocker = null;
e.dropdownList = null;
e.animating = !1;
return e;
}
e.prototype.onLoad = function() {
var t = this;
this.template.active = !1;
var e = this.findParent();
this.node.on("click", function() {
if (!t.animating) {
t.animating = !0;
t.blocker = t.addBlocker(e);
t.dropdownList = cc.instantiate(t.template);
t.dropdownList.getComponent(cc.Widget).enabled = !1;
t.dropdownList.parent = t.blocker;
t.dropdownList.name = "dropdownList";
var i = t.template.convertToWorldSpaceAR(t.template.position);
t.dropdownList.position = t.dropdownList.convertToNodeSpaceAR(i);
t.dropdownList.active = !0;
t.dropdownList.scaleY = 0;
t.dropdownList.opacity = 0;
t.dropdownList.stopAllActions();
t.dropdownList.runAction(cc.sequence(cc.spawn(cc.scaleTo(.3, 1, 1).easing(cc.easeBackOut()), cc.fadeIn(.15)), cc.callFunc(function() {
t.animating = !1;
})));
var n = t.dropdownList.getComponent(cc.ScrollView).content, o = n.children[0];
o.active = !1;
for (var c = function(e) {
var i = cc.instantiate(o);
i.parent = o.parent;
i.active = !0;
i.getComponentInChildren(cc.Label).string = t.options[e];
i.getComponentInChildren(cc.Sprite).node.active = e == t.value;
i.on("click", function() {
t.setValue(e);
null != t.onValueChanged && t.onValueChanged(e);
t.dismiss();
});
if (e == t.value) {
var c = n.position;
c.y = o.height * e - o.height / 2;
n.position = c;
}
}, s = 0; s < t.options.length; s++) c(s);
}
});
};
e.prototype.onEnable = function() {
null != this.blocker && this.blocker.destroy();
};
e.prototype.onDestroy = function() {
null != this.blocker && this.blocker.destroy();
};
e.prototype.addBlocker = function(t) {
var e = this, i = new cc.Node("blocker");
i.parent = t;
i.addComponent(cc.Button);
i.zIndex = 3e4;
var n = i.addComponent(cc.Widget);
n.isAlignTop = !0;
n.top = 0;
n.isAlignBottom = !0;
n.bottom = 0;
n.isAlignLeft = !0;
n.left = 0;
n.isAlignRight = !0;
n.right = 0;
i.on("click", function() {
e.dismiss();
});
cc.director.on(cc.Director.EVENT_BEFORE_SCENE_LOADING, function() {
e.onDestroy();
});
return i;
};
e.prototype.findParent = function(t) {
void 0 === t && (t = null);
null == t && (t = this.node);
return null == t.parent || t.parent instanceof cc.Scene ? t : this.findParent(t.parent);
};
e.prototype.dismiss = function() {
var t = this;
if (!this.animating) {
this.animating = !0;
this.dropdownList.stopAllActions();
this.dropdownList.runAction(cc.sequence(cc.spawn(cc.scaleTo(.3, 1, 0).easing(cc.easeBackIn()), cc.sequence(cc.delayTime(.15), cc.fadeOut(.15))), cc.callFunc(function() {
t.blocker.destroy();
t.blocker = null;
t.animating = !1;
})));
}
};
e.prototype.setOptions = function(t) {
this.options = t;
};
e.prototype.setValue = function(t) {
this.value = t;
this.label.string = this.options[this.value];
};
e.prototype.getValue = function() {
return this.value;
};
e.prototype.getLabelString = function() {
return this.label.string;
};
e.prototype.setOnValueChange = function(t) {
this.onValueChanged = t;
};
__decorate([ c(cc.Label) ], e.prototype, "label", void 0);
__decorate([ c(cc.Node) ], e.prototype, "template", void 0);
return e = __decorate([ o, s(cc.Button) ], e);
}(cc.Component);
i.default = a;
cc._RF.pop();
}, {} ],
"CustomUI.PageView": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "ceabdBtOklPuoiWtcN+Swi6", "CustomUI.PageView");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = cc._decorator, o = n.ccclass, c = n.property, s = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.autoInit = !0;
e.infinity = !0;
e.cancelInnerEvents = !0;
e.spacing = 30;
e.moveOffset = 30;
e.content = null;
e.items = null;
e.pages = null;
e.indicator = null;
e.index = 0;
e.pageCount = 0;
e.left = null;
e.center = null;
e.right = null;
e.pageItems = [];
e.touchMoved = !1;
e.onTouchStart = null;
e.onTouchMove = null;
e.onTouchEndOrCancel = null;
e.onPageChanged = null;
return e;
}
e.prototype.onLoad = function() {
var t = this;
cc.PageView;
this.node.on(cc.Node.EventType.TOUCH_START, function(e) {
t.touchMoved = !1;
null != t.onTouchStart && t.onTouchStart();
}, this.node, !0);
this.node.on(cc.Node.EventType.TOUCH_MOVE, function(e) {
if (t.cancelInnerEvents) {
if (t.touchMoved) {
var i = t.items.position;
i.x += e.getDeltaX();
var n = t.content.width + t.spacing;
t.infinity || (t.items.position.x > 0 && 0 == t.index ? n = t.moveOffset : t.items.position.x < 0 && t.index == t.pageCount - 1 && (n = t.moveOffset));
Math.abs(i.x) > n && (i.x = i.x > 0 ? n : -n);
t.items.position = i;
null != t.onTouchMove && t.onTouchMove();
}
if (e.touch.getLocation().sub(e.touch.getStartLocation()).mag() > 7 && !t.touchMoved && e.target != t.node) {
console.log(e.target);
var o = new cc.Event.EventTouch(e.getTouches(), e.bubbles);
o.type = cc.Node.EventType.TOUCH_CANCEL;
o.touch = e.touch;
e.target.dispatchEvent(o);
t.touchMoved = !0;
}
}
}, this.node, !0);
var e = function(e) {
if (t.touchMoved) {
if (Math.abs(t.items.position.x) > t.content.width / 4) {
var i = t.index, n = cc.Vec2.ZERO;
if (t.infinity) if (t.items.position.x < 0) {
++i > t.pageCount - 1 && (i = 0);
n = cc.v2(-t.content.width - t.spacing, 0);
} else {
--i < 0 && (i = t.pageCount - 1);
n = cc.v2(t.content.width + t.spacing, 0);
} else {
t.items.position.x < 0 && i < t.pageItems.length - 1 ? i++ : t.items.position.x > 0 && i >= 1 && i--;
n = t.index > i ? cc.v2(t.content.width + t.spacing, 0) : cc.v2(-t.content.width - t.spacing, 0);
}
if (t.index != i) {
t.items.stopAllActions();
t.items.runAction(cc.sequence(cc.moveTo((t.content.width + t.spacing - Math.abs(t.items.position.x)) / (t.content.width + t.spacing) * .5, n), cc.callFunc(function() {
t.setPageIndex(i);
null != t.onPageChanged && t.onPageChanged();
})));
} else {
t.items.stopAllActions();
t.items.runAction(cc.sequence(cc.moveTo(.3, cc.Vec2.ZERO), cc.callFunc(function() {})));
}
} else {
t.items.stopAllActions();
t.items.runAction(cc.sequence(cc.moveTo(.3, cc.Vec2.ZERO), cc.callFunc(function() {})));
}
null != t.onTouchEndOrCancel && t.onTouchEndOrCancel();
}
};
this.node.on(cc.Node.EventType.TOUCH_END, e, this.node, !0);
this.node.on(cc.Node.EventType.TOUCH_CANCEL, e, this.node, !0);
for (var i = 0; i < this.pages.childrenCount; i++) this.pages.children[i].active = !1;
this.left = new cc.Node();
this.left.parent = this.items;
this.left.position = cc.v2(-this.content.width - this.spacing, 0);
this.left.active = !0;
this.center = new cc.Node();
this.center.parent = this.items;
this.center.position = cc.v2(0, 0);
this.center.active = !0;
this.right = new cc.Node();
this.right.parent = this.items;
this.right.position = cc.v2(this.content.width + this.spacing, 0);
this.right.active = !0;
this.autoInit && this.init();
};
e.prototype.init = function() {
for (var t = 1; t < this.indicator.childrenCount; t++) {
this.indicator.children[t].destroy();
t--;
}
this.indicator.children[0].active = !1;
this.pageCount = this.pages.childrenCount;
console.log("PageCount: " + this.pageCount);
for (t = 0; t < this.pages.childrenCount; t++) {
this.pageItems.push(this.pages.children[t]);
var e = cc.instantiate(this.indicator.children[0]);
e.parent = this.indicator;
e.active = !0;
}
this.setPageIndex(0);
};
e.prototype.scrollToIndex = function(t, e) {
var i = this;
void 0 === e && (e = !1);
if (this.index != t) {
var n = cc.Vec2.ZERO;
n = this.infinity ? e ? cc.v2(this.content.width + this.spacing, 0) : cc.v2(-this.content.width - this.spacing, 0) : this.index > t ? cc.v2(this.content.width + this.spacing, 0) : cc.v2(-this.content.width - this.spacing, 0);
this.items.stopAllActions();
this.infinity || 1 == Math.abs(this.index - t) || Math.abs(this.index - t) != this.pageCount - 1 ? this.items.runAction(cc.sequence(cc.moveTo(.5, n), cc.callFunc(function() {
i.setPageIndex(t);
}))) : this.setPageIndex(t);
}
};
e.prototype.scrollToNextIndex = function() {
var t = this.index + 1;
t >= this.pageCount && (t = 0);
this.scrollToIndex(t, !1);
};
e.prototype.setPageIndex = function(t) {
this.index = t;
for (var e = 0; e < this.pageItems.length; e++) this.pageItems[e].active = !1;
if (this.infinity) {
var i = this.index - 1;
i < 0 && (i = this.pageCount - 1);
this.pageItems[i].active = !0;
this.pageItems[i].parent = this.left;
i = this.index;
this.pageItems[i].active = !0;
this.pageItems[i].parent = this.center;
(i = this.index + 1) > this.pageCount - 1 && (i = 0);
this.pageItems[i].active = !0;
this.pageItems[i].parent = this.right;
} else {
if (this.pageCount >= 3 && this.index >= 1) {
this.pageItems[this.index - 1].active = !0;
this.pageItems[this.index - 1].parent = this.left;
}
if (this.pageCount >= this.index + 1) {
this.pageItems[this.index].active = !0;
this.pageItems[this.index].parent = this.center;
}
if (this.pageCount >= 2 && this.index < this.pageCount - 1) {
this.pageItems[this.index + 1].active = !0;
this.pageItems[this.index + 1].parent = this.right;
}
}
this.items.position = cc.Vec2.ZERO;
this.updateIndicator();
};
e.prototype.updateIndicator = function() {
for (var t = 1; t < this.indicator.childrenCount; t++) {
var e = this.indicator.children[t];
e.parent = this.indicator;
var i = t - 1 == this.index;
e.getChildByName("active").active = i;
e.getChildByName("inactive").active = !i;
}
};
__decorate([ c ], e.prototype, "autoInit", void 0);
__decorate([ c ], e.prototype, "infinity", void 0);
__decorate([ c ], e.prototype, "cancelInnerEvents", void 0);
__decorate([ c ], e.prototype, "spacing", void 0);
__decorate([ c ], e.prototype, "moveOffset", void 0);
__decorate([ c(cc.Node) ], e.prototype, "content", void 0);
__decorate([ c(cc.Node) ], e.prototype, "items", void 0);
__decorate([ c(cc.Node) ], e.prototype, "pages", void 0);
__decorate([ c(cc.Node) ], e.prototype, "indicator", void 0);
return e = __decorate([ o ], e);
}(cc.Component);
i.default = s;
cc._RF.pop();
}, {} ],
DEvent: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "84193OGZrdD/YtGX/ttIqDX", "DEvent");
var n = t("EventTaiXiu"), o = t("EventAngrybird"), c = t("EventBigBabol"), s = t("EventMiniPoker");
cc.Class({
extends: cc.Component,
properties: {
menu: cc.Node,
content: cc.Node,
eventAngrybird: o,
eventBigBabol: c,
eventMiniPoker: s,
eventTaiXiu: n
},
selectEvent: function(t) {
Promise.all(this.menu.children.map(function(e) {
e.name == t.target.name ? e.children[0].active = !0 : e.children[0].active = !1;
}));
Promise.all(this.content.children.map(function(e) {
e.name == t.target.name ? e.active = !0 : e.active = !1;
}));
},
onBackPopup: function() {
cc.RedT.inGame.dialog.onClickBack();
},
onData: function(t) {
t.taixiu && this.eventTaiXiu.onData(t.taixiu);
},
onHU: function(t) {
this.eventMiniPoker.onData(t.mini_poker);
this.eventAngrybird.onData(t.arb);
this.eventBigBabol.onData(t.big_babol);
}
});
cc._RF.pop();
}, {
EventAngrybird: "EventAngrybird",
EventBigBabol: "EventBigBabol",
EventMiniPoker: "EventMiniPoker",
EventTaiXiu: "EventTaiXiu"
} ],
DaiLyItem: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "b7aaeKYwLJKJq8vTYZox9Y7", "DaiLyItem");
cc.Class({
extends: cc.Component,
properties: {
bg: {
default: null,
type: cc.Node
},
STT: {
default: null,
type: cc.Label
},
DaiLy: {
default: null,
type: cc.Label
},
NICKNAME: {
default: null,
type: cc.Label
},
Phone: {
default: null,
type: cc.Label
},
Location: {
default: null,
type: cc.Label
},
FB: ""
},
init: function(t, e, i) {
this.controll = t;
this.STT.string = i + 1;
this.DaiLy.string = e.name;
this.NICKNAME.string = e.nickname;
this.Phone.string = e.phone;
this.Location.string = e.location;
this.FB = "" + e.fb;
},
onChuyenClick: function() {
cc.RedT.audio.playClick();
this.controll.selectDaiLy(this);
},
onFBClick: function() {
cc.sys.openURL(this.FB);
}
});
cc._RF.pop();
}, {} ],
DaiLy: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "b2599J2kUJKEJrW8Rbw7gxN", "DaiLy");
var n = t("BrowserUtil"), o = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
header: {
default: null,
type: cc.Node
},
body: {
default: null,
type: cc.Node
},
nickname: {
default: null,
type: cc.EditBox
},
renickname: {
default: null,
type: cc.EditBox
},
red: {
default: null,
type: cc.EditBox
},
messenger: {
default: null,
type: cc.EditBox
},
otp: {
default: null,
type: cc.EditBox
},
rednhan: {
default: null,
type: cc.Label
},
scrollview: {
default: null,
type: cc.Node
},
prefabDaiLy: {
default: null,
type: cc.Prefab
},
checkDaiLy: {
default: [],
type: cc.Node
},
typeOTP: "",
TienTe: cc.EditBox,
labelTienTe: cc.Label,
tiente: "",
moreTienTe: cc.Node
},
init: function() {
this.isdaily = !1;
this.meDaily = !1;
this.daily_list = [];
var t = this;
this.isLoaded = !1;
this.editboxs = [ this.nickname, this.renickname, this.red, this.messenger, this.otp ];
this.keyHandle = function(e) {
return e.keyCode === cc.macro.KEY.tab ? (t.isTop() && t.changeNextFocusEditBox(), 
e.preventDefault && e.preventDefault(), !1) : e.keyCode === cc.macro.KEY.enter ? (n.focusGame(), 
t.onChuyenClick(), e.preventDefault && e.preventDefault(), !1) : void 0;
};
},
onEnable: function() {
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
Promise.all(this.checkDaiLy.map(function(t) {
t.active = !1;
}));
this.isLoaded || cc.RedT.send({
shop: {
get_daily: {
game: "baito",
vung: !0
}
}
});
},
onBackPopup: function() {
cc.RedT.inGame.dialog.onClickBack();
},
onDisable: function() {
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
this.clean();
Promise.all(this.checkDaiLy.map(function(t) {
t.active = !1;
}));
},
addEvent: function() {
cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
for (var t in this.editboxs) n.getHTMLElementByEditBox(this.editboxs[t]).addEventListener("keydown", this.keyHandle, !1);
},
removeEvent: function() {
for (var t in this.editboxs) n.getHTMLElementByEditBox(this.editboxs[t]).removeEventListener("keydown", this.keyHandle, !1);
cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
},
onKeyDown: function(t) {
switch (t.keyCode) {
case cc.macro.KEY.tab:
this.isTop() && this.changeNextFocusEditBox();
break;

case cc.macro.KEY.enter:
this.isTop() && this.onChuyenClick();
}
},
changeNextFocusEditBox: function() {
for (var t = !1, e = 0, i = this.editboxs.length; e < i; e++) if (n.checkEditBoxFocus(this.editboxs[e])) {
n.focusEditBox(this.editboxs[e]);
t = !0;
break;
}
!t && 0 < this.editboxs.length && n.focusEditBox(this.editboxs[0]);
},
isTop: function() {
return !cc.RedT.inGame.notice.node.active && !cc.RedT.inGame.loading.active;
},
clean: function() {
this.nickname.string = this.renickname.string = this.red.string = this.messenger.string = this.rednhan.string = "";
Promise.all(this.daily_list.map(function(t) {
t.bg.active = !1;
}));
},
onChuyenClick: function() {
var t = null;
if (o.isEmpty(this.nickname.string) || o.isEmpty(this.renickname.string) || o.isEmpty(this.red.string)) {
console.log("vao?????????????", 18);
t = "Kiểm tra lại các thông tin...";
} else o.isEmpty(this.nickname.string) || o.isEmpty(this.renickname.string) ? t = "Tên nhân vật không được bỏ trống" : this.nickname.string != this.renickname.string ? t = "Tên nhân vật không khớp.!!" : o.getOnlyNumberInString(this.red.string) < 1e4 ? t = "Số tiền chuyển tối thiểu là 10.000 VIN." : o.isEmpty(this.otp.string) && (t = "Vui lòng nhập mã OTP.");
if (t) cc.RedT.inGame.notice.show({
title: "CHUYỂN VIN",
text: t
}); else {
var e = {
name: this.nickname.string,
red: o.getOnlyNumberInString(this.red.string),
otp: this.otp.string
};
o.isEmpty(this.messenger.string.trim()) || (e = Object.assign(e, {
message: this.messenger.string
}));
cc.RedT.send({
shop: {
chuyen_red: e
}
});
}
},
onSelectHead: function(t, e) {
Promise.all(this.header.children.map(function(t) {
t.name == e ? t.getComponent("itemHeadMenuV2").select() : t.getComponent("itemHeadMenuV2").unselect();
}));
Promise.all(this.body.children.map(function(t) {
t.name == e ? t.active = !0 : t.active = !1;
}));
},
onDaiLy: function(t) {
var e = this;
if (t.length) {
var i = this;
i.scrollview.removeAllChildren();
this.clean();
var n = new RegExp("^" + cc.RedT.user.name + "$", "i");
this.suffleDaiLy(t);
Promise.all(t.map(function(t, e) {
!i.meDaily && (i.meDaily = n.test(t.nickname));
var o = cc.instantiate(i.prefabDaiLy), c = o.getComponent("ChuyenRed_daily");
c.init(i, t, e);
i.scrollview.addChild(o);
return c;
})).then(function(t) {
e.daily_list = t;
});
}
},
suffleDaiLy: function(t) {
for (var e, i, n = t.length; 0 !== n; ) {
i = Math.floor(Math.random() * n);
e = t[n -= 1];
t[n] = t[i];
t[i] = e;
}
return t;
},
reCheckMeDL: function() {
this.meDaily = !1;
if (this.daily_list.length) {
var t = this, e = new RegExp("^" + cc.RedT.user.name + "$", "i");
Promise.all(this.daily_list.map(function(i) {
!t.meDaily && (t.meDaily = e.test(i.NICKNAME.string));
}));
}
},
selectVietNam: function() {
cc.RedT.send({
shop: {
get_daily: {
game: "baito",
vung: "vn"
}
}
});
},
selectNhatBan: function() {
cc.RedT.send({
shop: {
get_daily: {
game: "baito",
vung: "jp"
}
}
});
},
selectHanQuoc: function() {
cc.RedT.send({
shop: {
get_daily: {
game: "baito",
vung: "kr"
}
}
});
},
selectDaiLoan: function() {
cc.RedT.send({
shop: {
get_daily: {
game: "baito",
vung: "tw"
}
}
});
},
selectKhac: function() {
cc.RedT.send({
shop: {
get_daily: {
game: "baito",
vung: "all"
}
}
});
},
onData: function(t) {
if (void 0 !== t.daily && !this.isLoaded) {
this.data = t.daily;
this.isLoaded = !0;
this.onDaiLy(t.daily);
}
},
selectDaiLy: function(t) {
var e = this;
this.onSelectHead(null, "ChuyenRed_QuyDinh");
Promise.all(this.checkDaiLy.map(function(t) {
t.active = !0;
}));
Promise.all(this.daily_list.map(function(i) {
if (i == t) {
e.isdaily = !0;
i.bg.active = !0;
e.nickname.string = e.renickname.string = i.NICKNAME.string;
e.onChangerRed(0, !0);
} else i.bg.active = !1;
}));
},
onChangerNick: function(t) {
this.isdaily = !1;
Promise.all(this.checkDaiLy.map(function(t) {
t.active = !1;
}));
if (this.daily_list.length > 0) {
var e = this;
Promise.all(this.daily_list.map(function(i) {
if (new RegExp("^" + t + "$", "i").test(i.NICKNAME.string)) {
Promise.all(e.checkDaiLy.map(function(t) {
t.active = !0;
}));
e.isdaily = !0;
i.bg.active = !0;
} else i.bg.active = !1;
}));
}
this.onChangerRed(0, !0);
},
onChangerRed: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1] ? this.red.string : t;
t = o.numberWithCommas(o.getOnlyNumberInString(t));
this.red.string = 0 == t ? "" : t;
var e = o.getOnlyNumberInString(t);
if (this.meDaily) {
"VND" == this.tiente && (this.TienTe.string = o.numberWithCommas(Math.floor(.85 * e / 1)));
"YEN" == this.tiente && (this.TienTe.string = o.numberWithCommas(Math.floor(.85 * e / 207.3170731707317)));
"TWD" == this.tiente && (this.TienTe.string = o.numberWithCommas(Math.floor(.85 * e / 809.5238095238095)));
"WON" == this.tiente && (this.TienTe.string = o.numberWithCommas(Math.floor(.85 * e / 18.88888888888889)));
} else {
"VND" == this.tiente && (this.TienTe.string = o.numberWithCommas(Math.floor(.8 * e / 1)));
"YEN" == this.tiente && (this.TienTe.string = o.numberWithCommas(Math.floor(.8 * e / 210.52)));
"TWD" == this.tiente && (this.TienTe.string = o.numberWithCommas(Math.floor(.8 * e / 816.3265306122449)));
"WON" == this.tiente && (this.TienTe.string = o.numberWithCommas(Math.floor(.8 * e / 19.04761904761905)));
}
if (this.isdaily || this.meDaily) this.rednhan.string = t; else {
e = o.getOnlyNumberInString(t);
this.rednhan.string = o.numberWithCommas(Math.floor(e - 2 * e / 100));
}
},
onChangerTienTe: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1] ? this.TienTe.string : t;
t = o.numberWithCommas(o.getOnlyNumberInString(t));
this.TienTe.string = 0 == t ? "" : t;
var e = o.getOnlyNumberInString(t);
if (this.meDaily) {
"VND" == this.tiente && (this.red.string = o.numberWithCommas(Math.floor(1 * e / .85)));
"YEN" == this.tiente && (this.red.string = o.numberWithCommas(Math.floor(207.3170731707317 * e / .85)));
"TWD" == this.tiente && (this.red.string = o.numberWithCommas(Math.floor(809.5238095238095 * e / .85)));
"WON" == this.tiente && (this.red.string = o.numberWithCommas(Math.floor(18.88888888888889 * e / .85)));
} else {
"VND" == this.tiente && (this.red.string = o.numberWithCommas(Math.floor(1 * e / .8)));
"YEN" == this.tiente && (this.red.string = o.numberWithCommas(Math.floor(210.52 * e / .8)));
"TWD" == this.tiente && (this.red.string = o.numberWithCommas(Math.floor(816.3265306122449 * e / .8)));
"WON" == this.tiente && (this.red.string = o.numberWithCommas(Math.floor(19.04761904761905 * e / .8)));
}
if (this.isdaily || this.meDaily) this.rednhan.string = this.red.string; else {
e = o.getOnlyNumberInString(this.red.string);
this.rednhan.string = o.numberWithCommas(Math.floor(e - 2 * e / 100));
}
},
TienTeselect: function(t, e) {
t.target.parent.children.forEach(function(t) {
if (t.name === e) {
t.children[0].active = !0;
this.tiente = t.children[1].getComponent(cc.Label).string;
this.labelTienTe.string = t.children[1].getComponent(cc.Label).string;
} else t.children[0].active = !1;
this.moreTienTe.active = !1;
}.bind(this));
},
toggleTienTe: function() {
this.moreTienTe.active = !this.moreTienTe.active;
},
onClickOTP: function() {
cc.RedT.send({
otp: {
type: this.typeOTP
}
});
},
onClickOTPSMS: function() {
cc.RedT.send({
otp: {
type: "2"
}
});
},
onClickOTPTele: function() {
cc.RedT.send({
otp: {
type: "1"
}
});
},
changerTypeOTP: function(t) {
this.typeOTP = t.node.name;
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
DangKyOTP: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "6aa41Wg701MCq0Vmi5zwJ+1", "DangKyOTP");
var n = t("BrowserUtil"), o = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
phone: {
default: null,
type: cc.EditBox
},
otp: {
default: null,
type: cc.EditBox
},
labelMaVung: cc.Label,
mavung: "0",
moreMaVung: cc.Node,
nodeReg: cc.Node,
nodeInfo: cc.Node,
labelPhone: cc.Label,
labelPhone2: cc.Label,
labelEmail: cc.Label,
labelCMT: cc.Label,
typeOTP: ""
},
onLoad: function() {
var t = this;
this.editboxs = [ this.phone, this.otp ];
this.keyHandle = function(e) {
return e.keyCode === cc.macro.KEY.tab ? (t.changeNextFocusEditBox(), e.preventDefault && e.preventDefault(), 
!1) : e.keyCode === cc.macro.KEY.enter ? (n.focusGame(), t.onRegClick(), e.preventDefault && e.preventDefault(), 
!1) : void 0;
};
var e = JSON.parse(cc.sys.localStorage.getItem("infoRed8"));
if (e) {
this.labelPhone.string = e.phone;
this.labelPhone2.string = e.phone;
this.labelEmail.string = e.email;
this.labelCMT.string = e.cmt;
}
},
onEnable: function() {
cc.sys.isBrowser && this.nodeReg.active && this.addEvent();
},
onDisable: function() {
cc.sys.isBrowser && this.nodeReg.active && this.removeEvent();
this.clear();
},
addEvent: function() {
cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
for (var t in this.editboxs) this.editboxs[t] && n.getHTMLElementByEditBox(this.editboxs[t]).addEventListener("keydown", this.keyHandle, !1);
},
removeEvent: function() {
cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
for (var t in this.editboxs) this.editboxs[t] && n.getHTMLElementByEditBox(this.editboxs[t]).removeEventListener("keydown", this.keyHandle, !1);
},
onKeyDown: function(t) {
switch (t.keyCode) {
case cc.macro.KEY.tab:
this.isTop() && this.changeNextFocusEditBox();
break;

case cc.macro.KEY.enter:
this.isTop() && this.onRegClick();
}
},
changeNextFocusEditBox: function() {
for (var t = !1, e = 0, i = this.editboxs.length; e < i; e++) if (n.checkEditBoxFocus(this.editboxs[e])) {
n.focusEditBox(this.editboxs[e]);
t = !0;
break;
}
!t && 0 < this.editboxs.length && n.focusEditBox(this.editboxs[0]);
},
isTop: function() {
return !cc.RedT.inGame.notice.node.active && !cc.RedT.inGame.loading.active;
},
MaVungselect: function(t, e) {
this.mavung = e;
t.target.parent.children.forEach(function(t) {
if (t.name === e) {
t.children[0].active = !0;
this.labelMaVung.string = t.children[1].getComponent(cc.Label).string;
} else t.children[0].active = !1;
this.moreMaVung.active = !1;
}.bind(this));
},
toggleMaVung: function() {
this.moreMaVung.active = !this.moreMaVung.active;
},
onOTPClick: function() {
o.checkPhoneValid(this.phone.string) ? "0" === this.mavung ? cc.RedT.inGame.notice.show({
title: "LỖI!",
text: "Bạn chưa chọn mã vùng."
}) : cc.RedT.send({
user: {
security: {
OTPTele: {
phone: this.phone.string,
mavung: this.mavung
}
}
}
}) : cc.RedT.inGame.notice.show({
title: "LỖI!",
text: "Số điện thoại không hợp lệ."
});
},
changerTypeOTP: function(t) {
this.typeOTP = t.node.name;
},
onChangerNumber: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
console.log(t);
},
onGetOTP: function() {
if (o.checkPhoneValid(this.phone.string)) if (0 != this.phone.string.substring(0, 1)) if (1 == this.typeOTP) {
cc.RedT.send({
user: {
security: {
sendOTP: {
phone: this.phone.string,
mavung: this.mavung,
type: this.typeOTP
}
}
}
});
this.onTaiTeleClick();
} else cc.RedT.send({
user: {
security: {
sendOTP: {
phone: this.phone.string,
mavung: this.mavung,
type: this.typeOTP
}
}
}
}); else cc.RedT.inGame.notice.show({
title: "LỖI!",
text: "Vui lòng bỏ số 0 ở đầu!"
}); else cc.RedT.inGame.notice.show({
title: "LỖI!",
text: "Số điện thoại không đúng định dạng"
});
},
onGetOTPTELE: function() {
if (o.checkPhoneValid(this.phone.string)) if ("0" === this.mavung) cc.RedT.inGame.notice.show({
title: "LỖI!",
text: "Bạn chưa chọn mã vùng."
}); else if (0 == this.phone.string.substring(0, 1)) cc.RedT.inGame.notice.show({
title: "LỖI!",
text: "Vui lòng không nhập số 0 ở đầu."
}); else {
cc.RedT.send({
user: {
security: {
sendOTP: {
phone: this.phone.string,
mavung: this.mavung,
type: 1
}
}
}
});
this.onTaiTeleClick();
} else cc.RedT.inGame.notice.show({
title: "LỖI!",
text: "Số điện thoại không đúng định dạng"
});
},
onGetOTPSMS: function() {
o.checkPhoneValid(this.phone.string) ? cc.RedT.send({
user: {
security: {
sendOTP: {
phone: this.phone.string,
mavung: this.mavung,
type: 2
}
}
}
}) : cc.RedT.inGame.notice.show({
title: "LỖI!",
text: "Số điện thoại không đúng định dạng"
});
},
onTaiTeleClick: function() {
cc.RedT.inGame.telegram();
},
onRegClick: function() {
!o.checkPhoneValid(this.phone.string) || o.isEmpty(this.otp.string) || 4 != this.otp.string.length ? cc.RedT.inGame.notice.show({
title: "LỖI!",
text: "Bạn nhập không đúng thông tin."
}) : cc.RedT.send({
user: {
security: {
regOTP: {
phone: this.phone.string,
mavung: this.mavung,
otp: this.otp.string
}
}
}
});
},
clear: function() {
this.phone && (this.phone.string = "");
this.mavung && (this.mavung = "0");
this.otp && (this.otp.string = "");
this.labelMaVung.string = "Chọn mã vùng";
},
statusOTP: function(t) {
this.nodeReg.active = !t;
this.nodeInfo.active = t;
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
Dialog2: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "e2748l5APhKZL5w8db3+Ak/", "Dialog2");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = cc._decorator, o = n.ccclass, c = (n.property, function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.isAnimated = !0;
e.bg = null;
e.container = null;
e.showScale = 1.1;
e.startScale = .7;
return e;
}
e.prototype.show = function() {
this.bg || (this.bg = this.node.getChildByName("Bg"));
this.container || (this.container = this.node.getChildByName("Container"));
this.node.active = !0;
this.isAnimated = !1;
this.bg.stopAllActions();
this.bg.opacity = 0;
this.bg.runAction(cc.fadeTo(.2, 128));
this.container.stopAllActions();
this.container.opacity = 0;
this.container.scale = this.startScale;
this.container.runAction(cc.sequence(cc.spawn(cc.scaleTo(.2, this.showScale), cc.fadeIn(.2)), cc.scaleTo(.1, 1), cc.callFunc(this._onShowed.bind(this))));
};
e.prototype.dismiss = function() {
this.bg || (this.bg = this.node.getChildByName("Bg"));
this.container || (this.container = this.node.getChildByName("Container"));
this.isAnimated = !1;
this.bg.stopAllActions();
this.bg.opacity = 128;
this.bg.runAction(cc.fadeOut(.2));
this.container.stopAllActions();
this.container.opacity = 255;
this.container.scale = 1;
this.container.runAction(cc.sequence(cc.scaleTo(.1, this.showScale), cc.spawn(cc.scaleTo(.2, this.startScale), cc.fadeOut(.2)), cc.callFunc(this._onDismissed.bind(this))));
};
e.prototype._onShowed = function() {
this.isAnimated = !0;
};
e.prototype._onDismissed = function() {
this.node.active = !1;
this.isAnimated = !0;
};
return e = __decorate([ o ], e);
}(cc.Component));
i.default = c;
cc._RF.pop();
}, {} ],
Dialog: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "25e93DvojpK6Idfq683yfCg", "Dialog");
var n;
function o(t, e, i) {
e in t ? Object.defineProperty(t, e, {
value: i,
enumerable: !0,
configurable: !0,
writable: !0
}) : t[e] = i;
return t;
}
var c = t("SignIn"), s = t("SignUp"), a = t("ForGotPass"), h = t("SignName"), r = t("Shop"), l = t("DaiLy"), u = t("SieuZon"), d = t("BonusNap"), p = t("TopPhuHo"), g = t("Profile"), m = t("ChangeAvatar"), f = t("Settings"), v = t("TheCao"), b = t("GiftCode"), T = t("DEvent"), _ = t("PokerNap"), C = t("NhiemVu"), y = (d = t("BonusNap"), 
t("iMessage"));
cc.Class({
extends: cc.Component,
properties: (n = {
bgShow: cc.Node,
Loading: cc.Node,
BonusNap: d,
ChangeAvatar: m,
signIn: c,
signUp: s,
ForGotPass: a,
signName: h,
shop: r,
DaiLy: l,
profile: g,
the_cao: v,
SieuZon: u,
PhuHo: p,
QuangCao: cc.Node,
NhiemVu: C
}, o(n, "BonusNap", d), o(n, "settings", f), o(n, "GiftCode", b), o(n, "DEvent", T), 
o(n, "PokerNap", _), o(n, "iMessage", y), n),
init: function() {
this.actionShow = cc.spawn(cc.scaleTo(.5, 1).easing(cc.easeBackOut(2.5)), cc.fadeTo(.5, 255));
this.objShow = null;
this.objTmp = null;
this.bgShow.active = !0;
},
onClickBack: function() {
cc.RedT.audio.playUnClick();
this.onBack();
},
onBack: function() {
this.bgShow.active = !1;
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = !1;
this.node.active = !1;
this.objShow = null;
} else {
this.objTmp = this.objShow;
this.objShow = this.objShow.previous;
this.objTmp.previous = null;
this.objTmp.active = !1;
this.objShow.active = !0;
this.objTmp = null;
} else this.node.active = !1;
},
onClosePrevious: function(t) {
this.bgShow.active = !1;
if (void 0 !== t.previous && null !== t.previous) {
this.onClosePrevious(t.previous);
delete t.previous;
}
t.active = !1;
},
onCloseDialog: function() {
this.bgShow.active = !1;
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = this.node.active = !1;
this.objShow = null;
} else {
this.onClosePrevious(this.objShow.previous);
this.objShow.active = this.node.active = !1;
delete this.objShow.previous;
this.objShow = null;
} else this.node.active = !1;
},
resetSizeDialog: function(t) {
t.stopAllActions();
t.scale = .5;
t.opacity = 0;
},
showSieuZon: function() {
if (cc.RedT.IS_LOGIN) {
var t = this;
this.bgShow.active = !0;
if (null != this.SieuZon) {
this.node.active = this.SieuZon.node.active = !0;
this.objShow = this.SieuZon.node;
return;
}
this.onInstancePopup("topvippoint", function(e) {
t.SieuZon = e.getComponent("SieuZon");
t.SieuZon.init();
t.node.active = t.SieuZon.node.active = !0;
t.objShow = t.SieuZon.node;
});
} else this.showSignIn();
},
showSignIn: function() {
var t = this;
this.bgShow.active = !0;
if (null == this.signIn) this.onInstancePopup("sign_in", function(e) {
t.signIn = e.getComponent("SignIn");
t.node.active = t.signIn.node.active = !0;
t.objShow = t.signIn.node;
}); else {
this.node.active = this.signIn.node.active = !0;
this.objShow = this.signIn.node;
}
},
showSignUp: function() {
var t = this;
this.bgShow.active = !0;
if (null != this.objShow) {
this.objShow.active = !1;
this.objShow = null;
}
if (null == this.signUp) this.onInstancePopup("sign_up", function(e) {
t.signUp = e.getComponent("SignUp");
t.node.active = t.signUp.node.active = !0;
t.objShow = t.signUp.node;
}); else {
this.node.active = this.signUp.node.active = !0;
this.objShow = this.signUp.node;
}
},
showForGotPass: function() {
var t = this;
this.bgShow.active = !0;
if (null != this.objShow) {
this.objShow.active = !1;
this.objShow = null;
}
if (null == this.ForGotPass) this.onInstancePopup("for_got_pass", function(e) {
t.ForGotPass = e.getComponent("ForGotPass");
t.node.active = t.ForGotPass.node.active = !0;
t.ForGotPass.node.previous = t.objShow;
t.objShow = t.ForGotPass.node;
}); else {
this.node.active = this.ForGotPass.node.active = !0;
this.objShow = this.ForGotPass.node;
}
},
showSignName: function() {
var t = this;
this.bgShow.active = !0;
if (null == this.signName) this.onInstancePopup("sign_name", function(e) {
t.signName = e.getComponent("SignName");
t.node.active = t.signName.node.active = !0;
t.objShow = t.signName.node;
}); else {
this.node.active = this.signName.node.active = !0;
this.objShow = this.signName.node;
}
},
showChangePwd: function() {
var t = this;
this.bgShow.active = !0;
if (null == this.ChangePwd) this.onInstancePopup("change_pwd", function(e) {
t.ChangePwd = e.getComponent("ChangePwd");
t.node.active = t.ChangePwd.node.active = !0;
t.objShow = t.ChangePwd.node;
}); else {
this.node.active = this.ChangePwd.node.active = !0;
this.objShow = this.ChangePwd.node;
}
},
showShop: function(t, e) {
if (cc.RedT.IS_LOGIN) {
var i = this;
this.bgShow.active = !0;
if (null != this.shop) {
this.node.active = this.shop.node.active = !0;
this.shop.init();
this.shop.superView(e);
this.objShow = this.shop.node;
return;
}
this.onInstancePopup("shop", function(t) {
i.shop = t.getComponent("Shop");
i.node.active = i.shop.node.active = !0;
i.shop.init();
i.shop.superView(e);
i.objShow = i.shop.node;
});
} else this.showSignIn();
},
showDaiLy: function() {
if (cc.RedT.IS_LOGIN) {
var t = this;
this.bgShow.active = !0;
if (null != this.DaiLy) {
this.node.active = this.DaiLy.node.active = !0;
this.objShow = this.DaiLy.node;
this.DaiLy.init();
return;
}
this.onInstancePopup("daily", function(e) {
t.DaiLy = e.getComponent("DaiLy");
t.DaiLy.init();
t.node.active = t.DaiLy.node.active = !0;
t.objShow = t.DaiLy.node;
});
} else this.showSignIn();
},
showBonusNap: function() {
if (cc.RedT.IS_LOGIN) {
var t = this;
this.bgShow.active = !0;
if (null != this.BonusNap) {
this.node.active = this.BonusNap.node.active = !0;
this.objShow = this.BonusNap.node;
this.BonusNap.init();
return;
}
this.onInstancePopup("BonusNap", function(e) {
t.BonusNap = e.getComponent("BonusNap");
t.BonusNap.init();
t.node.active = t.BonusNap.node.active = !0;
t.objShow = t.BonusNap.node;
});
} else this.showSignIn();
},
showProfile: function(t, e) {
var i = this;
this.bgShow.active = !0;
if (null == this.profile) this.onInstancePopup("profile", function(t) {
i.profile = t.getComponent("Profile");
i.node.active = i.profile.node.active = !0;
i.profile.init();
i.profile.superView(e);
i.objShow = i.profile.node;
}); else {
this.node.active = this.profile.node.active = !0;
this.profile.init();
this.profile.superView(e);
this.objShow = this.profile.node;
}
},
showChangeAvatar: function(t) {
var e = this;
this.bgShow.active = !0;
if (null == this.ChangeAvatar) this.onInstancePopup("changeAvatars", function(t) {
e.ChangeAvatar = t.getComponent("ChangeAvatar");
e.node.active = e.ChangeAvatar.node.active = !0;
e.objShow = e.ChangeAvatar.node;
}); else {
this.node.active = this.ChangeAvatar.node.active = !0;
this.objShow = this.ChangeAvatar.node;
}
},
showSetting: function(t) {
var e = this;
this.bgShow.active = !0;
if (null == this.Settings) this.onInstancePopup("setting", function(t) {
e.Settings = t.getComponent("Settings");
e.node.active = e.Settings.node.active = !0;
e.objShow = e.Settings.node;
}); else {
this.node.active = this.Settings.node.active = !0;
this.objShow = this.Settings.node;
}
},
showGiftCode: function(t) {
if (cc.RedT.IS_LOGIN) {
var e = this;
this.bgShow.active = !0;
if (null != this.GiftCode) {
this.node.active = this.GiftCode.node.active = !0;
this.objShow = this.GiftCode.node;
return;
}
this.onInstancePopup("giftcode", function(t) {
e.GiftCode = t.getComponent("GiftCode");
e.node.active = e.GiftCode.node.active = !0;
e.objShow = e.GiftCode.node;
});
} else this.showSignIn();
},
showMainPopup: function(t) {
if (cc.RedT.IS_LOGIN) {
var e = this;
this.bgShow.active = !0;
if (null != this.MainPopup) {
this.node.active = this.MainPopup.node.active = !0;
e.MainPopup.onInit(t);
this.objShow = this.MainPopup.node;
return;
}
this.onInstancePopup("livegame", function(i) {
e.MainPopup = i.getComponent("MainPopup");
e.node.active = e.MainPopup.node.active = !0;
e.objShow = e.MainPopup.node;
e.MainPopup.onInit(t);
});
} else this.showSignIn();
},
showDEvent: function(t) {
if (cc.RedT.IS_LOGIN) {
var e = this;
this.bgShow.active = !0;
if (null != this.DEvent) {
this.node.active = this.DEvent.node.active = !0;
this.objShow = this.DEvent.node;
return;
}
this.onInstancePopup("event", function(t) {
e.DEvent = t.getComponent("DEvent");
e.node.active = e.DEvent.node.active = !0;
e.objShow = e.DEvent.node;
});
} else this.showSignIn();
},
showPokerNap: function(t) {
var e = this;
this.bgShow.active = !0;
if (null == this.PokerNap) this.onInstancePopup("PokerNap", function(i) {
e.PokerNap = i.getComponent("PokerNap");
e.node.active = e.PokerNap.node.active = !0;
e.PokerNap.init(t);
e.objShow = e.PokerNap.node;
}); else {
this.node.active = this.PokerNap.node.active = !0;
this.PokerNap.init(t);
this.objShow = this.PokerNap.node;
}
},
showiMessage: function(t) {
var e = this;
null != this.bgShow && (this.bgShow.active = !0);
if (null == this.iMessage) this.onInstancePopup("iMesssage", function(t) {
e.iMessage = t.getComponent("iMessage");
e.node.active = e.iMessage.node.active = !0;
e.objShow = e.iMessage.node;
}); else {
this.node.active = this.iMessage.node.active = !0;
this.objShow = this.iMessage.node;
}
},
onInstancePopup: function(t, e) {
var i = this;
this.Loading.active = !0;
cc.loader.loadRes("dialog/" + t, function(t, e) {}, function(t, n) {
if (t) e(null); else {
var o = cc.instantiate(n);
i.node.addChild(o);
e(o);
i.Loading.active = !1;
}
});
}
});
cc._RF.pop();
}, {
BonusNap: "BonusNap",
ChangeAvatar: "ChangeAvatar",
DEvent: "DEvent",
DaiLy: "DaiLy",
ForGotPass: "ForGotPass",
GiftCode: "GiftCode",
NhiemVu: "NhiemVu",
PokerNap: "PokerNap",
Profile: "Profile",
Settings: "Settings",
Shop: "Shop",
SieuZon: "SieuZon",
SignIn: "SignIn",
SignName: "SignName",
SignUp: "SignUp",
TheCao: "TheCao",
TopPhuHo: "TopPhuHo",
iMessage: "iMessage"
} ],
DisableClick: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "a0680bUBBRNNZFsRV8g5DR/", "DisableClick");
cc.Class({
extends: cc.Component,
onEnable: function() {
this.node.on("touchstart", function(t) {
t.stopPropagation();
});
this.node.on("touchend", function(t) {
t.stopPropagation();
});
},
onDisable: function() {
this.node.off("touchstart", function(t) {
t.stopPropagation();
});
this.node.off("touchend", function(t) {
t.stopPropagation();
});
}
});
cc._RF.pop();
}, {} ],
DoiMatKhau: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "99ffdd9WihFhpmOaK8H6Qen", "DoiMatKhau");
var n = t("BrowserUtil");
t("Helper");
cc.Class({
extends: cc.Component,
properties: {
OldPassword: {
default: null,
type: cc.EditBox
},
NewPassword: {
default: null,
type: cc.EditBox
},
ReNewPassword: {
default: null,
type: cc.EditBox
}
},
onLoad: function() {
var t = this;
this.editboxs = [ this.OldPassword, this.NewPassword, this.ReNewPassword ];
this.keyHandle = function(e) {
return e.keyCode === cc.macro.KEY.tab ? (t.changeNextFocusEditBox(), e.preventDefault && e.preventDefault(), 
!1) : e.keyCode === cc.macro.KEY.enter ? (n.focusGame(), t.onChangerClick(), e.preventDefault && e.preventDefault(), 
!1) : void 0;
};
},
onEnable: function() {
cc.sys.isBrowser && this.addEvent();
},
onDisable: function() {
cc.sys.isBrowser && this.removeEvent();
this.clear();
},
addEvent: function() {
cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
for (var t in this.editboxs) n.getHTMLElementByEditBox(this.editboxs[t]).addEventListener("keydown", this.keyHandle, !1);
},
removeEvent: function() {
cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
for (var t in this.editboxs) n.getHTMLElementByEditBox(this.editboxs[t]).removeEventListener("keydown", this.keyHandle, !1);
},
onKeyDown: function(t) {
switch (t.keyCode) {
case cc.macro.KEY.tab:
this.isTop() && this.changeNextFocusEditBox();
break;

case cc.macro.KEY.enter:
this.isTop() && this.onChangerClick();
}
},
changeNextFocusEditBox: function() {
for (var t = !1, e = 0, i = this.editboxs.length; e < i; e++) if (n.checkEditBoxFocus(this.editboxs[e])) {
n.focusEditBox(this.editboxs[e]);
t = !0;
break;
}
!t && 0 < this.editboxs.length && n.focusEditBox(this.editboxs[0]);
},
isTop: function() {
return !cc.RedT.inGame.notice.node.active && !cc.RedT.inGame.loading.active;
},
onChangerClick: function() {
if (this.OldPassword.string.length < 6 || this.OldPassword.string.length > 32 || this.NewPassword.string.length < 6 || this.NewPassword.string.length > 32 || this.ReNewPassword.string.length < 6 || this.ReNewPassword.string.length > 32) cc.RedT.inGame.notice.show({
title: "LỖI",
text: "Mật khẩu từ 6 đến 32 ký tự.\n\nHãy kiểm tra lại các thông tin."
}); else if (this.OldPassword.string == this.NewPassword.string) cc.RedT.inGame.notice.show({
title: "LỖI",
text: "Mật khẩu mới không trùng với mật khẩu cũ."
}); else if (this.NewPassword.string != this.ReNewPassword.string) cc.RedT.inGame.notice.show({
title: "LỖI",
text: "Nhập lại mật khẩu mới không khớp."
}); else {
cc.RedT.inGame.loading.active = !0;
cc.RedT.send({
user: {
doi_pass: {
passOld: this.OldPassword.string,
passNew: this.NewPassword.string,
passNew2: this.ReNewPassword.string
}
}
});
}
},
clear: function() {
this.OldPassword.string = this.NewPassword.string = this.ReNewPassword.string = "";
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
DongMauAnhHung_bonus_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "58e38KnLnFG57aNi8pgpdHc", "DongMauAnhHung_bonus_item");
cc.Class({
extends: cc.Component,
properties: {
open: cc.Node,
close: cc.Node,
text: cc.Label
}
});
cc._RF.pop();
}, {} ],
DongMauAnhHung_dialog: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "11376Fj/PRLxLIUr1B6v8fw", "DongMauAnhHung_dialog");
var n = t("DongMauAnhHung_history"), o = t("DongMauAnhHung_top");
cc.Class({
extends: cc.Component,
properties: {
history: n,
top: o,
help: cc.Node
},
init: function() {
this.actionShow = cc.spawn(cc.scaleTo(.5, 1).easing(cc.easeBackOut(2.5)), cc.fadeTo(.5, 255));
this.objShow = null;
this.objTmp = null;
},
onClickBack: function() {
cc.RedT.audio.playUnClick();
this.onBack();
},
onBack: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = !1;
this.node.active = !1;
this.objShow = null;
} else {
this.objTmp = this.objShow;
this.objShow = this.objShow.previous;
this.objTmp.previous = null;
this.objTmp.active = !1;
this.objShow.active = !0;
this.objTmp = null;
} else this.node.active = !1;
},
onClosePrevious: function(t) {
if (void 0 !== t.previous && null !== t.previous) {
this.onClosePrevious(t.previous);
delete t.previous;
}
t.active = !1;
},
onCloseDialog: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = this.node.active = !1;
this.objShow = null;
} else {
this.onClosePrevious(this.objShow.previous);
this.objShow.active = this.node.active = !1;
delete this.objShow.previous;
this.objShow = null;
} else this.node.active = !1;
},
resetSizeDialog: function(t) {
t.stopAllActions();
t.scale = .5;
t.opacity = 0;
},
showHistory: function() {
this.node.active = this.history.node.active = !0;
this.objShow = this.history.node;
},
showTop: function() {
this.node.active = this.top.node.active = !0;
this.objShow = this.top.node;
},
showHelp: function() {
this.node.active = this.help.active = !0;
this.objShow = this.help;
}
});
cc._RF.pop();
}, {
DongMauAnhHung_history: "DongMauAnhHung_history",
DongMauAnhHung_top: "DongMauAnhHung_top"
} ],
DongMauAnhHung_history: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "bef244dKuFAyaF7jOi8wedW", "DongMauAnhHung_history");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
onLoad: function() {
var t = this, e = cc.instantiate(this.page);
e.y = -232;
this.node.addChild(e);
this.page = e.getComponent("Pagination");
Promise.all(this.content.children.map(function(t) {
return t.getComponent("VQRed_history_item");
})).then(function(e) {
t.content = e;
});
this.page.init(this);
},
onEnable: function() {
this.get_data();
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
g: {
vq_red: {
log: {
red: this.red,
page: t
}
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
this.page.onSet(t.page, t.kmess, t.total);
Promise.all(this.content.map(function(e, i) {
var o = t.data[i];
if (void 0 !== o) {
e.node.active = !0;
e.time.string = n.getStringDateByTime(o.time);
e.phien.string = o.id;
e.cuoc.string = n.numberWithCommas(o.bet);
e.win.string = o.line;
e.kq.string = o.kq;
e.line.string = n.numberWithCommas(o.win);
} else e.node.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
DongMauAnhHung_iline: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "ddca9M3C6ZPj5mi4kiF2Hry", "DongMauAnhHung_iline");
cc.Class({
extends: cc.Component,
init: function(t) {
this.RedT = t;
return this;
},
onEnable: function() {
this.node.on(cc.Node.EventType.MOUSE_ENTER, this.onhover, this);
this.node.on(cc.Node.EventType.MOUSE_LEAVE, this.offhover, this);
},
onDisable: function() {
this.node.off(cc.Node.EventType.MOUSE_ENTER, this.onhover, this);
this.node.off(cc.Node.EventType.MOUSE_LEAVE, this.offhover, this);
},
onhover: function() {
this.node.children[0].active = !0;
},
offhover: function() {
this.node.children[0].active = !1;
},
onEf: function() {
this.onhover();
this.node.pauseSystemEvents();
},
offEf: function() {
this.offhover();
this.node.resumeSystemEvents();
}
});
cc._RF.pop();
}, {} ],
DongMauAnhHung_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "2ad30eRXJ9JSafdgxD9ZiI5", "DongMauAnhHung_item");
cc.Class({
extends: cc.Component,
properties: {
icons: {
default: [],
type: cc.Prefab
}
},
init: function(t) {
this.RedT = t;
},
random: function() {
var t = 7 * Math.random() >> 0;
this.setIcon(t);
return t;
},
setIcon: function(t) {
var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
this.node.removeAllChildren();
var i = cc.instantiate(this.icons[t]);
i.setScale(cc.v2(1.2, 1.2));
this.node.addChild(i);
e && (this.data = t);
}
});
cc._RF.pop();
}, {} ],
DongMauAnhHung_lines: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "1e5aeG7g9BBF6XrU32pwWjk", "DongMauAnhHung_lines");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
nodeEfLine: cc.Node,
nodeLine: cc.Node,
mainLine: cc.Node
},
init: function(t) {
var e = this;
this.lines = {
1: [ 1, 1, 1, 1, 1 ],
2: [ 0, 0, 0, 0, 0 ],
3: [ 2, 2, 2, 2, 2 ],
4: [ 1, 1, 0, 1, 1 ],
5: [ 1, 1, 2, 1, 1 ],
6: [ 0, 0, 1, 0, 0 ],
7: [ 2, 2, 1, 2, 2 ],
8: [ 0, 2, 0, 2, 0 ],
9: [ 2, 0, 2, 0, 2 ],
10: [ 1, 0, 2, 0, 1 ],
11: [ 2, 1, 0, 1, 2 ],
12: [ 0, 1, 2, 1, 0 ],
13: [ 1, 2, 1, 0, 1 ],
14: [ 1, 0, 1, 2, 1 ],
15: [ 2, 1, 1, 1, 2 ],
16: [ 0, 1, 1, 1, 0 ],
17: [ 1, 2, 2, 2, 1 ],
18: [ 1, 0, 0, 0, 1 ],
19: [ 2, 2, 1, 0, 0 ],
20: [ 0, 0, 1, 2, 2 ]
};
this.RedT = t;
var i = this;
Promise.all(this.mainLine.children.map(function(t) {
return t.getComponent("DongMauAnhHung_iline").init(i.RedT);
})).then(function(t) {
e.mainLine = t;
});
this.selectAll(null, "1");
},
onOpen: function() {
cc.RedT.audio.playClick();
this.node.active = !0;
},
onClose: function() {
cc.RedT.audio.playUnClick();
this.node.active && this.data.length < 1 ? this.RedT.addNotice("Chọn ít nhất 1 dòng") : this.node.active = !1;
},
select: function(t) {
var e = t.target;
if (e.children[0].active) {
e.children[0].active = !1;
e.children[1].active = !0;
} else {
e.children[0].active = !0;
e.children[1].active = !1;
}
this.check();
},
check: function() {
var t = this;
Promise.all(this.nodeLine.children.map(function(t, e) {
return t.children[0].active ? e + 1 : void 0;
})).then(function(e) {
Promise.all(e.filter(function(t) {
return void 0 !== t;
})).then(function(e) {
t.data = e;
t.RedT.labelLine.string = e.length;
t.RedT.tong.string = n.numberWithCommas(e.length * n.getOnlyNumberInString(t.RedT.bet.string));
});
});
},
selectChan: function() {
var t = this;
Promise.all(this.nodeLine.children.map(function(t, e) {
var i = e + 1;
if (!(i % 2)) {
t.children[0].active = !1;
t.children[1].active = !0;
return i;
}
t.children[0].active = !0;
t.children[1].active = !1;
})).then(function(e) {
Promise.all(e.filter(function(t) {
return void 0 !== t;
})).then(function(e) {
t.data = e;
t.RedT.labelLine.string = e.length;
t.RedT.tong.string = n.numberWithCommas(e.length * n.getOnlyNumberInString(t.RedT.bet.string));
});
});
},
selectLe: function() {
var t = this;
Promise.all(this.nodeLine.children.map(function(t, e) {
var i = e + 1;
if (i % 2) {
t.children[0].active = !1;
t.children[1].active = !0;
return i;
}
t.children[0].active = !0;
t.children[1].active = !1;
})).then(function(e) {
Promise.all(e.filter(function(t) {
return void 0 !== t;
})).then(function(e) {
t.data = e;
t.RedT.labelLine.string = e.length;
t.RedT.tong.string = n.numberWithCommas(e.length * n.getOnlyNumberInString(t.RedT.bet.string));
});
});
},
selectAll: function(t, e) {
var i = this;
Promise.all(this.nodeLine.children.map(function(t, i) {
var n = "1" == e;
t.children[0].active = n;
t.children[1].active = !n;
return n ? i + 1 : void 0;
})).then(function(t) {
Promise.all(t.filter(function(t, e) {
return void 0 !== t;
})).then(function(t) {
i.data = t;
i.RedT.labelLine.string = t.length;
i.RedT.tong.string = n.numberWithCommas(t.length * n.getOnlyNumberInString(i.RedT.bet.string));
});
});
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
DongMauAnhHung_playBonus: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "ebd24gbcgdNIYm6/YdJt/ru", "DongMauAnhHung_playBonus");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
numberBonus: cc.Label,
listBox: cc.Node,
notice: cc.Node,
numberWin: cc.Label
},
init: function(t) {
this.RedT = t;
},
onPlay: function() {
this.reset();
this.node.active = !0;
this.numberBonus.string = 10;
},
onClickBox: function(t, e) {
if (this.numberBonus.string) {
cc.RedT.audio.playClick();
this.onSend(e);
}
},
closeNotice: function() {
this.notice.active = this.node.active = !1;
this.RedT.hieuUng();
},
onData: function(t) {
if (void 0 !== t.box) {
var e = this.listBox.children[t.box];
e.children[0].active = !1;
e.children[1].active = e.children[2].active = !0;
e.children[2].getComponent(cc.Label).string = n.numberWithCommas(t.bet);
this.numberBonus.string = t.bonus;
}
if (void 0 !== t.win) {
this.notice.active = !0;
this.numberWin.string = n.numberWithCommas(t.win);
this.RedT.vuathang.string = n.numberWithCommas(1 * n.getOnlyNumberInString(this.RedT.vuathang.string) + t.win);
}
},
onSend: function(t) {
cc.RedT.send({
g: {
vq_red: {
bonus: {
box: t
}
}
}
});
},
reset: function() {
Promise.all(this.listBox.children.map(function(t) {
t.children[0].active = !0;
t.children[1].active = t.children[2].active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
DongMauAnhHung_reel: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "59897cuhJVB95oNyBnfROQi", "DongMauAnhHung_reel");
cc.Class({
extends: cc.Component,
init: function(t) {
var e = this;
this.RedT = t;
this.icons = [];
var i = this, n = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
Promise.all(n.map(function(t, e) {
var o = cc.instantiate(i.RedT.icon);
i.node.addChild(o);
(o = o.getComponent("DongMauAnhHung_item")).init(i.RedT);
e > 2 && e < n.length - 3 && o.random();
return o;
})).then(function(t) {
e.icons = t;
e.icons[e.icons.length - 1].setIcon(e.icons[4].random());
e.icons[e.icons.length - 2].setIcon(e.icons[3].random());
e.icons[e.icons.length - 3].setIcon(e.icons[2].random());
e.icons[e.icons.length - 4].setIcon(e.icons[1].random());
e.icons[e.icons.length - 5].setIcon(e.icons[0].random());
});
},
spin: function(t, e) {
this.node.stopAllActions();
var i = cc.moveTo(e, cc.v2(this.node.x, -(this.node.height - 606))).easing(cc.easeInOut(3)), n = cc.callFunc(function() {
0 === t && this.RedT.copy();
this.node.y = 0;
}, this);
if (4 === t) {
var o = cc.callFunc(function() {
this.RedT.EF_vuathang();
this.node.y = 0;
this.RedT.random();
this.RedT.hieuUng();
}, this);
this.node.runAction(cc.sequence(cc.delayTime(.1 * t), i, o));
} else this.node.runAction(cc.sequence(cc.delayTime(.1 * t), i, n));
},
stop: function() {
this.node.stopAllActions();
this.RedT.copy();
this.node.y = 0;
}
});
cc._RF.pop();
}, {} ],
DongMauAnhHung_top: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "ae30cDJoJpMH6OGa7v7NTim", "DongMauAnhHung_top");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
item: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
onEnable: function() {
this.get_data();
},
get_data: function() {
arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
cc.RedT.send({
g: {
vq_red: {
top: this.red
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
this.content.removeAllChildren();
var e = this;
Promise.all(t.map(function(t, i) {
var o = cc.instantiate(e.item), c = o.getComponent("VQRed_history_item");
c.time.string = n.getStringDateByTime(t.time);
c.phien.string = t.name;
c.cuoc.string = n.numberWithCommas(t.bet);
c.line.string = n.numberWithCommas(t.win);
c.win.string = 2 == t.type ? "Nổ Hũ" : "Thắng lớn";
o.children[0].active = !(1 & i);
e.content.addChild(o);
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
DongMauAnhHung: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "85831nVMrFK3KyMremcbbAp", "DongMauAnhHung");
var n = t("Helper"), o = t("DongMauAnhHung_reel"), c = t("DongMauAnhHung_lines"), s = t("DongMauAnhHung_playBonus"), a = t("Notice"), h = t("DongMauAnhHung_dialog");
cc.Class({
extends: cc.Component,
properties: {
gameBonus: s,
audioBG: cc.AudioSource,
audioClickSpin: {
default: null,
type: cc.AudioClip
},
audioClick: {
default: null,
type: cc.AudioClip
},
audioWin: {
default: null,
type: cc.AudioClip
},
audioBigWin: {
default: null,
type: cc.AudioClip
},
audioJackpot: {
default: null,
type: cc.AudioClip
},
redhat: cc.Node,
reels: {
default: [],
type: o
},
icon: cc.Prefab,
icons: {
default: [],
type: cc.SpriteFrame
},
betString: {
default: [],
type: cc.String
},
audioIcons: {
default: [],
type: cc.SpriteFrame
},
audioIcon: cc.Sprite,
nodeNotice: cc.Node,
prefabNotice: cc.Prefab,
MiniPanel: cc.Prefab,
loading: cc.Node,
efline: cc.Node,
notice: a,
dialog: h,
Line: c,
hu: cc.Label,
taikhoan: cc.Label,
tong: cc.Label,
vuathang: cc.Label,
labelLine: cc.Label,
bet: cc.Label,
freeLabel: cc.Label,
phien: cc.Label,
BigWin: cc.Animation,
BigWin_Label: cc.Label,
bangThuong: cc.Node,
NoHu: cc.Animation,
NoHu_Label: cc.Label,
EF_Bonus: cc.Animation,
EF_Free: cc.Animation,
buttonCoint: cc.Node,
buttonLine: cc.Node,
buttonSpin: cc.Node,
buttonSpinSpeed: cc.Node,
buttonBet: cc.Node,
buttonAuto: cc.Node,
buttonStop: cc.Node,
Game: cc.Node,
ChonCuoc: cc.Node,
hu100: cc.Label,
hu1000: cc.Label,
hu10000: cc.Label,
fontCong: cc.Font,
isSpeed: !1,
isForceSpeed: !1,
isAuto: !1,
isSpin: !1,
isFreeSpin: !1,
red: !0,
betSelect: 0
},
onLoad: function() {
cc.RedT.inGame = this;
var t = this;
this.Line.init(this);
this.BigWin.on("finished", this.BigWinFinish, this);
this.BigWin.on("play", this.BigWinPlay, this);
this.EF_Free.on("finished", this.EF_FreeFinish, this);
this.NoHu.on("play", this.NoHuPlay, this);
this.EF_Bonus.on("finished", this.EF_BonusFinish, this);
this.gameBonus.init(this);
this.dialog.init();
Promise.all(this.reels.map(function(e) {
e.init(t);
}));
this.Game.active = !1;
this.ChonCuoc.active = !0;
this.onGetAllHu();
cc.RedT.send({
scene: "vq_red"
});
this.taikhoan.string = n.numberWithCommas(cc.RedT.user.red);
this.speed = 400;
this.resetSpin();
if (cc.RedT.isSoundBackground()) {
this.playMusic();
this.audioIcon.spriteFrame = this.audioIcons[1];
} else this.audioIcon.spriteFrame = this.audioIcons[0];
},
_playSFX: function(t) {
cc.RedT.IS_SOUND && cc.audioEngine.playEffect(t, !1);
},
playClick: function() {
this._playSFX(this.audioClick);
},
BigWinPlay: function() {
var t = cc.callFunc(function() {
this._playSFX(this.audioBigWin);
n.numberTo(this.BigWin_Label, 0, this.H_win, 2e3, !0);
}, this);
this.BigWin.node.runAction(cc.sequence(cc.delayTime(.3), t));
},
BigWinFinish: function() {
this.isBigWin = !1;
this.BigWin.node.active = !1;
this.BigWin_Label.string = "";
this.showLineWin(!1);
this.hieuUng();
},
NoHuPlay: function() {
this.NoHu_Label.string = "";
var t = cc.callFunc(function() {
this._playSFX(this.audioJackpot);
n.numberTo(this.NoHu_Label, 0, this.H_win, 2e3, !0);
}, this);
this.NoHu.node.runAction(cc.sequence(cc.delayTime(.3), t));
var e = cc.callFunc(function() {}, this);
this.NoHu.node.runAction(cc.sequence(cc.delayTime(4), e));
},
NoHuFinish: function() {
this.isNoHu = !1;
this.isAuto && this.onAuto();
this.showLineWin(!1);
this.hieuUng();
},
NoHuClose: function() {
this.NoHu.node.active = !1;
this.NoHuFinish();
},
EF_BonusFinish: function() {
this.EF_Bonus.node.active = !1;
this.gameBonus.onPlay(this.isBonus);
this.isBonus = 0;
this.showLineWin(!1);
},
EF_FreeFinish: function() {
this.isFree = !1;
this.EF_Free.node.active = !1;
this.showLineWin(!1);
this.hieuUng();
},
onData: function(t) {
if (void 0 !== t.user) {
this.userData(t.user);
cc.RedT.userData(t.user);
}
void 0 !== t.VuongQuocRed && this.TamHung(t.VuongQuocRed);
void 0 !== t.mini && null != cc.RedT.minigame && cc.RedT.minigame.onData(t.mini);
void 0 !== t.TopHu && cc.RedT.MiniPanel.TopHu.onData(t.TopHu);
void 0 !== t.taixiu && null != cc.RedT.minigame && cc.RedT.minigame.isLoadTaiXiu && cc.RedT.minigame.TaiXiu.TX_Main.onData(t.taixiu);
},
userData: function(t) {
this.red ? this.taikhoan.string = n.numberWithCommas(t.red) : this.taikhoan.string = n.numberWithCommas(t.xu);
},
TamHung: function(t) {
var e = this;
if (void 0 !== t.status) if (1 === t.status) {
this.buttonStop.active = !!this.isAuto;
this.buttonAuto.active = !this.buttonStop.active;
Promise.all(t.cel.map(function(t, i) {
Promise.all(t.map(function(t, n) {
e.reels[i].icons[n].setIcon(t, !0);
}));
}));
this.runReels(this.isSpeed);
this.H_line_win = t.line_win;
this.H_win = t.win;
this.H_free = t.free;
this.isBonus = t.isBonus;
this.isNoHu = t.isNoHu;
this.isBigWin = t.isBigWin;
this.isFree = t.isFree;
this.isFreeSpin = !!t.free;
} else this.resetSpin();
void 0 !== t.bonus && this.gameBonus.onData(t.bonus);
void 0 !== t.log && this.dialog.history.onData(t.log);
void 0 !== t.top && this.dialog.top.onData(t.top);
void 0 !== t.notice && this.addNotice(t.notice);
},
EF_vuathang: function() {
this.showLineWin(!0);
this.vuathang.string = n.numberWithCommas(this.H_win);
this.freeLabel.string = this.H_free;
},
onLineWin: function(t) {
var e = this;
Promise.all(this.H_line_win.map(function(i) {
Promise.all(e.Line.lines[i.line].map(function(i, n) {
e.efline.children[n].children[i].active = t;
}));
var n = e.Line.mainLine[i.line - 1];
if (t) {
n.onhover();
n.node.pauseSystemEvents();
} else {
n.offhover();
n.node.resumeSystemEvents();
}
}));
},
showLineWin: function(t) {
this.onLineWin(t);
if (!(t || this.isNoHu || this.isBigWin || this.isAuto || this.isFreeSpin)) {
this.eflineN = 0;
this.efLineWin();
}
},
efLineWin: function(t) {
if (this.H_line_win.length) {
this.node.stopAllActions();
void 0 === this.H_line_win[this.eflineN] && (this.eflineN = 0);
this.efOneLineWin(this.eflineN, !0);
var e = cc.callFunc(function() {
this.efOneLineWin(this.eflineN, !1);
this.eflineN += 1;
this.efLineWin();
}, this);
this.node.runAction(cc.sequence(cc.delayTime(1.5), e));
}
},
efOneLineWin: function(t, e) {
var i = this;
t = this.H_line_win[this.eflineN].line;
Promise.all(this.Line.lines[t].map(function(t, n) {
i.efline.children[n].children[t].active = e;
}));
var n = this.Line.mainLine[t - 1];
if (e) {
n.onhover();
n.node.pauseSystemEvents();
} else {
n.offhover();
n.node.resumeSystemEvents();
}
},
hieuUng: function() {
if (this.isBigWin && !this.isNoHu) {
this.BigWin.node.active = !0;
this.BigWin.play();
this.oldBigWin = !0;
} else if (this.isNoHu) {
this.NoHu.node.active = !0;
this.NoHu.play();
} else if (this.isBonus) {
this.EF_Bonus.node.active = !0;
this.EF_Bonus.play();
cc.RedT.audio.playEf("bonus");
} else if (this.isFree) {
this.EF_Free.node.active = !0;
this.EF_Free.play();
} else if (this.H_win > 0) {
var t = new cc.Node();
t.addComponent(cc.Label);
(t = t.getComponent(cc.Label)).string = n.numberWithCommas(this.H_win);
t.font = this.fontCong;
t.lineHeight = 130;
t.fontSize = 70;
t.node.position = cc.v2(0, 21);
this.nodeNotice.addChild(t.node);
!this.oldBigWin && this._playSFX(this.audioWin);
t.node.runAction(cc.sequence(cc.moveTo(1.2, cc.v2(0, 105)), cc.callFunc(function() {
this.speed = 0;
t.node.destroy();
this.hieuUng();
this.showLineWin(!1);
}, this)));
this.H_win = 0;
this.oldBigWin = !1;
} else this.isAuto || this.isFreeSpin ? this.timeOut = setTimeout(function() {
this.onAutoSpin();
this.speed = 400;
}.bind(this), this.speed) : this.resetSpin();
},
onChangerBet: function(t, e) {
this._playSFX(this.audioClick);
this.betSelect++;
this.betSelect > 2 && (this.betSelect = 0);
this.bet.string = e;
this.tong.string = n.numberWithCommas(this.Line.data.length * n.getOnlyNumberInString(this.bet.string));
this.Game.active = !0;
this.ChonCuoc.active = !1;
this.resetSpin();
this.onStop();
this.onGetHu();
},
onSelectBet: function() {
this.Game.active = !1;
this.ChonCuoc.active = !0;
this.onGetAllHu();
this.onGetHu();
},
onClickAuto: function() {
this._playSFX(this.audioClick);
this.onAuto();
},
onClickStop: function() {
cc.RedT.audio.playClick();
this.onStop();
},
onAuto: function() {
this.isAuto = !this.isAuto;
this.buttonAuto.color = this.isAuto ? cc.Color.WHITE : cc.color(200, 200, 200);
this.buttonStop.active = this.isSpin;
},
onStop: function() {
this.isAuto = this.buttonStop.active = !1;
this.buttonAuto.active = !0;
this.isForceSpeed = !1;
this.buttonAuto.color = cc.color(200, 200, 200);
},
onClickSpin: function() {
this.isSpeed = !1;
this.onSpin();
},
onClickSpinSpeed: function() {
this.isSpeed = !0;
this.isAuto && (this.isForceSpeed = !0);
this.onSpin();
},
onAutoSpin: function() {
this._playSFX(this.audioClickSpin);
this.onGetSpin();
},
onSpin: function() {
if (this.Line.data.length < 1) this.addNotice("Chọn ít nhất 1 dòng"); else if (!this.isSpin) {
this._playSFX(this.audioClickSpin);
this.node.stopAllActions();
void 0 !== this.eflineN && void 0 !== this.H_line_win && this.H_line_win.length && this.efOneLineWin(this.eflineN, !1);
this.eflineO = this.eflineN = 0;
this.isSpin = !0;
this.setSpin();
this.onGetSpin();
}
},
setSpin: function() {
this.buttonLine.pauseSystemEvents();
this.buttonSpin.pauseSystemEvents();
this.buttonSpinSpeed.pauseSystemEvents();
this.buttonCoint.pauseSystemEvents();
this.buttonBet.pauseSystemEvents();
},
resetSpin: function() {
this.isAuto && this.onAuto();
this.isSpin = this.buttonStop.active = !1;
this.isForceSpeed = !1;
this.buttonLine.resumeSystemEvents();
this.buttonSpin.resumeSystemEvents();
this.buttonSpinSpeed.resumeSystemEvents();
this.buttonCoint.resumeSystemEvents();
this.buttonBet.resumeSystemEvents();
},
runReels: function(t) {
var e = this;
Promise.all(this.reels.map(function(i, n) {
t || e.isForceSpeed ? i.spin(n, .25) : i.spin(n, 1);
}));
this.isSpeed = !1;
},
copy: function() {
Promise.all(this.reels.map(function(t) {
t.icons[t.icons.length - 1].setIcon(t.icons[2].data);
t.icons[t.icons.length - 2].setIcon(t.icons[1].data);
t.icons[t.icons.length - 3].setIcon(t.icons[0].data);
}));
},
random: function() {
Promise.all(this.reels.map(function(t) {
Promise.all(t.icons.map(function(e, i) {
i > 2 && i < t.icons.length - 3 && e.random();
}));
}));
},
onGetSpin: function() {
cc.RedT.send({
g: {
vq_red: {
spin: {
cuoc: n.getOnlyNumberInString(this.bet.string),
red: this.red,
line: this.Line.data
}
}
}
});
},
addNotice: function(t) {
var e = cc.instantiate(this.prefabNotice);
e.getComponent("mini_warning").text.string = t;
this.nodeNotice.addChild(e);
},
backGame: function() {
this.loading.active = !0;
void 0 !== this.timeOut && clearTimeout(this.timeOut);
cc.director.loadScene("MainGame");
},
signOut: function() {
cc.director.loadScene("MainGame", function() {
cc.RedT.inGame.signOut();
});
},
onGetHu: function() {
var t = this;
if (void 0 !== cc.RedT.setting.topHu.data) {
var e = this, i = n.getOnlyNumberInString(e.bet.string);
Promise.all(cc.RedT.setting.topHu.data.vq_red.filter(function(t) {
return t.type == i && t.red == e.red;
})).then(function(e) {
var i = n.getOnlyNumberInString(t.hu.string), o = e[0].bet;
i - o != 0 && n.numberTo(t.hu, i, o, 2e3, !0);
});
}
},
onGetAllHu: function() {
var t = this;
if (void 0 !== cc.RedT.setting.topHu.data) {
n.getOnlyNumberInString(this.bet.string);
Promise.all(cc.RedT.setting.topHu.data.vq_red.filter(function(t) {
return 1 == t.red;
})).then(function(e) {
var i = e.filter(function(t) {
return 100 == t.type;
}), o = e.filter(function(t) {
return 1e3 == t.type;
}), c = e.filter(function(t) {
return 1e4 == t.type;
}), s = n.getOnlyNumberInString(t.hu100.string), a = n.getOnlyNumberInString(t.hu1000.string), h = n.getOnlyNumberInString(t.hu10000.string);
s - i[0].bet != 0 && n.numberTo(t.hu100, n.getOnlyNumberInString(t.hu100.string), i[0].bet, 4900, !0);
a - o[0].bet != 0 && n.numberTo(t.hu1000, n.getOnlyNumberInString(t.hu1000.string), o[0].bet, 4900, !0);
h - c[0].bet != 0 && n.numberTo(t.hu10000, n.getOnlyNumberInString(t.hu10000.string), c[0].bet, 4900, !0);
});
}
},
BangThuongToggle: function() {
cc.RedT.audio.playClick();
this.bangThuong.active = !this.bangThuong.active;
},
playMusic: function() {
this.audioBG.play();
},
pauseMusic: function() {
this.audioBG.pause();
},
onSetAudio: function() {
if (cc.RedT.isSoundBackground()) {
cc.RedT.setSoundBackground(!1);
this.pauseMusic();
cc.RedT.IS_SOUND = !1;
cc.RedT.setSoundGame(!1);
this.audioIcon.spriteFrame = this.audioIcons[0];
} else {
cc.RedT.setSoundBackground(!0);
this.playMusic();
cc.RedT.IS_SOUND = !0;
cc.RedT.setSoundGame(!0);
this.audioIcon.spriteFrame = this.audioIcons[1];
}
}
});
cc._RF.pop();
}, {
DongMauAnhHung_dialog: "DongMauAnhHung_dialog",
DongMauAnhHung_lines: "DongMauAnhHung_lines",
DongMauAnhHung_playBonus: "DongMauAnhHung_playBonus",
DongMauAnhHung_reel: "DongMauAnhHung_reel",
Helper: "Helper",
Notice: "Notice"
} ],
DropdownItem: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "b6228P9oQ9IlaVaTiX2V4va", "DropdownItem");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = cc._decorator, o = n.ccclass, c = n.property, s = n.requireComponent, a = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.checkMark = null;
e.label = null;
e.idx = -1;
return e;
}
__decorate([ c(cc.Node) ], e.prototype, "checkMark", void 0);
__decorate([ c(cc.Label) ], e.prototype, "label", void 0);
return e = __decorate([ o, s(cc.Button) ], e);
}(cc.Component);
i.default = a;
cc._RF.pop();
}, {} ],
Dropdown: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "ff7afpi+zdIq7WTcDLQtlsb", "Dropdown");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("./DropdownItem"), o = cc._decorator, c = o.ccclass, s = o.property, a = o.requireComponent, h = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.label = null;
e.itemTemplate = null;
e.value = 0;
e.data = [];
e.items = [];
return e;
}
e.prototype.start = function() {
this.itemTemplate.node.active = !1;
};
e.prototype.show = function() {
this.node.active = !0;
this.node.opacity = 0;
this.node.runAction(cc.fadeIn(.2));
for (var t = 0; t < this.items.length; t++) this.items[t].checkMark.active = this.items[t].idx == this.value;
};
e.prototype.setOptions = function(t) {
void 0 === t && (t = []);
this.data = t;
for (var e = this.itemTemplate.node.parent.children, i = 0; i < e.length; i++) e[i].active = !1;
this.items = [];
for (i = 0; i < t.length; i++) {
var n = this.getItem();
n.idx = i;
n.label.string = t[i];
n.checkMark.active = i == this.value;
this.items.push(n);
}
};
e.prototype.dismiss = function() {
var t = this;
this.node.runAction(cc.sequence(cc.fadeOut(.2), cc.callFunc(function() {
t.node.active = !1;
})));
};
e.prototype.setOnValueChange = function(t) {
this.onValueChange = t;
};
e.prototype.setValue = function(t) {
if (t < this.data.length) {
this.value = t;
this.label.string = this.data[this.value];
} else this.value = 0;
};
e.prototype.getValue = function() {
return this.value;
};
e.prototype.getItem = function() {
for (var t = this, e = null, i = this.itemTemplate.node.parent.children, o = 0; o < i.length; o++) i[o].active || i[o] == this.itemTemplate.node || (e = i[o]);
if (null == e) {
(e = cc.instantiate(this.itemTemplate.node)).parent = this.itemTemplate.node.parent;
e.on("click", function(e) {
t.value = e.getComponent(n.default).idx;
t.label.string = t.data[t.value];
t.onValueChange && t.onValueChange(t.value);
t.dismiss();
}, this);
}
e.active = !0;
e.zIndex = this.getLastZIndex();
return e.getComponent(n.default);
};
e.prototype.getLastZIndex = function() {
for (var t = 0, e = this.itemTemplate.node.parent.children, i = 1; i < e.length; i++) e[i].active && t++;
return t;
};
__decorate([ s(cc.Label) ], e.prototype, "label", void 0);
__decorate([ s(n.default) ], e.prototype, "itemTemplate", void 0);
return e = __decorate([ c, a(cc.Button) ], e);
}(cc.Component);
i.default = h;
cc._RF.pop();
}, {
"./DropdownItem": "DropdownItem"
} ],
EF_NoHu: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "69875aVuIhMXIrGxl2Od9Bs", "EF_NoHu");
cc.Class({
extends: cc.Component,
properties: {
close: cc.Node
},
onCloseClick: function() {
this.node.active = !1;
}
});
cc._RF.pop();
}, {} ],
EventAngrybird: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "3da1fygKJVLg6AhCJ4o8/B/", "EventAngrybird");
cc.Class({
extends: cc.Component,
properties: {
text100: cc.Label,
text1000: cc.Label,
text10000: cc.Label
},
onData: function(t) {
var e = t.filter(function(t) {
return 100 == t.type && 1 == t.red;
});
this.text100.string = "* X" + e[0].x + " hũ phòng 100, (sau " + e[0].toX + " hũ, " + e[0].balans + " hũ được X" + e[0].x + ")";
var i = t.filter(function(t) {
return 1e3 == t.type && 1 == t.red;
});
this.text1000.string = "* X" + i[0].x + " hũ phòng 1.000, (sau " + i[0].toX + " hũ, " + i[0].balans + " hũ được X" + i[0].x + ")";
var n = t.filter(function(t) {
return 1e4 == t.type && 1 == t.red;
});
this.text10000.string = "* X" + n[0].x + " hũ phòng 10.000, (sau " + n[0].toX + " hũ, " + n[0].balans + " hũ được X" + n[0].x + ")";
}
});
cc._RF.pop();
}, {} ],
EventBigBabol: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "9cc99A4PaNHspACLK1eSt4Y", "EventBigBabol");
cc.Class({
extends: cc.Component,
properties: {
text100: cc.Label,
text1000: cc.Label,
text10000: cc.Label
},
onData: function(t) {
var e = t.filter(function(t) {
return 100 == t.type && 1 == t.red;
});
this.text100.string = "* X" + e[0].x + " hũ phòng 100, (sau " + e[0].toX + " hũ, " + e[0].balans + " hũ được X" + e[0].x + ")";
var i = t.filter(function(t) {
return 1e3 == t.type && 1 == t.red;
});
this.text1000.string = "* X" + i[0].x + " hũ phòng 1.000, (sau " + i[0].toX + " hũ, " + i[0].balans + " hũ được X" + i[0].x + ")";
var n = t.filter(function(t) {
return 1e4 == t.type && 1 == t.red;
});
this.text10000.string = "* X" + n[0].x + " hũ phòng 10.000, (sau " + n[0].toX + " hũ, " + n[0].balans + " hũ được X" + n[0].x + ")";
}
});
cc._RF.pop();
}, {} ],
EventMiniPoker: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "7cc57Khr6xN25cbkkD7jvU8", "EventMiniPoker");
cc.Class({
extends: cc.Component,
properties: {
text100: cc.Label,
text1000: cc.Label,
text10000: cc.Label
},
onData: function(t) {
var e = t.filter(function(t) {
return 100 == t.type && 1 == t.red;
});
this.text100.string = "* X" + e[0].x + " hũ phòng 100, (sau " + e[0].toX + " hũ, " + e[0].balans + " hũ được X" + e[0].x + ")";
var i = t.filter(function(t) {
return 1e3 == t.type && 1 == t.red;
});
this.text1000.string = "* X" + i[0].x + " hũ phòng 1.000, (sau " + i[0].toX + " hũ, " + i[0].balans + " hũ được X" + i[0].x + ")";
var n = t.filter(function(t) {
return 1e4 == t.type && 1 == t.red;
});
this.text10000.string = "* X" + n[0].x + " hũ phòng 10.000, (sau " + n[0].toX + " hũ, " + n[0].balans + " hũ được X" + n[0].x + ")";
}
});
cc._RF.pop();
}, {} ],
EventTaiXiu_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "776e2WuPddPI5Z1l8EHRach", "EventTaiXiu_item");
cc.Class({
extends: cc.Component,
properties: {
top: cc.Label,
users: cc.Label,
day: cc.Label,
gift: cc.Label
}
});
cc._RF.pop();
}, {} ],
EventTaiXiu: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "e29efzOFZlKPa4AV0cVt6FW", "EventTaiXiu");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
menu: cc.Node,
content: cc.Node,
item: cc.Prefab,
itemHT: cc.Prefab,
contentNowLeft: cc.Node,
contentNowRight: cc.Node,
contentHQLeft: cc.Node,
contentHQRight: cc.Node,
LabelDate: cc.Label,
LabelDateMore: cc.Label,
nodeDateMore: cc.Node,
dataOld: !1
},
onLoad: function() {
this.dateTop = new Date();
this.dateTop.setDate(this.dateTop.getDate() - 1);
var t = this.dateTop.getDate() + "/" + n.numberPad(this.dateTop.getMonth() + 1, 2) + "/" + this.dateTop.getFullYear();
this.LabelDate.string = this.LabelDateMore.string = t;
},
selectEvent: function(t) {
this.nodeDateMore.active = !1;
"top" == t.target.name ? this.onGetTop() : "homqua" == t.target.name && this.onGetHomQua();
Promise.all(this.menu.children.map(function(e) {
if (e.name == t.target.name) {
e.children[0].active = !0;
e.children[1].color = cc.Color.BLACK;
} else {
e.children[0].active = !1;
e.children[1].color = cc.Color.WHITE;
}
}));
Promise.all(this.content.children.map(function(e) {
e.name == t.target.name ? e.active = !0 : e.active = !1;
}));
},
onGetTop: function() {
cc.RedT.send({
event: {
taixiu: {
getTop: !0
}
}
});
},
onGetHomQua: function() {
!this.dataOld && cc.RedT.send({
event: {
taixiu: {
getTopHQ: this.LabelDate.string
}
}
});
},
dateToggle: function() {
this.nodeDateMore.active = !this.nodeDateMore.active;
},
datePlus: function() {
var t = t = new Date(this.dateTop);
t.setDate(t.getDate() + 2);
if (new Date() > t) {
this.dateTop.setDate(this.dateTop.getDate() + 1);
this.LabelDateMore.string = n.numberPad(this.dateTop.getDate(), 2) + "/" + n.numberPad(this.dateTop.getMonth() + 1, 2) + "/" + this.dateTop.getFullYear();
}
},
dateMinus: function() {
this.dateTop.setDate(this.dateTop.getDate() - 1);
this.LabelDateMore.string = n.numberPad(this.dateTop.getDate(), 2) + "/" + n.numberPad(this.dateTop.getMonth() + 1, 2) + "/" + this.dateTop.getFullYear();
},
dateView: function() {
if (this.LabelDateMore.string != this.LabelDate.string) {
this.dataOld = !1;
this.LabelDate.string = this.LabelDateMore.string;
this.onGetHomQua();
}
this.nodeDateMore.active = !1;
},
onData: function(t) {
t.topHT && this.topHT(t.topHT);
if (t.topHQ) {
this.dataOld = !0;
this.topHQ(t.topHQ);
}
},
topHT: function(t) {
this.contentNowLeft.removeAllChildren();
this.contentNowRight.removeAllChildren();
var e = this;
Promise.all(t.win.map(function(t, i) {
var n;
(n = (n = cc.instantiate(e.itemHT)).getComponent("EventTaiXiu_item")).top.string = i + 1;
n.users.string = t.name;
n.day.string = t.top;
n.node.children[0].active = !(1 & i);
e.contentNowLeft.addChild(n.node);
}));
Promise.all(t.lost.map(function(t, i) {
var n;
(n = (n = cc.instantiate(e.itemHT)).getComponent("EventTaiXiu_item")).top.string = i + 1;
n.users.string = t.name;
n.day.string = t.top;
n.node.children[0].active = !(1 & i);
e.contentNowRight.addChild(n.node);
}));
},
topHQ: function(t) {
this.contentHQLeft.removeAllChildren();
this.contentHQRight.removeAllChildren();
var e = this;
Promise.all(t.win.map(function(t, i) {
var o;
(o = (o = cc.instantiate(e.item)).getComponent("EventTaiXiu_item")).top.string = t.top;
o.users.string = t.name;
o.day.string = t.line;
o.gift.string = n.numberWithCommas(t.reward);
o.node.children[0].active = !(1 & i);
e.contentHQLeft.addChild(o.node);
}));
Promise.all(t.lost.map(function(t, i) {
var o;
(o = (o = cc.instantiate(e.item)).getComponent("EventTaiXiu_item")).top.string = t.top;
o.users.string = t.name;
o.day.string = t.line;
o.gift.string = n.numberWithCommas(t.reward);
o.node.children[0].active = !(1 & i);
e.contentHQRight.addChild(o.node);
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
ForGotPass: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "71d268vawpEd7jT7rX6zxb6", "ForGotPass");
var n = t("BrowserUtil");
t("Helper");
cc.Class({
extends: cc.Component,
properties: {
username: {
default: null,
type: cc.EditBox
},
newpass: {
default: null,
type: cc.EditBox
},
renewpass: {
default: null,
type: cc.EditBox
},
otp: {
default: null,
type: cc.EditBox
},
captcha: {
default: null,
type: cc.EditBox
},
capchaSprite: cc.Sprite
},
onLoad: function() {
var t = this;
this.editboxs = [ this.username, this.newpass, this.renewpass, this.otp, this.captcha ];
this.keyHandle = function(e) {
return e.keyCode === cc.macro.KEY.tab ? (t.changeNextFocusEditBox(), e.preventDefault && e.preventDefault(), 
!1) : e.keyCode === cc.macro.KEY.enter ? (n.focusGame(), t.onForGotClick(), e.preventDefault && e.preventDefault(), 
!1) : e.keyCode === cc.macro.KEY.escape ? (cc.RedT.inGame.dialog.onClickBack(), 
e.preventDefault && e.preventDefault(), !1) : void 0;
};
},
onEnable: function() {
cc.sys.isBrowser && this.addEvent();
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
this.reCaptcha();
},
onDisable: function() {
cc.sys.isBrowser && this.removeEvent();
this.clean();
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
},
addEvent: function() {
cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
for (var t in this.editboxs) n.getHTMLElementByEditBox(this.editboxs[t]).addEventListener("keydown", this.keyHandle, !1);
},
removeEvent: function() {
for (var t in this.editboxs) n.getHTMLElementByEditBox(this.editboxs[t]).removeEventListener("keydown", this.keyHandle, !1);
cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
},
onBackPopup: function() {
cc.RedT.inGame.dialog.onClickBack();
},
onKeyDown: function(t) {
switch (t.keyCode) {
case cc.macro.KEY.escape:
this.isTop() && cc.RedT.inGame.dialog.onClickBack();
break;

case cc.macro.KEY.tab:
this.isTop() && this.changeNextFocusEditBox();
break;

case cc.macro.KEY.enter:
this.isTop() && this.onForGotClick();
}
},
changeNextFocusEditBox: function() {
for (var t = !1, e = 0, i = this.editboxs.length; e < i; e++) if (n.checkEditBoxFocus(this.editboxs[e])) {
n.focusEditBox(this.editboxs[e]);
t = !0;
break;
}
!t && 0 < this.editboxs.length && n.focusEditBox(this.editboxs[0]);
},
isTop: function() {
return !cc.RedT.inGame.notice.node.active && !cc.RedT.inGame.loading.active;
},
clean: function() {
this.username.string = this.newpass.string = this.renewpass.string = this.otp.string = this.captcha.string = "";
},
onForGotClick: function() {
this.username.string.length < 3 || this.username.string.length > 32 ? cc.RedT.inGame.notice.show({
title: "LỖI",
text: "Vui lòng nhập chính xác tên tài khoản..."
}) : null === this.username.string.match(new RegExp("^[a-zA-Z0-9]+$")) ? cc.RedT.inGame.notice.show({
title: "LỖI",
text: "Tên tài khoản chỉ gồm Chữ và Số!"
}) : this.newpass.string.length < 6 || this.newpass.string.length > 32 ? cc.RedT.inGame.notice.show({
title: "LỖI",
text: "Độ dài mật khẩu tối thiểu 6-32 kí tự..."
}) : this.newpass.string.length != this.renewpass.string.length ? cc.RedT.inGame.notice.show({
title: "LỖI",
text: "Nhập lại mật khẩu không đúng..."
}) : 4 != this.otp.string.length ? cc.RedT.inGame.notice.show({
title: "LỖI",
text: "Mã OTP không hợp lệ..."
}) : 4 != this.captcha.string.length ? cc.RedT.inGame.notice.show({
title: "LỖI",
text: "Captcha không đúng."
}) : cc.RedT.send({
forgotpass: {
iforgot: {
name: this.username.string,
pass: this.newpass.string,
otp: this.otp.string,
captcha: this.captcha.string
}
}
});
},
initCaptcha: function(t) {
var e = this, i = new Image();
i.src = t, i.width = 150, i.height = 50, setTimeout(function() {
var t = new cc.Texture2D();
t.initWithElement(i), t.handleLoadedTexture();
var n = new cc.SpriteFrame(t);
e.capchaSprite.spriteFrame = n;
}, 10);
},
reCaptcha: function() {
cc.RedT.send({
captcha: "forgotpass"
});
},
onClickOTP: function() {
this.username.string.trim();
this.username.string.length < 3 || this.username.string.length > 32 ? cc.RedT.inGame.notice.show({
title: "LỖI",
text: "Vui lòng nhập chính xác tên tài khoản..."
}) : cc.RedT.send({
forgotpass: {
sendOTP: this.username.string
}
});
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
GameData: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "facc9+aHPhBxKW+WSSr5sCG", "GameData");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = function() {
function t() {
this.gameLogic = null;
this.gameType = 0;
this.moneyBetWinList = [];
this.moneyBetXuList = [];
this.configVinList = [];
this.configXuList = [];
this.configGameCoVin = [];
this.configGameCoXu = [];
this.save_BetVinList = [];
this.save_BetXuList = [];
this.xuTopServerWeekListMoney = [];
this.xuTopServerAllListMoney = [];
this.vinTopServerWeekListMoney = [];
this.vinTopServerAllListMoney = [];
this.xuTopServerWeekListNumber = [];
this.xuTopServerAllListNumber = [];
this.vinTopServerWeekListNumber = [];
this.vinTopServerAllListNumber = [];
this.topDayVin_money = [];
this.topWeekVin_money = [];
this.topMonthVin_money = [];
this.topDayVin_number = [];
this.topWeekVin_number = [];
this.topMonthVin_number = [];
this.topDayXu_money = [];
this.topWeekXu_money = [];
this.topMonthXu_money = [];
this.topDayXu_number = [];
this.topWeekXu_number = [];
this.topMonthXu_number = [];
this.vinCaoThuList = [];
this.xuCaoThuList = [];
this.maxPlayer = -1;
this.RoomFind = [];
this.fundVipMinRegis = null;
this.ListRoomHavePass = [];
this.ruleType = 0;
this.openMoiChoi = !1;
this.gameLogic = null;
this.gameType = 0;
this.moneyBetWinList = [];
this.moneyBetXuList = [];
this.configVinList = [];
this.configXuList = [];
this.configGameCoVin = [];
this.configGameCoXu = [];
this.save_BetVinList = [];
this.save_BetXuList = [];
this.xuTopServerWeekListMoney = [];
this.xuTopServerAllListMoney = [];
this.vinTopServerWeekListMoney = [];
this.vinTopServerAllListMoney = [];
this.xuTopServerWeekListNumber = [];
this.xuTopServerAllListNumber = [];
this.vinTopServerWeekListNumber = [];
this.vinTopServerAllListNumber = [];
this.topDayVin_money = [];
this.topWeekVin_money = [];
this.topMonthVin_money = [];
this.topDayVin_number = [];
this.topWeekVin_number = [];
this.topMonthVin_number = [];
this.topDayXu_money = [];
this.topWeekXu_money = [];
this.topMonthXu_money = [];
this.topDayXu_number = [];
this.topWeekXu_number = [];
this.topMonthXu_number = [];
this.vinCaoThuList = [];
this.xuCaoThuList = [];
this.maxPlayer = -1;
this.RoomFind = [];
this.fundVipMinRegis = null;
this.ListRoomHavePass = [];
this.ruleType = 0;
this.openMoiChoi = !1;
}
t.getInstance = function() {
null == this.instance && (this.instance = new t());
return this.instance;
};
return t;
}();
i.default = n;
cc._RF.pop();
}, {} ],
GiftCode: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "ffeb6RH/gdFxI6pq25qidEr", "GiftCode");
var n = t("BrowserUtil");
cc.Class({
extends: cc.Component,
properties: {
giftcode: {
default: null,
type: cc.EditBox
},
captcha: {
default: null,
type: cc.EditBox
},
capchaSprite: cc.Sprite
},
onLoad: function() {
var t = this;
this.editboxs = [ this.giftcode, this.captcha ];
this.keyHandle = function(e) {
return e.keyCode === cc.macro.KEY.tab ? (t.changeNextFocusEditBox(), e.preventDefault && e.preventDefault(), 
!1) : e.keyCode === cc.macro.KEY.enter ? (n.focusGame(), t.onSendClick(), e.preventDefault && e.preventDefault(), 
!1) : e.keyCode === cc.macro.KEY.escape ? (cc.RedT.inGame.dialog.onClickBack(), 
e.preventDefault && e.preventDefault(), !1) : void 0;
};
},
onBackPopup: function() {
cc.RedT.inGame.dialog.onClickBack();
},
onEnable: function() {
cc.sys.isBrowser && this.addEvent();
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
this.reCaptcha();
},
onDisable: function() {
cc.sys.isBrowser && this.removeEvent();
this.clean();
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
},
addEvent: function() {
cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
for (var t in this.editboxs) n.getHTMLElementByEditBox(this.editboxs[t]).addEventListener("keydown", this.keyHandle, !1);
},
removeEvent: function() {
for (var t in this.editboxs) n.getHTMLElementByEditBox(this.editboxs[t]).removeEventListener("keydown", this.keyHandle, !1);
cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
},
onKeyDown: function(t) {
switch (t.keyCode) {
case cc.macro.KEY.escape:
this.isTop() && cc.RedT.inGame.dialog.onClickBack();
break;

case cc.macro.KEY.tab:
this.isTop() && this.changeNextFocusEditBox();
break;

case cc.macro.KEY.enter:
this.isTop() && this.onSendClick();
}
},
changeNextFocusEditBox: function() {
for (var t = !1, e = 0, i = this.editboxs.length; e < i; e++) if (n.checkEditBoxFocus(this.editboxs[e])) {
n.focusEditBox(this.editboxs[e]);
t = !0;
break;
}
!t && 0 < this.editboxs.length && n.focusEditBox(this.editboxs[0]);
},
isTop: function() {
return !cc.RedT.inGame.notice.node.active && !cc.RedT.inGame.loading.active;
},
clean: function() {
this.giftcode.string = this.captcha.string = "";
},
onSendClick: function() {
var t = null;
this.giftcode.string.length > 32 || this.giftcode.string.length < 3 ? t = "Mã Giftcode không hợp lệ..." : this.captcha.string.length < 4 && (t = "Vui lòng nhập Captcha.");
t ? cc.RedT.inGame.notice.show({
title: "GIFT CODE",
text: t
}) : cc.RedT.send({
giftcode: {
code: this.giftcode.string,
captcha: this.captcha.string
}
});
},
initCaptcha: function(t) {
var e = this, i = new Image();
i.src = t, i.width = 150, i.height = 50, setTimeout(function() {
var t = new cc.Texture2D();
t.initWithElement(i), t.handleLoadedTexture();
var n = new cc.SpriteFrame(t);
e.capchaSprite.spriteFrame = n;
}, 10);
},
reCaptcha: function() {
cc.RedT.send({
captcha: "giftcode"
});
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil"
} ],
HaiTac_bonus_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "91c0fIWsbdK0Yumf+VxEKN1", "HaiTac_bonus_item");
cc.Class({
extends: cc.Component,
properties: {
open: cc.Node,
close: cc.Node,
text: cc.Label
}
});
cc._RF.pop();
}, {} ],
HaiTac_dialog: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "2a6b1U3FGZEh4+9cJ2RqHeK", "HaiTac_dialog");
var n = t("HaiTac_history"), o = t("HaiTac_top");
cc.Class({
extends: cc.Component,
properties: {
history: n,
top: o,
help: cc.Node
},
init: function() {
this.actionShow = cc.spawn(cc.scaleTo(.5, 1).easing(cc.easeBackOut(2.5)), cc.fadeTo(.5, 255));
this.objShow = null;
this.objTmp = null;
},
onClickBack: function() {
cc.RedT.audio.playUnClick();
this.onBack();
},
onBack: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = !1;
this.node.active = !1;
this.objShow = null;
} else {
this.objTmp = this.objShow;
this.objShow = this.objShow.previous;
this.objTmp.previous = null;
this.objTmp.active = !1;
this.objShow.active = !0;
this.objTmp = null;
} else this.node.active = !1;
},
onClosePrevious: function(t) {
if (void 0 !== t.previous && null !== t.previous) {
this.onClosePrevious(t.previous);
delete t.previous;
}
t.active = !1;
},
onCloseDialog: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = this.node.active = !1;
this.objShow = null;
} else {
this.onClosePrevious(this.objShow.previous);
this.objShow.active = this.node.active = !1;
delete this.objShow.previous;
this.objShow = null;
} else this.node.active = !1;
},
resetSizeDialog: function(t) {
t.stopAllActions();
t.scale = .5;
t.opacity = 0;
},
showHistory: function() {
this.node.active = this.history.node.active = !0;
this.objShow = this.history.node;
},
showTop: function() {
this.node.active = this.top.node.active = !0;
this.objShow = this.top.node;
},
showHelp: function() {
this.node.active = this.help.active = !0;
this.objShow = this.help;
}
});
cc._RF.pop();
}, {
HaiTac_history: "HaiTac_history",
HaiTac_top: "HaiTac_top"
} ],
HaiTac_history: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "b1cf3kP1rVFqK9mVoJzv0jN", "HaiTac_history");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
onLoad: function() {
var t = this, e = cc.instantiate(this.page);
e.y = -280;
this.node.addChild(e);
this.page = e.getComponent("Pagination");
Promise.all(this.content.children.map(function(t) {
return t.getComponent("VQRed_history_item");
})).then(function(e) {
t.content = e;
});
this.page.init(this);
},
onEnable: function() {
this.get_data();
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
g: {
candy: {
log: {
red: this.red,
page: t
}
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
this.page.onSet(t.page, t.kmess, t.total);
Promise.all(this.content.map(function(e, i) {
var o = t.data[i];
if (void 0 !== o) {
e.node.active = !0;
e.time.string = n.getStringDateByTime(o.time);
e.phien.string = o.id;
e.cuoc.string = n.numberWithCommas(o.bet);
e.win.string = o.line + " Dòng";
e.line.string = n.numberWithCommas(o.win);
} else e.node.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
HaiTac_iline: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "6b5f3SrLapO+qctg141UQUe", "HaiTac_iline");
cc.Class({
extends: cc.Component,
init: function(t) {
this.RedT = t;
return this;
},
onEnable: function() {
this.node.on(cc.Node.EventType.MOUSE_ENTER, this.onhover, this);
this.node.on(cc.Node.EventType.MOUSE_LEAVE, this.offhover, this);
},
onDisable: function() {
this.node.off(cc.Node.EventType.MOUSE_ENTER, this.onhover, this);
this.node.off(cc.Node.EventType.MOUSE_LEAVE, this.offhover, this);
},
onhover: function() {
this.node.children[0].active = !0;
},
offhover: function() {
this.node.children[0].active = !1;
},
onEf: function() {
this.onhover();
this.node.pauseSystemEvents();
},
offEf: function() {
this.offhover();
this.node.resumeSystemEvents();
}
});
cc._RF.pop();
}, {} ],
HaiTac_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "256e0Zx1oFNQrW04CZmrNfT", "HaiTac_item");
cc.Class({
extends: cc.Component,
properties: {
icons: {
default: [],
type: cc.Prefab
}
},
init: function(t) {
this.RedT = t;
},
random: function() {
var t = 11 * Math.random() >> 0;
this.setIcon(t);
return t;
},
setIcon: function(t) {
var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
this.node.removeAllChildren();
var i = cc.instantiate(this.icons[t]);
i.setScale(cc.v2(.95, .95));
this.node.addChild(i);
e && (this.data = t);
}
});
cc._RF.pop();
}, {} ],
HaiTac_lines: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "ba031s79upJh4qii0wYMw6n", "HaiTac_lines");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
nodeEfLine: cc.Node,
nodeLine: cc.Node,
mainLine: cc.Node
},
init: function(t) {
var e = this;
this.lines = {
1: [ 1, 1, 1, 1, 1 ],
2: [ 0, 0, 0, 0, 0 ],
3: [ 2, 2, 2, 2, 2 ],
4: [ 2, 1, 0, 1, 2 ],
5: [ 0, 1, 2, 1, 0 ],
6: [ 1, 0, 0, 0, 1 ],
7: [ 1, 2, 2, 2, 1 ],
8: [ 0, 0, 1, 2, 2 ],
9: [ 2, 2, 1, 0, 0 ],
10: [ 1, 0, 1, 2, 1 ],
11: [ 1, 2, 1, 0, 1 ],
12: [ 0, 1, 1, 1, 0 ],
13: [ 2, 1, 1, 1, 2 ],
14: [ 0, 1, 0, 1, 0 ],
15: [ 2, 1, 2, 1, 2 ],
16: [ 1, 1, 0, 1, 1 ],
17: [ 1, 1, 2, 1, 1 ],
18: [ 0, 0, 2, 0, 0 ],
19: [ 2, 2, 0, 2, 2 ],
20: [ 0, 2, 2, 2, 0 ],
21: [ 2, 0, 0, 0, 2 ],
22: [ 1, 0, 2, 0, 1 ],
23: [ 1, 2, 0, 2, 1 ],
24: [ 0, 2, 0, 2, 0 ],
25: [ 2, 0, 2, 0, 2 ]
};
this.RedT = t;
var i = this;
Promise.all(this.mainLine.children.map(function(t) {
return t.getComponent("HaiTac_iline").init(i.RedT);
})).then(function(t) {
e.mainLine = t;
});
this.selectAll(null, "1");
},
onOpen: function() {
cc.RedT.audio.playClick();
this.node.active = !0;
},
onClose: function() {
cc.RedT.audio.playUnClick();
this.node.active && this.data.length < 1 ? this.RedT.addNotice("Chọn ít nhất 1 dòng") : this.node.active = !1;
},
select: function(t) {
var e = t.target;
if (e.children[0].active) {
e.children[0].active = !1;
e.children[1].active = !0;
} else {
e.children[0].active = !0;
e.children[1].active = !1;
}
this.check();
},
check: function() {
var t = this;
Promise.all(this.nodeLine.children.map(function(t, e) {
return t.children[0].active ? e + 1 : void 0;
})).then(function(e) {
Promise.all(e.filter(function(t) {
return void 0 !== t;
})).then(function(e) {
t.data = e;
t.RedT.labelLine.string = e.length;
t.RedT.tong.string = n.numberWithCommas(e.length * n.getOnlyNumberInString(t.RedT.bet.string));
});
});
},
selectChan: function(t) {
var e = this;
console.log(t.target);
Promise.all(this.nodeLine.children.map(function(t, e) {
var i = e + 1;
if (!(i % 2)) {
t.children[0].active = !1;
t.children[1].active = !0;
return i;
}
t.children[0].active = !0;
t.children[1].active = !1;
})).then(function(t) {
Promise.all(t.filter(function(t) {
return void 0 !== t;
})).then(function(t) {
e.data = t;
e.RedT.labelLine.string = t.length;
e.RedT.tong.string = n.numberWithCommas(t.length * n.getOnlyNumberInString(e.RedT.bet.string));
});
});
},
selectLe: function(t) {
var e = this;
Promise.all(this.nodeLine.children.map(function(t, e) {
var i = e + 1;
if (i % 2) {
t.children[0].active = !1;
t.children[1].active = !0;
return i;
}
t.children[0].active = !0;
t.children[1].active = !1;
})).then(function(t) {
Promise.all(t.filter(function(t) {
return void 0 !== t;
})).then(function(t) {
e.data = t;
e.RedT.labelLine.string = t.length;
e.RedT.tong.string = n.numberWithCommas(t.length * n.getOnlyNumberInString(e.RedT.bet.string));
});
});
},
selectAll: function(t, e) {
var i = this;
Promise.all(this.nodeLine.children.map(function(t, i) {
var n = "1" == e;
t.children[0].active = n;
t.children[1].active = !n;
return n ? i + 1 : void 0;
})).then(function(t) {
Promise.all(t.filter(function(t, e) {
return void 0 !== t;
})).then(function(t) {
i.data = t;
i.RedT.labelLine.string = t.length;
i.RedT.tong.string = n.numberWithCommas(t.length * n.getOnlyNumberInString(i.RedT.bet.string));
});
});
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
HaiTac_playBonus: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "b8cefEa3LZIvaVJc9Rko7Fn", "HaiTac_playBonus");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
numberBonus: cc.Label,
listBox: cc.Node,
notice: cc.Node,
numberWin: cc.Label,
icons: {
default: [],
type: cc.SpriteFrame
}
},
init: function(t) {
var e = this;
this.RedT = t;
Promise.all(this.listBox.children.map(function(t) {
return t.getComponent("CoTrang_bonus_item");
})).then(function(t) {
e.listBox = t;
});
},
onPlay: function(t) {
this.reset();
this.node.active = !0;
this.numberBonus.string = t;
},
onClickBox: function(t) {
if (this.numberBonus.string) {
this.RedT.playClick();
this.onSend(t.target.name);
}
},
closeNotice: function() {
this.notice.active = this.node.active = !1;
this.RedT.hieuUng();
},
onData: function(t) {
if (void 0 !== t.box) {
var e = this.listBox[t.box];
e.open.active = !0;
e.close.active = !1;
e.text.string = n.numberWithCommas(t.bet);
this.numberBonus.string = t.bonus;
}
if (void 0 !== t.win) {
this.notice.active = !0;
this.numberWin.string = n.numberWithCommas(t.win);
this.RedT.vuathang.string = n.numberWithCommas(1 * n.getOnlyNumberInString(this.RedT.vuathang.string) + t.win);
}
},
onSend: function(t) {
cc.RedT.send({
g: {
candy: {
bonus: {
box: t
}
}
}
});
},
reset: function() {
Promise.all(this.listBox.map(function(t) {
t.open.active = !1;
t.close.active = !0;
t.text.string = "";
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
HaiTac_reel: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "fddd9Gii1tMm5snw5ruF37G", "HaiTac_reel");
cc.Class({
extends: cc.Component,
init: function(t) {
var e = this;
this.RedT = t;
this.icons = [];
var i = this, n = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
Promise.all(n.map(function(t, e) {
var o = cc.instantiate(i.RedT.icon);
i.node.addChild(o);
(o = o.getComponent("HaiTac_item")).init(i.RedT);
e > 2 && e < n.length - 3 && o.random();
return o;
})).then(function(t) {
e.icons = t;
e.icons[e.icons.length - 1].setIcon(e.icons[4].random());
e.icons[e.icons.length - 2].setIcon(e.icons[3].random());
e.icons[e.icons.length - 3].setIcon(e.icons[2].random());
e.icons[e.icons.length - 4].setIcon(e.icons[1].random());
e.icons[e.icons.length - 5].setIcon(e.icons[0].random());
});
},
spin: function(t) {
this.node.stopAllActions();
var e = cc.moveTo(1, cc.v2(this.node.x, -(this.node.height - 396))).easing(cc.easeInOut(3)), i = cc.callFunc(function() {
0 === t && this.RedT.copy();
this.node.y = 0;
}, this);
if (4 === t) {
var n = cc.callFunc(function() {
this.RedT.EF_vuathang();
this.node.y = 0;
this.RedT.random();
this.RedT.hieuUng();
}, this);
this.node.runAction(cc.sequence(cc.delayTime(.1 * t), e, n));
} else this.node.runAction(cc.sequence(cc.delayTime(.1 * t), e, i));
},
stop: function() {
this.node.stopAllActions();
this.RedT.copy();
this.node.y = 0;
}
});
cc._RF.pop();
}, {} ],
HaiTac_top: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "2d845AP/H9JeJ6UpZlBJzVh", "HaiTac_top");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
onLoad: function() {
var t = this, e = cc.instantiate(this.page);
e.y = -280;
this.node.addChild(e);
this.page = e.getComponent("Pagination");
Promise.all(this.content.children.map(function(t) {
return t.getComponent("VQRed_history_item");
})).then(function(e) {
t.content = e;
});
this.page.init(this);
},
onEnable: function() {
this.get_data();
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
g: {
candy: {
top: {
red: this.red,
page: t
}
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
this.page.onSet(t.page, t.kmess, t.total);
Promise.all(this.content.map(function(e, i) {
var o = t.data[i];
if (void 0 !== o) {
e.node.active = !0;
e.time.string = n.getStringDateByTime(o.time);
e.phien.string = o.name;
e.cuoc.string = n.numberWithCommas(o.bet);
e.line.string = 2 == o.type ? "Jackpot" : "Bigwin";
e.win.string = n.numberWithCommas(o.win);
} else e.node.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
HaiTac: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "56a6b462+RHfa7gq8sk0V9W", "HaiTac");
var n = t("Helper"), o = t("HaiTac_reel"), c = t("HaiTac_lines"), s = t("HaiTac_playBonus"), a = t("Notice"), h = t("HaiTac_dialog");
cc.Class({
extends: cc.Component,
properties: {
gameBonus: s,
audioBG: cc.AudioSource,
audioClickSpin: {
default: null,
type: cc.AudioClip
},
audioClick: {
default: null,
type: cc.AudioClip
},
audioWin: {
default: null,
type: cc.AudioClip
},
audioBigWin: {
default: null,
type: cc.AudioClip
},
audioJackpot: {
default: null,
type: cc.AudioClip
},
redhat: cc.Node,
reels: {
default: [],
type: o
},
efline: cc.Node,
icon: cc.Prefab,
icons: {
default: [],
type: cc.SpriteFrame
},
betString: {
default: [],
type: cc.String
},
audioIcons: {
default: [],
type: cc.SpriteFrame
},
audioIcon: cc.Sprite,
nodeRed: cc.Node,
nodeXu: cc.Node,
nodeNotice: cc.Node,
prefabNotice: cc.Prefab,
MiniPanel: cc.Prefab,
loading: cc.Node,
notice: a,
dialog: h,
Line: c,
hu: cc.Label,
taikhoan: cc.Label,
tong: cc.Label,
vuathang: cc.Label,
labelLine: cc.Label,
bet: cc.Label,
freeLabel: cc.Label,
phien: cc.Label,
BigWin: cc.Animation,
BigWin_Label: cc.Label,
NoHu_close: cc.Node,
NoHu: cc.Animation,
NoHu_Label: cc.Label,
EF_Bonus: cc.Animation,
EF_Free: cc.Animation,
buttonCoint: cc.Node,
buttonLine: cc.Node,
buttonSpin: cc.Node,
buttonBet: cc.Node,
buttonAuto: cc.Node,
isAuto: !1,
isSpin: !1,
isFreeSpin: !1,
red: !0,
betSelect: 0
},
onLoad: function() {
cc.RedT.inGame = this;
var t = this;
this.Line.init(this);
this.BigWin.on("finished", this.BigWinFinish, this);
this.BigWin.on("play", this.BigWinPlay, this);
this.EF_Free.on("finished", this.EF_FreeFinish, this);
this.NoHu.on("play", this.NoHuPlay, this);
this.EF_Bonus.on("finished", this.EF_BonusFinish, this);
this.gameBonus.init(this);
this.dialog.init();
Promise.all(this.reels.map(function(e) {
e.init(t);
}));
cc.RedT.send({
scene: "candy"
});
this.taikhoan.string = n.numberWithCommas(cc.RedT.user.red);
this.speed = 400;
if (cc.RedT.isSoundBackground()) {
this.playMusic();
this.audioIcon.spriteFrame = this.audioIcons[1];
} else this.audioIcon.spriteFrame = this.audioIcons[0];
},
_playSFX: function(t) {
cc.RedT.IS_SOUND && cc.audioEngine.playEffect(t, !1);
},
playClick: function() {
this._playSFX(this.audioClick);
},
BigWinPlay: function() {
var t = cc.callFunc(function() {
this._playSFX(this.audioBigWin);
n.numberTo(this.BigWin_Label, 0, this.H_win, 2e3, !0);
}, this);
this.BigWin.node.runAction(cc.sequence(cc.delayTime(.3), t));
},
BigWinFinish: function() {
this.isBigWin = !1;
this.BigWin.node.active = !1;
this.BigWin_Label.string = "";
this.showLineWin(!1);
this.hieuUng();
},
NoHuPlay: function() {
this.NoHu_Label.string = "";
var t = cc.callFunc(function() {
this._playSFX(this.audioJackpot);
n.numberTo(this.NoHu_Label, 0, this.H_win, 2e3, !0);
}, this);
this.NoHu.node.runAction(cc.sequence(cc.delayTime(.3), t));
var e = cc.callFunc(function() {
this.NoHu_close.active = !0;
}, this);
this.NoHu.node.runAction(cc.sequence(cc.delayTime(4), e));
},
NoHuFinish: function() {
this.isNoHu = !1;
this.isAuto && this.onAuto();
this.showLineWin(!1);
this.hieuUng();
},
NoHuClose: function() {
this.NoHu.node.active = this.NoHu_close.active = !1;
this.NoHuFinish();
},
EF_BonusFinish: function() {
this.EF_Bonus.node.active = !1;
this.gameBonus.onPlay(this.isBonus);
this.isBonus = 0;
this.showLineWin(!1);
},
EF_FreeFinish: function() {
this.isFree = !1;
this.EF_Free.node.active = !1;
this.showLineWin(!1);
this.hieuUng();
},
onData: function(t) {
if (void 0 !== t.user) {
this.userData(t.user);
cc.RedT.userData(t.user);
}
void 0 !== t.candy && this.HaiTac(t.candy);
void 0 !== t.mini && null != cc.RedT.minigame && cc.RedT.minigame.onData(t.mini);
void 0 !== t.TopHu && cc.RedT.MiniPanel.TopHu.onData(t.TopHu);
void 0 !== t.taixiu && null != cc.RedT.minigame && cc.RedT.minigame.isLoadTaiXiu && cc.RedT.minigame.TaiXiu.TX_Main.onData(t.taixiu);
},
userData: function(t) {
this.red ? this.taikhoan.string = n.numberWithCommas(t.red) : this.taikhoan.string = n.numberWithCommas(t.xu);
},
HaiTac: function(t) {
var e = this;
if (void 0 !== t.status) if (1 === t.status) {
Promise.all(t.cel.map(function(t, i) {
Promise.all(t.map(function(t, n) {
e.reels[i].icons[n].setIcon(t, !0);
}));
}));
this.runReels();
this.H_line_win = t.line_win;
this.H_win = t.win;
this.H_free = t.free;
this.isBonus = t.isBonus;
this.isNoHu = t.isNoHu;
this.isBigWin = t.isBigWin;
this.isFree = t.isFree;
this.isFreeSpin = !!t.free;
} else this.resetSpin();
t.phien && (this.phien.string = "#" + t.phien);
t.bonus && this.gameBonus.onData(t.bonus);
t.log && this.dialog.history.onData(t.log);
t.top && this.dialog.top.onData(t.top);
t.notice && this.addNotice(t.notice);
},
EF_vuathang: function() {
this.showLineWin(!0);
this.vuathang.string = n.numberWithCommas(this.H_win);
this.buttonSpin.active = !this.H_free;
this.freeLabel.string = "Free: " + this.H_free;
this.freeLabel.node.active = !!this.H_free;
},
onLineWin: function(t) {
var e = this;
Promise.all(this.H_line_win.map(function(i) {
Promise.all(e.Line.lines[i.line].map(function(i, n) {
e.efline.children[n].children[i].active = t;
}));
var n = e.Line.mainLine[i.line - 1];
if (t) {
n.onhover();
n.node.pauseSystemEvents();
} else {
n.offhover();
n.node.resumeSystemEvents();
}
}));
},
showLineWin: function(t) {
this.onLineWin(t);
if (!(t || this.isNoHu || this.isBigWin || this.isAuto || this.isFreeSpin)) {
this.eflineN = 0;
this.efLineWin();
}
},
efLineWin: function(t) {
if (this.H_line_win.length) {
this.node.stopAllActions();
void 0 === this.H_line_win[this.eflineN] && (this.eflineN = 0);
this.efOneLineWin(this.eflineN, !0);
var e = cc.callFunc(function() {
this.efOneLineWin(this.eflineN, !1);
this.eflineN += 1;
this.efLineWin();
}, this);
this.node.runAction(cc.sequence(cc.delayTime(1.5), e));
}
},
efOneLineWin: function(t, e) {
var i = this;
t = this.H_line_win[this.eflineN].line;
Promise.all(this.Line.lines[t].map(function(t, n) {
i.efline.children[n].children[t].active = e;
}));
var n = this.Line.mainLine[t - 1];
if (e) {
n.onhover();
n.node.pauseSystemEvents();
} else {
n.offhover();
n.node.resumeSystemEvents();
}
},
hieuUng: function() {
if (this.isBigWin && !this.isNoHu) {
this.BigWin.node.active = !0;
this.BigWin.play();
this.oldBigWin = !0;
} else if (this.isNoHu) {
this.NoHu.node.active = !0;
this.NoHu.play();
} else if (this.isBonus) {
this.EF_Bonus.node.active = !0;
this.EF_Bonus.play();
cc.RedT.audio.playEf("bonus");
} else if (this.isFree) {
this.EF_Free.node.active = !0;
this.EF_Free.play();
} else if (this.H_win > 0) {
var t = new cc.Node();
t.addComponent(cc.Label);
(t = t.getComponent(cc.Label)).string = "+" + n.numberWithCommas(this.H_win);
t.font = cc.RedT.util.fontCong;
t.lineHeight = 130;
t.fontSize = 25;
t.node.position = cc.v2(0, 21);
this.nodeNotice.addChild(t.node);
!this.oldBigWin && this._playSFX(this.audioWin);
t.node.runAction(cc.sequence(cc.moveTo(1.2, cc.v2(0, 105)), cc.callFunc(function() {
this.speed = 0;
t.node.destroy();
this.hieuUng();
this.showLineWin(!1);
}, this)));
this.H_win = 0;
this.oldBigWin = !1;
} else this.isAuto || this.isFreeSpin ? this.timeOut = setTimeout(function() {
this.onAutoSpin();
this.speed = 400;
}.bind(this), this.speed) : this.resetSpin();
},
onChangerBet: function() {
this._playSFX(this.audioClick);
this.betSelect++;
this.betSelect > 2 && (this.betSelect = 0);
this.bet.string = this.betString[this.betSelect];
this.tong.string = n.numberWithCommas(this.Line.data.length * n.getOnlyNumberInString(this.bet.string));
this.onGetHu();
},
changerCoint: function() {
this.red = !this.red;
this.nodeRed.active = !this.nodeRed.active;
this.nodeXu.active = !this.nodeXu.active;
this.userData(cc.RedT.user);
this.onGetHu();
},
onClickAuto: function() {
this._playSFX(this.audioClick);
this.onAuto();
},
onAuto: function() {
this.isAuto = !this.isAuto;
this.isAuto ? this.buttonAuto.color = cc.Color.WHITE : this.buttonAuto.color = this.buttonAuto.color.fromHEX("#8A8A8A");
},
onClickSpin: function() {
this.onSpin();
},
onAutoSpin: function() {
this._playSFX(this.audioClickSpin);
this.onGetSpin();
},
onSpin: function() {
if (this.Line.data.length < 1) this.addNotice("Chọn ít nhất 1 dòng"); else if (!this.isSpin) {
this._playSFX(this.audioClickSpin);
this.node.stopAllActions();
void 0 !== this.eflineN && void 0 !== this.H_line_win && this.H_line_win.length && this.efOneLineWin(this.eflineN, !1);
this.eflineO = this.eflineN = 0;
this.isSpin = !0;
this.setSpin();
this.onGetSpin();
}
},
setSpin: function() {
this.buttonLine.pauseSystemEvents();
this.buttonSpin.pauseSystemEvents();
this.buttonCoint.pauseSystemEvents();
this.buttonBet.pauseSystemEvents();
},
resetSpin: function() {
this.isAuto && this.onAuto();
this.isSpin = !1;
this.buttonLine.resumeSystemEvents();
this.buttonSpin.resumeSystemEvents();
this.buttonCoint.resumeSystemEvents();
this.buttonBet.resumeSystemEvents();
},
runReels: function() {
Promise.all(this.reels.map(function(t, e) {
t.spin(e);
}));
},
copy: function() {
Promise.all(this.reels.map(function(t) {
t.icons[t.icons.length - 1].setIcon(t.icons[2].data);
t.icons[t.icons.length - 2].setIcon(t.icons[1].data);
t.icons[t.icons.length - 3].setIcon(t.icons[0].data);
}));
},
random: function() {
Promise.all(this.reels.map(function(t) {
Promise.all(t.icons.map(function(e, i) {
i > 2 && i < t.icons.length - 3 && e.random();
}));
}));
},
onGetSpin: function() {
cc.RedT.send({
g: {
candy: {
spin: {
cuoc: n.getOnlyNumberInString(this.bet.string),
line: this.Line.data
}
}
}
});
},
addNotice: function(t) {
var e = cc.instantiate(this.prefabNotice);
e.getComponent("mini_warning").text.string = t;
this.nodeNotice.addChild(e);
},
backGame: function() {
cc.RedT.inGame.notice.show({
title: "Thoát game",
text: "Xác nhận hành động.\nHành động thực hiện thoát khỏi game này?",
button: {
type: "exit_game",
text: "Thoát"
}
});
},
signOut: function() {
cc.director.preloadScene("MainGame", function() {
cc.director.loadScene("MainGame", function() {
cc.RedT.inGame.signOut();
});
});
},
onGetHu: function() {
var t = this;
if (void 0 !== cc.RedT.setting.topHu.data) {
var e = this, i = n.getOnlyNumberInString(e.bet.string);
Promise.all(cc.RedT.setting.topHu.data.candy.filter(function(t) {
return t.type == i && t.red == e.red;
})).then(function(e) {
var i = n.getOnlyNumberInString(t.hu.string), o = e[0].bet;
i - o != 0 && n.numberTo(t.hu, i, o, 2e3, !0);
});
}
},
playMusic: function() {
this.audioBG.play();
},
pauseMusic: function() {
this.audioBG.pause();
},
onSetAudio: function() {
if (cc.RedT.isSoundBackground()) {
cc.RedT.setSoundBackground(!1);
this.pauseMusic();
cc.RedT.IS_SOUND = !1;
cc.RedT.setSoundGame(!1);
this.audioIcon.spriteFrame = this.audioIcons[0];
} else {
cc.RedT.setSoundBackground(!0);
this.playMusic();
cc.RedT.IS_SOUND = !0;
cc.RedT.setSoundGame(!0);
this.audioIcon.spriteFrame = this.audioIcons[1];
}
}
});
cc._RF.pop();
}, {
HaiTac_dialog: "HaiTac_dialog",
HaiTac_lines: "HaiTac_lines",
HaiTac_playBonus: "HaiTac_playBonus",
HaiTac_reel: "HaiTac_reel",
Helper: "Helper",
Notice: "Notice"
} ],
HandlerButton: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "28a51G8kGhIrLmcDlTxUxKT", "HandlerButton");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = cc._decorator, o = n.ccclass, c = n.property, s = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.spriteFrameOn = null;
e.spriteFrameOff = null;
e.sprite = null;
return e;
}
e.prototype.onLoad = function() {
this.sprite.spriteFrame = this.spriteFrameOn;
};
e.prototype.SetActive = function(t) {
console.log("activeactiveactiveactiveactive: " + t);
this.sprite.spriteFrame = t ? this.spriteFrameOn : this.spriteFrameOff;
};
__decorate([ c(cc.SpriteFrame) ], e.prototype, "spriteFrameOn", void 0);
__decorate([ c(cc.SpriteFrame) ], e.prototype, "spriteFrameOff", void 0);
__decorate([ c(cc.Sprite) ], e.prototype, "sprite", void 0);
return e = __decorate([ o ], e);
}(cc.Component);
i.default = s;
cc._RF.pop();
}, {} ],
Header: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "53591NaLdpJxoW9GVWXh0FR", "Header");
cc.Class({
extends: cc.Component,
properties: {
avatar: cc.Sprite,
nodeUsers: {
default: null,
type: cc.Node
},
nodeGuest: {
default: null,
type: cc.Node
},
exp: {
default: null,
type: cc.Node
},
userName: {
default: null,
type: cc.Label
},
vip: cc.Sprite,
userRed: {
default: null,
type: cc.Label
},
userXu: {
default: null,
type: cc.Label
},
imgVIP: [ cc.SpriteFrame ],
maskFull: 0
},
onLoad: function() {
cc.RedT.IS_LOGIN ? this.isSignIn() : this.isSignOut();
},
isSignIn: function() {
this.nodeUsers.active = !0;
this.nodeGuest.active = !1;
},
isSignOut: function() {
this.userName.string = this.userRed.string = "";
this.nodeUsers.active = !1;
this.nodeGuest.active = !0;
},
level: function(t) {
this.vip.SpriteFrame = this.imgVIP[t >> 0];
},
updateEXP: function(t, e) {},
reset: function() {
this.level(cc.RedT.user.level);
this.updateEXP(cc.RedT.user.vipHT, cc.RedT.user.vipNext);
}
});
cc._RF.pop();
}, {} ],
Helper: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "ea8443jZShFSboJocQ6Ztdo", "Helper");
function n(t) {
if (t) {
var e = (t = parseInt(t)).toString().split(".");
return e[0] = e[0].replace(/\B(?=(\d{3})+(?!\d))/g, "."), e.join(".");
}
return "0";
}
e.exports = {
checkPhoneValid: function(t) {
return /^[\+]?(?:[(][0-9]{1,3}[)]|)[0-9]{7,30}$/im.test(t);
},
nFormatter: function(t, e) {
for (var i = [ {
value: 1e18,
symbol: "E"
}, {
value: 1e15,
symbol: "P"
}, {
value: 1e12,
symbol: "T"
}, {
value: 1e9,
symbol: "G"
}, {
value: 1e6,
symbol: "M"
}, {
value: 1e3,
symbol: "K"
} ], n = /\.0+$|(\.[0-9]*[1-9])0+$/, o = 0; o < i.length; o++) if (t >= i[o].value) return (t / i[o].value).toFixed(e).replace(n, "$1") + i[o].symbol;
return t.toFixed(e).replace(n, "$1");
},
numberWithCommas: n,
isEmpty: function(t) {
return !t || 0 === t.length;
},
getOnlyNumberInString: function(t) {
var e = t.match(/\d+/g);
return e ? e.join("") : "";
},
numberPad: function(t, e) {
for (var i = "" + t; i.length < e; ) i = "0" + i;
return i;
},
inputNumber: function(t) {
var e = !1;
t.addEventListener("keydown", function(t) {
if (16 === t.keyCode) {
t.preventDefault();
e = !0;
}
});
t.addEventListener("keyup", function(t) {
if (16 === t.keyCode) {
t.preventDefault();
e = !1;
}
});
t.addEventListener("keydown", function(t) {
!e && (t.keyCode >= 48 && t.keyCode <= 57 || t.keyCode >= 96 && t.keyCode <= 105 || t.keyCode >= 37 && t.keyCode <= 40 || 107 === t.keyCode || 109 === t.keyCode || 189 === t.keyCode || 8 === t.keyCode || 13 === t.keyCode) || t.preventDefault();
});
},
anPhanTram: function(t, e, i) {
var n = arguments.length > 3 && void 0 !== arguments[3] && arguments[3] ? v1 : t;
return t * e - Math.ceil(n * i / 100);
},
numberTo: function(t, e, i, o) {
var c = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
clearInterval(t.timer);
var s = i - e, a = Math.abs(Math.floor(o / s));
a = Math.max(a, 50);
var h = new Date().getTime() + o;
t.timer = setInterval(function() {
if (t.node) {
var e = new Date().getTime(), a = Math.max((h - e) / o, 0), r = i - a * s >> 0;
t.string = c ? n(r) : r;
r == i && clearInterval(t.timer);
} else clearInterval(t.timer);
}, a);
},
getStringDateByTime: function(t) {
var e = new Date(t), i = e.getHours(), n = e.getMinutes(), o = e.getDate(), c = e.getMonth() + 1;
return i < 10 && (i = "0" + i), n < 10 && (n = "0" + n), o < 10 && (o = "0" + o), 
c < 10 && (c = "0" + c), i + ":" + n + " " + o + "/" + c + "/" + e.getFullYear();
},
getStringHourByTime: function(t) {
var e = new Date(t), i = e.getHours(), n = e.getMinutes(), o = e.getSeconds();
return i < 10 && (i = "0" + i), n < 10 && (n = "0" + n), o < 10 && (o = "0" + o), 
i + ":" + n + ":" + o;
},
numberToTime: function(t) {
t < 0 && (t = 0), t = parseInt(t);
var e = parseInt(t / 60), i = t % 60;
return e < 10 && (e = "0" + e), i < 10 && (i = "0" + i), e + ":" + i;
},
validateEmail: function(t) {
return /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(t);
},
addZero10: function(t) {
t < 10 && (t = "0" + t);
return t;
}
};
cc._RF.pop();
}, {} ],
Http: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "2cd84ecMG9CWL/aifwSEhhY", "Http");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("./Configs"), o = t("./VersionConfig"), c = cc._decorator, s = c.ccclass, a = (c.property, 
function() {
function t() {}
t.post = function(t, e, i) {
var n = new XMLHttpRequest(), o = "";
if (null !== e) {
var c = 0, s = Object.keys(e).length;
for (var a in e) {
if (e.hasOwnProperty(a)) {
o += a + "=" + e[a];
c < s - 1 && (o += "&");
}
c++;
}
}
n.onreadystatechange = function() {
if (4 === n.readyState) if (200 === n.status) {
var t = null, e = null;
try {
t = JSON.parse(n.responseText);
} catch (t) {
e = t;
}
i(e, t);
} else i(n.status, null);
};
n.open("POST", t, !0);
n.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
n.send(o);
};
t.get = function(t, e, i) {
var c = new XMLHttpRequest(), s = "";
e = e || {};
o.default.CPName;
e.hasOwnProperty("cp") || (e.cp = "R");
e.cl = "R";
cc.sys.isNative && cc.sys.os == cc.sys.OS_ANDROID ? e.pf = "ad" : cc.sys.isNative && cc.sys.os == cc.sys.OS_IOS ? e.pf = "ios" : cc.sys.isNative ? e.pf = "other" : e.pf = "web";
e.at = n.default.Login.AccessToken;
if (null !== e) {
var a = 0, h = Object.keys(e).length;
for (var r in e) if (e.hasOwnProperty(r)) {
s += r + "=" + e[r];
a++ < h - 1 && (s += "&");
}
}
c.onreadystatechange = function() {
if (4 === c.readyState) if (200 === c.status) {
var t = null, e = null;
try {
t = JSON.parse(c.responseText);
} catch (t) {
e = t;
}
i(e, t);
} else i(c.status, null);
};
c.open("GET", t + "?" + s, !0);
c.send();
};
return t = __decorate([ s ], t);
}());
i.default = a;
cc._RF.pop();
}, {
"./Configs": "Configs",
"./VersionConfig": "VersionConfig"
} ],
KetSat: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "b4e75BUyTlCYKT+0A4g+bCK", "KetSat");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
header: {
default: null,
type: cc.Node
},
body: {
default: null,
type: cc.Node
},
redHT: {
default: null,
type: cc.Label
},
redKet: {
default: null,
type: cc.Label
},
buttonALL: {
default: null,
type: cc.Label
},
buttonAc: {
default: null,
type: cc.Label
},
inputGui: {
default: null,
type: cc.EditBox
},
inputRut: {
default: null,
type: cc.EditBox
},
inputOTP: {
default: null,
type: cc.EditBox
},
isGui: !0,
typeOTP: ""
},
init: function() {},
onSelectHead: function(t, e) {
Promise.all(this.header.children.map(function(t) {
t.name == e ? t.getComponent("itemContentMenu").select() : t.getComponent("itemContentMenu").unselect();
}));
Promise.all(this.body.children.map(function(t) {
t.name == e ? t.active = !0 : t.active = !1;
}));
this.clear();
if (this.body.children[0].active) {
this.isGui = !0;
this.buttonALL.string = "GỬI TOÀN BỘ";
this.buttonAc.string = "GỬI";
} else {
this.isGui = !1;
this.buttonALL.string = "RÚT TOÀN BỘ";
this.buttonAc.string = "RÚT";
}
},
onClickHuy: function() {
this.clear();
},
onClickAC: function() {
var t = {};
if (this.isGui) {
t.gui = n.getOnlyNumberInString(this.inputGui.string);
if (t.gui < 1e4) {
cc.RedT.inGame.notice.show({
title: "GỬI XU",
text: "Số tiền gửi phải lớn hơn 10.000"
});
return;
}
} else {
t.rut = {
red: n.getOnlyNumberInString(this.inputRut.string),
otp: this.inputOTP.string
};
if (t.rut < 1e4) {
cc.RedT.inGame.notice.show({
title: "RÚT XU",
text: "Số tiền rút phải lớn hơn 10.000"
});
return;
}
}
cc.RedT.inGame.bgLoading.onData({
active: !0,
text: "Đang gửi dữ liệu..."
});
cc.RedT.send({
user: {
ket_sat: t
}
});
},
onClickALL: function() {
this.isGui ? this.inputGui.string = n.numberWithCommas(cc.RedT.user.red) : this.inputRut.string = this.redKet.string;
},
onClickAdd: function(t, e) {
this.isGui ? this.inputGui.string = n.numberWithCommas(1 * n.getOnlyNumberInString(this.inputGui.string) + 1 * e) : this.inputRut.string = n.numberWithCommas(1 * n.getOnlyNumberInString(this.inputRut.string) + 1 * e);
},
onChangerInput: function(t) {
t = n.numberWithCommas(n.getOnlyNumberInString(t));
this.isGui ? this.inputGui.string = "0" == t ? "" : t : this.inputRut.string = "0" == t ? "" : t;
},
clear: function() {
this.inputGui.string = this.inputRut.string = this.inputOTP.string = "";
},
changerTypeOTP: function(t) {
this.typeOTP = t.node.name;
},
onClickOTPSMS: function() {
cc.RedT.send({
otp: {
type: "2"
}
});
},
onClickOTPTele: function() {
cc.RedT.send({
otp: {
type: "1"
}
});
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
"Language.Label": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "47fcfrB4HZCEqoTqVimESy9", "Language.Label");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n, o = cc._decorator, c = o.ccclass, s = o.property, a = o.requireComponent, h = t("./Language.LanguageManager");
(function(t) {
var e = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.id = "";
return e;
}
e.prototype.start = function() {
var t = this;
h.default.instance.addListener(function() {
t.updateText();
}, this);
this.updateText();
};
e.prototype.updateText = function() {
var t = h.default.instance.getString(this.id);
null != t && 0 == t.trim().length || (this.getComponent(cc.Label).string = t);
};
__decorate([ s ], e.prototype, "id", void 0);
return e = __decorate([ c, a(cc.Label) ], e);
}(cc.Component);
t.Label = e;
})(n || (n = {}));
i.default = n.Label;
cc._RF.pop();
}, {
"./Language.LanguageManager": "Language.LanguageManager"
} ],
"Language.LanguageManager": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "9056c078b9CooLKGcYr/Ajy", "Language.LanguageManager");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n, o = cc._decorator, c = o.ccclass, s = o.property;
(function(t) {
var e = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.json = null;
e.languageCode = "vi";
e.texts = {};
e.listeners = [];
return e;
}
i = e;
e.prototype.onLoad = function() {
i.instance = this;
this.texts = JSON.parse(this.json.text);
};
e.prototype.setLanguage = function(t) {
this.languageCode = t;
for (var e = 0; e < this.listeners.length; e++) {
var i = this.listeners[e];
if (i.target && i.target instanceof Object && i.target.node) i.callback(t); else {
this.listeners.splice(e, 1);
e--;
}
}
};
e.prototype.addListener = function(t, e) {
this.listeners.push({
callback: t,
target: e
});
};
e.prototype.getString = function(t) {
return this.texts.hasOwnProperty(t) && this.texts[t].hasOwnProperty(this.languageCode) ? this.texts[t][this.languageCode] : t;
};
var i;
e.instance = null;
__decorate([ s(cc.TextAsset) ], e.prototype, "json", void 0);
return e = i = __decorate([ c ], e);
}(cc.Component);
t.LanguageMananger = e;
})(n || (n = {}));
i.default = n.LanguageMananger;
cc._RF.pop();
}, {} ],
"Language.Sprite": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "d12e0gfdzJKtpZd8H4K9/SU", "Language.Sprite");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n, o = cc._decorator, c = o.ccclass, s = o.property, a = o.requireComponent, h = t("./Language.LanguageManager");
(function(t) {
var e = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.sprFrameVi = null;
e.sprFrameEn = null;
return e;
}
e.prototype.start = function() {
var t = this;
h.default.instance.addListener(function() {
t.updateSpriteFrame();
}, this);
this.updateSpriteFrame();
};
e.prototype.updateSpriteFrame = function() {
switch (h.default.instance.languageCode) {
case "en":
this.getComponent(cc.Sprite).spriteFrame = this.sprFrameEn;
break;

default:
this.getComponent(cc.Sprite).spriteFrame = this.sprFrameVi;
}
};
__decorate([ s(cc.SpriteFrame) ], e.prototype, "sprFrameVi", void 0);
__decorate([ s(cc.SpriteFrame) ], e.prototype, "sprFrameEn", void 0);
return e = __decorate([ c, a(cc.Sprite) ], e);
}(cc.Component);
t.Sprite = e;
})(n || (n = {}));
i.default = n.Sprite;
cc._RF.pop();
}, {
"./Language.LanguageManager": "Language.LanguageManager"
} ],
LichSuBank_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "907c0wFO7lM9YafdKBVYX1S", "LichSuBank_item");
cc.Class({
extends: cc.Component,
properties: {
GD: {
default: null,
type: cc.Label
},
time: {
default: null,
type: cc.Label
},
bank: {
default: null,
type: cc.Label
},
act: {
default: null,
type: cc.Label
},
money: {
default: null,
type: cc.Label
},
info: {
default: null,
type: cc.Label
},
status: {
default: null,
type: cc.Label
}
}
});
cc._RF.pop();
}, {} ],
LichSuBank: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "cfe16ZuJ1pCdIWy4Ytc2scR", "LichSuBank");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
content: cc.Node
},
onLoad: function() {
var t = this;
Promise.all(this.content.children.map(function(t) {
return t.getComponent("LichSuBank_item");
})).then(function(e) {
t.content = e;
});
},
onEnable: function() {
this.get_data();
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
user: {
history: {
bank: {
page: t
}
}
}
});
},
onData: function(t) {
Promise.all(this.content.map(function(e, i) {
var o = t[i];
if (void 0 !== o) {
e.node.active = !0;
e.GD.string = o.GD ? o.GD : "";
e.time.string = n.getStringDateByTime(o.time);
e.bank.string = o.bank.toUpperCase();
e.act.string = 0 == o.type ? "NẠP" : "RÚT";
e.money.string = n.numberWithCommas(o.money);
e.money.node.color = 0 == o.type ? cc.color(0, 255, 31, 255) : cc.color(255, 0, 0, 255);
e.info.string = o.info ? o.info : "";
e.status.string = 0 == o.status ? "Chờ Duyệt" : 1 == o.status ? "Thành Công" : 2 == o.status ? "Thất bại" : "";
e.status.node.color = 0 == o.status ? cc.color(45, 171, 255, 255) : 1 == o.status ? cc.color(0, 255, 71, 255) : 2 == o.status ? cc.color(255, 0, 0, 255) : cc.color(45, 171, 255, 255);
} else e.node.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
LichSuChuyen_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "cefe2VTU9FJuZ3eLrltioL8", "LichSuChuyen_item");
cc.Class({
extends: cc.Component,
properties: {
GD: {
default: null,
type: cc.Label
},
Time: {
default: null,
type: cc.Label
},
uFrom: {
default: null,
type: cc.Label
},
uTo: {
default: null,
type: cc.Label
},
Chuyen: {
default: null,
type: cc.Label
},
Nhan: {
default: null,
type: cc.Label
},
nodeMesenger: {
default: null,
type: cc.Node
}
},
onShowMesenger: function() {
cc.RedT.inGame.notice.show({
title: "LỜI NHẮN",
text: this.mesenger
});
}
});
cc._RF.pop();
}, {} ],
LichSuChuyen: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "943527q5XpHKJiZmmGFO1UX", "LichSuChuyen");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
content: {
default: null,
type: cc.Node
}
},
onLoad: function() {
var t = this;
Promise.all(this.content.children.map(function(t) {
return t.getComponent("LichSuChuyen_item");
})).then(function(e) {
t.content = e;
});
},
onEnable: function() {
this.get_data();
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
user: {
history: {
chuyen_red: {
page: t
}
}
}
});
},
onData: function(t) {
Promise.all(this.content.map(function(e, i) {
var o = t[i];
if (void 0 !== o) {
e.node.active = !0;
e.GD.string = o.id ? o.id : "";
e.Time.string = n.getStringDateByTime(o.time);
e.uFrom.string = o.from;
e.uTo.string = o.to;
e.Chuyen.string = n.numberWithCommas(o.red);
e.Nhan.string = n.numberWithCommas(o.red_c);
if (void 0 !== o.message) {
e.nodeMesenger.active = !0;
e.mesenger = o.message;
} else {
e.nodeMesenger.active = !1;
e.mesenger = null;
}
} else e.node.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
LichSuMuaXu: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "b2292sqRptHdJi8HS34a///", "LichSuMuaXu");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
content: {
default: null,
type: cc.Node
}
},
onLoad: function() {
var t = this;
Promise.all(this.content.children.map(function(t) {
return t.getComponent("LichSuNap_item");
})).then(function(e) {
t.content = e;
});
},
onEnable: function() {
this.get_data();
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
user: {
history: {
mua_xu: {
page: t
}
}
}
});
},
onData: function(t) {
Promise.all(this.content.map(function(e, i) {
var o = t[i];
if (void 0 !== o) {
e.node.active = !0;
e.GD.string = o.id ? o.id : "";
e.Time.string = n.getStringDateByTime(o.time);
e.NhaMang.string = n.numberWithCommas(o.red);
e.MenhGia.string = n.numberWithCommas(o.xu);
} else e.node.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
LichSuNap_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "d2bc727HRVCxpX4Pq1ee9Tu", "LichSuNap_item");
cc.Class({
extends: cc.Component,
properties: {
GD: {
default: null,
type: cc.Label
},
Time: {
default: null,
type: cc.Label
},
NhaMang: {
default: null,
type: cc.Label
},
MenhGia: {
default: null,
type: cc.Label
},
Nhan: {
default: null,
type: cc.Label
},
Seri: {
default: null,
type: cc.Label
},
Status: {
default: null,
type: cc.Label
}
}
});
cc._RF.pop();
}, {} ],
LichSuNap: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "b3ba05EetBCV4Zd4FnrDzNm", "LichSuNap");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
content: {
default: null,
type: cc.Node
}
},
onLoad: function() {
var t = this;
Promise.all(this.content.children.map(function(t) {
return t.getComponent("LichSuNap_item");
})).then(function(e) {
t.content = e;
});
},
onEnable: function() {
this.get_data();
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
user: {
history: {
nap_red: {
page: t
}
}
}
});
},
onData: function(t) {
Promise.all(this.content.map(function(e, i) {
var o = t[i];
if (void 0 !== o) {
e.node.active = !0;
e.GD.string = o.GD;
e.Time.string = n.getStringDateByTime(o.time);
e.NhaMang.string = o.nhaMang;
e.MenhGia.string = n.numberWithCommas(o.menhGia);
e.Nhan.string = n.numberWithCommas(o.nhan);
e.Seri.string = o.seri;
e.Status.string = 0 == o.status ? "Chờ Duyệt" : 1 == o.status ? "Thành Công" : 2 == o.status ? "Thẻ Sai" : "";
e.Status.node.color = 0 == o.status ? cc.color(45, 171, 255, 255) : 1 == o.status ? cc.color(0, 255, 71, 255) : 2 == o.status ? cc.color(255, 0, 0, 255) : cc.color(45, 171, 255, 255);
} else e.node.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
LichSuRut_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "f9622W0MQ9AOJN08zkYjgg8", "LichSuRut_item");
cc.Class({
extends: cc.Component,
properties: {
GD: {
default: null,
type: cc.Label
},
Time: {
default: null,
type: cc.Label
},
NhaMang: {
default: null,
type: cc.Label
},
MenhGia: {
default: null,
type: cc.Label
},
SoLuong: {
default: null,
type: cc.Label
},
Cost: {
default: null,
type: cc.Label
},
Status: {
default: null,
type: cc.Label
}
},
onInfoClick: function() {
if (this.info) {
cc.RedT.inGame.dialog.profile.LichSu.lichSuRut.isView = !0;
cc.RedT.inGame.dialog.the_cao.getData(this.idT);
cc.RedT.audio.playClick();
}
}
});
cc._RF.pop();
}, {} ],
LichSuRut: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "725d0Pb9ORLDYbFhFG7zANv", "LichSuRut");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
content: {
default: null,
type: cc.Node
}
},
onLoad: function() {
var t = this;
this.isView = !1;
Promise.all(this.content.children.map(function(t) {
return t.getComponent("LichSuRut_item");
})).then(function(e) {
t.content = e;
});
},
onEnable: function() {
this.get_data();
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
!this.isView && cc.RedT.send({
user: {
history: {
mua_the: {
page: t
}
}
}
});
this.isView = !1;
},
onData: function(t) {
Promise.all(this.content.map(function(e, i) {
var o = t[i];
if (void 0 !== o) {
e.node.active = !0;
e.GD.string = o.GD;
e.Time.string = n.getStringDateByTime(o.time);
e.NhaMang.string = o.nhaMang;
e.MenhGia.string = n.numberWithCommas(o.menhGia);
e.SoLuong.string = o.soLuong;
e.Cost.string = n.numberWithCommas(o.Cost);
e.Status.string = 0 == o.status ? "Chờ Duyệt" : 1 == o.status ? "Thành Công" : 2 == o.status ? "Bị Huỷ" : "";
e.Status.node.color = 0 == o.status ? cc.color(45, 171, 255, 255) : 1 == o.status ? cc.color(0, 255, 71, 255) : 2 == o.status ? cc.color(255, 0, 0, 255) : cc.color(45, 171, 255, 255);
if (1 == o.status) {
e.idT = o._id;
e.info = !0;
} else {
e.idT = null;
e.info = !1;
}
} else e.node.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
LichSu: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "450a2pZkQ5Gvb6kVjtcW8zA", "LichSu");
cc.Class({
extends: cc.Component,
properties: {
header: cc.Node,
headerhidden: cc.Node,
pagination: cc.Node,
lichSuNap: cc.Node,
lichSuRut: cc.Node,
lichSuMuaXu: cc.Node,
lichSuChuyen: cc.Node,
lichSuBank: cc.Node
},
onLoad: function() {
var t = this;
this.history = "LichSuNap";
this.lichSuNap = this.lichSuNap.getComponent("LichSuNap");
this.lichSuRut = this.lichSuRut.getComponent("LichSuRut");
this.lichSuMuaXu = this.lichSuMuaXu.getComponent("LichSuMuaXu");
this.lichSuChuyen = this.lichSuChuyen.getComponent("LichSuChuyen");
this.lichSuBank = this.lichSuBank.getComponent("LichSuBank");
this.body = [ this.lichSuNap.node, this.lichSuRut.node, this.lichSuMuaXu.node, this.lichSuChuyen.node, this.lichSuBank.node ];
this.pagination = this.pagination.getComponent("Pagination");
this.pagination.init(this);
Promise.all(this.header.children.map(function(t) {
return t.getComponent("itemHeadMenuV2");
})).then(function(e) {
t.header = e;
});
},
onEnable: function() {
this.headerhidden.active = !1;
},
onDisable: function() {
this.headerhidden.active = !0;
},
onSelectHead: function(t, e) {
this.history = e;
Promise.all(this.header.map(function(t) {
t.node.name == e ? t.select() : t.unselect();
}));
Promise.all(this.body.map(function(t) {
t.name == e ? t.active = !0 : t.active = !1;
}));
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
switch (this.history) {
case "LichSuNap":
this.lichSuNap.get_data(t);
break;

case "LichSuRut":
this.lichSuRut.get_data(t);
break;

case "LichSuMuaXu":
this.lichSuMuaXu.get_data(t);
break;

case "LichSuChuyen":
case "LichSuBank":
this.lichSuChuyen.get_data(t);
}
},
onData: function(t) {
this.pagination.onSet(t.page, t.kmess, t.total);
void 0 !== t.nap_red && this.lichSuNap.onData(t.nap_red);
void 0 !== t.mua_the && this.lichSuRut.onData(t.mua_the);
void 0 !== t.mua_xu && this.lichSuMuaXu.onData(t.mua_xu);
void 0 !== t.chuyen_red && this.lichSuChuyen.onData(t.chuyen_red);
void 0 !== t.bank && this.lichSuBank.onData(t.bank);
}
});
cc._RF.pop();
}, {} ],
"Lobby.Cmd": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "95b57yFI+FHpoqME4+eoquH", "Lobby.Cmd");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n, o = t("../../scripts/networks/Network.InPacket"), c = t("../../scripts/networks/Network.OutPacket");
(function(t) {
var e = function() {
function t() {}
t.UPDATE_TIME_BUTTON = 2124;
t.INSERT_GIFTCODE = 20017;
t.DEPOSIT_CARD = 20012;
t.CHECK_NICKNAME_TRANSFER = 20018;
t.SUBCRIBE_HALL_SLOT = 10001;
t.UNSUBCRIBE_HALL_SLOT = 10002;
t.UPDATE_JACKPOT_SLOTS = 10003;
t.SPIN_LUCKY_WHEEL = 20042;
t.GET_SECURITY_INFO = 20050;
t.UPDATE_USER_INFO = 20002;
t.GET_OTP = 20220;
t.SEND_OTP = 20019;
t.RESULT_ACTIVE_MOBILE = 20026;
t.RESULT_ACTIVE_NEW_MOBILE = 20028;
t.RESULT_CHANGE_MOBILE_ACTIVED = 20027;
t.ACTIVE_PHONE = 20006;
t.CHANGE_PHONE_NUMBER = 20007;
t.TRANSFER_COIN = 20014;
t.RESULT_TRANSFER_COIN = 20034;
t.SAFES = 20009;
t.RESULT_SAFES = 20029;
t.CHANGE_PASSWORD = 2e4;
t.RESULT_CHANGE_PASSWORD = 20020;
t.EXCHANGE_VIP_POINT = 20001;
t.RESULT_EXCHANGE_VIP_POINT = 20021;
t.NOTIFY_MARQUEE = 20100;
t.UPDATE_JACKPOTS = 20101;
t.SUBCRIBE_JACPORTS = 20102;
t.UNSUBCRIBE_JACPORTS = 20103;
t.GET_MONEY_USE = 20051;
t.DEPOSIT_BANK = 20201;
t.DEPOSIT_MOMO = 20202;
t.CASHOUT_CARD = 20211;
t.CASHOUT_BANK = 20219;
t.CASHOUT_MOMO = 20215;
return t;
}();
t.Code = e;
var i = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.remainTime = 0;
i.bettingState = !1;
i.remainTime = i.getByte();
i.bettingState = i.getBool();
return i;
}
return e;
}(o.default);
t.ReceiveUpdateTimeButton = i;
var n = function(t) {
__extends(i, t);
function i(i) {
var n = t.call(this) || this;
n.initData(100);
n.setControllerId(1);
n.setCmdId(e.INSERT_GIFTCODE);
n.packHeader();
n.putString(i);
n.updateSize();
return n;
}
return i;
}(c.default);
t.ReqInsertGiftcode = n;
var s = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.error = 0;
i.currentMoneyVin = 0;
i.currentMoneyXu = 0;
i.moneyGiftCodeVin = 0;
i.moneyGiftCodeXu = 0;
i.error = i.getError();
i.currentMoneyVin = i.getLong();
i.currentMoneyXu = i.getLong();
i.moneyGiftCodeVin = i.getLong();
i.moneyGiftCodeXu = i.getLong();
return i;
}
return e;
}(o.default);
t.ResInsertGiftcode = s;
var a = function(t) {
__extends(i, t);
function i(i, n, o, c) {
var s = t.call(this) || this;
s.initData(100);
s.setControllerId(1);
s.setCmdId(e.DEPOSIT_CARD);
s.packHeader();
s.putByte(i);
s.putString(n);
s.putString(o);
s.putString(c);
s.updateSize();
return s;
}
return i;
}(c.default);
t.ReqDepositCard = a;
var h = function(t) {
__extends(i, t);
function i(i, n) {
var o = t.call(this) || this;
o.initData(100);
o.setControllerId(1);
o.setCmdId(e.DEPOSIT_BANK);
o.packHeader();
o.putString(i);
o.putLong(n);
o.updateSize();
return o;
}
return i;
}(c.default);
t.ReqDepositBank = h;
var r = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.error = 0;
i.currentMoney = 0;
i.timeFail = 0;
i.numFail = 0;
i.error = i.getError();
i.currentMoney = i.getLong();
i.timeFail = i.getLong();
i.numFail = i.getInt();
return i;
}
return e;
}(o.default);
t.ResDepositBank = r;
var l = function(t) {
__extends(i, t);
function i(i, n) {
var o = t.call(this) || this;
o.initData(100);
o.setControllerId(1);
o.setCmdId(e.DEPOSIT_MOMO);
o.packHeader();
o.putLong(i);
o.putString(n);
o.updateSize();
return o;
}
return i;
}(c.default);
t.ReqDepositMomo = l;
var u = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.error = 0;
i.currentMoney = 0;
i.timeFail = 0;
i.numFail = 0;
i.error = i.getError();
i.currentMoney = i.getLong();
i.timeFail = i.getLong();
i.numFail = i.getInt();
return i;
}
return e;
}(o.default);
t.ResDepositMomo = u;
var d = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.error = 0;
i.currentMoney = 0;
i.timeFail = 0;
i.numFail = 0;
i.error = i.getError();
i.currentMoney = i.getLong();
i.timeFail = i.getLong();
i.numFail = i.getInt();
return i;
}
return e;
}(o.default);
t.ResDepositCard = d;
var p = function(t) {
__extends(i, t);
function i(i) {
var n = t.call(this) || this;
n.initData(100);
n.setControllerId(1);
n.setCmdId(e.CHECK_NICKNAME_TRANSFER);
n.packHeader();
n.putString(i);
n.updateSize();
return n;
}
return i;
}(c.default);
t.ReqCheckNicknameTransfer = p;
var g = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.error = 0;
i.type = 0;
i.fee = 0;
i.error = i.getError();
i.type = i.getByte();
i.fee = i.getByte();
return i;
}
return e;
}(o.default);
t.ResCheckNicknameTransfer = g;
var m = function(t) {
__extends(i, t);
function i() {
var i = t.call(this) || this;
i.initData(100);
i.setControllerId(1);
i.setCmdId(e.SPIN_LUCKY_WHEEL);
i.packHeader();
i.updateSize();
return i;
}
return i;
}(c.default);
t.ReqSpinLuckyWheel = m;
var f = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.error = 0;
i.prizeVin = "";
i.prizeXu = "";
i.prizeSlot = "";
i.remainCount = 0;
i.currentMoneyVin = 0;
i.currentMoneyXu = 0;
i.error = i.getError();
i.prizeVin = i.getString();
i.prizeXu = i.getString();
i.prizeSlot = i.getString();
i.remainCount = i.getShort();
i.currentMoneyVin = i.getLong();
i.currentMoneyXu = i.getLong();
return i;
}
return e;
}(o.default);
t.ResSpinLuckyWheel = f;
var v = function(t) {
__extends(i, t);
function i() {
var i = t.call(this) || this;
i.initData(100);
i.setControllerId(1);
i.setCmdId(e.GET_SECURITY_INFO);
i.packHeader();
i.updateSize();
return i;
}
return i;
}(c.default);
t.ReqGetSecurityInfo = v;
var b = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.error = 0;
i.username = "";
i.cmt = "";
i.email = "";
i.mobile = "";
i.mobileSecure = 0;
i.emailSecure = 0;
i.appSecure = 0;
i.loginSecure = 0;
i.moneyLoginOtp = 0;
i.moneyUse = 0;
i.safe = 0;
i.configGame = "";
i.error = i.getError();
i.username = i.getString();
i.cmt = i.getString();
i.email = i.getString();
i.mobile = i.getString();
i.mobileSecure = i.getByte();
i.emailSecure = i.getByte();
i.appSecure = i.getByte();
i.loginSecure = i.getByte();
i.moneyLoginOtp = i.getLong();
i.moneyUse = i.getLong();
i.safe = i.getLong();
i.configGame = i.getString();
return i;
}
return e;
}(o.default);
t.ResGetSecurityInfo = b;
var T = function(t) {
__extends(i, t);
function i(i) {
var n = t.call(this) || this;
n.initData(100);
n.setControllerId(1);
n.setCmdId(e.UPDATE_USER_INFO);
n.packHeader();
n.putString("");
n.putString("");
n.putString(i);
n.updateSize();
return n;
}
return i;
}(c.default);
t.ReqUpdateUserInfo = T;
var _ = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.error = 0;
i.error = i.getError();
return i;
}
return e;
}(o.default);
t.ResUpdateUserInfo = _;
var C = function(t) {
__extends(i, t);
function i() {
var i = t.call(this) || this;
i.initData(100);
i.setControllerId(1);
i.setCmdId(e.GET_OTP);
i.packHeader();
i.updateSize();
return i;
}
return i;
}(c.default);
t.ReqGetOTP = C;
var y = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.error = 0;
i.error = i.getError();
return i;
}
return e;
}(o.default);
t.ResGetOTP = y;
var S = function(t) {
__extends(i, t);
function i(i, n) {
var o = t.call(this) || this;
o.initData(100);
o.setControllerId(1);
o.setCmdId(e.SEND_OTP);
o.packHeader();
o.putString(i);
o.putByte(n);
o.updateSize();
return o;
}
return i;
}(c.default);
t.ReqSendOTP = S;
var R = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.error = 0;
i.error = i.getError();
return i;
}
return e;
}(o.default);
t.ResSendOTP = R;
var N = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.error = 0;
i.error = i.getError();
return i;
}
return e;
}(o.default);
t.ResResultActiveMobie = N;
var L = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.error = 0;
i.error = i.getError();
return i;
}
return e;
}(o.default);
t.ResResultActiveNewMobie = L;
var E = function(t) {
__extends(i, t);
function i(i) {
var n = t.call(this) || this;
n.initData(100);
n.setControllerId(1);
n.setCmdId(e.CHANGE_PHONE_NUMBER);
n.packHeader();
n.putString(i);
n.updateSize();
return n;
}
return i;
}(c.default);
t.ReqChangePhoneNumber = E;
var w = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.error = 0;
i.error = i.getError();
return i;
}
return e;
}(o.default);
t.ResChangePhoneNumber = w;
var k = function(t) {
__extends(i, t);
function i() {
var i = t.call(this) || this;
i.initData(100);
i.setControllerId(1);
i.setCmdId(e.ACTIVE_PHONE);
i.packHeader();
i.updateSize();
return i;
}
return i;
}(c.default);
t.ReqActivePhone = k;
var B = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.error = 0;
i.error = i.getError();
return i;
}
return e;
}(o.default);
t.ResActivePhone = B;
var A = function(t) {
__extends(i, t);
function i(i, n, o) {
var c = t.call(this) || this;
c.initData(100);
c.setControllerId(1);
c.setCmdId(e.TRANSFER_COIN);
c.packHeader();
c.putString(i);
c.putLong(n);
c.putString(unescape(encodeURIComponent(o)));
c.updateSize();
return c;
}
return i;
}(c.default);
t.ReqTransferCoin = A;
var x = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.error = 0;
i.moneyUse = 0;
i.error = i.getError();
i.moneyUse = i.getLong();
return i;
}
return e;
}(o.default);
t.ResTransferCoin = x;
var F = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.error = 0;
i.moneyUse = 0;
i.currentMoney = 0;
i.error = i.getError();
i.moneyUse = i.getLong();
i.currentMoney = i.getLong();
return i;
}
return e;
}(o.default);
t.ResResultTransferCoin = F;
var I = function(t) {
__extends(i, t);
function i(i, n) {
var o = t.call(this) || this;
o.initData(100);
o.setControllerId(1);
o.setCmdId(e.SAFES);
o.packHeader();
o.putByte(n);
o.putLong(i);
o.updateSize();
return o;
}
return i;
}(c.default);
t.ReqSafes = I;
var O = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.error = 0;
i.moneyUse = 0;
i.safe = 0;
i.error = i.getError();
i.moneyUse = i.getLong();
i.safe = i.getLong();
return i;
}
return e;
}(o.default);
t.ResSafes = O;
var H = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.error = 0;
i.moneyUse = 0;
i.safe = 0;
i.currentMoney = 0;
i.error = i.getError();
i.moneyUse = i.getLong();
i.safe = i.getLong();
i.currentMoney = i.getLong();
return i;
}
return e;
}(o.default);
t.ResResultSafes = H;
var P = function(t) {
__extends(i, t);
function i(i, n) {
var o = t.call(this) || this;
o.initData(100);
o.setControllerId(1);
o.setCmdId(e.CHANGE_PASSWORD);
o.packHeader();
o.putString(md5(i));
o.putString(md5(n));
o.updateSize();
return o;
}
return i;
}(c.default);
t.ReqChangePassword = P;
var M = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.error = 0;
i.error = i.getError();
return i;
}
return e;
}(o.default);
t.ResChangePassword = M;
var D = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.error = 0;
i.error = i.getError();
return i;
}
return e;
}(o.default);
t.ResResultChangePassword = D;
var G = function(t) {
__extends(i, t);
function i() {
var i = t.call(this) || this;
i.initData(100);
i.setControllerId(1);
i.setCmdId(e.EXCHANGE_VIP_POINT);
i.packHeader();
i.updateSize();
return i;
}
return i;
}(c.default);
t.ReqExchangeVipPoint = G;
var W = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.error = 0;
i.error = i.getError();
return i;
}
return e;
}(o.default);
t.ResExchangeVipPoint = W;
var U = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.error = 0;
i.currentMoney = 0;
i.moneyAdd = 0;
i.error = i.getError();
i.currentMoney = i.getLong();
i.moneyAdd = i.getLong();
return i;
}
return e;
}(o.default);
t.ResResultExchangeVipPoint = U;
var X = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.message = "";
i.message = i.getString();
return i;
}
return e;
}(o.default);
t.ResNotifyMarquee = X;
var V = function(t) {
__extends(i, t);
function i() {
var i = t.call(this) || this;
i.initData(100);
i.setControllerId(1);
i.setCmdId(e.SUBCRIBE_JACPORTS);
i.packHeader();
i.updateSize();
return i;
}
return i;
}(c.default);
t.ReqSubcribeJackpots = V;
var j = function(t) {
__extends(i, t);
function i() {
var i = t.call(this) || this;
i.initData(100);
i.setControllerId(1);
i.setCmdId(e.UNSUBCRIBE_JACPORTS);
i.packHeader();
i.updateSize();
return i;
}
return i;
}(c.default);
t.ReqUnSubcribeJackpots = j;
var K = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.miniPoker100 = 0;
i.miniPoker1000 = 0;
i.miniPoker10000 = 0;
i.pokeGo100 = 0;
i.pokeGo1000 = 0;
i.pokeGo10000 = 0;
i.khoBau100 = 0;
i.khoBau1000 = 0;
i.khoBau10000 = 0;
i.NDV100 = 0;
i.NDV1000 = 0;
i.NDV10000 = 0;
i.Avengers100 = 0;
i.Avengers1000 = 0;
i.Avengers10000 = 0;
i.Vqv100 = 0;
i.Vqv1000 = 0;
i.Vqv10000 = 0;
i.fish100 = 0;
i.fish1000 = 0;
i.spartan100 = 0;
i.spartan1000 = 0;
i.spartan5000 = 0;
i.spartan10000 = 0;
i.miniPoker100 = i.getLong();
i.miniPoker1000 = i.getLong();
i.miniPoker10000 = i.getLong();
i.pokeGo100 = i.getLong();
i.pokeGo1000 = i.getLong();
i.pokeGo10000 = i.getLong();
i.khoBau100 = i.getLong();
i.khoBau1000 = i.getLong();
i.khoBau10000 = i.getLong();
i.NDV100 = i.getLong();
i.NDV1000 = i.getLong();
i.NDV10000 = i.getLong();
i.Avengers100 = i.getLong();
i.Avengers1000 = i.getLong();
i.Avengers10000 = i.getLong();
i.Vqv100 = i.getLong();
i.Vqv1000 = i.getLong();
i.Vqv10000 = i.getLong();
i.fish100 = i.getLong();
i.fish1000 = i.getLong();
i.spartan100 = i.getLong();
i.spartan1000 = i.getLong();
i.spartan5000 = i.getLong();
i.spartan10000 = i.getLong();
return i;
}
return e;
}(o.default);
t.ResUpdateJackpots = K;
var q = function(t) {
__extends(i, t);
function i() {
var i = t.call(this) || this;
i.initData(100);
i.setControllerId(1);
i.setCmdId(e.GET_MONEY_USE);
i.packHeader();
i.updateSize();
return i;
}
return i;
}(c.default);
t.ReqGetMoneyUse = q;
var Y = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.moneyUse = 0;
i.moneyUse = i.getLong();
return i;
}
return e;
}(o.default);
t.ResGetMoneyUse = Y;
var J = function(t) {
__extends(i, t);
function i() {
var i = t.call(this) || this;
i.initData(100);
i.setControllerId(1);
i.setCmdId(e.SUBCRIBE_HALL_SLOT);
i.packHeader();
i.updateSize();
return i;
}
return i;
}(c.default);
t.ReqSubcribeHallSlot = J;
var Z = function(t) {
__extends(i, t);
function i() {
var i = t.call(this) || this;
i.initData(100);
i.setControllerId(1);
i.setCmdId(e.UNSUBCRIBE_HALL_SLOT);
i.packHeader();
i.updateSize();
return i;
}
return i;
}(c.default);
t.ReqUnSubcribeHallSlot = Z;
var Q = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.pots = "";
i.pots = i.getString();
return i;
}
return e;
}(o.default);
t.ResUpdateJackpotSlots = Q;
var z = function(t) {
__extends(i, t);
function i(i, n, o) {
var c = t.call(this) || this;
c.initData(100);
c.setControllerId(1);
c.setCmdId(e.CASHOUT_CARD);
c.packHeader();
c.putString(i);
c.putInt(n);
c.putInt(o);
c.updateSize();
return c;
}
return i;
}(c.default);
t.ReqCashoutCard = z;
var $ = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.error = 0;
i.currentMoney = 0;
i.listCard = "";
i.error = i.getError();
i.currentMoney = i.getLong();
i.listCard = i.getString();
return i;
}
return e;
}(o.default);
t.ResCashoutCard = $;
var tt = function(t) {
__extends(i, t);
function i(i, n, o, c) {
var s = t.call(this) || this;
s.initData(100);
s.setControllerId(1);
s.setCmdId(e.CASHOUT_BANK);
s.packHeader();
s.putString(i);
s.putString(n);
s.putString(o);
s.putInt(c);
s.updateSize();
return s;
}
return i;
}(c.default);
t.ReqCashoutBank = tt;
var et = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.error = 0;
i.currentMoney = 0;
i.error = i.getError();
i.currentMoney = i.getLong();
return i;
}
return e;
}(o.default);
t.ResCashoutBank = et;
var it = function(t) {
__extends(i, t);
function i(i, n) {
var o = t.call(this) || this;
o.initData(100);
o.setControllerId(1);
o.setCmdId(e.CASHOUT_MOMO);
o.packHeader();
o.putString(i);
o.putInt(n);
o.updateSize();
return o;
}
return i;
}(c.default);
t.ReqCashoutMomo = it;
var nt = function(t) {
__extends(e, t);
function e(e) {
var i = t.call(this, e) || this;
i.error = 0;
i.currentMoney = 0;
i.error = i.getError();
i.currentMoney = i.getLong();
return i;
}
return e;
}(o.default);
t.ResCashoutMomo = nt;
})(n = i.cmd || (i.cmd = {}));
i.default = n;
cc._RF.pop();
}, {
"../../scripts/networks/Network.InPacket": "Network.InPacket",
"../../scripts/networks/Network.OutPacket": "Network.OutPacket"
} ],
MU_bonus_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "56c48nkE1tDHqoFsSD4JTWw", "MU_bonus_item");
cc.Class({
extends: cc.Component,
properties: {
open: cc.Node,
close: cc.Node,
text: cc.Label
}
});
cc._RF.pop();
}, {} ],
MU_dialog: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "e100dbsZ9dLxZWaums3JraU", "MU_dialog");
var n = t("MU_history"), o = t("MU_top");
cc.Class({
extends: cc.Component,
properties: {
history: n,
top: o,
help: cc.Node
},
init: function() {
this.actionShow = cc.spawn(cc.scaleTo(.5, 1).easing(cc.easeBackOut(2.5)), cc.fadeTo(.5, 255));
this.objShow = null;
this.objTmp = null;
},
onClickBack: function() {
cc.RedT.audio.playUnClick();
this.onBack();
},
onBack: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = !1;
this.node.active = !1;
this.objShow = null;
} else {
this.objTmp = this.objShow;
this.objShow = this.objShow.previous;
this.objTmp.previous = null;
this.objTmp.active = !1;
this.objShow.active = !0;
this.objTmp = null;
} else this.node.active = !1;
},
onClosePrevious: function(t) {
if (void 0 !== t.previous && null !== t.previous) {
this.onClosePrevious(t.previous);
delete t.previous;
}
t.active = !1;
},
onCloseDialog: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = this.node.active = !1;
this.objShow = null;
} else {
this.onClosePrevious(this.objShow.previous);
this.objShow.active = this.node.active = !1;
delete this.objShow.previous;
this.objShow = null;
} else this.node.active = !1;
},
resetSizeDialog: function(t) {
t.stopAllActions();
t.scale = .5;
t.opacity = 0;
},
showHistory: function() {
this.node.active = this.history.node.active = !0;
this.objShow = this.history.node;
},
showTop: function() {
this.node.active = this.top.node.active = !0;
this.objShow = this.top.node;
},
showHelp: function() {
this.node.active = this.help.active = !0;
this.objShow = this.help;
}
});
cc._RF.pop();
}, {
MU_history: "MU_history",
MU_top: "MU_top"
} ],
MU_history: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "9abc7FgvydM+JXDCq9R36CS", "MU_history");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
onLoad: function() {
var t = this, e = cc.instantiate(this.page);
e.y = -280;
this.node.addChild(e);
this.page = e.getComponent("Pagination");
Promise.all(this.content.children.map(function(t) {
return t.getComponent("VQRed_history_item");
})).then(function(e) {
t.content = e;
});
this.page.init(this);
},
onEnable: function() {
this.get_data();
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
g: {
longlan: {
log: {
red: this.red,
page: t
}
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
this.page.onSet(t.page, t.kmess, t.total);
Promise.all(this.content.map(function(e, i) {
var o = t.data[i];
if (void 0 !== o) {
e.node.active = !0;
e.time.string = n.getStringDateByTime(o.time);
e.phien.string = o.id;
e.cuoc.string = n.numberWithCommas(o.bet);
e.win.string = o.line + " Dòng";
e.line.string = n.numberWithCommas(o.win);
} else e.node.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
MU_iline: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "5afcag5lkVPjKQoUe5NkprX", "MU_iline");
cc.Class({
extends: cc.Component,
init: function(t) {
this.RedT = t;
return this;
},
onEnable: function() {
this.node.on(cc.Node.EventType.MOUSE_ENTER, this.onhover, this);
this.node.on(cc.Node.EventType.MOUSE_LEAVE, this.offhover, this);
},
onDisable: function() {
this.node.off(cc.Node.EventType.MOUSE_ENTER, this.onhover, this);
this.node.off(cc.Node.EventType.MOUSE_LEAVE, this.offhover, this);
},
onhover: function() {
this.node.children[0].active = !0;
},
offhover: function() {
this.node.children[0].active = !1;
},
onEf: function() {
this.onhover();
this.node.pauseSystemEvents();
},
offEf: function() {
this.offhover();
this.node.resumeSystemEvents();
}
});
cc._RF.pop();
}, {} ],
MU_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "ffaa32+1fRCx5Vj5NqjgeeB", "MU_item");
cc.Class({
extends: cc.Component,
properties: {
icons: {
default: [],
type: cc.Prefab
}
},
init: function(t) {
this.RedT = t;
},
random: function() {
var t = 11 * Math.random() >> 0;
this.setIcon(t);
return t;
},
setIcon: function(t) {
var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
this.node.removeAllChildren();
var i = cc.instantiate(this.icons[t]);
i.setScale(cc.v2(1, 1));
this.node.addChild(i);
e && (this.data = t);
}
});
cc._RF.pop();
}, {} ],
MU_lines: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "b3c36CfFXdBL5X1PKiCnljR", "MU_lines");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
nodeEfLine: cc.Node,
nodeLine: cc.Node,
mainLine: cc.Node
},
init: function(t) {
var e = this;
this.lines = {
1: [ 1, 1, 1, 1, 1 ],
2: [ 0, 0, 0, 0, 0 ],
3: [ 2, 2, 2, 2, 2 ],
4: [ 2, 1, 0, 1, 2 ],
5: [ 0, 1, 2, 1, 0 ],
6: [ 1, 0, 0, 0, 1 ],
7: [ 1, 2, 2, 2, 1 ],
8: [ 0, 0, 1, 2, 2 ],
9: [ 2, 2, 1, 0, 0 ],
10: [ 1, 0, 1, 2, 1 ],
11: [ 1, 2, 1, 0, 1 ],
12: [ 0, 1, 1, 1, 0 ],
13: [ 2, 1, 1, 1, 2 ],
14: [ 0, 1, 0, 1, 0 ],
15: [ 2, 1, 2, 1, 2 ],
16: [ 1, 1, 0, 1, 1 ],
17: [ 1, 1, 2, 1, 1 ],
18: [ 0, 0, 2, 0, 0 ],
19: [ 2, 2, 0, 2, 2 ],
20: [ 0, 2, 2, 2, 0 ],
21: [ 2, 0, 0, 0, 2 ],
22: [ 1, 0, 2, 0, 1 ],
23: [ 1, 2, 0, 2, 1 ],
24: [ 0, 2, 0, 2, 0 ],
25: [ 2, 0, 2, 0, 2 ]
};
this.RedT = t;
var i = this;
Promise.all(this.mainLine.children.map(function(t) {
return t.getComponent("MU_iline").init(i.RedT);
})).then(function(t) {
e.mainLine = t;
});
this.selectAll(null, "1");
},
onOpen: function() {
cc.RedT.audio.playClick();
this.node.active = !0;
},
onClose: function() {
cc.RedT.audio.playUnClick();
this.node.active && this.data.length < 1 ? this.RedT.addNotice("Chọn ít nhất 1 dòng") : this.node.active = !1;
},
select: function(t) {
var e = t.target;
if (e.children[0].active) {
e.children[0].active = !1;
e.children[1].active = !0;
} else {
e.children[0].active = !0;
e.children[1].active = !1;
}
this.check();
},
check: function() {
var t = this;
Promise.all(this.nodeLine.children.map(function(t, e) {
return t.children[0].active ? e + 1 : void 0;
})).then(function(e) {
Promise.all(e.filter(function(t) {
return void 0 !== t;
})).then(function(e) {
t.data = e;
t.RedT.labelLine.string = e.length;
t.RedT.tong.string = n.numberWithCommas(e.length * n.getOnlyNumberInString(t.RedT.bet.string));
});
});
},
selectChan: function(t) {
var e = this;
console.log(t.target);
Promise.all(this.nodeLine.children.map(function(t, e) {
var i = e + 1;
if (!(i % 2)) {
t.children[0].active = !1;
t.children[1].active = !0;
return i;
}
t.children[0].active = !0;
t.children[1].active = !1;
})).then(function(t) {
Promise.all(t.filter(function(t) {
return void 0 !== t;
})).then(function(t) {
e.data = t;
e.RedT.labelLine.string = t.length;
e.RedT.tong.string = n.numberWithCommas(t.length * n.getOnlyNumberInString(e.RedT.bet.string));
});
});
},
selectLe: function(t) {
var e = this;
Promise.all(this.nodeLine.children.map(function(t, e) {
var i = e + 1;
if (i % 2) {
t.children[0].active = !1;
t.children[1].active = !0;
return i;
}
t.children[0].active = !0;
t.children[1].active = !1;
})).then(function(t) {
Promise.all(t.filter(function(t) {
return void 0 !== t;
})).then(function(t) {
e.data = t;
e.RedT.labelLine.string = t.length;
e.RedT.tong.string = n.numberWithCommas(t.length * n.getOnlyNumberInString(e.RedT.bet.string));
});
});
},
selectAll: function(t, e) {
var i = this;
Promise.all(this.nodeLine.children.map(function(t, i) {
var n = "1" == e;
t.children[0].active = n;
t.children[1].active = !n;
return n ? i + 1 : void 0;
})).then(function(t) {
Promise.all(t.filter(function(t, e) {
return void 0 !== t;
})).then(function(t) {
i.data = t;
i.RedT.labelLine.string = t.length;
i.RedT.tong.string = n.numberWithCommas(t.length * n.getOnlyNumberInString(i.RedT.bet.string));
});
});
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
MU_playBonus: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "a552cYhqONKxq4SxXQFKu8d", "MU_playBonus");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
numberBonus: cc.Label,
listBox: cc.Node,
notice: cc.Node,
numberWin: cc.Label,
icons: {
default: [],
type: cc.SpriteFrame
}
},
init: function(t) {
var e = this;
this.RedT = t;
Promise.all(this.listBox.children.map(function(t) {
return t.getComponent("CoTrang_bonus_item");
})).then(function(t) {
e.listBox = t;
});
},
onPlay: function(t) {
this.reset();
this.node.active = !0;
this.numberBonus.string = t;
},
onClickBox: function(t) {
if (this.numberBonus.string) {
this.RedT.playClick();
this.onSend(t.target.name);
}
},
closeNotice: function() {
this.notice.active = this.node.active = !1;
this.RedT.hieuUng();
},
onData: function(t) {
if (void 0 !== t.box) {
var e = this.listBox[t.box];
e.open.active = !0;
e.close.active = !1;
e.text.string = n.numberWithCommas(t.bet);
this.numberBonus.string = t.bonus;
}
if (void 0 !== t.win) {
this.notice.active = !0;
this.numberWin.string = n.numberWithCommas(t.win);
this.RedT.vuathang.string = n.numberWithCommas(1 * n.getOnlyNumberInString(this.RedT.vuathang.string) + t.win);
}
},
onSend: function(t) {
cc.RedT.send({
g: {
longlan: {
bonus: {
box: t
}
}
}
});
},
reset: function() {
Promise.all(this.listBox.map(function(t) {
t.open.active = !1;
t.close.active = !0;
t.text.string = "";
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
MU_reel: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "7e61bVkv9NNPZEG3YyrjE6+", "MU_reel");
cc.Class({
extends: cc.Component,
init: function(t) {
var e = this;
this.RedT = t;
this.icons = [];
var i = this, n = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
Promise.all(n.map(function(t, e) {
var o = cc.instantiate(i.RedT.icon);
i.node.addChild(o);
(o = o.getComponent("MU_item")).init(i.RedT);
e > 2 && e < n.length - 3 && o.random();
return o;
})).then(function(t) {
e.icons = t;
e.icons[e.icons.length - 1].setIcon(e.icons[4].random());
e.icons[e.icons.length - 2].setIcon(e.icons[3].random());
e.icons[e.icons.length - 3].setIcon(e.icons[2].random());
e.icons[e.icons.length - 4].setIcon(e.icons[1].random());
e.icons[e.icons.length - 5].setIcon(e.icons[0].random());
});
},
spin: function(t, e) {
this.node.stopAllActions();
var i = cc.moveTo(e, cc.v2(this.node.x, -(this.node.height - 396))).easing(cc.easeInOut(3)), n = cc.callFunc(function() {
0 === t && this.RedT.copy();
this.node.y = 0;
}, this);
if (4 === t) {
var o = cc.callFunc(function() {
this.RedT.EF_vuathang();
this.node.y = 0;
this.RedT.random();
this.RedT.hieuUng();
}, this);
this.node.runAction(cc.sequence(cc.delayTime(.1 * t), i, o));
} else this.node.runAction(cc.sequence(cc.delayTime(.1 * t), i, n));
},
stop: function() {
this.node.stopAllActions();
this.RedT.copy();
this.node.y = 0;
}
});
cc._RF.pop();
}, {} ],
MU_top: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "ff3f0iJzWdGUKx7WXSz3Unx", "MU_top");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
onLoad: function() {
var t = this, e = cc.instantiate(this.page);
e.y = -280;
this.node.addChild(e);
this.page = e.getComponent("Pagination");
Promise.all(this.content.children.map(function(t) {
return t.getComponent("VQRed_history_item");
})).then(function(e) {
t.content = e;
});
this.page.init(this);
},
onEnable: function() {
this.get_data();
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
g: {
longlan: {
top: {
red: this.red,
page: t
}
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
this.page.onSet(t.page, t.kmess, t.total);
Promise.all(this.content.map(function(e, i) {
var o = t.data[i];
if (void 0 !== o) {
e.node.active = !0;
e.time.string = n.getStringDateByTime(o.time);
e.phien.string = o.name;
e.cuoc.string = n.numberWithCommas(o.bet);
e.line.string = 2 == o.type ? "Jackpot" : "Bigwin";
e.win.string = n.numberWithCommas(o.win);
} else e.node.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
MU: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "4c093hRJstHNJwmauScrZUC", "MU");
var n = t("Helper"), o = t("MU_reel"), c = t("MU_lines"), s = t("MU_playBonus"), a = t("Notice"), h = t("MU_dialog");
cc.Class({
extends: cc.Component,
properties: {
gameBonus: s,
audioBG: cc.AudioSource,
audioClickSpin: {
default: null,
type: cc.AudioClip
},
audioClick: {
default: null,
type: cc.AudioClip
},
audioWin: {
default: null,
type: cc.AudioClip
},
audioBigWin: {
default: null,
type: cc.AudioClip
},
audioJackpot: {
default: null,
type: cc.AudioClip
},
redhat: cc.Node,
reels: {
default: [],
type: o
},
efline: cc.Node,
icon: cc.Prefab,
icons: {
default: [],
type: cc.SpriteFrame
},
betString: {
default: [],
type: cc.String
},
audioIcons: {
default: [],
type: cc.SpriteFrame
},
audioIcon: cc.Sprite,
nodeRed: cc.Node,
nodeXu: cc.Node,
nodeNotice: cc.Node,
prefabNotice: cc.Prefab,
MiniPanel: cc.Prefab,
loading: cc.Node,
notice: a,
dialog: h,
Line: c,
hu: cc.Label,
taikhoan: cc.Label,
tong: cc.Label,
vuathang: cc.Label,
labelLine: cc.Label,
bet: cc.Label,
freeLabel: cc.Label,
phien: cc.Label,
BigWin: cc.Animation,
BigWin_Label: cc.Label,
NoHu_close: cc.Node,
NoHu: cc.Animation,
NoHu_Label: cc.Label,
EF_Bonus: cc.Animation,
EF_Free: cc.Animation,
buttonCoint: cc.Node,
buttonLine: cc.Node,
buttonSpin: cc.Node,
buttonBet: cc.Node,
buttonAuto: cc.Node,
buttonStop: cc.Node,
buttonSpinSpeed: cc.Node,
isAuto: !1,
isSpin: !1,
isFreeSpin: !1,
red: !0,
isSpeed: !1,
isForceSpeed: !1,
betSelect: 0
},
onLoad: function() {
cc.RedT.inGame = this;
var t = this;
this.Line.init(this);
this.BigWin.on("finished", this.BigWinFinish, this);
this.BigWin.on("play", this.BigWinPlay, this);
this.EF_Free.on("finished", this.EF_FreeFinish, this);
this.NoHu.on("play", this.NoHuPlay, this);
this.EF_Bonus.on("finished", this.EF_BonusFinish, this);
this.gameBonus.init(this);
this.dialog.init();
Promise.all(this.reels.map(function(e) {
e.init(t);
}));
cc.RedT.send({
scene: "longlan"
});
this.taikhoan.string = n.numberWithCommas(cc.RedT.user.red);
this.speed = 400;
if (cc.RedT.isSoundBackground()) {
this.playMusic();
this.audioIcon.spriteFrame = this.audioIcons[1];
} else this.audioIcon.spriteFrame = this.audioIcons[0];
},
_playSFX: function(t) {
cc.RedT.IS_SOUND && cc.audioEngine.playEffect(t, !1);
},
playClick: function() {
this._playSFX(this.audioClick);
},
BigWinPlay: function() {
var t = cc.callFunc(function() {
this._playSFX(this.audioBigWin);
n.numberTo(this.BigWin_Label, 0, this.H_win, 2e3, !0);
}, this);
this.BigWin.node.runAction(cc.sequence(cc.delayTime(.3), t));
},
BigWinFinish: function() {
this.isBigWin = !1;
this.BigWin.node.active = !1;
this.BigWin_Label.string = "";
this.showLineWin(!1);
this.hieuUng();
},
NoHuPlay: function() {
this.NoHu_Label.string = "";
var t = cc.callFunc(function() {
this._playSFX(this.audioJackpot);
n.numberTo(this.NoHu_Label, 0, this.H_win, 2e3, !0);
}, this);
this.NoHu.node.runAction(cc.sequence(cc.delayTime(.3), t));
var e = cc.callFunc(function() {
this.NoHu_close.active = !0;
}, this);
this.NoHu.node.runAction(cc.sequence(cc.delayTime(4), e));
},
NoHuFinish: function() {
this.isNoHu = !1;
this.isAuto && this.onAuto();
this.showLineWin(!1);
this.hieuUng();
},
NoHuClose: function() {
this.NoHu.node.active = this.NoHu_close.active = !1;
this.NoHuFinish();
},
EF_BonusFinish: function() {
this.EF_Bonus.node.active = !1;
this.gameBonus.onPlay(this.isBonus);
this.isBonus = 0;
this.showLineWin(!1);
},
EF_FreeFinish: function() {
this.isFree = !1;
this.EF_Free.node.active = !1;
this.showLineWin(!1);
this.hieuUng();
},
onData: function(t) {
if (void 0 !== t.user) {
this.userData(t.user);
cc.RedT.userData(t.user);
}
void 0 !== t.longlan && this.HaiTac(t.longlan);
void 0 !== t.mini && null != cc.RedT.minigame && cc.RedT.minigame.onData(t.mini);
void 0 !== t.TopHu && cc.RedT.MiniPanel.TopHu.onData(t.TopHu);
void 0 !== t.taixiu && null != cc.RedT.minigame && cc.RedT.minigame.isLoadTaiXiu && cc.RedT.minigame.TaiXiu.TX_Main.onData(t.taixiu);
},
userData: function(t) {
this.red ? this.taikhoan.string = n.numberWithCommas(t.red) : this.taikhoan.string = n.numberWithCommas(t.xu);
},
HaiTac: function(t) {
var e = this;
if (void 0 !== t.status) if (1 === t.status) {
this.buttonStop.active = !!this.isAuto;
this.buttonAuto.active = !this.buttonStop.active;
Promise.all(t.cel.map(function(t, i) {
Promise.all(t.map(function(t, n) {
e.reels[i].icons[n].setIcon(t, !0);
}));
}));
this.runReels(this.isSpeed);
this.H_line_win = t.line_win;
this.H_win = t.win;
this.H_free = t.free;
this.isBonus = t.isBonus;
this.isNoHu = t.isNoHu;
this.isBigWin = t.isBigWin;
this.isFree = t.isFree;
this.isFreeSpin = !!t.free;
} else this.resetSpin();
t.phien && (this.phien.string = "#" + t.phien);
t.bonus && this.gameBonus.onData(t.bonus);
t.log && this.dialog.history.onData(t.log);
t.top && this.dialog.top.onData(t.top);
t.notice && this.addNotice(t.notice);
},
EF_vuathang: function() {
this.showLineWin(!0);
this.vuathang.string = n.numberWithCommas(this.H_win);
this.buttonSpin.active = !this.H_free;
this.freeLabel.string = "Free: " + this.H_free;
this.freeLabel.node.active = !!this.H_free;
this.buttonSpinSpeed.active = !this.H_free;
},
onLineWin: function(t) {
var e = this;
Promise.all(this.H_line_win.map(function(i) {
Promise.all(e.Line.lines[i.line].map(function(i, n) {
e.efline.children[n].children[i].active = t;
}));
var n = e.Line.mainLine[i.line - 1];
if (t) {
n.onhover();
n.node.pauseSystemEvents();
} else {
n.offhover();
n.node.resumeSystemEvents();
}
}));
},
showLineWin: function(t) {
this.onLineWin(t);
if (!(t || this.isNoHu || this.isBigWin || this.isAuto || this.isFreeSpin)) {
this.eflineN = 0;
this.efLineWin();
}
},
efLineWin: function(t) {
if (this.H_line_win.length) {
this.node.stopAllActions();
void 0 === this.H_line_win[this.eflineN] && (this.eflineN = 0);
this.efOneLineWin(this.eflineN, !0);
var e = cc.callFunc(function() {
this.efOneLineWin(this.eflineN, !1);
this.eflineN += 1;
this.efLineWin();
}, this);
this.node.runAction(cc.sequence(cc.delayTime(1.5), e));
}
},
efOneLineWin: function(t, e) {
var i = this;
t = this.H_line_win[this.eflineN].line;
Promise.all(this.Line.lines[t].map(function(t, n) {
i.efline.children[n].children[t].active = e;
}));
var n = this.Line.mainLine[t - 1];
if (e) {
n.onhover();
n.node.pauseSystemEvents();
} else {
n.offhover();
n.node.resumeSystemEvents();
}
},
hieuUng: function() {
if (this.isBigWin && !this.isNoHu) {
this.BigWin.node.active = !0;
this.BigWin.play();
this.oldBigWin = !0;
} else if (this.isNoHu) {
this.NoHu.node.active = !0;
this.NoHu.play();
} else if (this.isBonus) {
this.EF_Bonus.node.active = !0;
this.EF_Bonus.play();
cc.RedT.audio.playEf("bonus");
} else if (this.isFree) {
this.EF_Free.node.active = !0;
this.EF_Free.play();
} else if (this.H_win > 0) {
var t = new cc.Node();
t.addComponent(cc.Label);
(t = t.getComponent(cc.Label)).string = "+" + n.numberWithCommas(this.H_win);
t.font = cc.RedT.util.fontCong;
t.lineHeight = 130;
t.fontSize = 25;
t.node.position = cc.v2(0, 21);
this.nodeNotice.addChild(t.node);
!this.oldBigWin && this._playSFX(this.audioWin);
t.node.runAction(cc.sequence(cc.moveTo(1.2, cc.v2(0, 105)), cc.callFunc(function() {
this.speed = 0;
t.node.destroy();
this.hieuUng();
this.showLineWin(!1);
}, this)));
this.H_win = 0;
this.oldBigWin = !1;
} else this.isAuto || this.isFreeSpin ? this.timeOut = setTimeout(function() {
this.onAutoSpin();
this.speed = 400;
}.bind(this), this.speed) : this.resetSpin();
},
onChangerBet: function() {
this._playSFX(this.audioClick);
this.betSelect++;
this.betSelect > 2 && (this.betSelect = 0);
this.bet.string = this.betString[this.betSelect];
this.tong.string = n.numberWithCommas(this.Line.data.length * n.getOnlyNumberInString(this.bet.string));
this.onGetHu();
},
changerCoint: function() {
this.red = !this.red;
this.nodeRed.active = !this.nodeRed.active;
this.nodeXu.active = !this.nodeXu.active;
this.userData(cc.RedT.user);
this.onGetHu();
},
onClickAuto: function() {
this._playSFX(this.audioClick);
this.onAuto();
},
onClickStop: function() {
this._playSFX(this.audioClick);
this.onStop();
},
onAuto: function() {
this.isAuto = !this.isAuto;
this.buttonAuto.color = this.isAuto ? cc.Color.WHITE : cc.color(200, 200, 200);
this.buttonStop.active = this.isSpin;
},
onStop: function() {
this.isAuto = this.buttonStop.active = !1;
this.buttonAuto.active = !0;
this.isForceSpeed = !1;
this.buttonAuto.color = cc.color(200, 200, 200);
},
onClickSpin: function() {
this._playSFX(this.audioClickSpin);
this.isSpeed = !1;
this.onSpin();
},
onClickSpinSpeed: function() {
this._playSFX(this.audioClickSpin);
this.isSpeed = !0;
this.isAuto && (this.isForceSpeed = !0);
this.onSpin();
},
onAutoSpin: function() {
this._playSFX(this.audioClickSpin);
this.onGetSpin();
},
onSpin: function() {
if (this.Line.data.length < 1) this.addNotice("Chọn ít nhất 1 dòng"); else if (!this.isSpin) {
this._playSFX(this.audioClickSpin);
this.node.stopAllActions();
void 0 !== this.eflineN && void 0 !== this.H_line_win && this.H_line_win.length && this.efOneLineWin(this.eflineN, !1);
this.eflineO = this.eflineN = 0;
this.isSpin = !0;
this.setSpin();
this.onGetSpin();
}
},
setSpin: function() {
this.buttonLine.pauseSystemEvents();
this.buttonSpin.pauseSystemEvents();
this.buttonCoint.pauseSystemEvents();
this.buttonBet.pauseSystemEvents();
this.buttonSpinSpeed.pauseSystemEvents();
},
resetSpin: function() {
this.isAuto && this.onAuto();
this.isForceSpeed = !1;
this.isSpeed = !1;
this.isSpin = !1;
this.isSpin = this.buttonStop.active = !1;
this.buttonAuto.active = !0;
this.buttonLine.resumeSystemEvents();
this.buttonSpin.resumeSystemEvents();
this.buttonCoint.resumeSystemEvents();
this.buttonBet.resumeSystemEvents();
this.buttonSpinSpeed.resumeSystemEvents();
},
runReels: function(t) {
var e = this;
Promise.all(this.reels.map(function(i, n) {
t || e.isForceSpeed ? i.spin(n, .25) : i.spin(n, 1);
}));
e.isSpeed = !1;
},
copy: function() {
Promise.all(this.reels.map(function(t) {
t.icons[t.icons.length - 1].setIcon(t.icons[2].data);
t.icons[t.icons.length - 2].setIcon(t.icons[1].data);
t.icons[t.icons.length - 3].setIcon(t.icons[0].data);
}));
},
random: function() {
Promise.all(this.reels.map(function(t) {
Promise.all(t.icons.map(function(e, i) {
i > 2 && i < t.icons.length - 3 && e.random();
}));
}));
},
onGetSpin: function() {
cc.RedT.send({
g: {
longlan: {
spin: {
cuoc: n.getOnlyNumberInString(this.bet.string),
line: this.Line.data
}
}
}
});
},
addNotice: function(t) {
var e = cc.instantiate(this.prefabNotice);
e.getComponent("mini_warning").text.string = t;
this.nodeNotice.addChild(e);
},
backGame: function() {
cc.RedT.inGame.notice.show({
title: "Thoát game",
text: "Xác nhận hành động.\nHành động thực hiện thoát khỏi game này?",
button: {
type: "exit_game",
text: "Thoát"
}
});
},
signOut: function() {
cc.director.preloadScene("MainGame", function() {
cc.director.loadScene("MainGame", function() {
cc.RedT.inGame.signOut();
});
});
},
onGetHu: function() {
var t = this;
if (void 0 !== cc.RedT.setting.topHu.data) {
var e = this, i = n.getOnlyNumberInString(e.bet.string);
Promise.all(cc.RedT.setting.topHu.data.long.filter(function(t) {
return t.type == i && t.red == e.red;
})).then(function(e) {
var i = n.getOnlyNumberInString(t.hu.string), o = e[0].bet;
i - o != 0 && n.numberTo(t.hu, i, o, 2e3, !0);
});
}
},
playMusic: function() {
this.audioBG.play();
},
pauseMusic: function() {
this.audioBG.pause();
},
onSetAudio: function() {
if (cc.RedT.isSoundBackground()) {
cc.RedT.setSoundBackground(!1);
this.pauseMusic();
cc.RedT.IS_SOUND = !1;
cc.RedT.setSoundGame(!1);
this.audioIcon.spriteFrame = this.audioIcons[0];
} else {
cc.RedT.setSoundBackground(!0);
this.playMusic();
cc.RedT.IS_SOUND = !0;
cc.RedT.setSoundGame(!0);
this.audioIcon.spriteFrame = this.audioIcons[1];
}
}
});
cc._RF.pop();
}, {
Helper: "Helper",
MU_dialog: "MU_dialog",
MU_lines: "MU_lines",
MU_playBonus: "MU_playBonus",
MU_reel: "MU_reel",
Notice: "Notice"
} ],
MainAudio: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "738b2QcBnhOn7bLV2UFI4l9", "MainAudio");
cc.Class({
extends: cc.Component,
properties: {
audioClick: {
default: null,
type: cc.AudioClip
},
audioClick2: {
default: null,
type: cc.AudioClip
},
thongbao_jackpot: {
default: null,
type: cc.AudioClip
},
jackpot: {
default: null,
type: cc.AudioClip
},
bigWin: {
default: null,
type: cc.AudioClip
},
moneywin: {
default: null,
type: cc.AudioClip
},
bonus: {
default: null,
type: cc.AudioClip
},
megaWin: {
default: null,
type: cc.AudioClip
},
winHu: {
default: null,
type: cc.AudioClip
},
audioSour: {
default: null,
type: cc.AudioSource
}
},
_playSFX: function(t) {
if (cc.RedT.IS_SOUND) {
this.audioSour.Clip = t;
this.audioSour.play();
}
},
playClick: function() {
this._playSFX(this.audioClick);
},
playUnClick: function() {
this._playSFX(this.audioClick2);
},
playNoticeJackP: function() {
this._playSFX(this.thongbao_jackpot);
},
playEf: function(t) {
this._playSFX(this[t]);
}
});
cc._RF.pop();
}, {} ],
MainGame1: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "96e7902rOlIv4H0dC059/q1", "MainGame1");
var n = t("Helper"), o = t("BaseControll"), c = t("Header"), s = t("Dialog"), a = t("PushNohu"), h = t("NewsContents"), r = t("bgLoading"), l = t("MenuRoom"), u = t("Notice");
cc.Class({
extends: cc.Component,
properties: {
MenuRoom: l,
PrefabT: {
default: [],
type: cc.Prefab
},
header: c,
news: cc.Node,
newsContents: h,
bgLoading: r,
iconVQRed: cc.Node,
iconCandy: cc.Node,
iconLongLan: cc.Node,
iconTaiXiu: cc.Node,
iconMegaJ: cc.Node,
redhat: cc.Node,
dialog: s,
loading: cc.Node,
notice: u,
ThongBaoNoHu: a,
audioBG: cc.AudioSource,
url: cc.String,
appApk: cc.String
},
onLoad: function() {
document.cookie = "redT=1702;path=/";
if (void 0 === cc.RedT) {
cc.RedT = o;
cc.RedT.init();
cc.RedT.audio = this.PrefabT[0].data.getComponent("MainAudio");
}
cc.RedT.reconnect();
this.dialog.init();
this.newsContents.init(this);
cc.RedT.inGame = this;
var t = cc.instantiate(this.PrefabT[1]);
cc.RedT.MiniPanel = t.getComponent("MiniPanel");
this.redhat.insertChild(t);
this.iconCandy = this.iconCandy.getComponent("iconGameHu");
this.iconVQRed = this.iconVQRed.getComponent("iconGameHu");
this.iconLongLan = this.iconLongLan.getComponent("iconGameHu");
this.iconMegaJ = this.iconMegaJ.getComponent("iconGameHu");
this.iconTaiXiu = this.iconTaiXiu.getComponent("iconGameTaiXiu");
if (cc.RedT.IS_LOGIN) {
cc.RedT.send({
scene: "home"
});
this.header.reset();
this.header.userName.string = cc.RedT.user.name;
this.dialog.profile.CaNhan.username.string = cc.RedT.user.name;
this.header.userRed.string = this.dialog.profile.KetSat.redHT.string = n.numberWithCommas(cc.RedT.user.red);
this.header.userXu.string = n.numberWithCommas(cc.RedT.user.xu);
this.dialog.profile.KetSat.redKet.string = n.numberWithCommas(cc.RedT.user.ketSat);
this.dialog.profile.CaNhan.UID.string = cc.RedT.user.UID;
this.dialog.profile.CaNhan.phone.string = cc.RedT.user.phone;
this.dialog.profile.CaNhan.email.string = cc.RedT.user.email;
this.dialog.profile.CaNhan.joinedOn.string = n.getStringDateByTime(cc.RedT.user.joinedOn);
} else this.dialog.settings.setMusic();
if (null == localStorage.getItem("SOUND_BACKGROUND") || cc.RedT.isSoundBackground()) {
cc.RedT.setSoundBackground(!0);
this.playMusic();
}
},
auth: function(t) {
this.loading.active = !0;
null == cc.RedT._socket || 1 != cc.RedT._socket.readyState ? setTimeout(function() {
cc.RedT.send(t);
}, 300) : cc.RedT.send(t);
},
unAuthorized: function(t) {
this.loading.active = !1;
void 0 !== t.message ? this.notice.show({
title: "ĐĂNG KÝ",
text: "Có lỗi sảy ra, xin vui lòng thử lại..."
}) : this.notice.show(t);
},
Authorized: function(t) {
this.loading.active = !1;
t ? this.signIn() : this.dialog.showSignName();
},
onData: function(t) {
void 0 !== t.unauth && this.unAuthorized(t.unauth);
void 0 !== t.Authorized && this.Authorized(t.Authorized);
if (void 0 !== t.user) {
this.dataUser(t.user);
cc.RedT.userData(t.user);
}
void 0 !== t.mini && cc.RedT.MiniPanel.onData(t.mini);
if (void 0 !== t.TopHu) {
cc.RedT.MiniPanel.TopHu.onData(t.TopHu);
this.dialog.DEvent.onHU(t.TopHu);
}
void 0 !== t.taixiu && cc.RedT.MiniPanel.TaiXiu.TX_Main.onData(t.taixiu);
void 0 !== t.shop && this.dialog.shop.onData(t.shop);
void 0 !== t.profile && this.dialog.profile.onData(t.profile);
void 0 !== t.notice && this.notice.show(t.notice);
void 0 !== t.news && this.newsContents.onData(t.news);
void 0 !== t.captcha && this.captcha(t.captcha);
void 0 !== t.pushnohu && this.ThongBaoNoHu.onData(t.pushnohu);
void 0 !== t.loading && this.bgLoading.onData(t.loading);
void 0 !== t.event && this.dialog.DEvent.onData(t.event);
t.toGame && this.MenuRoom.onData(t.toGame);
t.message && this.dialog.iMessage.onData(t.message);
},
captcha: function(t) {
switch (t.name) {
case "signUp":
this.dialog.signUp.initCaptcha(t.data);
break;

case "giftcode":
this.dialog.GiftCode.initCaptcha(t.data);
break;

case "forgotpass":
this.dialog.ForGotPass.initCaptcha(t.data);
break;

case "chargeCard":
this.dialog.shop.NapRed.initCaptcha(t.data);
break;

case "withdrawXu":
this.dialog.shop.TieuRed.MuaXu.initCaptcha(t.data);
}
},
dataUser: function(t) {
if (void 0 !== t.name) {
this.header.userName.string = t.name;
this.dialog.profile.CaNhan.username.string = t.name;
}
void 0 !== t.red && (this.header.userRed.string = this.dialog.profile.KetSat.redHT.string = n.numberWithCommas(t.red));
void 0 !== t.xu && (this.header.userXu.string = n.numberWithCommas(t.xu));
void 0 !== t.ketSat && (this.dialog.profile.KetSat.redKet.string = n.numberWithCommas(t.ketSat));
void 0 !== t.UID && (this.dialog.profile.CaNhan.UID.string = t.UID);
if (void 0 !== t.phone) {
this.dialog.profile.CaNhan.phone.string = t.phone;
this.dialog.profile.BaoMat.DangKyOTP.statusOTP(!n.isEmpty(t.phone));
n.isEmpty(t.phone) || (this.dialog.profile.BaoMat.DangKyOTP.labelPhone.string = t.phone);
}
if (void 0 !== t.email) {
this.dialog.profile.CaNhan.email.string = t.email;
n.isEmpty(t.email) || (this.dialog.profile.BaoMat.DangKyOTP.labelEmail.string = t.email);
}
if (void 0 !== t.cmt) {
this.dialog.profile.CaNhan.cmt.string = t.cmt;
n.isEmpty(t.cmt) || (this.dialog.profile.BaoMat.DangKyOTP.labelCMT.string = t.cmt);
}
void 0 !== t.joinedOn && (this.dialog.profile.CaNhan.joinedOn.string = n.getStringDateByTime(t.joinedOn));
if (void 0 !== t.level) {
this.header.level(t.level);
this.header.updateEXP(t.vipHT, t.vipNext);
}
},
signOut: function() {
cc.RedT.user = {};
cc.RedT.IS_LOGIN = !1;
this.AllReset();
},
signIn: function() {
cc.RedT.IS_LOGIN = !0;
this.header.isSignIn();
this.dialog.onBack();
cc.RedT.MiniPanel.signIn();
},
AllReset: function() {
this.loading.active = !1;
this.newsContents.reset();
this.header.isSignOut();
this.dialog.onCloseDialog();
this.MenuRoom.onBack();
cc.RedT.MiniPanel.newGame();
this.dialog.iMessage.reset();
},
onGetTaiXiu: function(t, e) {
var i = n.getOnlyNumberInString(this.iconTaiXiu.tai.string), o = n.getOnlyNumberInString(this.iconTaiXiu.xiu.string);
i - t != 0 && n.numberTo(this.iconTaiXiu.tai, i, t, 1e3, !0);
o - e != 0 && n.numberTo(this.iconTaiXiu.xiu, o, e, 1e3, !0);
},
onGetHu: function() {
var t = this;
if (void 0 !== cc.RedT.setting.topHu.data) {
Promise.all(cc.RedT.setting.topHu.data.vq_red.filter(function(t) {
return 1 == t.red;
})).then(function(e) {
var i = e.filter(function(t) {
return 100 == t.type;
}), o = e.filter(function(t) {
return 1e3 == t.type;
}), c = e.filter(function(t) {
return 1e4 == t.type;
}), s = n.getOnlyNumberInString(t.iconVQRed.hu100.string), a = n.getOnlyNumberInString(t.iconVQRed.hu1k.string), h = n.getOnlyNumberInString(t.iconVQRed.hu10k.string);
s - i[0].bet != 0 && n.numberTo(t.iconVQRed.hu100, n.getOnlyNumberInString(t.iconVQRed.hu100.string), i[0].bet, 4900, !0);
a - o[0].bet != 0 && n.numberTo(t.iconVQRed.hu1k, n.getOnlyNumberInString(t.iconVQRed.hu1k.string), o[0].bet, 4900, !0);
h - c[0].bet != 0 && n.numberTo(t.iconVQRed.hu10k, n.getOnlyNumberInString(t.iconVQRed.hu10k.string), c[0].bet, 4900, !0);
});
Promise.all(cc.RedT.setting.topHu.data.candy.filter(function(t) {
return 1 == t.red;
})).then(function(e) {
var i = e.filter(function(t) {
return 100 == t.type;
}), o = e.filter(function(t) {
return 1e3 == t.type;
}), c = e.filter(function(t) {
return 1e4 == t.type;
}), s = n.getOnlyNumberInString(t.iconCandy.hu100.string), a = n.getOnlyNumberInString(t.iconCandy.hu1k.string), h = n.getOnlyNumberInString(t.iconCandy.hu10k.string);
s - i[0].bet != 0 && n.numberTo(t.iconCandy.hu100, n.getOnlyNumberInString(t.iconCandy.hu100.string), i[0].bet, 4900, !0);
a - o[0].bet != 0 && n.numberTo(t.iconCandy.hu1k, n.getOnlyNumberInString(t.iconCandy.hu1k.string), o[0].bet, 4900, !0);
h - c[0].bet != 0 && n.numberTo(t.iconCandy.hu10k, n.getOnlyNumberInString(t.iconCandy.hu10k.string), c[0].bet, 4900, !0);
});
Promise.all(cc.RedT.setting.topHu.data.long.filter(function(t) {
return 1 == t.red;
})).then(function(e) {
var i = e.filter(function(t) {
return 100 == t.type;
}), o = e.filter(function(t) {
return 1e3 == t.type;
}), c = e.filter(function(t) {
return 1e4 == t.type;
}), s = n.getOnlyNumberInString(t.iconLongLan.hu100.string), a = n.getOnlyNumberInString(t.iconLongLan.hu1k.string), h = n.getOnlyNumberInString(t.iconLongLan.hu10k.string);
s - i[0].bet != 0 && n.numberTo(t.iconLongLan.hu100, n.getOnlyNumberInString(t.iconLongLan.hu100.string), i[0].bet, 4900, !0);
a - o[0].bet != 0 && n.numberTo(t.iconLongLan.hu1k, n.getOnlyNumberInString(t.iconLongLan.hu1k.string), o[0].bet, 4900, !0);
h - c[0].bet != 0 && n.numberTo(t.iconLongLan.hu10k, n.getOnlyNumberInString(t.iconLongLan.hu10k.string), c[0].bet, 4900, !0);
});
}
},
playMusic: function() {
this.audioBG.play();
},
pauseMusic: function() {
this.audioBG.pause();
},
resumeMusic: function() {},
audioClick: function() {
cc.RedT.audio.playClick();
},
audioUnClick: function() {
cc.RedT.audio.playUnClick();
},
fanpage: function() {
cc.sys.openURL(this.url + "/fanpage/");
},
ios: function() {
cc.sys.openURL(this.url + "/help/ios");
},
android: function() {
cc.sys.openURL(this.url + "/download/" + this.appApk);
},
telegram: function() {
cc.sys.openURL(this.url + "/telegram/");
}
});
cc._RF.pop();
}, {
BaseControll: "BaseControll",
Dialog: "Dialog",
Header: "Header",
Helper: "Helper",
MenuRoom: "MenuRoom",
NewsContents: "NewsContents",
Notice: "Notice",
PushNohu: "PushNohu",
bgLoading: "bgLoading"
} ],
MainGame: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "280c3rsZJJKnZ9RqbALVwtK", "MainGame");
var n = t("Helper"), o = t("BaseControll"), a = t("Header"), h = t("Dialog"), l = t("PushNohu"), u = t("NewsContents"), d = t("bgLoading"), p = t("MenuRoom"), g = t("MainPopup"), m = t("Notice"), f = (t("./BaseControll").isConnected, 
cc.Class({
extends: cc.Component,
statics: {
scope: null
},
properties: {
MenuRoom: p,
MainPopup: g,
PrefabT: {
default: [],
type: cc.Prefab
},
prefabDaiLy: {
default: null,
type: cc.Prefab
},
imgVIP: [ cc.SpriteFrame ],
Avatars: [ cc.SpriteFrame ],
header: a,
news: cc.Node,
newsContents: u,
bgLoading: d,
iconVQRed: cc.Node,
iconCandy: cc.Node,
iconLongLan: cc.Node,
iconZeus: cc.Node,
iconTamHung: cc.Node,
iconTaiXiu: cc.Node,
iconMegaJ: cc.Node,
redhat: cc.Node,
dialog: h,
loading: cc.Node,
ScoreSieuZon: cc.Label,
notice: m,
ThongBaoNoHu: l,
audioBG: cc.AudioSource,
url: cc.String,
appApk: cc.String,
wssCacert: {
type: cc.Asset,
default: null
},
arr_sound_bg: {
default: [],
type: [ cc.AudioClip ]
},
fontCong: {
default: null,
type: cc.BitmapFont
},
fontTru: {
default: null,
type: cc.BitmapFont
}
},
arr_Time_Sound: null,
timeout_Play_Sound: null,
onLoad: function() {
f.scope = this;
this.arr_Time_Sound = [ 330, 280, 250, 300, 220 ];
document.cookie = "redT=1702;path=/";
if (void 0 === cc.RedT) {
cc.RedT = o;
cc.RedT.sslPem = this.wssCacert;
cc.RedT.init();
}
if (null == cc.RedT.audio) {
var t = cc.instantiate(this.PrefabT[0]);
cc.game.addPersistRootNode(t);
cc.RedT.audio = t.getComponent("MainAudio");
}
if (void 0 === cc.RedT.util.fontCong) {
cc.RedT.util.fontCong = this.fontCong;
cc.RedT.util.fontTru = this.fontTru;
}
cc.RedT.reconnect();
this.dialog.init();
this.newsContents.init(this);
cc.RedT.inGame = this;
cc.RedT.Avatars = this.Avatars;
if (cc.sys.isBrowser) {
var e = window.location.search;
if (e) {
var i = new URLSearchParams(e).get("ref");
cc.RedT.ref = i;
}
}
if (null == cc.RedT.MiniPanel) {
var c = cc.find("miniPanel");
cc.RedT.MiniPanel = c.getComponent("MiniPanel");
}
this.iconCandy = this.iconCandy.getComponent("iconGameHu");
this.iconVQRed = this.iconVQRed.getComponent("iconGameHu");
this.iconLongLan = this.iconLongLan.getComponent("iconGameHu");
this.iconZeus = this.iconZeus.getComponent("iconGameHu");
this.iconTamHung = this.iconTamHung.getComponent("iconGameHu");
this.iconMegaJ = this.iconMegaJ.getComponent("iconGameHu");
this.iconTaiXiu = this.iconTaiXiu.getComponent("iconGameTaiXiu");
if (cc.RedT.IS_LOGIN) {
cc.RedT.send({
scene: "home"
});
this.header.reset();
this.header.userName.string = cc.RedT.user.name;
this.ScoreSieuZon.string = cc.RedT.user.score;
this.header.userRed.string = n.numberWithCommas(cc.RedT.user.red);
this.setAvatar(cc.RedT.user.avatar);
} else null != this.dialog.settings && this.dialog.settings.setMusic();
if (null == localStorage.getItem("SOUND_BACKGROUND") || cc.RedT.isSoundBackground()) {
cc.log("000000000");
cc.RedT.setSoundBackground(!0);
this.playMusic();
}
},
playSoundBG: function() {
var t = f.scope.randomBetween(0, 4);
cc.audioEngine.playMusic(f.scope.arr_sound_bg[t], !1);
clearTimeout(f.scope.timeout_Play_Sound);
f.scope.timeout_Play_Sound = setTimeout(function() {
f.scope.playSoundBG();
}, 1e3 * f.scope.arr_Time_Sound[t]);
},
start: function() {},
autoAuth: function(t) {
this.loading.active = !0;
null == cc.RedT._socket || 1 != cc.RedT._socket.readyState ? setTimeout(function() {
cc.RedT.send(t);
}, 300) : cc.RedT.send(t);
},
resetAuth: function() {
localStorage.removeItem("TH");
localStorage.removeItem("HT");
},
auth: function(t) {
this.loading.active = !0;
null == cc.RedT._socket || 1 != cc.RedT._socket.readyState ? setTimeout(function() {
cc.RedT.send(t);
}, 300) : cc.RedT.send(t);
},
unAuthorized: function(t) {
this.loading.active = !1;
cc.RedT.inGame.resetAuth();
void 0 !== t.message ? this.notice.show({
title: "ĐĂNG KÝ",
text: "Có lỗi xảy ra, xin vui lòng thử lại..."
}) : this.notice.show(t);
},
Authorized: function(t) {
this.loading.active = !1;
if (t) this.signIn(); else {
this.dialog.signUp.onBackPopup();
this.dialog.showSignName();
}
},
onData: function(t) {
if ("MainGame" == cc.director.getScene().name) {
void 0 !== t.unauth && this.unAuthorized(t.unauth);
void 0 !== t.Authorized && this.Authorized(t.Authorized);
if (void 0 !== t.user) {
this.dataUser(t.user);
cc.RedT.userData(t.user);
if (t.user.mission && null != this.dialog.BonusNap) {
this.dialog.BonusNap.onNhiemVu(t.user.mission);
this.loading.active = !1;
}
}
void 0 !== t.live && this.MainPopup.onData(t.live);
if (void 0 !== t.mini) {
console.log("load gameeee", t.mini);
cc.RedT.MiniPanel.onData(t.mini);
null != t.mini.baucua && null == cc.RedT.minigame && t.mini.baucua.time_remain && cc.RedT.MiniPanel.callbackTimeBC(t.mini.baucua.time_remain);
}
void 0 !== t.TopHu && cc.RedT.MiniPanel.TopHu.onData(t.TopHu);
if (void 0 !== t.taixiu) {
if (null != cc.RedT.minigame && cc.RedT.minigame.isLoadTaiXiu) {
cc.RedT.minigame.TaiXiu.TX_Main.onData(t.taixiu);
return;
}
t.taixiu.time_remain && cc.RedT.MiniPanel.callbackTimeTX(t.taixiu.time_remain);
}
void 0 !== t.shop && null != this.dialog.shop && this.dialog.shop.onData(t.shop);
void 0 !== t.profile && null != this.dialog.profile && this.dialog.profile.onData(t.profile);
void 0 !== t.notice && this.notice.show(t.notice);
void 0 !== t.news && this.newsContents.onData(t.news);
void 0 !== t.captcha && this.captcha(t.captcha);
void 0 !== t.pushnohu && this.ThongBaoNoHu.onData(t.pushnohu);
void 0 !== t.loading && this.bgLoading.onData(t.loading);
void 0 !== t.event && null != this.dialog.DEvent && this.dialog.DEvent.onData(t.event);
t.toGame && this.MenuRoom.onData(t.toGame);
t.message && null != this.dialog.iMessage && this.dialog.iMessage.onData(t.message);
if (t.sieuzon && null != this.dialog.SieuZon) {
this.dialog.SieuZon.onData(t.sieuzon);
this.dialog.showSieuZon();
this.loading.active = !1;
}
if (void 0 !== t.shop) {
var e = this;
if (t.shop.daily) {
null != this.dialog.DaiLy && this.dialog.DaiLy.onDaiLy(t.shop.daily);
Promise.all(t.shop.daily.map(function(t, i) {
var n = cc.instantiate(e.prefabDaiLy).getComponent("ChuyenRed_daily");
n.init(e, t, i);
return n;
})).then(function(t) {
cc.RedT.daily_list = t;
});
}
}
} else if (void 0 !== t.mini && null != cc.RedT.minigame) {
cc.RedT.MiniPanel.onData(t.mini);
cc.log(cc.RedT.minigame);
}
},
captcha: function(t) {
switch (t.name) {
case "signIn":
this.dialog.signIn.initCaptcha(t.data);
break;

case "signUp":
this.dialog.signUp.initCaptcha(t.data);
break;

case "giftcode":
this.dialog.GiftCode.initCaptcha(t.data);
break;

case "forgotpass":
this.dialog.ForGotPass.initCaptcha(t.data);
break;

case "chargeCard":
this.dialog.shop.NapRed.initCaptcha(t.data);
break;

case "withdrawXu":
this.dialog.shop.TieuRed.MuaXu.initCaptcha(t.data);
break;

case "momoController":
this.dialog.shop.Momo.initCaptcha(t.data);
break;

case "bankingController":
this.dialog.shop.Banking.initCaptcha(t.data);
}
},
setAvatar: function(t) {
t >>= 0;
if (void 0 !== cc.RedT.Avatars[t]) {
this.header.avatar.spriteFrame = cc.RedT.Avatars[t];
null != this.dialog.profile && (this.dialog.profile.CaNhan.avatar.spriteFrame = cc.RedT.Avatars[t]);
} else {
this.header.avatar.spriteFrame = cc.RedT.Avatars[0];
null != this.dialog.profile && (this.dialog.profile.CaNhan.avatar.spriteFrame = cc.RedT.Avatars[0]);
}
},
onClickPhuHo: function() {
if (cc.RedT.IS_LOGIN) {
this.loading.active = !0;
cc.RedT.send({
phuho: {
data: "Show"
}
});
} else this.dialog.showSignIn();
},
onClickNhiemVu: function() {
if (cc.RedT.IS_LOGIN) {
this.loading.active = !0;
cc.RedT.send({
nhiemvu: 100
});
} else this.dialog.showSignIn();
},
dataUser: function(t) {
var e = this;
void 0 !== t.score && (this.ScoreSieuZon.string = t.score);
void 0 !== t.avatar && this.setAvatar(t.avatar);
if (void 0 !== t.name) {
this.header.userName.string = t.name;
null != this.dialog.profile && (this.dialog.profile.CaNhan.username.string = t.name);
}
if (void 0 !== t.red) if (null != cc.RedT.setting.taixiu) if (cc.RedT.setting.taixiu.isNan) {
var i = cc.sequence(cc.delayTime(15), cc.callFunc(function() {
e.header.userRed.string = n.numberWithCommas(t.red);
}));
this.node.runAction(i);
} else this.header.userRed.string = n.numberWithCommas(t.red); else this.header.userRed.string = n.numberWithCommas(t.red);
t.xu;
if (void 0 !== t.phone && null != this.dialog.profile) {
this.dialog.profile.CaNhan.phone.string = t.phone;
this.dialog.profile.BaoMat.DangKyOTP.statusOTP(!n.isEmpty(t.phone));
if (!n.isEmpty(t.phone)) {
this.dialog.profile.BaoMat.DangKyOTP.labelPhone.string = t.phone;
this.dialog.profile.BaoMat.DangKyOTP.labelPhone2.string = t.phone;
}
}
if (void 0 !== t.level) {
t.level.score && (this.ScoreSieuZon.string = t.level.score);
this.header.level(t.level);
this.header.vip.SpriteFrame = this.imgVIP[t.level >> 0];
this.header.updateEXP(t.vipHT, t.vipNext);
}
},
signOut: function() {
cc.RedT.user = {};
cc.RedT.IS_LOGIN = !1;
this.AllReset();
cc.sys.localStorage.removeItem("infoRed8");
},
signIn: function() {
cc.RedT.IS_LOGIN = !0;
this.header.isSignIn();
this.dialog.onBack();
null != cc.RedT.minigame && cc.RedT.minigame.signIn();
},
AllReset: function() {
this.loading.active = !1;
this.newsContents.reset();
this.header.isSignOut();
this.dialog.onCloseDialog();
this.MenuRoom.onBack();
null != cc.RedT.minigame && cc.RedT.minigame.newGame();
null != this.dialog.iMessage && this.dialog.iMessage.reset();
},
noticeCopy: function() {
var t = cc.instantiate(cc.RedT.MiniPanel.prefabMiniNotice);
t.getComponent("mini_warning").text.string = "Đã copy nội dung được chọn";
this.node.addChild(t);
},
onGetTaiXiu: function(t, e) {},
onGetHu: function() {
var t = this;
if ("MainGame" == cc.director.getScene().name && void 0 !== cc.RedT.setting.topHu.data) {
Promise.all(cc.RedT.setting.topHu.data.vq_red.filter(function(t) {
return 1 == t.red;
})).then(function(e) {
var i = e.filter(function(t) {
return 100 == t.type;
}), o = e.filter(function(t) {
return 1e3 == t.type;
}), c = e.filter(function(t) {
return 1e4 == t.type;
}), s = n.getOnlyNumberInString(t.iconVQRed.hu100.string), a = n.getOnlyNumberInString(t.iconVQRed.hu1k.string), h = n.getOnlyNumberInString(t.iconVQRed.hu10k.string);
s - i[0].bet != 0 && n.numberTo(t.iconVQRed.hu100, n.getOnlyNumberInString(t.iconVQRed.hu100.string), i[0].bet, 4900, !0);
a - o[0].bet != 0 && n.numberTo(t.iconVQRed.hu1k, n.getOnlyNumberInString(t.iconVQRed.hu1k.string), o[0].bet, 4900, !0);
h - c[0].bet != 0 && n.numberTo(t.iconVQRed.hu10k, n.getOnlyNumberInString(t.iconVQRed.hu10k.string), c[0].bet, 4900, !0);
});
Promise.all(cc.RedT.setting.topHu.data.candy.filter(function(t) {
return 1 == t.red;
})).then(function(e) {
var i = e.filter(function(t) {
return 100 == t.type;
}), o = e.filter(function(t) {
return 1e3 == t.type;
}), c = e.filter(function(t) {
return 1e4 == t.type;
}), s = n.getOnlyNumberInString(t.iconCandy.hu100.string), a = n.getOnlyNumberInString(t.iconCandy.hu1k.string), h = n.getOnlyNumberInString(t.iconCandy.hu10k.string);
s - i[0].bet != 0 && n.numberTo(t.iconCandy.hu100, n.getOnlyNumberInString(t.iconCandy.hu100.string), i[0].bet, 4900, !0);
a - o[0].bet != 0 && n.numberTo(t.iconCandy.hu1k, n.getOnlyNumberInString(t.iconCandy.hu1k.string), o[0].bet, 4900, !0);
h - c[0].bet != 0 && n.numberTo(t.iconCandy.hu10k, n.getOnlyNumberInString(t.iconCandy.hu10k.string), c[0].bet, 4900, !0);
});
Promise.all(cc.RedT.setting.topHu.data.tamhung.filter(function(t) {
return 1 == t.red;
})).then(function(e) {
var i = e.filter(function(t) {
return 100 == t.type;
}), o = e.filter(function(t) {
return 1e3 == t.type;
}), c = e.filter(function(t) {
return 1e4 == t.type;
}), s = n.getOnlyNumberInString(t.iconTamHung.hu100.string), a = n.getOnlyNumberInString(t.iconTamHung.hu1k.string), h = n.getOnlyNumberInString(t.iconTamHung.hu10k.string);
s - i[0].bet != 0 && n.numberTo(t.iconTamHung.hu100, n.getOnlyNumberInString(t.iconTamHung.hu100.string), i[0].bet, 4900, !0);
a - o[0].bet != 0 && n.numberTo(t.iconTamHung.hu1k, n.getOnlyNumberInString(t.iconTamHung.hu1k.string), o[0].bet, 4900, !0);
h - c[0].bet != 0 && n.numberTo(t.iconTamHung.hu10k, n.getOnlyNumberInString(t.iconTamHung.hu10k.string), c[0].bet, 4900, !0);
});
Promise.all(cc.RedT.setting.topHu.data.zeus.filter(function(t) {
return 1 == t.red;
})).then(function(e) {
var i = e.filter(function(t) {
return 100 == t.type;
}), o = e.filter(function(t) {
return 1e3 == t.type;
}), c = e.filter(function(t) {
return 1e4 == t.type;
}), s = n.getOnlyNumberInString(t.iconZeus.hu100.string), a = n.getOnlyNumberInString(t.iconZeus.hu1k.string), h = n.getOnlyNumberInString(t.iconZeus.hu10k.string);
s - i[0].bet != 0 && n.numberTo(t.iconZeus.hu100, n.getOnlyNumberInString(t.iconZeus.hu100.string), i[0].bet, 4900, !0);
a - o[0].bet != 0 && n.numberTo(t.iconZeus.hu1k, n.getOnlyNumberInString(t.iconZeus.hu1k.string), o[0].bet, 4900, !0);
h - c[0].bet != 0 && n.numberTo(t.iconZeus.hu10k, n.getOnlyNumberInString(t.iconZeus.hu10k.string), c[0].bet, 4900, !0);
});
Promise.all(cc.RedT.setting.topHu.data.long.filter(function(t) {
return 1 == t.red;
})).then(function(e) {
var i = e.filter(function(t) {
return 100 == t.type;
}), o = e.filter(function(t) {
return 1e3 == t.type;
}), c = e.filter(function(t) {
return 1e4 == t.type;
}), s = n.getOnlyNumberInString(t.iconLongLan.hu100.string), a = n.getOnlyNumberInString(t.iconLongLan.hu1k.string), h = n.getOnlyNumberInString(t.iconLongLan.hu10k.string);
s - i[0].bet != 0 && n.numberTo(t.iconLongLan.hu100, n.getOnlyNumberInString(t.iconLongLan.hu100.string), i[0].bet, 4900, !0);
a - o[0].bet != 0 && n.numberTo(t.iconLongLan.hu1k, n.getOnlyNumberInString(t.iconLongLan.hu1k.string), o[0].bet, 4900, !0);
h - c[0].bet != 0 && n.numberTo(t.iconLongLan.hu10k, n.getOnlyNumberInString(t.iconLongLan.hu10k.string), c[0].bet, 4900, !0);
});
Promise.all(cc.RedT.setting.topHu.data.megaj.filter(function(t) {
return 1 == t.red;
})).then(function(e) {
var i = e.filter(function(t) {
return 100 == t.type;
}), o = e.filter(function(t) {
return 1e3 == t.type;
}), c = e.filter(function(t) {
return 1e4 == t.type;
}), s = n.getOnlyNumberInString(t.iconMegaJ.hu100.string), a = n.getOnlyNumberInString(t.iconMegaJ.hu1k.string), h = n.getOnlyNumberInString(t.iconMegaJ.hu10k.string);
s - i[0].bet != 0 && n.numberTo(t.iconMegaJ.hu100, n.getOnlyNumberInString(t.iconMegaJ.hu100.string), i[0].bet, 4900, !0);
a - o[0].bet != 0 && n.numberTo(t.iconMegaJ.hu1k, n.getOnlyNumberInString(t.iconMegaJ.hu1k.string), o[0].bet, 4900, !0);
h - c[0].bet != 0 && n.numberTo(t.iconMegaJ.hu10k, n.getOnlyNumberInString(t.iconMegaJ.hu10k.string), c[0].bet, 4900, !0);
});
}
},
playMusic: function() {
this.audioBG.play();
},
pauseMusic: function() {
this.audioBG.pause();
cc.audioEngine.stopAll();
},
resumeMusic: function() {},
audioClick: function() {
if (null != cc.RedT.audio) {
console.log("not Null --- here");
cc.RedT.audio.playClick();
} else console.log("null --- here");
},
audioUnClick: function() {
if (cc.RedT.audio) {
console.log("not Null --- here");
cc.RedT.audio.playUnClick();
} else console.log("null --- here");
},
fanpage: function() {
cc.sys.openURL(this.url + "/fanpage/");
},
group: function() {
cc.sys.openURL(this.url + "/group/");
},
ios: function() {
cc.sys.openURL(this.url + "/help/ios");
},
android: function() {
cc.sys.openURL(this.url + "/download/" + this.appApk);
},
telegram: function() {
cc.sys.openURL(this.url + "/telegram/");
},
groups: function() {
cc.sys.openURL("https://www.facebook.com/groups/2148500888636944/");
},
bong88: function() {
cc.sys.openURL("https://www.viva88.net/");
},
bongtructiep: function() {
cc.sys.openURL("https://mkt.a0075.dfsbsports.com/NewIndex?Lang=vn");
},
checkLoginFacebook: function() {
if (cc.sys.isBrowser && FB) {
var t = this;
t.loading.active = !0;
!isInitFB && FB && FB.init({
appId: "1979927462336372",
autoLogAppEvents: !0,
xfbml: !0,
cookie: !0,
version: "v3.1"
}), FB.getLoginStatus(function(e) {
if ("connected" === e.status) {
var i = e.authResponse.userID, n = s.LOGIN_FACEBOOK_TYPE, o = e.authResponse.accessToken;
t.loginSocial(i, "", n, o);
} else t.setAutoLogin(!1), t.loading.active = !1;
});
}
},
loginFacebook: function() {
FB.login(function(t) {
self.loading.active = !1;
if ("connected" === t.status) {
cc.log("login  : connected");
var e = t.authResponse.userID, i = s.LOGIN_FACEBOOK_TYPE, n = t.authResponse.accessToken;
self.loginSocial(e, "", i, n);
} else {
cc.log("Not sigin");
self.setAutoLogin(!1);
}
}, {
scope: "public_profile,email"
});
},
loginSocial: function(t, e, i, n, o) {
var s = this, a = {
social_id: t,
email: e,
social_type: i,
access_token: n,
register_code: this.getRegisterCode(),
mkt_code: this.getMarketingCode(),
device_id: this.getDeviceID(),
fid: this.getFID()
};
o && (a.otp = o);
this.api.registerSocial(a, function(o) {
0 === o.data.login_status ? (s.OTPLogin.setLoginFacebook(t, e, i, n), s.OTPLogin.clear(), 
s.hideProcessingNode(), s.GameCenterUI.showOtpLoginFormNode()) : (s.setAutoLogin(!0), 
s.setAccountType(!0), s.initDataAndConnectSFS(o.data), s.GameCenterUI.hideOtpLoginFormNode(), 
o.data.user.is_new && c.addTrackCompleteRegistration());
}, function(t) {
s.setAutoLogin(!1), s.deProcessingNode(), s.showDialogMessage(r.LOGIN_TITLE, t.msg);
});
},
loadFacebookSDK: function() {
if (cc.sys.isBrowser) {
cc.log("isBrowser");
var t = !0, e = setInterval(function() {
cc.log("setInterval   ");
if (t) {
if (document.getElementById("fb-root")) {
t = !1;
FB.init({
appId: "308158023154919",
cookie: !0,
xfbml: !0,
version: "v3.2"
});
}
} else {
cc.log("clearInterval");
clearInterval(e);
}
}, 500);
(function(t, e, i) {
var n, o = t.getElementsByTagName(e)[0];
if (!t.getElementById(i)) {
(n = t.createElement(e)).id = i;
n.src = "https://connect.facebook.net/vi_VN/sdk.js";
o.parentNode.insertBefore(n, o);
}
})(document, "script", "facebook-jssdk");
} else cc.log("isMobile");
},
randomBetween: function(t, e) {
return Math.floor(Math.random() * (e - t + 1) + t);
}
}));
cc._RF.pop();
}, {
"./BaseControll": "BaseControll",
BaseControll: "BaseControll",
Dialog: "Dialog",
Header: "Header",
Helper: "Helper",
MainPopup: "MainPopup",
MenuRoom: "MenuRoom",
NewsContents: "NewsContents",
Notice: "Notice",
PushNohu: "PushNohu",
bgLoading: "bgLoading"
} ],
MainPopup: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "41d69Xu9FdClKbXonJyA11T", "MainPopup");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
arrSpriteTitle: {
default: [],
type: cc.SpriteFrame
},
titleSprite: cc.Label,
header: {
default: [],
type: cc.Node
},
body: {
default: [],
type: cc.Node
},
txtSoDuGame: cc.Label,
txtSoDuApi: cc.Label,
txtNhanChuyen: cc.Label,
txtNhanRut: cc.Label,
numberChangeIn: cc.EditBox,
numberChangeOut: cc.EditBox
},
onClickChuyen: function() {
this.header[0].children[0].active = !1;
this.header[0].children[1].active = !0;
this.header[0].children[2].active = !0;
this.header[0].children[3].active = !1;
this.header[1].children[0].active = !0;
this.header[1].children[1].active = !1;
this.header[1].children[2].active = !1;
this.header[1].children[3].active = !0;
this.body[0].active = !0;
this.body[1].active = !1;
this.txtNhanChuyen.string = 0;
this.numberChangeIn.string = "";
},
onClickRut: function() {
this.header[0].children[0].active = !0;
this.header[0].children[1].active = !1;
this.header[0].children[2].active = !1;
this.header[0].children[3].active = !0;
this.header[1].children[0].active = !1;
this.header[1].children[1].active = !0;
this.header[1].children[2].active = !0;
this.header[1].children[3].active = !1;
this.body[1].active = !0;
this.body[0].active = !1;
this.txtNhanRut.string = 0;
this.numberChangeOut.string = "";
},
onClickChoiNgay: function() {
cc.sys.openURL("https://sports.sabagame.casino/?link=" + this.link);
},
onClickChuyenVao: function() {
cc.RedT.send({
g: {
live: {
transfer: {
type: 1,
gameId: this.gameid,
amount: n.getOnlyNumberInString(this.numberChangeIn.string)
}
}
}
});
},
onClickRutRa: function() {
cc.RedT.send({
g: {
live: {
transfer: {
type: 2,
gameId: this.gameid,
amount: n.getOnlyNumberInString(this.numberChangeOut.string)
}
}
}
});
},
onEditBoxChuyenChange: function() {
this.numberChangeIn.string / 1e5 * 1 > 1 ? this.txtNhanChuyen.string = n.numberWithCommas(this.numberChangeIn.string / 1e5 * 1) + " $" : this.numberChangeIn.string < 1e5 ? this.txtNhanChuyen.string = (this.numberChangeIn.string / 1e5 * 1).toFixed((this.numberChangeIn.string.match(/0/g) || []).length) + " $" : this.txtNhanChuyen.string = this.numberChangeIn.string / 1e5 * 1 + " $";
},
onEditBoxRutChange: function() {
this.txtNhanRut.string = n.numberWithCommas(this.numberChangeOut.string / 1 * 1e5) + " VIN";
},
onClickClose: function() {
this.node.active = !1;
},
onData: function(t) {
cc.RedT.inGame.loading.active = !1;
void 0 !== t.link && (this.link = t.link);
if (void 0 !== t.balance) {
this.txtSoDuApi.string = n.numberWithCommas(t.balance) + " $";
this.txtSoDuGame.string = n.numberWithCommas(cc.RedT.user.red) + " VIN";
}
},
onInit: function(t) {
this.titleSprite.string = 2 == t ? "Saba Sports" : "AeSexy Live";
this.gameid = t;
this.onClickChuyen();
cc.RedT.send({
g: {
live: {
getbalance: {
gameId: t
}
}
}
});
cc.RedT.inGame.loading.active = !0;
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
MegaJ_history_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "cc1fbcAjLFCzL2OcJdQHlRw", "MegaJ_history_item");
cc.Class({
extends: cc.Component,
properties: {
bg: cc.Node,
time: cc.Label,
game: cc.Label,
kq: cc.Label,
thuong: cc.Label
}
});
cc._RF.pop();
}, {} ],
MegaJ_history: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "194c9e0ilRN5ZlVuR1vy/q3", "MegaJ_history");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
header: cc.Node,
body: cc.Node,
quay: cc.Node,
nhanve: cc.Node,
select: ""
},
init: function(t) {
this.RedT = t;
},
onLoad: function() {
var t = this;
this.page = cc.instantiate(this.page);
this.page.y = -300.91;
this.node.addChild(this.page);
this.page = this.page.getComponent("Pagination");
Promise.all(this.quay.children.map(function(t) {
return t.getComponent("MegaJ_history_item");
})).then(function(e) {
t.quay = e;
});
Promise.all(this.nhanve.children.map(function(t) {
return t.getComponent("MegaJ_top_item");
})).then(function(e) {
t.nhanve = e;
});
this.page.init(this);
},
headSelect: function(t) {
this.select = t.target.name;
this.header.children.forEach(function(t) {
if (t.name === this.select) {
t.children[0].active = !1;
t.children[1].active = !0;
t.pauseSystemEvents();
} else {
t.children[0].active = !0;
t.children[1].active = !1;
t.resumeSystemEvents();
}
}.bind(this));
this.body.children.forEach(function(t) {
t.name === this.select ? t.active = !0 : t.active = !1;
}.bind(this));
this.get_data();
},
onEnable: function() {
this.get_data();
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
if (!this.RedT.isSpin) {
var e = {};
e[this.select] = t;
cc.RedT.send({
g: {
megaj: {
history: e
}
}
});
}
},
onData: function(t) {
console.log(t);
t.quay && this.quayData(t.quay);
t.nhanve && this.nhanveData(t.nhanve);
},
quayData: function(t) {
this.page.onSet(t.page, t.kmess, t.total);
this.quay.forEach(function(e, i) {
var o = t.data[i];
if (void 0 !== o) {
e.node.active = !0;
e.bg.active = i % 2;
e.time.string = n.getStringDateByTime(o.time);
e.game.string = 100 === o.room ? "Thanh đồng" : 100 === o.room ? "Bạch kim" : "Hoàng kim";
e.kq.string = 5 === o.kq ? "Thêm lượt" : 7 === o.kq ? "50%" : n.numberWithCommas(o.win);
e.thuong.string = n.numberWithCommas(o.win);
} else e.node.active = !1;
}.bind(this));
},
nhanveData: function(t) {
this.page.onSet(t.page, t.kmess, t.total);
this.nhanve.forEach(function(e, i) {
var o = t.data[i];
if (void 0 !== o) {
e.node.active = !0;
e.bg.active = i % 2;
e.time.string = n.getStringDateByTime(o.time);
e.game.string = this.nameGame(o.to);
e.room.string = 100 === o.room ? "Thanh đồng" : 100 === o.room ? "Bạch kim" : "Hoàng kim";
e.sl.string = o.sl;
e.status.string = o.status ? "Đã nhận" : "Chưa nhận";
var c = e.status.node;
o.status ? c.color = c.color.fromHEX("#47FF00") : c.color = c.color.fromHEX("#FF9900");
} else e.node.active = !1;
}.bind(this));
},
nameGame: function(t) {
switch (t) {
case 100:
return "Angrybird";

case 101:
return "BigBabol";

case 102:
return "Candy";

case 103:
return "Long Lân";

case 104:
return "Mini 3Cây";

case 105:
return "Vương Quốc Red";

case 106:
return "Mini Poker";
}
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
MegaJ_top_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "3b8a4fxQdpHfbWILbYJDY0a", "MegaJ_top_item");
cc.Class({
extends: cc.Component,
properties: {
bg: cc.Node,
time: cc.Label,
game: cc.Label,
room: cc.Label,
sl: cc.Label,
status: cc.Label
}
});
cc._RF.pop();
}, {} ],
MegaJ_top: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "d12d5B1O+1B0Lp+cj0QY7BT", "MegaJ_top");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
content: cc.Node
},
init: function(t) {
this.RedT = t;
},
onLoad: function() {
var t = this;
this.page = cc.instantiate(this.page);
this.page.y = -267.605;
this.node.addChild(this.page);
this.page = this.page.getComponent("Pagination");
Promise.all(this.content.children.map(function(t) {
return t.getComponent("MegaJ_history_item");
})).then(function(e) {
t.content = e;
});
this.page.init(this);
},
onEnable: function() {
this.get_data();
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
this.RedT.isSpin || cc.RedT.send({
g: {
megaj: {
top: t
}
}
});
},
onData: function(t) {
this.page.onSet(t.page, t.kmess, t.total);
this.content.forEach(function(e, i) {
var o = t.data[i];
if (void 0 !== o) {
e.node.active = !0;
e.bg.active = i % 2;
e.time.string = n.getStringDateByTime(o.time);
e.game.string = o.name;
e.kq.string = 100 === o.room ? "Thanh đồng" : 100 === o.room ? "Bạch kim" : "Hoàng kim";
e.thuong.string = n.numberWithCommas(o.win);
} else e.node.active = !1;
}.bind(this));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
MegaJackpot: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "4a89726nBRKG4Pdyq0ZfjR6", "MegaJackpot");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
background: sp.Skeleton,
bg_move: cc.Node,
menuGame: cc.Node,
bgVQ: cc.Node,
imgVQ: cc.Sprite,
vqthanhdong: cc.SpriteFrame,
vqbachkim: cc.SpriteFrame,
vqhoangkim: cc.SpriteFrame,
hu: cc.Label,
luot: cc.Label,
notice: cc.Node,
noticePrefab: cc.Prefab,
spinNode: cc.Node,
spinSprite: cc.Sprite,
spinOn: cc.SpriteFrame,
spinOff: cc.SpriteFrame,
isSpin: !1
},
init: function(t) {
this.RedT = t;
cc.RedT.setting.MegaJackpot = cc.RedT.setting.MegaJackpot || {
users: {
100: 0,
1000: 0,
10000: 0
}
};
this.game = 100;
this.bgAnim = {
100: "thanhdong",
1000: "bachkim",
10000: "hoangkim"
};
"true" == localStorage.getItem("MegaJackpot") && (this.node.active = !0);
void 0 !== cc.RedT.setting.MegaJackpot.game ? cc.RedT.setting.MegaJackpot.game !== this.game && this.changerGame(null, cc.RedT.setting.MegaJackpot.game) : cc.RedT.setting.MegaJackpot.game = this.game = "100";
void 0 !== cc.RedT.setting.MegaJackpot.position && (this.node.position = cc.RedT.setting.MegaJackpot.position);
},
onLoad: function() {
this.RedT.Dialog.MegaJ_history.init(this);
this.RedT.Dialog.MegaJ_top.init(this);
},
onEnable: function() {
this.onGetHu();
this.regUpdate();
this.bg_move.on(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.bg_move.on(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.bg_move.on(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.bg_move.on(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.bg_move.on(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
},
onDisable: function() {
this.bg_move.off(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.bg_move.off(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.bg_move.off(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.bg_move.off(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.bg_move.off(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
},
eventStart: function(t) {
this.setTop();
this.ttOffset = cc.v2(t.touch.getLocationX() - this.node.position.x, t.touch.getLocationY() - this.node.position.y);
},
eventMove: function(t) {
this.node.position = cc.v2(t.touch.getLocationX() - this.ttOffset.x, t.touch.getLocationY() - this.ttOffset.y);
},
eventEnd: function() {
cc.RedT.setting.MegaJackpot.position = this.node.position;
},
setTop: function() {
this.node.parent.insertChild(this.node);
},
changerGame: function(t, e) {
cc.RedT.setting.MegaJackpot.game = this.game = e;
if (this.bgAnim[e]) {
this.background.setAnimation(0, this.bgAnim[e], !0);
this.imgVQ.spriteFrame = this["vq" + this.bgAnim[e]];
}
this.luot.string = cc.RedT.setting.MegaJackpot.users[e] + " Lượt";
this.menuGame.children.forEach(function(t) {
if (t.name === e) {
t.pauseSystemEvents();
t.children[0].active = !1;
t.children[1].active = !0;
} else {
t.resumeSystemEvents();
t.children[0].active = !0;
t.children[1].active = !1;
}
});
this.onGetHu();
},
openGame: function() {
cc.RedT.audio.playClick();
if (cc.RedT.IS_LOGIN) {
this.node.active = !0;
localStorage.setItem("MegaJackpot", !0);
this.setTop();
} else cc.RedT.inGame.dialog.showSignIn();
},
closeGame: function() {
this.node.active = !1;
localStorage.setItem("MegaJackpot", !1);
},
spin: function() {
this.spinNode.pauseSystemEvents();
this.spinSprite.spriteFrame = this.spinOff;
this.isSpin || cc.RedT.send({
g: {
megaj: {
spin: this.game
}
}
});
},
onData: function(t) {
t.status && this.updateStatus(t.status);
t.notice && this.addNotice(t.notice);
t.info && this.info(t.info);
t.history && this.RedT.Dialog.MegaJ_history.onData(t.history);
t.top && this.RedT.Dialog.MegaJ_top.onData(t.top);
},
info: function(t) {
cc.RedT.setting.MegaJackpot.users[100] = t[100];
cc.RedT.setting.MegaJackpot.users[1e3] = t[1e3];
cc.RedT.setting.MegaJackpot.users[1e4] = t[1e4];
this.luot.string = t[this.game] + " Lượt";
},
updateStatus: function(t) {
if (!0 === t.status) {
this.isSpin = !0;
this.oldData = t;
var e = cc.rotateTo(10, -(2520 + t.data.position)).easing(cc.easeQuinticActionOut()), i = cc.rotateTo(10, -(2520 + t.data.position)).easing(cc.easeQuinticActionOut()), n = cc.callFunc(function() {
this.bgVQ.angle = -this.oldData.data.position;
this.imgVQ.node.angle = -this.oldData.data.position;
this.isSpin = !1;
this.spinNode.resumeSystemEvents();
this.spinSprite.spriteFrame = this.spinOn;
this.bgVQ.stopAllActions();
this.imgVQ.node.stopAllActions();
this.updateKQ();
}, this);
this.bgVQ.runAction(e);
this.imgVQ.node.runAction(cc.sequence(i, n));
} else {
this.isSpin = !1;
this.spinNode.resumeSystemEvents();
this.spinSprite.spriteFrame = this.spinOn;
}
},
updateKQ: function() {
if (5 === this.oldData.kq) ; else if (12 === this.oldData.kq) ; else {
var t = new cc.Node();
t.addComponent(cc.Label);
(t = t.getComponent(cc.Label)).string = n.numberWithCommas(this.oldData.data.thuong);
t.font = cc.RedT.util.fontCong;
t.lineHeight = 130;
t.fontSize = 20;
t.node.position = cc.v2(0, 30);
this.notice.addChild(t.node);
t.node.runAction(cc.sequence(cc.moveTo(2.5, cc.v2(0, 150)), cc.callFunc(function() {
t.node.destroy();
}, this)));
}
},
regUpdate: function() {
cc.RedT.send({
g: {
megaj: {
update: !0
}
}
});
},
addNotice: function(t) {
var e = cc.instantiate(this.noticePrefab);
e.getComponent("mini_warning").text.string = t;
this.notice.addChild(e);
},
onGetHu: function() {
if (void 0 !== cc.RedT.setting.topHu.data && this.node.active) {
var t = this, e = cc.RedT.setting.topHu.data.megaj.filter(function(e) {
return e.type == t.game;
}), i = n.getOnlyNumberInString(this.hu.string), o = e[0].bet;
i - o != 0 && n.numberTo(this.hu, i, o, 2e3, !0);
}
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
MenuRoom: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "b4e69eoVuxHQo0om02/ZxFC", "MenuRoom");
cc.Class({
extends: cc.Component,
properties: {
menu: cc.Node,
panel: cc.Node,
head: cc.Node,
rooms: {
default: [],
type: cc.Sprite
},
table1: {
default: [],
type: cc.SpriteFrame
},
table2: {
default: [],
type: cc.SpriteFrame
},
title: cc.Label,
red: !0
},
onBack: function() {
this.menu.active = !0;
this.panel.active = !0;
this.node.active = !1;
},
selectCoint: function(t, e) {
if ("red" == e) {
this.red = !0;
this.changerRoom(!0);
} else {
this.red = !1;
this.changerRoom(!1);
}
Promise.all(this.head.children.map(function(t) {
t.name == e ? t.children[0].active = !0 : t.children[0].active = !1;
}));
},
openGame: function(t) {
this.game = t;
this.title.string = t.title;
this.selectCoint(null, "red");
this.menu.active = !1;
this.panel.active = !1;
this.node.active = !0;
},
changerRoom: function(t) {
var e = this;
this.game.table2 ? t ? Promise.all(this.rooms.map(function(t, i) {
t.spriteFrame = i < 4 ? e.table2[3] : i < 8 ? e.table2[4] : e.table2[5];
})) : Promise.all(this.rooms.map(function(t, i) {
t.spriteFrame = i < 4 ? e.table2[0] : i < 8 ? e.table2[1] : e.table2[2];
})) : t ? Promise.all(this.rooms.map(function(t, i) {
t.spriteFrame = i < 4 ? e.table1[3] : i < 8 ? e.table1[4] : e.table1[5];
})) : Promise.all(this.rooms.map(function(t, i) {
t.spriteFrame = i < 4 ? e.table1[0] : i < 8 ? e.table1[1] : e.table1[2];
}));
},
onClickRoom: function(t) {
this.bet = t.target.name;
cc.RedT.audio.playClick();
switch (this.game.game) {
case "poker":
cc.RedT.inGame.dialog.showPokerNap(this);
break;

case "3cay":
cc.RedT.inGame.loading.active = !0;
cc.RedT.send({
g: {
bacay: {
reg: this.bet
}
}
});
}
},
onData: function(t) {
cc.director.loadScene(t);
}
});
cc._RF.pop();
}, {} ],
Menu: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "1763c2/MDpCQ4oC+FaHXfWh", "Menu");
cc.Class({
extends: cc.Component,
properties: {
header: cc.Node,
games: cc.Node,
popupGameAPI: cc.Node,
adsContent: cc.PageView,
adsTimeNext: 0
},
onLoad: function() {
this.setTimeAds();
this.node._onPreDestroy = function() {
clearTimeout(this.adsTime);
}.bind(this);
},
onEnable: function() {
this.adsContent.content.on(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.adsContent.content.on(cc.Node.EventType.TOUCH_END, this.setTimeAds, this);
this.adsContent.content.on(cc.Node.EventType.TOUCH_CANCEL, this.setTimeAds, this);
this.adsContent.content.on(cc.Node.EventType.MOUSE_ENTER, this.eventStart, this);
this.adsContent.content.on(cc.Node.EventType.MOUSE_LEAVE, this.setTimeAds, this);
this.onHeadSelect(null, "all");
},
onDisable: function() {
this.adsContent.content.off(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.adsContent.content.off(cc.Node.EventType.TOUCH_END, this.setTimeAds, this);
this.adsContent.content.off(cc.Node.EventType.TOUCH_CANCEL, this.setTimeAds, this);
this.adsContent.content.off(cc.Node.EventType.MOUSE_ENTER, this.eventStart, this);
this.adsContent.content.off(cc.Node.EventType.MOUSE_LEAVE, this.setTimeAds, this);
},
nextAds: function() {
this.adsContent._curPageIdx == this.adsContent._pages.length - 1 ? this.adsContent.scrollToPage(0, 1.5) : this.adsContent.scrollToPage(this.adsContent._curPageIdx + 1, .85);
this.setTimeAds();
},
eventStart: function() {
clearTimeout(this.adsTime);
},
setTimeAds: function() {
this.eventStart();
this.adsTime = setTimeout(function() {
this.nextAds();
}.bind(this), 1e3 * this.adsTimeNext);
},
onHeadSelect: function(t, e) {
for (var i = 0; i < 5; i++) this.header.children[i].children[1].active = !1;
switch (e) {
case "all":
for (var n = 0; n < this.games.childrenCount; n++) {
((h = this.games.children[n].getComponent("iconGame")).slot || h.mini || h.bai || h.khac) && (this.games.children[n].active = !0);
}
this.header.children[0].children[1].active = !0;
break;

case "mini":
for (var o = 0; o < this.games.childrenCount; o++) {
(h = this.games.children[o].getComponent("iconGame")).mini ? this.games.children[o].active = !0 : this.games.children[o].active = !1;
}
this.header.children[1].children[1].active = !0;
break;

case "bai":
for (var c = 0; c < this.games.childrenCount; c++) {
(h = this.games.children[c].getComponent("iconGame")).bai ? this.games.children[c].active = !0 : this.games.children[c].active = !1;
}
this.header.children[2].children[1].active = !0;
break;

case "slot":
for (var s = 0; s < this.games.childrenCount; s++) {
(h = this.games.children[s].getComponent("iconGame")).slot ? this.games.children[s].active = !0 : this.games.children[s].active = !1;
}
this.header.children[3].children[1].active = !0;
break;

case "khac":
for (var a = 0; a < this.games.childrenCount; a++) {
var h;
(h = this.games.children[a].getComponent("iconGame")).khac ? this.games.children[a].active = !0 : this.games.children[a].active = !1;
}
this.header.children[4].children[1].active = !0;
}
},
openMiniGame: function(t, e) {
if (cc.RedT.IS_LOGIN) {
if (!cc.RedT.IS_LOADING) {
if (null == cc.RedT.minigame) {
cc.RedT.minigame = cc.find("minigame").getComponent("minigame");
cc.RedT.MiniPanel.onInstanceDialog();
}
if (cc.RedT.minigame["isLoad" + e]) cc.RedT.minigame[e].openGame(); else {
cc.RedT.IS_LOADING = !0;
var i = t.target.children[t.target.childrenCount - 1], n = i.children[i.childrenCount - 1].getComponent(cc.Label);
i.active = !0;
for (var o = 0; o < t.target.childrenCount - 1; o++) t.target.children[o].color = cc.color(59, 59, 59);
cc.RedT.MiniPanel.onInstanceMinigame(e, function(t, e) {
var i = 100 * t / e;
i >= 0 && n && (n.string = i.toFixed(0).toString() + "%");
}, function(n) {
for (var o = 0; o < t.target.childrenCount - 1; o++) t.target.children[o].color = cc.color(255, 255, 255);
cc.RedT.IS_LOADING = !1;
i.active = !1;
cc.RedT._socket.onmessage;
"OanTuTi" == e ? cc.RedT.minigame[e].openGame() : n.openGame();
});
}
}
} else cc.RedT.inGame.dialog.showSignIn();
},
openVQMM: function(t, e) {
if (cc.RedT.IS_LOGIN) {
if (!cc.RedT.IS_LOADING) {
if (null == cc.RedT.minigame) {
cc.RedT.minigame = cc.find("minigame").getComponent("minigame");
cc.RedT.MiniPanel.onInstanceDialog();
}
if (cc.RedT.minigame["isLoad" + e]) cc.RedT.minigame[e].openGame(); else {
cc.RedT.IS_LOADING = !0;
cc.RedT.MiniPanel.onInstanceMinigame(e, function(t, e) {}, function(t) {
cc.RedT.IS_LOADING = !1;
cc.RedT._socket.onmessage;
t.openGame();
});
}
}
} else cc.RedT.inGame.dialog.showSignIn();
},
regGame: function(t, e) {
cc.RedT.audio.playClick();
if (cc.RedT.IS_LOGIN) {
cc.RedT.inGame.loading.active = !0;
cc.RedT.send({
g: {
reg: e
}
});
} else cc.RedT.inGame.dialog.showSignIn();
},
openGame: function(t, e) {
cc.RedT.audio.playClick();
if (cc.RedT.IS_LOGIN) {
if (cc.RedT.IS_LOADING) return;
cc.audioEngine.stopAll();
if ("Comingsoon" === e) {
cc.RedT.inGame.loading.active = !1;
cc.RedT.inGame.notice.show({
title: "Comingsoon",
text: "Game sẽ được cập nhật trong thời gian tới !!!"
});
return;
}
var i = e;
"BanCa" === i && (i = cc.sys.isBrowser ? "BanCa" : "BanCaMobile");
"RongHo" === i && cc.RedT.send({
g: {
reg: i
}
});
"XocXoc" === i && cc.RedT.send({
g: {
reg: i
}
});
"SicBo" === i && cc.RedT.send({
g: {
reg: i
}
});
cc.director.preloadScene(i, function(e, i) {
cc.RedT.IS_LOADING = !0;
var n = t.target.children[t.target.childrenCount - 1], o = n.children[n.childrenCount - 1].getComponent(cc.Label);
n.active = !0;
for (var c = 0; c < t.target.childrenCount - 1; c++) t.target.children[c].color = cc.color(59, 59, 59);
var s = (100 * e / i).toFixed(2), a = 0;
s > a && (a = s);
o && (o.string = Math.round(s) + "%");
}, function(t, e) {
cc.director.loadScene(i);
cc.RedT.IS_LOADING = !1;
});
} else cc.RedT.inGame.dialog.showSignIn();
},
openGameApi: function(t, e) {
if (cc.RedT.IS_LOGIN) {
this.popupGameAPI.active = !0;
this.popupGameAPI.getComponent("MainPopup").onInit(e);
} else cc.RedT.inGame.dialog.showSignIn();
},
openTXCL: function(t, e) {
cc.RedT.MiniPanel.TaiXiu.openGame(null, e);
}
});
cc._RF.pop();
}, {} ],
Message: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "e0268JjkIdLKJIvm3DyUhb2", "Message");
var n;
function o(t, e, i) {
return e in t ? Object.defineProperty(t, e, {
value: i,
enumerable: !0,
configurable: !0,
writable: !0
}) : t[e] = i, t;
}
var c = (o(n = {
TITLE_SUCCESS: "Thành công",
TITLE_FAILED: "Lỗi",
TIME_OUT_LOADING: "Có lỗi trong quá trình thực hiện, vui lòng thử lại",
CONNECT_SFS_ERROR: "Không thể kết nối tới Server",
MISSING_INFO: "Vui lòng nhập đầy đủ các thông tin",
SUCCESS: "Thành công",
FAILURE: "Thất bại",
VERSION: "Phiên bản: {0}",
CONTACT: "{0}",
OTP_FIRST_ACCOUNT: "Kích hoạt số điện thoại bảo mật để bảo vệ tài khoản bạn nhé!",
OTP_ACTIVE_ACCOUNT: "Vui lòng soạn tin <color=yellow>{0}</color> gửi <color=yellow>{1}</color> để kích hoạt OTP",
OTP_FORGET_PASSWORD: "Bước 1: Soạn tin <color=yellow>{0}</color> gửi <color=yellow>{1}</color> để lấy mã xác thực",
LOGIN_TITLE: "Đăng nhập",
LOGIN_MISSING_USERNAME: "Thiếu thông tin tài khoản",
LOGIN_MISSING_PASSWORD: "Thiếu thông tin mật khẩu",
LOGIN_MISSING_CAPTCHA: "Thiếu thông tin mã xác nhận",
LOGIN_SECURITY_SMS: "Để đăng ký bảo mật đăng nhập vui lòng soạn tin <color=yellow>{0}</color> gửi <color=yellow>{1}</color>\nĐể hủy bảo mật đăng nhập vui lòng soạn tin <color=yellow>{2}</color> gửi <color=yellow>{3}</color>",
LOGIN_SECURITY_SMS_2: "Soạn tin <color=yellow>{0}</color> gửi <color=yellow>{1}</color> để lấy mã OTP",
SECURITY_GAME: "Quản lý game",
TIME_LOGIN: "Bạn đã đăng nhập quá nhiều\nVui lòng thử lại sau ít phút",
REGISTER_TITLE: "Đăng ký",
REGISTER_MISSING_USERNAME: "Vui lòng nhập tên tài khoản",
REGISTER_MISSING_PASSWORD: "Vui lòng nhập mật khẩu",
REGISTER_MISSING_REPASSWORD: "Vui lòng nhập mật khẩu xác nhận",
REGISTER_REPASSWORD_NOT_CORRECT: "Nhập lại mật khẩu chưa chính xác. Vui lòng thử lại",
REGISTER_NOT_AGREE_TERM: "Vui lòng xác nhận lại các điều khoản sử dụng",
FORGET_PASSWORD_TITLE: "Quên mật khẩu",
FORGET_PASSWORD_MISSING_USERNAME_EMAIL: "Vui lòng nhập đầy đủ tên tài khoản và Email",
FORGET_PASSWORD_NOT_SUPPORT_FORGET_PASSWORD_BY_PHONE: "Chúng tôi hiện chưa hỗ trợ lấy lại mật khẩu bằng số điện thoại",
FORGET_PASSWORD_SUCCESS: "Gửi email thành công. Vui lòng kiểm tra email để lấy thông tin về mật khẩu mới",
FORGET_PASSWORD_RE_PASSWORD_NOT_CORRECT: "Mật khẩu xác nhận không chính xác",
CHANGE_PASSWORD_TITLE: "Đổi mật khẩu",
CHANGE_PASSWORD_RE_PASSWORD_NOT_CORRECT: "Mật khẩu xác nhận không chính xác",
CHANGE_PASSWORD_GET_OTP: "Bạn vui lòng sử dụng OTP Telegram để nhận OTP hoặc liên hệ với QTV để biết thêm thông tin",
SET_NICKNAME_TITLE: "Tạo nhân vật",
SET_NICKNAME_NICKNAME_NOT_EMPTY: "Tên nhận vật không được trống",
OTP_NOT_EMPTY: "Mã OTP không được phép trống",
NICKNAME_DIFFERENT_USERNAME: "Tên nhân vật không được trùng với tài khoản",
OTP_LOGIN_TITLE: "Bảo mật đăng nhập",
REGISTER_GIFTCODE_WELCOME: "Xin chào <color=yellow>{0}</color>",
UPDATE_DIAMOND: "Bạn được tặng KIM CƯƠNG. Xem ngay tại SỰ KIỆN LÊN ĐỜI SIÊU XE",
LOGOUT_TITLE: "Đăng xuất",
UPDATE_INFO: "Cập nhật thông tin cá nhân",
UPDATE_AVATAR_TITLE: "Đổi avatar",
UPDATE_PASSWORD_TITLE: "Đổi mật khẩu",
FORMAT_PHONE_NOT_CORRECT: "Định dạng số điện thoại không chính xác",
FORMAT_DOB_NOT_CORRECT: "Định dạng ngày sinh không chính xác",
FORMAT_EMAIL_NOT_CORRECT: "Định dạng Email không chính xác",
INFO_DOB: "{0}/{1}/{2}",
PLAYER_INFO_TITLE: "Thông tin người chơi",
MAIL_TITLE: "Hòm thư",
MAIL_DETAIL_TITLE: "Nguời gửi: {0} - Thời gian: {1}",
MAIL_NOTIFICATION: "Bạn có tin nhắn mới",
RECHARGE_MONEY_SUCCESS: "Bạn đã nạp thành công {0} {1}",
RECHARGE_MONEY_TITLE: "Nạp thẻ",
RECHARGE_MONEY_HISTORY_NAME: "Nạp thẻ {0}",
RECHARGE_MONEY_HISTORY_NOTE: "Code: {0} - Seri: {1}",
NUMBER_MONEY_LARGER_ZERO: "Số KAY phải > 0",
RECHARGE_GOLD_SUCCESS: "Đổi thành công",
RECHARGE_GOLD_TITLE: "Đổi Xu",
RECHARGE_GOLD_HISTORY_NAME: "Đổi Xu",
RECHARGE_GOLD_HISTORY_NOTE: "Số Xu nhận được: {0}",
RECHARGE_SMS_NOTE: "<color=#A17E1A><i>Nạp {0} nhận ngay {1} KAY</i></c>",
RECHARGE_SMS_MSG: "Soạn <color=yellow>{0}</color> gửi <color=green>{1}</color>",
RECHARGE_SMS_TENDANGNHAP: "tendangnhap",
RECHARGE_SMS_HISTORY_NAME: "Nạp SMS",
RECHARGE_BANKING_TITLE: "Nạp Banking",
AWARD_TITLE: "Đổi thưởng",
AWARD_DESCRIBE: "Đổi thẻ {0}",
NUMBER_CARDS_LARGER_ZERO: "Số lượng thẻ phải > 0",
TRANSFER_TITLE: "Chuyển khoản",
VALUE_LARGER_ZERO: "Số KAY phải > 0",
RE_NICKNAME_NOT_CORRECT: "Xác nhận nickname không chính xác",
TRANSFER_LOCKED: "Chức năng chuyển khoản đang tạm khóa",
TRANSFER_OTP: "Soạn tin <color=yellow>{0}</color> gửi <color=yellow>{1}</color>",
SAFE_TITLE: "Két sắt",
SAFE_NOT_ACTIVE_PHONE: "Vui lòng bảo mật tài khoản bằng Số điện thoại để rút tiền",
SAFE_GET_OTP: "Soạn tin: <color = #F0FF40>{0}</color> gửi <color = #F0FF40>{1}</color> để lấy mã xác thực",
HISTORY_TITLE: "Lịch sử",
TOP_TITLE: "Bảng xếp hạng",
GIFTCODE_TITLE: "Gift Code",
GIFTCODE_NOT_ACTIVE: "Vui lòng bảo mật để sử dụng Gift Code",
CAPCHA_NOT_CORRECT: "Mã xác nhận không chính xác",
CHAT_MESSAGE: "<color=4bcaee><b>{0}: </b></color>{1}",
CHAT_VIP_MESSAGE: "<color=4bcaee><b>{0}: </b></color>{1}",
CHAT_MESSAGE_FAIL: "<color=red><i>{0}</i></color>",
CHAT_GAME_MESSAGE: "<color=fecb6e><b>{0}: </b></color>{1}",
CHAT_TAI_XIU_MESSAGE: "<color=04fd4a><b>{0}: </b></color>{1}",
CHAT_TAI_XIU_VIP_MESSAGE: "<color=04fd4a><b>{0}: </b></color>{1}",
CHAT_SLOT_2_MESSAGE: "<color=#DE9100><b>{0}: </b></color><color=#C3C2C3>{1}</color>",
TAIXIU_YOU_ONLE_BET_A_DOOR: "Bạn chỉ được đặt một cửa",
JOIN_ROOM_TITLE: "Chọn phòng",
NOT_ENOUGH_MONEY_TO_JOIN_GAME: "Bạn cần tối thiểu {0} {1} để tham gia chơi game",
NOT_ENOUGH_MONEY_TO_STAY_GAME: "Bạn cần {0} {1} để tiếp tục chơi game!",
JOIN_ROOM_ERROR: "Phòng chơi hiện tại đang bị khóa",
INTIVE_TITLE: "Mời bạn",
NOTIFICATION_TITLE: "Thông báo",
MONEY: "KAY",
GOLD: "XU",
VIETTEL: "Vietel",
MOBIFONE: "Mobifone",
VINAPHONE: "Vinaphone",
GATE: "Gate",
TOP_UP_ITEM_VALUE: "Thẻ {0}",
CHARGE_CARD_ITEM_VALUE: "{0}Đ",
TAI_XIU: "Tài Xỉu",
MINI_POKER: "Mini Poker",
MINI_BACAY: "Mini Ba Cây",
DIAMOND: "Zombies",
BAU_CUA: "Bầu Cua",
LUCK_WHEEL: "Vòng Quay May Mắn",
TREN_DUOI: "Trên Dưới",
DIAMOND_2: "Big Babol",
SLOT4: "Vương Quốc KAY",
BOM: "Thiên Hà",
INVITE_MESSAGE: "Người chơi <color=green>{0}</color> mời bạn vào game <color=green>{1}</color>\nMức cược: <color=yellow>{2} {3}</color>",
GAME_DESCRIBE_TABLE_NAME: "{0} - Bàn {1} - Phiên chơi {2}",
GAME_DESCRIBE_TABLE_BET: "Mức cược: {0} {1}",
REQUEST_LEFT_ROOM: "Đăng ký rời bàn thành công",
IGNORE_REQUEST_LEFT_ROOM: "Hủy rời bàn thành công",
BACAY_WIN_ALL: "BẮT CẢ LÀNG",
BACAY_LOSE_ALL: "PHÁT LƯƠNG",
BACAY_BET_PRIVATE_BUTTON: "ĐÁNH BIÊN TẤT CẢ ({0})",
MAU_BINH_BINH_LUNG_NOT_COMPLETE: "Binh lủng không thể hoàn thành",
MAU_BINH_KHONG_HOP_LE: "KHÔNG HỢP LỆ",
MAU_BINH_THUNG_PHA_SANH_LON: "THÙNG PHÁ SẢNH ĐẠI",
MAU_BINH_THUNG_PHA_SANH: "THÙNG PHÁ SẢNH",
MAU_BINH_TU_QUY: "TỨ QUÝ",
MAU_BINH_CU_LU: "CÙ LŨ",
MAU_BINH_THUNG: "THÙNG",
MAU_BINH_SANH_DAI: "SẢNH ĐẠI",
MAU_BINH_SANH_NHI: "SẢNH NHỊ",
MAU_BINH_SANH_THUONG: "SẢNH",
MAU_BINH_SAM: "SÁM",
MAU_BINH_THU: "THÚ",
MAU_BINH_DOI: "ĐÔI",
MAU_BINH_MAU_THAU: "MẬU THẦU",
MAU_BINH_COMPLETED: "HOÀN THÀNH",
MAU_BINH_RONG_CUON: "RỒNG CUỐN",
MAU_BINH_SANH_RONG: "SẢNH RỒNG",
MAU_BINH_MUOI_BA_LA_CUNG_MAU: "ĐỒNG HOA",
MAU_BINH_NAM_DOI_MOT_SAM: "NĂM ĐÔI MỘT SÁM",
MAU_BINH_LUC_PHE_BON: "LỤC PHÉ BÔN",
MAU_BINH_BA_THUNG_TAI_BA_CHI: "BA THÙNG BA CHI",
MAU_BINH_BA_SANH_TAI_BA_CHI: "BA SẢNH BA CHI",
MAU_BINH_THUNG_PHA_SANH_CHI_DAU: "THÙNG PHÁ SẢNH CHI ĐẦU",
MAU_BINH_TU_QUY_CHI_DAU: "TỨ QUÝ CHI ĐẦU",
MAU_BINH_THUNG_PHA_SANH_CHI_GIUA: "THÙNG PHÁ SẢNH CHI GIỮA",
MAU_BINH_TU_QUY_CHI_GIUA: "TỨ QUÝ CHI GIỮA",
MAU_BINH_CU_LU_CHI_GIUA: "CÙ LŨ CHI GIỮA",
MAU_BINH_SAM_CHI_CUOI: "SÁM CHI CUỐI",
MAU_BINH_BINH_LUNG: "BINH LỦNG",
MAU_BINH_SAP_BA_CHI: "SẬP BA CHI",
MAU_BINH_THANG_BA_CHI: "THẮNG BA CHI",
MAU_BINH_CHI_TYPE: "{0} . {1}",
TLMN_IGNORE_TURN: "BỎ LƯỢT",
TLMN_BA_DOI_THONG: "BA ĐÔI THÔNG",
TLMN_BON_DOI_THONG: "BỐN ĐÔI THÔNG",
TLMN_MOT_TU_QUY: "TỨ QUÝ",
TLMN_CONG: "CÓNG",
TLMN_THOI_HAI: "THỐI HAI",
TLMN_THOI_BA_DOI_THONG: "THỐI BA ĐÔI THÔNG",
TLMN_THOI_TU_QUY: "THỐI TỨ QUÝ",
TLMN_THOI_BON_DOI_THONG: "THỐI BỐN ĐÔI THÔNG",
TLMN_SANH_RONG: "SẢNH RỒNG",
TLMN_SAU_DOI_THONG: "SÁU ĐÔI THÔNG",
TLMN_BON_BO_BA: "BỐN BỘ BA",
TLMN_HAI_BO_TU_QUY: "HAI BỘ TỨ QUÝ",
TLMN_MUOI_HAI_CON_DONG_CHAT: "ĐỒNG HOA",
TLMN_NAM_DOI_THONG: "NĂM ĐÔI THÔNG",
TLMN_TU_HAI: "TỨ QUÝ HAI",
TLMN_SAU_DOI: "SÁU ĐÔI",
TLMN_CHAN_KET_BA_BICH: "CHẶN KẾT BA BÍCH",
TLMN_KET_BA_BICH: "KẾT BA BÍCH",
SAM_BAO_MOT: "BÁO 1",
SAM_THANG_BAO_MOT: "THẮNG BÁO 1",
SAM_THUA_BAO_MOT: "THUA BÁO 1",
SAM_IGNORE_TURN: "BỎ LƯỢT",
SAM_XIN_SAM: "XIN SÂM",
SAM_CONG: "CÓNG",
SAM_THOI_HAI: "THỐI HAI",
SAM_THUA_SAM: "THUA SÂM",
SAM_THANG_SAM: "THẮNG SÂM",
POKER_CHECK: "XEM",
POKER_FOLD: "BỎ BÀI",
POKER_ALL_IN: "ALL IN",
POKER_RAISE: "TỐ",
POKER_CALL: "THEO",
POKER_THUNG_PHA_SANH_LON: "THÙNG PHÁ SẢNH ĐẠI",
POKER_THUNG_PHA_SANH: "THÙNG PHÁ SẢNH",
POKER_TU_QUY: "TỨ QUÝ",
POKER_CU_LU: "CÙ LŨ",
POKER_THUNG: "THÙNG",
POKER_SANH_DAI: "SẢNH ĐẠI",
POKER_SANH_NHI: "SẢNH NHỊ",
POKER_SANH_THUONG: "SẢNH",
POKER_SAM: "SÁM",
POKER_THU: "THÚ",
POKER_DOI: "ĐÔI",
POKER_BAI_CAO: "BÀI CAO",
LIENG_CHECK: "XEM",
LIENG_FOLD: "BỎ BÀI",
LIENG_ALL_IN: "ALL IN",
LIENG_RAISE: "TỐ",
LIENG_CALL: "THEO",
LIENG_SAP: "SÁP",
LIENG_LIENG: "LIÊNG",
LIENG_BO_DOI: "BỘ ĐỘI",
LIENG_BET_TEXT: "{0} ({1})",
XOC_DIA_REGISTER_FORM_MESSAGE_HOME: "Cái",
XOC_DIA_REGISTER_FORM_MESSAGE_WAITING: "Đang chờ",
XOC_DIA_REGISTER_FORM_MESSAGE_IGNORE: "Nghỉ làm cái",
XOC_DIA_START_REGISTER_HOST: "Bắt đầu đăng ký làm host",
XOC_DIA_WAIT_NEXT_GAME: "Chờ để bắt đầu ván chơi mới",
XOC_DIA_START_BET: "Vui lòng đặt cược",
XOC_DIA_BUY_SELL_DOOR: "Thời gian mua bán cửa",
XOC_DIA_NOT_TIME_TO_BET: "Không phải thời gian để đặt cửa",
XOC_DIA_NOT_SELECT_CHIP: "Bạn chưa chọn tiền cược",
XOC_DIA_BALANCE_DOOR: "Cân cửa",
XOC_DIA_RESULT: "Ván chơi kết thúc",
XOC_DIA_NOT_BET_NO_HOST: "Không thể đặt cửa này khi không có Cái",
XOC_DIA_HOST_NOT_BET: "Cái không thể đặt",
XOC_DIA_ID: "#{0}",
PHOM_SELECT_ONE_CARD: "Bạn chưa chọn bài",
PHOM_PLEASE_BOC_BAI: "Bạn chưa bốc bài",
PHOM_PLEASE_SELECT_CARDS_HA: "Vui lòng chọn phỏm cần hạ",
PHOM_AN_CHOT: "ĂN CHỐT",
PHOM_BI_AN_CHOT: "BỊ ĂN CHỐT",
PHOM_U: "Ù",
PHOM_U_KHAN: "Ù KHAN",
PHOM_U_TRON: "Ù TRÒN",
PHOM_U_DEN: "Ù ĐỀN",
PHOM_DEN: "ĐỀN LÀNG",
PHOM_NHAT: "NHẤT",
PHOM_NHI: "NHÌ",
PHOM_BA: "BA",
PHOM_BET: "BÉT",
PHOM_MOM: "MÓM",
PHOM_SCORE: "{0} ĐIỂM",
XITO_CHECK: "XEM",
XITO_FOLD: "BỎ BÀI",
XITO_ALL_IN: "ALL IN",
XITO_RAISE: "TỐ",
XITO_CALL: "THEO",
XITO_THUNG_PHA_SANH: "THÙNG PHÁ SẢNH",
XITO_TU_QUY: "TỨ QUÝ",
XITO_CU_LU: "CÙ LŨ",
XITO_THUNG: "THÙNG",
XITO_SANH: "SẢNH",
XITO_SAM: "SÁM",
XITO_THU: "THÚ",
XITO_DOI: "ĐÔI",
XITO_BAI_CAO: "BÀI CAO",
SLOT_NOT_CHANGE_BET: "Trạng thái hiện tại không thể thay đổi mức cược",
SLOT_NOT_AUTO_SPIN: "Trạng thái hiện tại không thể tự động quay",
SLOT_NOT_TEST: "Trạng thái hiện tại không thể chơi thử",
SLOT_BONUS_GAME_FINISH: "Chúc mừng bạn nhận được <color=yellow>{0} KAY </color>",
SLOT_CANCEL_BACK: "Vui lòng đợi vòng chơi kết thúc",
SLOT_NOT_CHANGE_SELECT_LINE: "Trạng thái hiện tại không thể chọn dòng cược",
PLAYING_NOT_CHANGE_BET: "Chờ hết lượt để đổi cửa đặt",
PLAYING_NOT_CHANGE_MONEY_TYPE: "Chờ hết lượt để đổi loại tiền",
AUTO_SPIN_NOT_CHANGE_BET: "Đang tự động quay không được thay đổi cửa đặt",
AUTO_SPIN_NOT_CHANGE_MONEY_TYPE: "Đang tự động quay không được thay đổi loại tiền",
SPIN_TOO_FAST: "Quay quá nhanh",
GAME_STOP_SPIN: "Vui lòng chờ vòng quay kết thúc",
MINIGAME_ID: "#{0}",
TAIXIU_HISTORIES_DETAIL: "Phiên chơi {0} - {1}",
TAIXIU_BALANCE_DOOR: "Trả tiền cân cửa",
TAIXIU_YOU_NOT_BET: "Vui lòng nhập tiền cược",
TAIXIU_CHAIN_WIN: "Chuỗi thắng: {0}",
TAIXIU_CHAIN_LOSE: "Chuỗi thua: {0}",
TRENDUOI_CLICK_PLAY: "Bấm vào PLAY để bắt đầu chơi",
TRENDUOI_STOP_SPINING: "Vui lòng chờ vòng quay kết thúc",
TRENDUOI_FINISH: "Kết thúc",
TRENDUOI_LOSE: "Bạn đã thua. Chúc bạn may mắn lần sau",
BAU_CUA_NEXT_TURN: "Lượt tiếp theo",
BAU_CUA_BET: "Đặt cược",
BAU_CUA_TOP_WEEK_TITLE: "Top tuần"
}, "TAIXIU_CHAIN_WIN", "Hiện tại: {0}"), o(n, "TAIXIU_CHAIN_LOSE", "Hiện tại: {0}"), 
o(n, "TAIXIU_CHAIN", "Sự kiện đua dây tài xỉu"), o(n, "TAIXIU_CURRENT_CHAIN_WIN", "Dài nhất: {0}"), 
o(n, "TAIXIU_CURRENT_CHAIN_LOSE", "Dài nhất: {0}"), o(n, "DRAGON_TIGER_CHAIN_WIN", "Dài nhất: {0}"), 
o(n, "DRAGON_TIGER_CHAIN_LOSE", "Dài nhất: {0}"), o(n, "DRAGON_TIGER_CURRENT_CHAIN_WIN", "Hiện tại: {0}"), 
o(n, "DRAGON_TIGER_CURRENT_CHAIN_LOSE", "Hiện tại: {0}"), o(n, "DRAGON_TIGER_CHAIN", "Sự kiện đua dây long hổ"), 
o(n, "DRAGON_TIGER_NO_BET_SELECTED", "Vui lòng chọn mức cược"), o(n, "MINI_GAME_RANK_TITLE", "BẢNG XẾP HẠNG"), 
o(n, "MINI_GAME_RANK_TITLE_TAI_XIU", "BẢNG XẾP HẠNG TÀI XỈU"), o(n, "MINI_GAME_RANK_TITLE_CHAN_LE", "BẢNG XẾP HẠNG CHẴN LẺ"), 
o(n, "DIAMOND_NO_LINE_SELECTED", "Bạn chưa chọn dòng đặt cược"), o(n, "PIRATE_NO_LINE_SELECTED", "Bạn chưa chọn dòng đặt cược"), 
o(n, "LUCKY_WHEEL_IS_SPINING", "Vui lòng chờ vòng quay kết thúc"), o(n, "LUCKY_WHEEL_CONGRATULATION", "Chúc mừng bạn nhận được phần thưởng từ Vòng Quay May Mắn"), 
o(n, "FIREFISH_MIN_BET", "MIN = {0} {1}"), o(n, "FIREFISH_FISHED", "Người chơi <color=#FA3030>{0}</color> vừa giết chết <color=#56EA00>{1}</color> nhận được <color=#FAFF1A>{2}</color> {3}"), 
o(n, "FORGET_PASSWORD_NOTIFICATION", "Vui lòng liên hệ với BQT qua Fanpage hoặc Hotline: 097 171 4012 để được hỗ trợ ngay bạn nhé!"), 
o(n, "SLOT_NOT_CHANGE_SPIN", "Vui lòng đợi vòng chơi kết thúc"), o(n, "SLOT2_NOT_SELECT_LINE", "Vui lòng chọn dòng cược."), 
o(n, "SLOT2_AUTOSPIN_NOT_CHANGE", "Đang ở chế độ quay tự động. Bạn không thể thực hiện thao thác này"), 
o(n, "SLOT2_RANK_1", "Chúc mừng <color = #F7A200>{0}</color> đã dành được Hũ <color = #F7A200>{1}</color> KAY vào lúc {2}"), 
o(n, "SLOT2_RANK_2", "TK <color = #F7A200>{0}</color> thắng <color = #F7A200>{1}</color> KAY {2} trước"), 
o(n, "SLOT2_HISTORY", "Bạn chơi phòng {0} và nhận được <color = #F7A200>{1}</color> {2} trước"), 
o(n, "SLOT2_NOT_PLAY", "Vui lòng đợi vòng quay kết thúc"), o(n, "SLOT3_NOT_SELECT_LINE", "Vui lòng chọn dòng cược."), 
o(n, "SLOT3_AUTOSPIN_NOT_CHANGE", "Đang ở chế độ quay tự động. Bạn không thể thực hiện thao thác này"), 
o(n, "SLOT3_RANK_1", "Chúc mừng <color = #F7A200>{0}</color> đã dành được hũ <color = #F7A200>{1}</color> KAY vào lúc {2}"), 
o(n, "SLOT3_RANK_2", "TK <color = #F7A200>{0}</color> thắng <color = #F7A200>{1}</color> KAY {2} trước"), 
o(n, "SLOT3_HISTORY", "Bạn chơi phòng {0} và nhận được <color = #F7A200>{1}</color> {2} trước"), 
o(n, "MESSAGE_FORBIDDEN", [ "napkay" ]), o(n, "SPLASH_GET_GET_DATA", "Đang lấy dữ liệu game ..."), 
o(n, "SPLASH_GET_CONFIG_FAILED", "Lấy dữ liệu thất bại"), o(n, "HOT_UPDATE_CHECKING_VERSION", "Đang kiểm tra phiên bản ..."), 
o(n, "HOT_UPDATE_RETRY", "Thử lại ..."), o(n, "HOT_UPDATE_NOT_FOUND", "Không tìm thấy Hot Update ..."), 
o(n, "HOT_UPDATE_DOWNLOAD_MANIFEST_FAILED", "Tải manifest thất bại ..."), o(n, "HOT_UPDATE_ALREADY_UP_TO_DATE", "Phiên bản mới nhất ..."), 
o(n, "HOT_UPDATE_FOUND_UPDATE", "Tìm thấy phiên bản cập nhật ..."), o(n, "HOT_UPDATE_UPDATING", "Đang cập nhật ..."), 
o(n, "LOTTERY_NOT_NUMBER", "Vui lòng chọn số"), o(n, "LOTTERY_NOT_BET", "Vui lòng chọn mức cược"), 
o(n, "LOTTERY_SELECT_LO", "Chọn 1 số bất kỳ. Bạn sẽ thắng cược khi số đó có trong bảng kết quả"), 
o(n, "LOTTERY_SELECT_DE", "Chọn 1 số bất kỳ. Bạn sẽ thắng cược khi số đó về vào giải đặc biệt ( giải cuối cùng)"), 
o(n, "LOTTERY_SELECT_CHAN", "Cược tất cả các số chẵn. Bạn sẽ thắng cược khi kết quả về có ít nhất 14 số chẵn"), 
o(n, "LOTTERY_SELECT_LE", "Cược tất cả các số lẻ. Bạn sẽ thắng cược khi kết quả về có ít nhất 14 số lẻ"), 
o(n, "LOTTERY_SELECT_DAU", "Chọn dãy số bắt đầu bằng số bạn chọn. Bạn sẽ thắng cược khi có các kết quả bắt đầu bằng số bạn đã chọn"), 
o(n, "LOTTERY_SELECT_DUOI", "Chọn dãy số kết thúc bằng số bạn chọn. Bạn sẽ thắng cược khi có các kết quả kết thúc bằng số bạn đã chọn"), 
o(n, "LOTTERY_SELECT_TRANG", " Chọn tât cả các số trong ô trắng. Bạn sẽ thắng khi kết quả về ít nhất có 14 số trong ô trắng"), 
o(n, "LOTTERY_SELECT_DO", "Chọn tât cả các số trong ô đỏ. Bạn sẽ thắng khi kết quả về ít nhất có 14 số trong ô đỏ"), 
o(n, "LOTTERY_SELECT_XIEN_2", "Chọn 2 số bất kỳ. Bạn sẽ thắng cược khi cả 2 số đó có trong bảng kết quả"), 
o(n, "LOTTERY_SELECT_XIEN_3", "Chọn 3 số bất kỳ. Bạn sẽ thắng cược khi cả 3 số đó có trong bảng kết quả"), 
o(n, "LOTTERY_SELECT_XIEN_4", "Chọn 4 số bất kỳ. Bạn sẽ thắng cược khi cả 4 số đó có trong bảng kết quả"), 
o(n, "LOTTERY_SELECT_HU", "Chọn 10 số bất kỳ. Bạn sẽ thắng 50% hũ khi kết quả về không có 10 số đã chọn (lô trượt), phí cược 10k"), 
o(n, "LOTTERY_SELECT_REBETS", "Cược lại toàn bộ thông tin đặt của bạn phiên chơi trước"), 
o(n, "LOTTERY_FIRST_BETS_NOT_SELECT", "Phiên trước bạn chưa cược gì"), o(n, "LOTTERY_BETS_NOT_FORMAT", "Số lượng số không đúng với kiểu cược"), 
o(n, "LOTTERY_NOT_CHANGE_BET", "Vui lòng đặt cược song hoặc đặt cược lại"), o(n, "LOTTERY_NOT_START", "Vòng quay mới chưa được bắt đầu"), 
o(n, "LOTTERY_SELECT_TYPE", "Vui lòng chọn kiểu cược"), o(n, "LOTTERY_BET_DE", "<b>Đề</b>: {0} - ({1})"), 
o(n, "LOTTERY_BET_LO", "<b>Lô</b>: {0} - ({1})"), o(n, "LOTTERY_BET_XIEN_2", "<b>Xiên 2</b>: {0} - ({1})"), 
o(n, "LOTTERY_BET_XIEN_3", "<b>Xiên 3</b>: {0} - ({1})"), o(n, "LOTTERY_BET_XIEN_4", "<b>Xiên 4</b>: {0} - ({1})"), 
o(n, "LOTTERY_BET_CHAN", "<b>Chẵn</b>: ({0})"), o(n, "LOTTERY_BET_LE", "<b>Lẻ</b>: ({0})"), 
o(n, "LOTTERY_BET_DAU", "<b>Đầu</b>: {0} - ({1})"), o(n, "LOTTERY_BET_DUOI", "<b>Đuôi</b>: {0} - ({1})"), 
o(n, "LOTTERY_BET_DO", "<b>Đỏ</b>: ({0})"), o(n, "LOTTERY_BET_TRANG", "<b>Trắng</b>: ({0})"), 
o(n, "LOTTERY_BET_HU", "<b>Hũ</b>: {0} - ({1})"), o(n, "LOTTERY_BET_DE_2", "<b>Đề</b>: {0} - ({1})"), 
o(n, "LOTTERY_BET_HU_2", "<b>Hũ</b>: {0} - ({1})"), o(n, "LOTTERY_CHAT", " <color = #FCC63C>Chúc mừng tài khoản {0} đã thắng {1} ({2})</color>"), 
n);
e.exports = c;
cc._RF.pop();
}, {} ],
MienBac_dauduoi: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "83b23eeLdtMUbFVBt1RFVz6", "MienBac_dauduoi");
var n = t("Helper"), o = t("BrowserUtil");
cc.Class({
extends: cc.Component,
properties: {
node_select: cc.Node,
item_select: cc.Prefab,
soCuoc: cc.Label,
soDiem: cc.Label,
tongTien: cc.Label,
inputSoDiem: cc.EditBox,
max: 10,
countSelect: 0,
giaDiem: 22e3,
diemToiDa: 1e6,
game: ""
},
onLoad: function() {
for (var t = [], e = 0; e < 10; e++) {
var i = cc.instantiate(this.item_select);
(i = i.getComponent("XoSo_select_item")).init(this);
i.text.string = n.addZero10(e);
this.node_select.addChild(i.node);
t[e] = i;
}
this.node_select = t;
t = null;
},
onEnable: function() {
cc.sys.isBrowser && o.inputAddEvent(this.inputSoDiem, "input", this.onUpdateDiem.bind(this));
},
onDisable: function() {
cc.sys.isBrowser && o.inputRemoveEvent(this.inputSoDiem, "input", this.onUpdateDiem.bind(this));
},
refresh: function() {
var t = "";
this.node_select.forEach(function(e) {
e.select && (t += e.text.string + ", ");
});
this.soCuoc.string = t;
this.updateTien();
},
refreshH: function(t) {
!0 === t.select ? this.countSelect++ : this.countSelect--;
if (this.countSelect > this.max) {
t.onChanger();
this.countSelect = this.max;
cc.RedT.inGame.addNotice("1 Vé cược tối đa " + this.max + " Số...");
}
this.countSelect < 0 && (this.countSelect = 0);
this.refresh();
},
onChangerDiem: function() {
var t = n.numberWithCommas(n.getOnlyNumberInString(this.inputSoDiem.string));
t = "0" === t ? "" : t;
if (1 * n.getOnlyNumberInString(t) > this.diemToiDa) {
t = n.numberWithCommas(this.diemToiDa);
cc.RedT.inGame.addNotice("Tối đa " + t + " điểm cho mỗi Vé.");
}
this.soDiem.string = t || "0";
this.inputSoDiem.string = t;
this.updateTien();
},
onUpdateDiem: function(t) {
var e = n.numberWithCommas(n.getOnlyNumberInString(t.target.value));
e = "0" === e ? "" : e;
if (1 * n.getOnlyNumberInString(e) > this.diemToiDa) {
e = n.numberWithCommas(this.diemToiDa);
cc.RedT.inGame.addNotice("Tối đa " + e + " điểm cho mỗi Vé.");
}
t.target.value = e;
this.soDiem.string = e || "0";
this.inputSoDiem.string = e;
this.updateTien();
},
updateTien: function() {
var t = 1 * n.getOnlyNumberInString(this.soDiem.string);
this.tongTien.string = n.numberWithCommas(t * this.giaDiem * this.countSelect);
},
onClickHuy: function() {
this.soCuoc.string = "";
this.soDiem.string = "0";
this.tongTien.string = "0";
this.inputSoDiem.string = "";
this.countSelect = 0;
this.node_select.forEach(function(t) {
t.select && t.onChanger();
});
},
onClickCuoc: function() {
if (n.isEmpty(this.soCuoc.string)) cc.RedT.inGame.addNotice("Vui lòng chọn số muốn cược.."); else if ("0" === this.soDiem.string) cc.RedT.inGame.addNotice("Vui lòng nhập điểm cược.."); else {
var t = {};
t[this.game] = {
so: this.soCuoc.string,
diem: n.getOnlyNumberInString(this.soDiem.string)
};
cc.RedT.send({
g: {
xs: {
mb: t
}
}
});
}
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
MienBac_lo2so: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "1c435paInNIALLfQ5bJgz3H", "MienBac_lo2so");
var n = t("Helper"), o = t("BrowserUtil");
cc.Class({
extends: cc.Component,
properties: {
node_select: cc.Node,
item_select: cc.Prefab,
soCuoc: cc.Label,
soDiem: cc.Label,
tongTien: cc.Label,
inputSoDiem: cc.EditBox,
max: 10,
countSelect: 0,
giaDiem: 27e3,
diemToiDa: 1e6,
game: ""
},
onLoad: function() {
for (var t = [], e = 0; e < 100; e++) {
var i = cc.instantiate(this.item_select);
(i = i.getComponent("XoSo_select_item")).init(this);
i.text.string = n.addZero10(e);
this.node_select.addChild(i.node);
t[e] = i;
}
this.node_select = t;
t = null;
},
onEnable: function() {
cc.sys.isBrowser && o.inputAddEvent(this.inputSoDiem, "input", this.onUpdateDiem.bind(this));
},
onDisable: function() {
cc.sys.isBrowser && o.inputRemoveEvent(this.inputSoDiem, "input", this.onUpdateDiem.bind(this));
},
refresh: function() {
var t = "";
this.node_select.forEach(function(e) {
e.select && (t += e.text.string + ", ");
});
this.soCuoc.string = t;
this.updateTien();
},
refreshH: function(t) {
!0 === t.select ? this.countSelect++ : this.countSelect--;
if (this.countSelect > this.max) {
t.onChanger();
this.countSelect = this.max;
cc.RedT.inGame.addNotice("1 Vé cược tối đa " + this.max + " Số...");
}
this.countSelect < 0 && (this.countSelect = 0);
this.refresh();
},
onChangerDiem: function() {
var t = n.numberWithCommas(n.getOnlyNumberInString(this.inputSoDiem.string));
t = "0" === t ? "" : t;
if (1 * n.getOnlyNumberInString(t) > this.diemToiDa) {
t = n.numberWithCommas(this.diemToiDa);
cc.RedT.inGame.addNotice("Tối đa " + t + " điểm cho mỗi Vé.");
}
this.soDiem.string = t || "0";
this.inputSoDiem.string = t;
this.updateTien();
},
onUpdateDiem: function(t) {
var e = n.numberWithCommas(n.getOnlyNumberInString(t.target.value));
e = "0" === e ? "" : e;
if (1 * n.getOnlyNumberInString(e) > this.diemToiDa) {
e = n.numberWithCommas(this.diemToiDa);
cc.RedT.inGame.addNotice("Tối đa " + e + " điểm cho mỗi Vé.");
}
t.target.value = e;
this.soDiem.string = e || "0";
this.inputSoDiem.string = e;
this.updateTien();
},
updateTien: function() {
var t = 1 * n.getOnlyNumberInString(this.soDiem.string);
this.tongTien.string = n.numberWithCommas(t * this.giaDiem * this.countSelect);
},
onClickHuy: function() {
this.soCuoc.string = "";
this.soDiem.string = "0";
this.tongTien.string = "0";
this.inputSoDiem.string = "";
this.countSelect = 0;
this.node_select.forEach(function(t) {
t.select && t.onChanger();
});
},
onClickCuoc: function() {
if (n.isEmpty(this.soCuoc.string)) cc.RedT.inGame.addNotice("Vui lòng chọn số muốn cược.."); else if ("0" === this.soDiem.string) cc.RedT.inGame.addNotice("Vui lòng nhập điểm cược.."); else {
var t = {};
t[this.game] = {
so: this.soCuoc.string,
diem: n.getOnlyNumberInString(this.soDiem.string)
};
cc.RedT.send({
g: {
xs: {
mb: t
}
}
});
}
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
MienBac_lo3so: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "fe72b1SkeFD94urjeOCVDYz", "MienBac_lo3so");
var n = t("Helper"), o = t("BrowserUtil");
cc.Class({
extends: cc.Component,
properties: {
head_select: cc.Node,
node_select: cc.Node,
item_select: cc.Prefab,
soCuoc: cc.Label,
soDiem: cc.Label,
tongTien: cc.Label,
inputSoDiem: cc.EditBox,
max: 8,
countSelect: 0,
giaDiem: 22e3,
diemToiDa: 1e6,
game: "",
head: "100"
},
onLoad: function() {
for (var t = [], e = 0; e < 100; e++) {
var i = cc.instantiate(this.item_select);
(i = i.getComponent("XoSo_select_item")).init(this);
i.text.string = n.numberPad(e, 3);
this.node_select.addChild(i.node);
t[e] = i;
}
this.node_select = t;
t = null;
},
onEnable: function() {
cc.sys.isBrowser && o.inputAddEvent(this.inputSoDiem, "input", this.onUpdateDiem.bind(this));
},
onDisable: function() {
cc.sys.isBrowser && o.inputRemoveEvent(this.inputSoDiem, "input", this.onUpdateDiem.bind(this));
},
onSelectH: function(t) {
var e = this, i = t.target.name, o = i >> 0;
this.head = i;
this.head_select.children.forEach(function(t) {
if (t.name === i) {
t.pauseSystemEvents();
t.opacity = 255;
} else {
t.resumeSystemEvents();
t.opacity = 99;
}
});
for (var c = 0; c < 100; c++) this.node_select[c].text.string = n.numberPad(c + o, 3);
e.node_select.forEach(function(t) {
t.selectOff();
});
this.head_select.children.forEach(function(t) {
void 0 !== t.data && t.data.length > 0 && t.data.forEach(function(t) {
e.node_select.forEach(function(e) {
e.text.string === t && e.selectOn();
});
});
});
},
refresh: function() {
var t = this, e = [], i = "";
this.node_select.forEach(function(t) {
t.select && e.push(t.text.string);
});
this.head_select.children.forEach(function(n) {
n.name === t.head && (n.data = e);
void 0 !== n.data && n.data.length > 0 && (i += n.data.join(", ") + ", ");
});
this.soCuoc.string = i;
this.updateTien();
},
refreshH: function(t) {
!0 === t.select ? this.countSelect++ : this.countSelect--;
if (this.countSelect > this.max) {
t.onChanger();
this.countSelect = this.max;
cc.RedT.inGame.addNotice("1 Vé cược tối đa " + this.max + " Số...");
}
this.countSelect < 0 && (this.countSelect = 0);
this.refresh();
},
onChangerDiem: function() {
var t = n.numberWithCommas(n.getOnlyNumberInString(this.inputSoDiem.string));
t = "0" === t ? "" : t;
if (1 * n.getOnlyNumberInString(t) > this.diemToiDa) {
t = n.numberWithCommas(this.diemToiDa);
cc.RedT.inGame.addNotice("Tối đa " + t + " điểm cho mỗi Vé.");
}
this.soDiem.string = t || "0";
this.inputSoDiem.string = t;
this.updateTien();
},
onUpdateDiem: function(t) {
var e = n.numberWithCommas(n.getOnlyNumberInString(t.target.value));
e = "0" === e ? "" : e;
if (1 * n.getOnlyNumberInString(e) > this.diemToiDa) {
e = n.numberWithCommas(this.diemToiDa);
cc.RedT.inGame.addNotice("Tối đa " + e + " điểm cho mỗi Vé.");
}
t.target.value = e;
this.soDiem.string = e || "0";
this.inputSoDiem.string = e;
this.updateTien();
},
updateTien: function() {
var t = 1 * n.getOnlyNumberInString(this.soDiem.string);
this.tongTien.string = n.numberWithCommas(t * this.giaDiem * this.countSelect);
},
onClickHuy: function() {
this.soCuoc.string = "";
this.soDiem.string = "0";
this.tongTien.string = "0";
this.inputSoDiem.string = "";
this.countSelect = 0;
this.node_select.forEach(function(t) {
t.select && t.onChanger();
});
this.head_select.children.forEach(function(t) {
t.data = [];
});
},
onClickCuoc: function() {
if (n.isEmpty(this.soCuoc.string)) cc.RedT.inGame.addNotice("Vui lòng chọn số muốn cược.."); else if ("0" === this.soDiem.string) cc.RedT.inGame.addNotice("Vui lòng nhập điểm cược.."); else {
var t = {};
t[this.game] = {
so: this.soCuoc.string,
diem: n.getOnlyNumberInString(this.soDiem.string)
};
cc.RedT.send({
g: {
xs: {
mb: t
}
}
});
}
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
MienBac_lo4so: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "85972+toCZJjYJwO7NbxkcA", "MienBac_lo4so");
var n = t("Helper"), o = t("BrowserUtil");
cc.Class({
extends: cc.Component,
properties: {
inputSo: cc.EditBox,
soCuoc: cc.Label,
soDiem: cc.Label,
tongTien: cc.Label,
inputSoDiem: cc.EditBox,
max: 10,
countSelect: 0,
giaDiem: 22e3,
diemToiDa: 1e6,
game: ""
},
onEnable: function() {
cc.sys.isBrowser && o.inputAddEvent(this.inputSoDiem, "input", this.onUpdateDiem.bind(this));
},
onDisable: function() {
cc.sys.isBrowser && o.inputRemoveEvent(this.inputSoDiem, "input", this.onUpdateDiem.bind(this));
},
onClickChon: function() {
var t = this.inputSo.string;
if (t.length > 4) {
var e = [];
t.split(" ").forEach(function(t) {
t.split(",").forEach(function(t) {
t.split(".").forEach(function(t) {
t.split(";").forEach(function(t) {
var i = t.split(":");
e = e.concat(i);
});
});
});
});
e.forEach(function(t, i) {
e[i] = t.trim();
});
var i = {};
(e = e.filter(function(t) {
return 4 === t.length && 4 === (t = n.getOnlyNumberInString(t)).length;
})).forEach(function(t) {
void 0 === i[t] && (i[t] = t);
});
if ((e = Object.values(i)).length > 0) if (e.length > this.max) cc.RedT.inGame.addNotice("1 Vé cược tối đa " + this.max + " số chọn..."); else {
this.countSelect = e.length;
this.soCuoc.string = e.join(", ");
this.updateTien();
} else {
this.countSelect = 0;
cc.RedT.inGame.addNotice("Số chọn không hợp lệ.");
}
} else if (4 === (t = n.getOnlyNumberInString(t)).length) {
this.countSelect = 1;
this.soCuoc.string = t;
this.updateTien();
} else {
this.countSelect = 0;
cc.RedT.inGame.addNotice("Số chọn không hợp lệ.");
}
},
onChangerDiem: function() {
var t = n.numberWithCommas(n.getOnlyNumberInString(this.inputSoDiem.string));
if (1 * n.getOnlyNumberInString(t) > this.diemToiDa) {
t = n.numberWithCommas(this.diemToiDa);
cc.RedT.inGame.addNotice("Tối đa " + t + " điểm cho mỗi Vé.");
}
this.soDiem.string = t || "0";
this.inputSoDiem.string = t;
this.updateTien();
},
onUpdateDiem: function(t) {
var e = n.numberWithCommas(n.getOnlyNumberInString(t.target.value));
e = "0" === e ? "" : e;
if (1 * n.getOnlyNumberInString(e) > this.diemToiDa) {
e = n.numberWithCommas(this.diemToiDa);
cc.RedT.inGame.addNotice("Tối đa " + e + " điểm cho mỗi Vé.");
}
t.target.value = e;
this.soDiem.string = e || "0";
this.inputSoDiem.string = e;
this.updateTien();
},
updateTien: function() {
var t = 1 * n.getOnlyNumberInString(this.soDiem.string);
this.tongTien.string = n.numberWithCommas(t * this.giaDiem * this.countSelect);
},
onClickHuy: function() {
this.soCuoc.string = "";
this.soDiem.string = "0";
this.tongTien.string = "0";
this.inputSoDiem.string = "";
this.countSelect = 0;
},
onClickCuoc: function() {
if (n.isEmpty(this.soCuoc.string)) cc.RedT.inGame.addNotice("Vui lòng chọn số muốn cược.."); else if ("0" === this.soDiem.string) cc.RedT.inGame.addNotice("Vui lòng nhập điểm cược.."); else {
var t = {};
t[this.game] = {
so: this.soCuoc.string,
diem: n.getOnlyNumberInString(this.soDiem.string)
};
cc.RedT.send({
g: {
xs: {
mb: t
}
}
});
}
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
MienBac_lo: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "95087LD6J9FGZx4jUkDcl1V", "MienBac_lo");
cc.Class({
extends: cc.Component,
properties: {
header: cc.Node,
body: cc.Node
},
onLoad: function() {},
onSelectType: function(t) {
var e = t.target.name;
this.header.children.forEach(function(t) {
if (t.name === e) {
t.pauseSystemEvents();
t.opacity = 255;
} else {
t.resumeSystemEvents();
t.opacity = 99;
}
});
this.body.children.forEach(function(t) {
t.name === e ? t.active = !0 : t.active = !1;
});
}
});
cc._RF.pop();
}, {} ],
MienBac_loxien: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "939fbzgGFhCHInPOAJ2Nm9g", "MienBac_loxien");
var n = t("Helper"), o = t("BrowserUtil");
cc.Class({
extends: cc.Component,
properties: {
node_select: cc.Node,
item_select: cc.Prefab,
soCuoc: cc.Label,
soDiem: cc.Label,
tongTien: cc.Label,
inputSoDiem: cc.EditBox,
max: 10,
countSelect: 0,
giaDiem: 22e3,
diemToiDa: 1e6,
game: ""
},
onLoad: function() {
for (var t = [], e = 0; e < 100; e++) {
var i = cc.instantiate(this.item_select);
(i = i.getComponent("XoSo_select_item")).init(this);
i.text.string = n.addZero10(e);
this.node_select.addChild(i.node);
t[e] = i;
}
this.node_select = t;
t = null;
},
onEnable: function() {
cc.sys.isBrowser && o.inputAddEvent(this.inputSoDiem, "input", this.onUpdateDiem.bind(this));
},
onDisable: function() {
cc.sys.isBrowser && o.inputRemoveEvent(this.inputSoDiem, "input", this.onUpdateDiem.bind(this));
},
refresh: function() {
var t = "";
this.node_select.forEach(function(e) {
e.select && (t += e.text.string + ", ");
});
this.soCuoc.string = t;
this.updateTien();
},
refreshH: function(t) {
!0 === t.select ? this.countSelect++ : this.countSelect--;
if (this.countSelect > this.max) {
t.onChanger();
this.countSelect = this.max;
cc.RedT.inGame.addNotice("1 Vé cược tối đa " + this.max + " Số...");
}
this.countSelect < 0 && (this.countSelect = 0);
this.refresh();
},
onChangerDiem: function() {
var t = n.numberWithCommas(n.getOnlyNumberInString(this.inputSoDiem.string));
t = "0" === t ? "" : t;
if (1 * n.getOnlyNumberInString(t) > this.diemToiDa) {
t = n.numberWithCommas(this.diemToiDa);
cc.RedT.inGame.addNotice("Tối đa " + t + " điểm cho mỗi Vé.");
}
this.soDiem.string = t || "0";
this.inputSoDiem.string = t;
this.updateTien();
},
onUpdateDiem: function(t) {
var e = n.numberWithCommas(n.getOnlyNumberInString(t.target.value));
e = "0" === e ? "" : e;
if (1 * n.getOnlyNumberInString(e) > this.diemToiDa) {
e = n.numberWithCommas(this.diemToiDa);
cc.RedT.inGame.addNotice("Tối đa " + e + " điểm cho mỗi Vé.");
}
t.target.value = e;
this.soDiem.string = e || "0";
this.inputSoDiem.string = e;
this.updateTien();
},
updateTien: function() {
var t = 0;
this.countSelect === this.max && (t = 1);
var e = 1 * n.getOnlyNumberInString(this.soDiem.string);
this.tongTien.string = n.numberWithCommas(e * this.giaDiem * t);
},
onClickHuy: function() {
this.soCuoc.string = "";
this.soDiem.string = "0";
this.tongTien.string = "0";
this.inputSoDiem.string = "";
this.countSelect = 0;
this.node_select.forEach(function(t) {
t.select && t.onChanger();
});
},
onClickCuoc: function() {
if (this.countSelect !== this.max) cc.RedT.inGame.addNotice("Vui lòng chọn đủ " + this.max + " số muốn cược..."); else if ("0" === this.soDiem.string) cc.RedT.inGame.addNotice("Vui lòng nhập điểm cược.."); else {
var t = {};
t[this.game] = {
so: this.soCuoc.string,
diem: n.getOnlyNumberInString(this.soDiem.string)
};
cc.RedT.send({
g: {
xs: {
mb: t
}
}
});
}
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
Mini3Cay_history: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "1e051nPL7JFfrzu7siEPQ+Q", "Mini3Cay_history");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
init: function(t) {
this.RedT = t;
},
onLoad: function() {
var t = this;
this.page = cc.instantiate(this.page);
this.page.y = -307;
this.node.addChild(this.page);
this.page = this.page.getComponent("Pagination");
Promise.all(this.content.children.map(function(t) {
return t.getComponent("Mini3Cay_ihistory");
})).then(function(e) {
t.content = e;
});
this.page.init(this);
},
onEnable: function() {
this.get_data();
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
},
onDisable: function() {
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
g: {
mini3cay: {
logs: {
red: this.red,
page: t
}
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
cc.RedT.inGame.loading.active = !1;
this.page.onSet(t.page, t.kmess, t.total);
Promise.all(this.content.map(function(e, i) {
var o = t.data[i];
if (void 0 !== o) {
e.node.active = !0;
e.time.string = n.getStringDateByTime(o.time);
e.phien.string = o.id;
e.cuoc.string = n.numberWithCommas(o.bet);
e.win.string = n.numberWithCommas(o.win);
Promise.all(e.kq.map(function(t, e) {
t.spriteFrame = cc.RedT.util.card.getCard(o.kq[e].card, o.kq[e].type);
}));
} else e.node.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
Mini3Cay_ihistory: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "d4891jUjldP9bIGVML2EuXS", "Mini3Cay_ihistory");
cc.Class({
extends: cc.Component,
properties: {
time: cc.Label,
phien: cc.Label,
cuoc: cc.Label,
kq: {
default: [],
type: cc.Sprite
},
win: cc.Label
}
});
cc._RF.pop();
}, {} ],
Mini3Cay_reel: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "8defcIVF4lEJoEox0Os2KJA", "Mini3Cay_reel");
cc.Class({
extends: cc.Component,
init: function(t) {
var e = this;
this.RedT = t;
this.card = [];
var i = this;
Promise.all([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ].map(function(t, e) {
var n = cc.instantiate(i.RedT.cardf);
n.width = 80.45;
n.height = 128.65;
i.node.addChild(n);
return n.getComponent(cc.Sprite);
})).then(function(t) {
e.card = t;
e.random(!0);
});
},
random: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
Promise.all(this.card.map(function(e, i) {
t ? e.spriteFrame = cc.RedT.util.card.random(9) : 0 !== i && 20 !== i && (e.spriteFrame = cc.RedT.util.card.random(9));
}));
},
spin: function(t) {
this.node.stopAllActions();
var e = cc.moveTo(this.RedT.speed(), cc.v2(this.node.x, -(this.node.height - 128.65))).easing(cc.easeInOut(3)), i = cc.callFunc(function() {
this.card[20].spriteFrame = this.card[0].spriteFrame;
this.node.y = 0;
}, this);
if (2 === t) {
cc.callFunc(function() {
this.RedT.isAuto ? this.RedT.sendSpin() : this.RedT.offSpin();
}, this);
var n = cc.callFunc(function() {
this.RedT.hieuUng();
}, this);
this.node.runAction(cc.sequence(cc.delayTime(.1 * t), e, i, cc.delayTime(.1), n));
} else this.node.runAction(cc.sequence(cc.delayTime(.1 * t), e, i));
},
stop: function() {
this.node.stopAllActions();
void 0 !== this.card && void 0 !== this.card[20] && void 0 !== this.card[20].spriteFrame && (this.card[20].spriteFrame = this.card[0].spriteFrame);
this.node.y = 0;
}
});
cc._RF.pop();
}, {} ],
Mini3Cay_top: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "2c6da1F/j5K0YtLq6E2eBDu", "Mini3Cay_top");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
item: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
init: function(t) {
this.RedT = t;
},
onEnable: function() {
this.get_data();
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
},
onDisable: function() {
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
},
get_data: function() {
arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
cc.RedT.send({
g: {
mini3cay: {
tops: this.red
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
cc.RedT.inGame.loading.active = !1;
this.content.removeAllChildren();
var e = this;
Promise.all(t.map(function(t, i) {
var o = cc.instantiate(e.item), c = o.getComponent("Mini3Cay_ihistory");
c.time.string = n.getStringDateByTime(t.time);
c.phien.string = t.name;
c.cuoc.string = n.numberWithCommas(t.bet);
c.win.string = n.numberWithCommas(t.win);
Promise.all(c.kq.map(function(e, i) {
e.spriteFrame = cc.RedT.util.card.getCard(t.kq[i].card, t.kq[i].type);
}));
o.children[0].active = !(1 & i);
e.content.addChild(o);
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
Mini3Cay: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "13a60eyHkJAyIXkNqrmxLrv", "Mini3Cay");
var n = t("Helper"), o = t("Mini3Cay_reel");
cc.Class({
extends: cc.Component,
properties: {
background: cc.Node,
btnSpinAnim: cc.Animation,
buttonCoint: cc.Node,
buttonSpin: cc.Node,
buttonAuto: cc.Node,
buttonSpeed: cc.Node,
buttonStop: cc.Node,
buttonAutoDot: cc.Node,
buttonSpeedDot: cc.Node,
reels: {
default: [],
type: o
},
bet: cc.Node,
nodeRed: cc.Node,
nodeXu: cc.Node,
notice: cc.Node,
prefabNotice: cc.Prefab,
cardf: cc.Prefab,
cuoc: "",
hu: cc.Label,
isAuto: !1,
isSpeed: !1,
isSpin: !1,
red: !0
},
init: function(t) {
this.RedT = t;
this.LichSu = t.Dialog.Mini3Cay_history;
this.Top = t.Dialog.Mini3Cay_top;
cc.RedT.setting.mini3cay = cc.RedT.setting.mini3cay || {
scale: .8333333
};
this.node.runScale = !1;
"true" == localStorage.getItem("mini3cay") && (this.node.active = !0);
void 0 !== cc.RedT.setting.mini3cay.position && (this.node.position = cc.RedT.setting.mini3cay.position);
void 0 !== cc.RedT.setting.mini3cay.bet && cc.RedT.setting.mini3cay.bet != this.cuoc && this.intChangerBet();
void 0 !== cc.RedT.setting.mini3cay.red && this.red != cc.RedT.setting.mini3cay.red && this.changerCoint();
void 0 !== cc.RedT.setting.mini3cay.isSpeed && this.isSpeed != cc.RedT.setting.mini3cay.isSpeed && this.onClickSpeed();
void 0 !== cc.RedT.setting.mini3cay.isAuto && this.isAuto != cc.RedT.setting.mini3cay.isAuto && this.onClickAuto();
},
onLoad: function() {
this.ttOffset = null;
var t = this;
Promise.all(this.reels.map(function(e) {
e.init(t);
}));
},
onEnable: function() {
this.onGetHu();
this.background.on(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.background.on(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.background.on(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.background.on(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.background.on(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
},
onDisable: function() {
this.background.off(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.background.off(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.background.off(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.background.off(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.background.off(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
this.onCloseGame();
},
eventStart: function(t) {
this.setTop();
this.ttOffset = cc.v2(t.touch.getLocationX() - this.node.position.x, t.touch.getLocationY() - this.node.position.y);
},
eventMove: function(t) {
this.node.position = cc.v2(t.touch.getLocationX() - this.ttOffset.x, t.touch.getLocationY() - this.ttOffset.y);
},
eventEnd: function() {
cc.RedT.setting.mini3cay.position = this.node.position;
},
openGame: function() {
this.playClick();
if (cc.RedT.IS_LOGIN) {
this.node.active = !0;
localStorage.setItem("mini3cay", !0);
this.setTop();
} else cc.RedT.inGame.dialog.showSignIn();
},
closeGame: function() {
cc.RedT.audio.playUnClick();
this.node.active = !1;
localStorage.setItem("mini3cay", !1);
},
setTop: function() {
cc.RedT.setting.mini3cay.scale = .8333333;
this.node.parent.insertChild(this.node);
},
changerCoint: function() {
this.red = cc.RedT.setting.mini3cay.red = !this.red;
this.nodeRed.active = !this.nodeRed.active;
this.nodeXu.active = !this.nodeXu.active;
this.onGetHu();
},
onClickTop: function() {
cc.RedT.inGame.loading.active = !0;
null != cc.RedT.minigame && cc.RedT.minigame.Dialog.showMini3Cay_top();
},
onClickHistory: function() {
cc.RedT.inGame.loading.active = !0;
null != cc.RedT.minigame && cc.RedT.minigame.Dialog.showMini3Cay_history();
},
intChangerBet: function() {
var t = this;
Promise.all(this.bet.children.map(function(e) {
if (e.name == cc.RedT.setting.mini3cay.bet) {
t.cuoc = e.name;
e.children[0].active = !0;
e.children[1].active = !1;
e.children[2].active = !0;
e.pauseSystemEvents();
} else {
e.children[0].active = !1;
e.children[1].active = !0;
e.children[2].active = !1;
e.resumeSystemEvents();
}
}));
},
changerBet: function(t, e) {
this.cuoc = cc.RedT.setting.mini3cay.bet = e;
var i = t.target;
Promise.all(this.bet.children.map(function(t) {
if (t == i) {
t.children[0].active = !0;
t.children[1].active = !1;
t.children[2].active = !0;
t.pauseSystemEvents();
} else {
t.children[0].active = !1;
t.children[1].active = !0;
t.children[2].active = !1;
t.resumeSystemEvents();
}
}));
this.onGetHu();
},
playClick: function() {
cc.RedT.audio.playClick();
},
onClickSpeed: function() {
this.isSpeed = cc.RedT.setting.mini3cay.isSpeed = !this.isSpeed;
this.buttonSpeedDot.active = !this.buttonSpeedDot.active;
this.buttonSpeed.color = this.isSpeed ? cc.Color.WHITE : this.buttonSpeed.color.fromHEX("#A0A0A0");
},
onClickAuto: function() {
this.isAuto = cc.RedT.setting.mini3cay.isAuto = !this.isAuto;
this.buttonAutoDot.active = !this.buttonAutoDot.active;
this.buttonAuto.color = this.isAuto ? cc.Color.WHITE : this.buttonAuto.color.fromHEX("#A0A0A0");
this.buttonStop.active = !!this.isSpin && !!this.isAuto;
},
onClickStop: function() {
this.onClickAuto();
this.buttonStop.active = !1;
},
onClickSpin: function() {
if (!this.isSpin) {
this.isSpin = !0;
this.btnSpinAnim.play("spin", 0);
this.onSpin();
this.sendSpin();
}
},
sendSpin: function() {
cc.RedT.send({
g: {
mini3cay: {
spin: {
cuoc: this.cuoc
}
}
}
});
},
random: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
Promise.all(this.reels.map(function(e) {
e.random(t);
}));
},
autoSpin: function() {
this.random();
Promise.all(this.reels.map(function(t, e) {
t.spin(e);
}));
},
onSpin: function() {
this.buttonSpin.pauseSystemEvents();
this.buttonCoint.pauseSystemEvents();
Promise.all(this.bet.children.map(function(t) {
t.pauseSystemEvents();
}));
},
offSpin: function() {
this.isSpin = this.buttonStop.active = !1;
this.buttonSpin.resumeSystemEvents();
this.buttonCoint.resumeSystemEvents();
Promise.all(this.bet.children.map(function(t) {
t.children[0].active || t.resumeSystemEvents();
}));
},
addNotice: function(t) {
var e = cc.instantiate(this.prefabNotice);
e.getComponent("mini_warning").text.string = t;
this.notice.addChild(e);
},
onCloseGame: function() {
this.isSpin = !1;
Promise.all(this.reels.map(function(t) {
t.stop();
}));
this.offSpin();
void 0 !== this.timeOut && clearTimeout(this.timeOut);
},
onData: function(t) {
var e = this;
if (void 0 !== t.status) if (1 === t.status) {
this.buttonStop.active = !!this.isAuto;
if (void 0 !== t.win && t.win > 0) {
this.win = t.win;
this.winC = t.code;
this.winT = t.text;
} else this.win = 0;
Promise.all(t.card.map(function(t, i) {
e.reels[i].card[0].spriteFrame = cc.RedT.util.card.getCard(t.card, t.type);
}));
this.autoSpin();
} else this.offSpin();
void 0 !== t.logs && this.LichSu.onData(t.logs);
void 0 !== t.tops && this.Top.onData(t.tops);
void 0 !== t.notice && this.addNotice(t.notice);
},
hieuUng: function() {
if (void 0 !== this.win && this.win > 0) if (6 == this.winC) {
this.winC = 0;
1 == this.isAuto && this.onClickStop();
var t = cc.instantiate(this.RedT.PrefabNoHu), e = (t = t.getComponent(cc.Animation)).node.children[6].getComponent(cc.Label);
this.RedT.nodeEfect.addChild(t.node);
t.on("play", function() {
var i = cc.callFunc(function() {
cc.RedT.audio.playEf("winHu");
n.numberTo(e, 0, this.win, 1e3, !0);
this.win = 0;
}, this);
t.node.runAction(cc.sequence(cc.delayTime(.25), i));
}, this);
t.on("finished", function() {
t.node.destroy();
this.hieuUng();
}, this);
t.play();
} else if (5 == this.winC || 4 == this.winC) {
var i = cc.instantiate(this.RedT.prefabBigWin);
(i = i.getComponent(cc.Animation)).on("finished", function() {
i.node.destroy();
this.hieuUng();
}, this);
i.node.bet = this.win;
i.node.red = this.red;
i.node.position = cc.v2(0, 70);
this.notice.addChild(i.node);
this.win = 0 == this.winC;
} else {
var o = new cc.Node();
o.addComponent(cc.Label);
(o = o.getComponent(cc.Label)).string = "+" + n.numberWithCommas(this.win);
o.font = cc.RedT.util.fontCong;
o.lineHeight = 130;
o.fontSize = 23;
o.node.position = cc.v2(0, 37);
this.notice.addChild(o.node);
o.node.runAction(cc.sequence(cc.moveTo(this.isSpeed ? 2 : 3.5, cc.v2(0, 100)), cc.callFunc(function() {
o.node.destroy();
this.hieuUng();
}, this)));
this.addNotice(this.winT);
this.win = 0;
} else this.isAuto ? this.timeOut = setTimeout(function() {
this.sendSpin();
}.bind(this), this.isSpeed ? 250 : 1e3) : this.offSpin();
},
onGetHu: function() {
var t = this;
if (this.node.active && void 0 !== cc.RedT.setting.topHu.data) {
var e = this;
Promise.all(cc.RedT.setting.topHu.data.mini3cay.filter(function(t) {
return t.type == e.cuoc && t.red == e.red;
})).then(function(e) {
var i = n.getOnlyNumberInString(t.hu.string), o = e[0].bet;
i - o != 0 && n.numberTo(t.hu, i, o, 2e3, !0);
});
}
},
speed: function() {
return this.isSpeed ? 1.2 : 2.5;
}
});
cc._RF.pop();
}, {
Helper: "Helper",
Mini3Cay_reel: "Mini3Cay_reel"
} ],
MiniDialog: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "3492eBS2vhBuLOdLyde5NgL", "MiniDialog");
var n = t("TaiXiuLichSuPhien"), o = t("TaiXiuLichSu"), c = t("MiniPoker_LichSu"), s = t("MiniPoker_Top"), a = t("BigBabol_LichSu"), h = t("BigBabol_Top"), r = t("BauCua_LichSu"), l = t("BauCua_top"), u = t("Mini3Cay_history"), d = t("Mini3Cay_top"), p = t("CaoThap_history"), g = t("CaoThap_top"), m = t("BongDaLichSuPhien"), f = t("BongDa_ChiTiet"), v = t("BongDa_Top"), b = t("AngryBird_history"), T = t("AngryBird_top"), _ = t("dialogHuongDan"), C = t("MegaJ_history"), y = t("MegaJ_top");
cc.Class({
extends: cc.Component,
properties: {
TaiXiuLichSuPhien: n,
TaiXiuLichSu: o,
MiniPoker_LichSu: c,
MiniPoker_Top: s,
BigBabol_LichSu: a,
BigBabol_Top: h,
BauCua_LichSu: r,
BauCua_top: l,
Mini3Cay_history: u,
Mini3Cay_top: d,
CaoThap_history: p,
CaoThap_top: g,
AngryBird_history: b,
AngryBird_top: T,
BongDaLichSuPhien: m,
BongDaChiTiet: f,
BongDaTop: v,
MegaJ_history: C,
MegaJ_top: y,
HuongDan: _
},
init: function(t) {
this.actionShow = cc.spawn(cc.scaleTo(.5, 1).easing(cc.easeBackOut(2.5)), cc.fadeTo(.5, 255));
this.objShow = null;
this.objTmp = null;
this.TaiXiuLichSuPhien.init(t.TaiXiu);
this.BauCua_LichSu.init(t.BauCua);
this.HuongDan.init();
},
onClickBack: function() {
cc.RedT.audio.playUnClick();
this.onBack();
},
onBack: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = !1;
this.node.active = !1;
this.objShow = null;
} else {
this.objTmp = this.objShow;
this.objShow = this.objShow.previous;
this.objTmp.previous = null;
this.objTmp.active = !1;
this.objShow.active = !0;
this.objTmp = null;
} else this.node.active = !1;
},
onClosePrevious: function(t) {
if (void 0 !== t.previous && null !== t.previous) {
this.onClosePrevious(t.previous);
t.previous = null;
}
t.active = !1;
},
onCloseDialog: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = this.node.active = !1;
this.objShow = null;
} else {
this.onClosePrevious(this.objShow.previous);
this.objShow.active = this.node.active = !1;
this.objShow.previous = null;
this.objShow = null;
} else this.node.active = !1;
},
resetSizeDialog: function(t) {
t.stopAllActions();
t.scale = .5;
t.opacity = 0;
},
showTaiXiuLichSuPhien: function() {
this.node.active = this.TaiXiuLichSuPhien.node.active = !0;
this.objShow = this.TaiXiuLichSuPhien.node;
},
showTaiXiuLichSu: function() {
this.node.active = this.TaiXiuLichSu.node.active = !0;
this.objShow = this.TaiXiuLichSu.node;
},
showMiniPokerLichSu: function() {
this.node.active = this.MiniPoker_LichSu.node.active = !0;
this.objShow = this.MiniPoker_LichSu.node;
},
showMiniPokerTop: function() {
this.node.active = this.MiniPoker_Top.node.active = !0;
this.objShow = this.MiniPoker_Top.node;
},
showBigBabolLichSu: function() {
this.node.active = this.BigBabol_LichSu.node.active = !0;
this.objShow = this.BigBabol_LichSu.node;
},
showBigBabolTop: function() {
this.node.active = this.BigBabol_Top.node.active = !0;
this.objShow = this.BigBabol_Top.node;
},
showBauCuaLichSu: function() {
this.node.active = this.BauCua_LichSu.node.active = !0;
this.objShow = this.BauCua_LichSu.node;
},
showBauCuaTop: function() {
this.node.active = this.BauCua_top.node.active = !0;
this.objShow = this.BauCua_top.node;
},
showMini3Cay_history: function() {
this.node.active = this.Mini3Cay_history.node.active = !0;
this.objShow = this.Mini3Cay_history.node;
},
showMini3Cay_top: function() {
this.node.active = this.Mini3Cay_top.node.active = !0;
this.objShow = this.Mini3Cay_top.node;
},
showCaoThap_history: function() {
this.node.active = this.CaoThap_history.node.active = !0;
this.objShow = this.CaoThap_history.node;
},
showCaoThap_top: function() {
this.node.active = this.CaoThap_top.node.active = !0;
this.objShow = this.CaoThap_top.node;
},
showAngryBird_history: function() {
this.node.active = this.AngryBird_history.node.active = !0;
this.objShow = this.AngryBird_history.node;
},
showAngryBird_top: function() {
this.node.active = this.AngryBird_top.node.active = !0;
this.objShow = this.AngryBird_top.node;
},
showMegaJ_history: function() {
this.node.active = this.MegaJ_history.node.active = !0;
this.objShow = this.MegaJ_history.node;
},
showMegaJ_top: function() {
this.node.active = this.MegaJ_top.node.active = !0;
this.objShow = this.MegaJ_top.node;
},
showHuongDan: function(t, e) {
this.node.active = this.HuongDan.node.active = !0;
this.objShow = this.HuongDan.node;
this.HuongDan.select(e);
},
showBongDaLichSuPhien: function() {
this.node.active = this.BongDaLichSuPhien.node.active = !0;
this.objShow = this.BongDaLichSuPhien.node;
},
showBongDaChiTiet: function() {
this.node.active = this.BongDaChiTiet.node.active = !0;
this.objShow = this.BongDaChiTiet.node;
},
showBongDaTop: function() {
this.node.active = this.BongDaTop.node.active = !0;
this.objShow = this.BongDaTop.node;
}
});
cc._RF.pop();
}, {
AngryBird_history: "AngryBird_history",
AngryBird_top: "AngryBird_top",
BauCua_LichSu: "BauCua_LichSu",
BauCua_top: "BauCua_top",
BigBabol_LichSu: "BigBabol_LichSu",
BigBabol_Top: "BigBabol_Top",
BongDaLichSuPhien: "BongDaLichSuPhien",
BongDa_ChiTiet: "BongDa_ChiTiet",
BongDa_Top: "BongDa_Top",
CaoThap_history: "CaoThap_history",
CaoThap_top: "CaoThap_top",
MegaJ_history: "MegaJ_history",
MegaJ_top: "MegaJ_top",
Mini3Cay_history: "Mini3Cay_history",
Mini3Cay_top: "Mini3Cay_top",
MiniPoker_LichSu: "MiniPoker_LichSu",
MiniPoker_Top: "MiniPoker_Top",
TaiXiuLichSu: "TaiXiuLichSu",
TaiXiuLichSuPhien: "TaiXiuLichSuPhien",
dialogHuongDan: "dialogHuongDan"
} ],
MiniGameNetworkClient: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "c72820K6yBNJaQ7FqwxoK9G", "MiniGameNetworkClient");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("./Network.NetworkClient"), o = t("./Network.NetworkListener"), c = t("../common/Configs"), s = t("./Network.InPacket"), a = t("./Network.Cmd"), h = t("../common/App"), r = function(t) {
__extends(e, t);
function e() {
var e = t.call(this) || this;
e.listeners = new Array();
e.isLogin = !1;
e.onLogined = null;
e.intervalPing = -1;
e.isUseWSS = c.default.App.USE_WSS;
return e;
}
e.getInstance = function() {
null == this.instance && (this.instance = new e());
return this.instance;
};
e.prototype.checkConnect = function(t) {
void 0 === t && (t = null);
this.onLogined = t;
if (null == this.ws || this.ws.readyState != WebSocket.CONNECTING) if (this.isConnected()) this.isLogin && null != this.onLogined && this.onLogined(); else {
h.default.instance.showErrLoading("Đang đăng nhập minigame");
this.connect();
}
};
e.prototype.onError = function(t) {
h.default.instance.showLoading(!1);
console.log("onError minigame");
};
e.prototype.connect = function() {
t.prototype.connect.call(this, c.default.App.HOST_MINIGAME.host, c.default.App.HOST_MINIGAME.port);
};
e.prototype.onOpen = function(e) {
var i = this;
t.prototype.onOpen.call(this, e);
this.send(new a.default.SendLogin(c.default.Login.Nickname, c.default.Login.AccessToken));
console.log("minigame connected");
this.intervalPing = setInterval(function() {
return i.ping();
}, 1);
this.ping();
};
e.prototype.onMessage = function(t) {
for (var e = new Uint8Array(t.data), i = 0; i < this.listeners.length; i++) {
var n = this.listeners[i];
if (n.target && n.target instanceof Object && n.target.node) n.callback(e); else {
this.listeners.splice(i, 1);
i--;
}
}
switch (new s.default(e).getCmdId()) {
case a.default.Code.LOGIN:
this.isLogin = !0;
if (null != this.onLogined) {
console.log("Logined");
this.onLogined();
}
}
};
e.prototype.addListener = function(t, e) {
this.listeners.push(new o.default(e, t));
};
e.prototype.onClose = function(e) {
console.log("onclose minigame");
t.prototype.onClose.call(this, e);
};
e.prototype.send = function(t) {
for (var e = new Int8Array(t._length), i = 0; i < t._length; i++) e[i] = t._data[i];
null != this.ws && this.isConnected() && this.ws.send(e.buffer);
};
e.prototype.sendCheck = function(t) {
var e = this;
this.checkConnect(function() {
e.send(t);
});
};
e.prototype.ping = function() {
null != this.ws && this.ws.readyState !== WebSocket.OPEN && console.log("WebSocket minigame instance wasn't ready...");
};
return e;
}(n.default);
i.default = r;
cc._RF.pop();
}, {
"../common/App": "App",
"../common/Configs": "Configs",
"./Network.Cmd": "Network.Cmd",
"./Network.InPacket": "Network.InPacket",
"./Network.NetworkClient": "Network.NetworkClient",
"./Network.NetworkListener": "Network.NetworkListener"
} ],
MiniGame: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "bc617d+xWtMP7Yw8T7dZZeV", "MiniGame");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n, o = cc._decorator, c = o.ccclass, s = o.property;
(function(t) {
var e = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.gamePlay = null;
return e;
}
e.prototype.onLoad = function() {
var t = this;
this.gamePlay.on(cc.Node.EventType.TOUCH_START, function(e) {
t.reOrder();
}, this);
this.gamePlay.on(cc.Node.EventType.TOUCH_MOVE, function(e) {
var i = t.gamePlay.position;
i.x += e.getDeltaX();
i.y += e.getDeltaY();
t.gamePlay.position = i;
}, this);
};
e.prototype.reOrder = function() {
for (var t = 0, e = 0; e < this.node.parent.childrenCount; e++) {
var i = this.node.parent.children[e];
i != this.node && (i.zIndex = t++);
}
this.node.zIndex = t++;
};
e.prototype.show = function() {
var t = this;
this.reOrder();
this.node.active = !0;
this.gamePlay.stopAllActions();
this.gamePlay.scale = 0;
this.gamePlay.runAction(cc.sequence(cc.scaleTo(.3, 1), cc.callFunc(function() {
t._onShowed();
})));
};
e.prototype._onShowed = function() {};
e.prototype.dismiss = function() {
var t = this;
this.gamePlay.stopAllActions();
this.gamePlay.runAction(cc.sequence(cc.scaleTo(.3, 0), cc.callFunc(function() {
t._onDismissed();
})));
};
e.prototype._onDismissed = function() {
this.node.active = !1;
};
__decorate([ s(cc.Node) ], e.prototype, "gamePlay", void 0);
return e = __decorate([ c ], e);
}(cc.Component);
t.MiniGame = e;
})(n || (n = {}));
i.default = n.MiniGame;
cc._RF.pop();
}, {} ],
MiniPanel: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "ccccah+dOlLRKuFndZetoIH", "MiniPanel");
var n = t("popupTopHu");
t("../../BaseControll").prefab;
cc.Class({
extends: cc.Component,
properties: {
TopHu: n,
nodeTimePopup: {
default: null,
type: cc.Node
},
timePopup: {
default: null,
type: cc.Label
},
bgLight: cc.Node,
spriteLight: cc.Sprite,
onLight: cc.SpriteFrame,
offLight: cc.SpriteFrame,
light: !0,
loadingIcon: cc.Node,
miniDestroy: null,
miniGame: null
},
onLoad: function() {
cc.game.addPersistRootNode(this.node);
this.TopHu.init(this);
null == cc.RedT.minigame || cc.RedT.minigame.init(this);
},
onData: function(t) {
null == cc.RedT.minigame || cc.RedT.minigame.onData(t);
},
callbackTimeTX: function(t) {
var e = !0, i = {}, n = t;
null != cc.RedT.timeCall && clearInterval(cc.RedT.timeCall);
var o = setInterval(function() {
0 == n && (n = 77);
i.time_remain = n;
cc.RedT.MiniPanel.nodeTimePopup.active = !0;
cc.RedT.MiniPanel.timePopup.active = !0;
if (null != cc.RedT.minigame && cc.RedT.minigame.isLoadTaiXiu) {
if (e) {
cc.RedT.minigame.TaiXiu.TX_Main.onData(i);
e = !1;
}
} else {
e = !0;
if (n > 60) {
var t = n - 60;
cc.RedT.MiniPanel.timePopup.node.active && (cc.RedT.MiniPanel.timePopup.string = t) && (cc.RedT.MiniPanel.timePopup.node.color = cc.color(255, 0, 0, 255));
} else if (n > 0) {
cc.RedT.MiniPanel.timePopup.node.active && (cc.RedT.MiniPanel.timePopup.string = n) && (cc.RedT.MiniPanel.timePopup.node.color = cc.color(155, 75, 2, 255));
cc.RedT.MiniPanel.timePopup.color = n <= 10 ? cc.color(255, 69, 69, 255) : cc.Color.WHITE;
}
}
n--;
}.bind(this), 1e3);
cc.RedT.timeCall = o;
},
callbackTimeBC: function(t) {
var e = !0, i = {}, n = t;
null != cc.RedT.timeBC && clearInterval(cc.RedT.timeBC);
var o = setInterval(function() {
0 == n && (n = 72);
i.time_remain = n;
if (null != cc.RedT.minigame && cc.RedT.minigame.isLoadBauCua) {
if (e) {
cc.RedT.minigame.BauCua.onData(i);
e = !1;
}
} else e = !0;
n--;
}.bind(this), 1e3);
cc.RedT.timeBC = o;
},
onClickMiniGame: function(t, e) {
if (cc.RedT.IS_LOGIN) {
if (!this.isLoading) {
if (null == cc.RedT.minigame) {
var i = this;
cc.RedT.minigame = cc.find("minigame").getComponent("minigame");
cc.RedT.MiniPanel.onInstanceDialog();
}
if (cc.RedT.minigame["isLoad" + e]) cc.RedT.minigame[e].openGame(); else {
this.isLoading = !0;
i = this;
var n = t.target.children[t.target.childrenCount - 1], o = n.children[n.childrenCount - 1].getComponent(cc.Label);
t.target.color = cc.color(59, 59, 59);
n.active = !0;
this.onInstanceMinigame(e, function(t, e) {
var i = 100 * t / e;
i >= 0 && o && (o.string = i.toFixed(0).toString() + "%");
}, function(e) {
i.isLoading = !1;
t.target.color = cc.color(255, 255, 255);
n.active = !1;
e.openGame();
});
}
}
} else cc.RedT.inGame.dialog.showSignIn();
},
onInstanceDialog: function() {
cc.RedT.minigame.init(this);
},
onInstanceMinigame: function(t, e, i) {
if (null == cc.RedT.minigame) {
cc.RedT.minigame = cc.find("minigame").getComponent("minigame");
cc.RedT.MiniPanel.onInstanceDialog();
}
cc.loader.loadRes("game/" + t + "Game", function(t, i) {
e(t, i);
}, function(e, n) {
e && cc.log("load minigame error:::: " + e);
var o = cc.instantiate(n);
cc.find("minigame/EffectGame").addChild(o);
cc.RedT.minigame.onInitMiniGame(o, t);
var c = t;
"BaCay" == t && (c = "Mini3Cay");
i(o.getComponent(c));
});
},
playClick: function() {
cc.RedT.audio.playClick();
},
playUnClick: function() {
cc.RedT.audio.playUnClick();
}
});
cc._RF.pop();
}, {
"../../BaseControll": "BaseControll",
popupTopHu: "popupTopHu"
} ],
MiniPoker_LichSu: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "a12b3BIWQdNzY/UVnylxq9K", "MiniPoker_LichSu");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0,
isLoad: !1
},
onLoad: function() {
var t = this, e = cc.instantiate(this.page);
e.y = -275;
this.node.addChild(e);
this.page = e.getComponent("Pagination");
Promise.all(this.content.children.map(function(t) {
return Promise.all(t.children.map(function(t, e) {
return 3 === e ? Promise.all(t.children.map(function(t) {
return t.getComponent(cc.Sprite);
})) : t.getComponent(cc.Label);
})).then(function(t) {
return t;
});
})).then(function(e) {
t.content2 = e;
});
this.page.init(this);
},
onEnable: function() {
this.get_data();
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
},
onDisable: function() {
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
this.isLoad = !0;
cc.RedT.send({
g: {
mini_poker: {
log: {
red: this.red,
page: t
}
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
cc.RedT.inGame.loading.active = !1;
var e = this;
this.page.onSet(t.page, t.kmess, t.total);
Promise.all(this.content2.map(function(i, o) {
var c = t.data[o];
if (void 0 !== c) {
e.content.children[o].active = !0;
i[0].string = n.getStringDateByTime(c.time);
i[1].string = c.id;
i[2].string = n.numberWithCommas(c.bet);
Promise.all(i[3].map(function(t, e) {
t.spriteFrame = cc.RedT.util.card.getCard(c.kq[e].card, c.kq[e].type);
}));
i[4].string = n.numberWithCommas(c.win);
} else e.content.children[o].active = !1;
}));
},
reset: function() {
this.isLoad = !1;
Promise.all(this.content.children.map(function(t) {
t.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
MiniPoker_Top: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "f83d50BGs1JUopU47jiZRpB", "MiniPoker_Top");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
item: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
onEnable: function() {
this.get_data();
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
},
onDisable: function() {
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
},
get_data: function() {
arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
cc.RedT.send({
g: {
mini_poker: {
top: this.red
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
cc.RedT.inGame.loading.active = !1;
this.content.removeAllChildren();
var e = this;
Promise.all(t.map(function(t, i) {
var o = cc.instantiate(e.item), c = o.getComponent("VQRed_history_item");
c.time.string = n.getStringDateByTime(t.time);
c.phien.string = t.name;
c.cuoc.string = n.numberWithCommas(t.bet);
c.line.string = n.numberWithCommas(t.win);
c.win.string = 9 == t.type ? "Nổ Hũ" : "Thắng lớn";
o.children[0].active = !(1 & i);
e.content.addChild(o);
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
MiniPoker_reel: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "9effbtyV3ZM8bEtkGsDTJkG", "MiniPoker_reel");
cc.Class({
extends: cc.Component,
properties: {},
init: function(t) {
var e = this;
this.RedT = t;
this.card = [];
var i = this;
Promise.all([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ].map(function(t, e) {
var n = cc.instantiate(i.RedT.cardf);
i.node.addChild(n);
return n = n.getComponent(cc.Sprite);
})).then(function(t) {
e.card = t;
e.random(!0);
});
},
random: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
Promise.all(this.card.map(function(e, i) {
t ? e.spriteFrame = cc.RedT.util.card.random() : 0 !== i && 25 !== i && (e.spriteFrame = cc.RedT.util.card.random());
}));
},
spin: function(t) {
this.node.stopAllActions();
var e = t, i = cc.moveTo(this.RedT.speed(), cc.v2(this.node.x, -(this.node.height - 93.3))).easing(cc.easeInOut(3)), n = cc.callFunc(function() {
this.card[25].spriteFrame = this.card[0].spriteFrame;
this.node.y = 0;
}, this);
if (4 === e) {
var o = cc.callFunc(function() {
this.RedT.hieuUng();
}, this);
this.node.runAction(cc.sequence(cc.delayTime(.1 * e), i, n, o));
} else this.node.runAction(cc.sequence(cc.delayTime(.1 * e), i, n));
},
stop: function() {
this.node.stopAllActions();
void 0 !== this.card && void 0 !== this.card[25] && void 0 !== this.card[25].spriteFrame && (this.card[25].spriteFrame = this.card[0].spriteFrame);
this.node.y = 0;
}
});
cc._RF.pop();
}, {} ],
MiniPoker: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "ef909PNu9FNDqFtdNzEnAw5", "MiniPoker");
var n = t("Helper"), o = t("MiniPoker_reel");
cc.Class({
extends: cc.Component,
properties: {
background: cc.Node,
buttonSpin: cc.Node,
btnSpinAnim: cc.Animation,
buttonAuto: cc.Node,
buttonSpeed: cc.Node,
buttonStop: cc.Node,
buttonAutoDot: cc.Node,
buttonSpeedDot: cc.Node,
reels: {
default: [],
type: o
},
buttonCoint: cc.Node,
nodeRed: {
default: null,
type: cc.Node
},
font: {
default: null,
type: cc.BitmapFont
},
nodeXu: {
default: null,
type: cc.Node
},
bet: {
default: null,
type: cc.Node
},
notice: {
default: null,
type: cc.Node
},
card: cc.Prefab,
cardf: cc.Prefab,
prefabNotice: {
default: null,
type: cc.Prefab
},
phien: cc.Label,
hu: cc.Label,
cuoc: "",
isAuto: !1,
isSpeed: !1,
isSpin: !1,
red: !0
},
init: function(t) {
this.RedT = t;
this.Top = t.Dialog.MiniPoker_Top;
this.LichSu = t.Dialog.MiniPoker_LichSu;
cc.RedT.setting.minipoker = cc.RedT.setting.minipoker || {
scale: .8333333,
bet: this.cuoc
};
this.node.runScale = !1;
this.card.data.getComponent("Card").config();
"true" == localStorage.getItem("minipoker") && (this.node.active = !0);
void 0 === cc.RedT.util.fontEffect && (cc.RedT.util.fontEffect = this.font);
void 0 !== cc.RedT.setting.minipoker.position && (this.node.position = cc.RedT.setting.minipoker.position);
void 0 !== cc.RedT.setting.minipoker.bet && cc.RedT.setting.minipoker.bet != this.cuoc && this.intChangerBet();
void 0 !== cc.RedT.setting.minipoker.red && this.red != cc.RedT.setting.minipoker.red && this.changerCoint();
void 0 !== cc.RedT.setting.minipoker.isSpeed && this.isSpeed != cc.RedT.setting.minipoker.isSpeed && this.onClickSpeed();
void 0 !== cc.RedT.setting.minipoker.isAuto && this.isAuto != cc.RedT.setting.minipoker.isAuto && this.onClickAuto();
},
onLoad: function() {
var t = this;
this.data = null;
this.ttOffset = null;
Promise.all(this.reels.map(function(e) {
e.init(t);
}));
},
onEnable: function() {
this.onGetHu();
this.background.on(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.background.on(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.background.on(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.background.on(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.background.on(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
},
onDisable: function() {
this.background.off(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.background.off(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.background.off(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.background.off(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.background.off(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
this.onCloseGame();
},
eventStart: function(t) {
this.setTop();
this.ttOffset = cc.v2(t.touch.getLocationX() - this.node.position.x, t.touch.getLocationY() - this.node.position.y);
},
eventMove: function(t) {
this.node.position = cc.v2(t.touch.getLocationX() - this.ttOffset.x, t.touch.getLocationY() - this.ttOffset.y);
},
eventEnd: function() {
cc.RedT.setting.minipoker.position = this.node.position;
},
openGame: function() {
cc.RedT.audio.playClick();
if (cc.RedT.IS_LOGIN) {
this.node.active = !0;
localStorage.setItem("minipoker", !0);
this.setTop();
} else cc.RedT.inGame.dialog.showSignIn();
},
closeGame: function() {
cc.RedT.audio.playUnClick();
this.node.active = !1;
localStorage.setItem("minipoker", !1);
},
random: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
Promise.all(this.reels.map(function(e) {
e.random(t);
}));
},
autoSpin: function() {
this.random();
Promise.all(this.reels.map(function(t, e) {
t.spin(e);
}));
},
onSpin: function() {
this.buttonSpin.pauseSystemEvents();
this.buttonCoint.pauseSystemEvents();
Promise.all(this.bet.children.map(function(t) {
t.pauseSystemEvents();
}));
},
offSpin: function() {
this.isSpin = !1;
this.buttonSpin.resumeSystemEvents();
this.buttonCoint.resumeSystemEvents();
Promise.all(this.bet.children.map(function(t) {
t.children[0].active || t.resumeSystemEvents();
}));
},
spin: function(t) {
if (!this.isSpin) {
this.isSpin = !0;
this.btnSpinAnim.play("spin", 0);
this.onSpin();
this.onGetSpin();
}
},
onClickSpeed: function() {
this.isSpeed = cc.RedT.setting.minipoker.isSpeed = !this.isSpeed;
this.buttonSpeedDot.active = !this.buttonSpeedDot.active;
this.buttonSpeed.color = this.isSpeed ? cc.Color.WHITE : cc.color(206, 206, 206);
},
onClickAuto: function() {
this.isAuto = cc.RedT.setting.minipoker.isAuto = !this.isAuto;
this.buttonAutoDot.active = !this.buttonAutoDot.active;
this.buttonAuto.color = this.isAuto ? cc.Color.WHITE : cc.color(206, 206, 206);
this.buttonStop.active = !!this.isSpin && !!this.isAuto;
},
onClickStop: function() {
this.onClickAuto();
this.buttonStop.active = !1;
},
changerCoint: function() {
this.red = cc.RedT.setting.minipoker.red = !this.red;
this.nodeRed.active = !this.nodeRed.active;
this.nodeXu.active = !this.nodeXu.active;
this.onGetHu();
},
intChangerBet: function() {
var t = this;
Promise.all(this.bet.children.map(function(e) {
if (e.name == cc.RedT.setting.minipoker.bet) {
t.cuoc = e.name;
e.children[0].active = !0;
e.children[1].active = !1;
e.children[2].active = !0;
e.pauseSystemEvents();
} else {
e.children[0].active = !1;
e.children[1].active = !0;
e.children[2].active = !1;
e.resumeSystemEvents();
}
}));
},
onClickTop: function() {
cc.RedT.inGame.loading.active = !0;
null != cc.RedT.minigame && cc.RedT.minigame.Dialog.showMiniPokerTop();
},
onClickHistory: function() {
cc.RedT.inGame.loading.active = !0;
null != cc.RedT.minigame && cc.RedT.minigame.Dialog.showMiniPokerLichSu();
},
changerBet: function(t, e) {
this.cuoc = cc.RedT.setting.minipoker.bet = e;
var i = t.target;
Promise.all(this.bet.children.map(function(t) {
if (t == i) {
t.children[0].active = !0;
t.children[1].active = !1;
t.children[2].active = !0;
t.pauseSystemEvents();
} else {
t.children[0].active = !1;
t.children[1].active = !0;
t.children[2].active = !1;
t.resumeSystemEvents();
}
}));
this.onGetHu();
},
speed: function() {
return this.isSpeed ? 1.2 : 2.5;
},
onData: function(t) {
var e = this;
if (void 0 !== t.status) if (1 === t.status) {
this.buttonStop.active = !!this.isAuto;
this.win = t.win;
this.winT = t.text;
this.winC = t.code;
this.winTg = void 0 !== t.thuong ? t.thuong : 0;
Promise.all(t.card.map(function(t, i) {
e.reels[i].card[0].spriteFrame = cc.RedT.util.card.getCard(t.card, t.type);
}));
this.autoSpin();
} else this.offSpin();
void 0 !== t.phien && (this.phien.string = "#" + t.phien);
void 0 !== t.log && this.LichSu.onData(t.log);
void 0 !== t.top && this.Top.onData(t.top);
void 0 !== t.notice && this.addNotice(t.notice);
},
addNotice: function(t) {
var e = cc.instantiate(this.prefabNotice);
e.getComponent("mini_warning").text.string = t;
this.notice.addChild(e);
},
setTop: function() {
cc.RedT.setting.minipoker.scale = .8333333;
this.node.parent.insertChild(this.node);
},
hieuUng: function() {
if (this.winC && this.winC > 0) {
if (9 == this.winC) {
1 == this.isAuto && this.onClickStop();
var t = cc.instantiate(this.RedT.PrefabNoHu), e = (t = t.getComponent(cc.Animation)).node.children[6].getComponent(cc.Label);
this.RedT.nodeEfect.addChild(t.node);
t.on("play", function() {
var i = cc.callFunc(function() {
cc.RedT.audio.playEf("winHu");
n.numberTo(e, 0, this.win, 1e3, !0);
}, this);
t.node.runAction(cc.sequence(cc.delayTime(.25), i));
}, this);
t.on("finished", function() {
t.node.destroy();
this.hieuUng();
}, this);
t.play();
} else if (8 == this.winC || 7 == this.winC) {
var i = cc.instantiate(this.RedT.prefabBigWin);
(i = i.getComponent(cc.Animation)).on("finished", function() {
i.node.destroy();
this.hieuUng();
}, this);
i.node.bet = this.win;
i.node.red = this.red;
i.node.position = cc.v2(0, 80);
this.notice.addChild(i.node);
this.win = 0;
} else {
var o = new cc.Node();
o.addComponent(cc.Label);
(o = o.getComponent(cc.Label)).string = "+" + n.numberWithCommas(this.win);
o.font = this.red ? cc.RedT.util.fontCong : cc.RedT.util.fontTru;
o.lineHeight = 130;
o.fontSize = 20;
this.notice.addChild(o.node);
o.node.runAction(cc.sequence(cc.moveTo(this.isSpeed ? 2 : 3.5, cc.v2(0, 140)), cc.callFunc(function() {
o.node.destroy();
this.hieuUng();
}, this)));
this.addNotice(this.winT);
}
if (this.winTg > 0) {
var c = new cc.Node();
c.addComponent(cc.Label);
(c = c.getComponent(cc.Label)).string = n.numberWithCommas(this.winTg);
c.font = cc.RedT.util.fontCong;
c.lineHeight = 130;
c.fontSize = 23;
c.node.position = cc.v2(0, -28);
this.notice.addChild(c.node);
c.node.runAction(cc.sequence(cc.moveTo(this.isSpeed ? 2 : 3.5, cc.v2(0, 112)), cc.callFunc(function() {
this.node.destroy();
}, c)));
}
this.winC = 0;
} else this.isAuto ? this.timeOut = setTimeout(function() {
this.onGetSpin();
}.bind(this), this.isSpeed ? 250 : 1e3) : this.offSpin();
},
onGetHu: function() {
var t = this;
if (this.node.active && void 0 !== cc.RedT.setting.topHu.data) {
var e = this;
Promise.all(cc.RedT.setting.topHu.data.mini_poker.filter(function(t) {
return t.type == e.cuoc && t.red == e.red;
})).then(function(e) {
var i = n.getOnlyNumberInString(t.hu.string), o = e[0].bet;
i - o != 0 && n.numberTo(t.hu, i, o, 2e3, !0);
});
}
},
onGetSpin: function() {
cc.RedT.send({
g: {
mini_poker: {
spin: {
cuoc: this.cuoc
}
}
}
});
},
onCloseGame: function() {
this.isSpin = !1;
Promise.all(this.reels.map(function(t) {
t.stop();
}));
this.offSpin();
void 0 !== this.timeOut && clearTimeout(this.timeOut);
}
});
cc._RF.pop();
}, {
Helper: "Helper",
MiniPoker_reel: "MiniPoker_reel"
} ],
MomoController: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "63feciFoIZFGaTpyzCfnnar", "MomoController");
var n = t("BrowserUtil"), o = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
phoneLabel: cc.Label,
nameLabel: cc.Label,
syntaxLabel: cc.Label,
descLabel: {
default: null,
type: cc.RichText
},
SoTien: {
default: null,
type: cc.EditBox
},
captcha: {
default: null,
type: cc.EditBox
},
bonusLabel: cc.Label,
body: cc.Node,
body1: cc.Node,
rednhan: cc.Label,
capchaSprite: cc.Sprite,
bonus: 0,
noteLabel: {
default: null,
type: cc.RichText
}
},
init: function() {
var t = this;
this.editboxs = [ this.SoTien, this.captcha ];
this.keyHandle = function(e) {
return e.keyCode === cc.macro.KEY.tab ? (t.isTop() && t.changeNextFocusEditBox(), 
e.preventDefault && e.preventDefault(), !1) : e.keyCode === cc.macro.KEY.enter ? (n.focusGame(), 
t.onNextClick(), e.preventDefault && e.preventDefault(), !1) : void 0;
};
},
onEnable: function() {
cc.sys.isBrowser && this.addEvent();
this.reCaptcha();
cc.RedT.send({
shop: {
info_momo: !0
}
});
this.onchangeBody(!1);
},
onDisable: function() {
cc.sys.isBrowser && this.removeEvent();
this.clean();
},
addEvent: function() {
cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
for (var t in this.editboxs) n.getHTMLElementByEditBox(this.editboxs[t]).addEventListener("keydown", this.keyHandle, !1);
},
removeEvent: function() {
for (var t in this.editboxs) n.getHTMLElementByEditBox(this.editboxs[t]).removeEventListener("keydown", this.keyHandle, !1);
cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
},
onKeyDown: function(t) {
switch (t.keyCode) {
case cc.macro.KEY.tab:
this.isTop() && this.changeNextFocusEditBox();
break;

case cc.macro.KEY.enter:
this.isTop() && this.onNextClick();
}
},
changeNextFocusEditBox: function() {
for (var t = !1, e = 0, i = this.editboxs.length; e < i; e++) if (n.checkEditBoxFocus(this.editboxs[e])) {
n.focusEditBox(this.editboxs[e]);
t = !0;
break;
}
!t && 0 < this.editboxs.length && n.focusEditBox(this.editboxs[0]);
},
isTop: function() {
return !cc.RedT.inGame.notice.node.active && !cc.RedT.inGame.loading.active;
},
clean: function() {
this.SoTien.string = this.rednhan.string = this.captcha.string = "";
},
onData: function(t) {
if (void 0 !== t.nap) {
this.onchangeBody(!0);
var e = t.nap;
this.phoneLabel.string = e.phone;
this.nameLabel.string = e.name;
this.cachingSyntax = e.syntax;
this.syntaxLabel.string = e.syntax;
this.descLabel.string = "Bạn vui lòng chuyển tiền <color=#00ff00>" + this.SoTien.string + " VNĐ</c> đến tài khoản nhận tiền Momo trên\nvới nội dung <color=#00ff00>" + e.syntax + "</c> để hoàn thành giao dịch";
}
if (void 0 !== t.info) {
var i = t.info;
this.bonusLabel.string = "Nạp tiền ví momo khuyễn mại " + i.bonus + "% tiền nạp";
this.noteLabel.string = "Giao dịch tối thiểu <color=#00ff00>" + o.numberWithCommas(i.min) + "</c> tối đa <color=#00ff00>" + o.numberWithCommas(i.max) + "</c>";
this.bonus = i.bonus;
}
},
onchangeBody: function(t) {
if (t) {
this.body.active = !0;
this.body1.active = !1;
} else {
this.body.active = !1;
this.body1.active = !0;
}
},
onNextClick: function() {
if (o.isEmpty(this.SoTien.string)) cc.RedT.inGame.notice.show({
title: "NẠP RIK",
text: "Vui lòng nhập đầy đủ thông tin"
}); else if (o.isEmpty(this.captcha.string)) cc.RedT.inGame.notice.show({
title: "NẠP RIK",
text: "Vui lòng nhập chính xác mã xác nhận"
}); else {
cc.RedT.inGame.bgLoading.onData({
active: !0,
text: "Đang gửi dữ liệu..."
});
cc.RedT.send({
shop: {
nap_momo: {
sotien: o.getOnlyNumberInString(this.SoTien.string),
captcha: this.captcha.string
}
}
});
}
},
initCaptcha: function(t) {
var e = this, i = new Image();
i.src = t, i.width = 150, i.height = 50, setTimeout(function() {
var t = new cc.Texture2D();
t.initWithElement(i), t.handleLoadedTexture();
var n = new cc.SpriteFrame(t);
e.capchaSprite.spriteFrame = n;
}, 10);
},
reCaptcha: function() {
cc.RedT.send({
captcha: "momoController"
});
},
onChangerRed: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
t = o.numberWithCommas(o.getOnlyNumberInString(t));
this.SoTien.string = 0 == t ? "" : t;
var e = o.getOnlyNumberInString(t);
this.rednhan.string = o.numberWithCommas(Math.floor(1 * e + e * this.bonus / 100 * 1));
},
onCoppySyntax: function() {
if (cc.sys.isBrowser) {
var t = document.createElement("textarea");
t.value = this.cachingSyntax;
document.body.appendChild(t);
t.select();
document.execCommand("copy");
document.body.removeChild(t);
} else jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "JavaCopy", "(Ljava/lang/String;)V", this.cachingSyntax);
},
onCoppyPhoneNum: function() {
if (cc.sys.isBrowser) {
var t = document.createElement("textarea");
t.value = this.phoneLabel.string;
document.body.appendChild(t);
t.select();
document.execCommand("copy");
document.body.removeChild(t);
} else jsb.reflection.callStaticMethod("org/cocos2dx/javascript/AppActivity", "JavaCopy", "(Ljava/lang/String;)V", this.phoneLabel.string);
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
MyNhan_bonus_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "3f60czuVKhFcYb+/2VYHex+", "MyNhan_bonus_item");
cc.Class({
extends: cc.Component,
properties: {
open: cc.Node,
close: cc.Node,
text: cc.Label
}
});
cc._RF.pop();
}, {} ],
MyNhan_dialog: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "a0532lIV55DO6A5gVS1Ag6k", "MyNhan_dialog");
var n = t("MyNhan_history"), o = t("MyNhan_top");
cc.Class({
extends: cc.Component,
properties: {
history: n,
top: o,
help: cc.Node
},
init: function() {
this.actionShow = cc.spawn(cc.scaleTo(.5, 1).easing(cc.easeBackOut(2.5)), cc.fadeTo(.5, 255));
this.objShow = null;
this.objTmp = null;
},
onClickBack: function() {
cc.RedT.audio.playUnClick();
this.onBack();
},
onBack: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = !1;
this.node.active = !1;
this.objShow = null;
} else {
this.objTmp = this.objShow;
this.objShow = this.objShow.previous;
this.objTmp.previous = null;
this.objTmp.active = !1;
this.objShow.active = !0;
this.objTmp = null;
} else this.node.active = !1;
},
onClosePrevious: function(t) {
if (void 0 !== t.previous && null !== t.previous) {
this.onClosePrevious(t.previous);
delete t.previous;
}
t.active = !1;
},
onCloseDialog: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = this.node.active = !1;
this.objShow = null;
} else {
this.onClosePrevious(this.objShow.previous);
this.objShow.active = this.node.active = !1;
delete this.objShow.previous;
this.objShow = null;
} else this.node.active = !1;
},
resetSizeDialog: function(t) {
t.stopAllActions();
t.scale = .5;
t.opacity = 0;
},
showHistory: function() {
this.node.active = this.history.node.active = !0;
this.objShow = this.history.node;
},
showTop: function() {
this.node.active = this.top.node.active = !0;
this.objShow = this.top.node;
},
showHelp: function() {
this.node.active = this.help.active = !0;
this.objShow = this.help;
}
});
cc._RF.pop();
}, {
MyNhan_history: "MyNhan_history",
MyNhan_top: "MyNhan_top"
} ],
MyNhan_history: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "26c70/docxI2bIPcCGtDK+U", "MyNhan_history");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
onLoad: function() {
var t = this, e = cc.instantiate(this.page);
e.y = -280;
this.node.addChild(e);
this.page = e.getComponent("Pagination");
Promise.all(this.content.children.map(function(t) {
return t.getComponent("VQRed_history_item");
})).then(function(e) {
t.content = e;
});
this.page.init(this);
},
onEnable: function() {
this.get_data();
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
g: {
vq_red: {
log: {
red: this.red,
page: t
}
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
this.page.onSet(t.page, t.kmess, t.total);
Promise.all(this.content.map(function(e, i) {
var o = t.data[i];
if (void 0 !== o) {
e.node.active = !0;
e.time.string = n.getStringDateByTime(o.time);
e.phien.string = o.id;
e.cuoc.string = n.numberWithCommas(o.bet);
e.win.string = o.line + " Dòng";
e.line.string = n.numberWithCommas(o.win);
} else e.node.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
MyNhan_iline: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "e346fw0WJlC8q9BEaUJ4ZdR", "MyNhan_iline");
cc.Class({
extends: cc.Component,
init: function(t) {
this.RedT = t;
return this;
},
onEnable: function() {
this.node.on(cc.Node.EventType.MOUSE_ENTER, this.onhover, this);
this.node.on(cc.Node.EventType.MOUSE_LEAVE, this.offhover, this);
},
onDisable: function() {
this.node.off(cc.Node.EventType.MOUSE_ENTER, this.onhover, this);
this.node.off(cc.Node.EventType.MOUSE_LEAVE, this.offhover, this);
},
onhover: function() {
this.node.children[0].active = !0;
},
offhover: function() {
this.node.children[0].active = !1;
},
onEf: function() {
this.onhover();
this.node.pauseSystemEvents();
},
offEf: function() {
this.offhover();
this.node.resumeSystemEvents();
}
});
cc._RF.pop();
}, {} ],
MyNhan_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "16b3ea/d2VMIp/t6cBMhlfG", "MyNhan_item");
cc.Class({
extends: cc.Component,
properties: {
icons: {
default: [],
type: cc.Prefab
}
},
init: function(t) {
this.RedT = t;
},
random: function() {
var t = 11 * Math.random() >> 0;
this.setIcon(t);
return t;
},
setIcon: function(t) {
var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
this.node.removeAllChildren();
var i = cc.instantiate(this.icons[t]);
i.setScale(cc.v2(.95, .95));
this.node.addChild(i);
e && (this.data = t);
}
});
cc._RF.pop();
}, {} ],
MyNhan_lines: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "de8f7AUm11J3L67H5dVA3CX", "MyNhan_lines");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
nodeEfLine: cc.Node,
nodeLine: cc.Node,
mainLine: cc.Node
},
init: function(t) {
var e = this;
this.lines = {
1: [ 1, 1, 1, 1, 1 ],
2: [ 0, 0, 0, 0, 0 ],
3: [ 2, 2, 2, 2, 2 ],
4: [ 2, 1, 0, 1, 2 ],
5: [ 0, 1, 2, 1, 0 ],
6: [ 1, 0, 0, 0, 1 ],
7: [ 1, 2, 2, 2, 1 ],
8: [ 0, 0, 1, 2, 2 ],
9: [ 2, 2, 1, 0, 0 ],
10: [ 1, 0, 1, 2, 1 ],
11: [ 1, 2, 1, 0, 1 ],
12: [ 0, 1, 1, 1, 0 ],
13: [ 2, 1, 1, 1, 2 ],
14: [ 0, 1, 0, 1, 0 ],
15: [ 2, 1, 2, 1, 2 ],
16: [ 1, 1, 0, 1, 1 ],
17: [ 1, 1, 2, 1, 1 ],
18: [ 0, 0, 2, 0, 0 ],
19: [ 2, 2, 0, 2, 2 ],
20: [ 0, 2, 2, 2, 0 ],
21: [ 2, 0, 0, 0, 2 ],
22: [ 1, 0, 2, 0, 1 ],
23: [ 1, 2, 0, 2, 1 ],
24: [ 0, 2, 0, 2, 0 ],
25: [ 2, 0, 2, 0, 2 ]
};
this.RedT = t;
var i = this;
Promise.all(this.mainLine.children.map(function(t) {
return t.getComponent("MyNhan_iline").init(i.RedT);
})).then(function(t) {
e.mainLine = t;
});
this.selectAll(null, "1");
},
onOpen: function() {
cc.RedT.audio.playClick();
this.node.active = !0;
},
onClose: function() {
cc.RedT.audio.playUnClick();
this.node.active && this.data.length < 1 ? this.RedT.addNotice("Chọn ít nhất 1 dòng") : this.node.active = !1;
},
select: function(t) {
var e = t.target;
if (e.children[0].active) {
e.children[0].active = !1;
e.children[1].active = !0;
} else {
e.children[0].active = !0;
e.children[1].active = !1;
}
this.check();
},
check: function() {
var t = this;
Promise.all(this.nodeLine.children.map(function(t, e) {
return t.children[0].active ? e + 1 : void 0;
})).then(function(e) {
Promise.all(e.filter(function(t) {
return void 0 !== t;
})).then(function(e) {
t.data = e;
t.RedT.labelLine.string = e.length;
t.RedT.tong.string = n.numberWithCommas(e.length * n.getOnlyNumberInString(t.RedT.bet.string));
});
});
},
selectChan: function(t) {
var e = this;
console.log(t.target);
Promise.all(this.nodeLine.children.map(function(t, e) {
var i = e + 1;
if (!(i % 2)) {
t.children[0].active = !1;
t.children[1].active = !0;
return i;
}
t.children[0].active = !0;
t.children[1].active = !1;
})).then(function(t) {
Promise.all(t.filter(function(t) {
return void 0 !== t;
})).then(function(t) {
e.data = t;
e.RedT.labelLine.string = t.length;
e.RedT.tong.string = n.numberWithCommas(t.length * n.getOnlyNumberInString(e.RedT.bet.string));
});
});
},
selectLe: function(t) {
var e = this;
Promise.all(this.nodeLine.children.map(function(t, e) {
var i = e + 1;
if (i % 2) {
t.children[0].active = !1;
t.children[1].active = !0;
return i;
}
t.children[0].active = !0;
t.children[1].active = !1;
})).then(function(t) {
Promise.all(t.filter(function(t) {
return void 0 !== t;
})).then(function(t) {
e.data = t;
e.RedT.labelLine.string = t.length;
e.RedT.tong.string = n.numberWithCommas(t.length * n.getOnlyNumberInString(e.RedT.bet.string));
});
});
},
selectAll: function(t, e) {
var i = this;
Promise.all(this.nodeLine.children.map(function(t, i) {
var n = "1" == e;
t.children[0].active = n;
t.children[1].active = !n;
return n ? i + 1 : void 0;
})).then(function(t) {
Promise.all(t.filter(function(t, e) {
return void 0 !== t;
})).then(function(t) {
i.data = t;
i.RedT.labelLine.string = t.length;
i.RedT.tong.string = n.numberWithCommas(t.length * n.getOnlyNumberInString(i.RedT.bet.string));
});
});
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
MyNhan_playBonus: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "94f8cquDH1I7Jz7GzcAjzJF", "MyNhan_playBonus");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
numberBonus: cc.Label,
listBox: cc.Node,
notice: cc.Node,
numberWin: cc.Label,
icons: {
default: [],
type: cc.SpriteFrame
}
},
init: function(t) {
var e = this;
this.RedT = t;
Promise.all(this.listBox.children.map(function(t) {
return t.getComponent("CoTrang_bonus_item");
})).then(function(t) {
e.listBox = t;
});
},
onPlay: function(t) {
this.reset();
this.node.active = !0;
this.numberBonus.string = t;
},
onClickBox: function(t) {
if (this.numberBonus.string) {
this.RedT.playClick();
this.onSend(t.target.name);
}
},
closeNotice: function() {
this.notice.active = this.node.active = !1;
this.RedT.hieuUng();
},
onData: function(t) {
if (void 0 !== t.box) {
var e = this.listBox[t.box];
e.open.active = !0;
e.close.active = !1;
e.text.string = n.numberWithCommas(t.bet);
this.numberBonus.string = t.bonus;
}
if (void 0 !== t.win) {
this.notice.active = !0;
this.numberWin.string = n.numberWithCommas(t.win);
this.RedT.vuathang.string = n.numberWithCommas(1 * n.getOnlyNumberInString(this.RedT.vuathang.string) + t.win);
}
},
onSend: function(t) {
cc.RedT.send({
g: {
vq_red: {
bonus: {
box: t
}
}
}
});
},
reset: function() {
Promise.all(this.listBox.map(function(t) {
t.open.active = !1;
t.close.active = !0;
t.text.string = "";
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
MyNhan_reel: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "cb8edIKEjNM+7/Q3hlo3QbI", "MyNhan_reel");
cc.Class({
extends: cc.Component,
init: function(t) {
var e = this;
this.RedT = t;
this.icons = [];
var i = this, n = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
Promise.all(n.map(function(t, e) {
var o = cc.instantiate(i.RedT.icon);
i.node.addChild(o);
(o = o.getComponent("MyNhan_item")).init(i.RedT);
e > 2 && e < n.length - 3 && o.random();
return o;
})).then(function(t) {
e.icons = t;
e.icons[e.icons.length - 1].setIcon(e.icons[4].random());
e.icons[e.icons.length - 2].setIcon(e.icons[3].random());
e.icons[e.icons.length - 3].setIcon(e.icons[2].random());
e.icons[e.icons.length - 4].setIcon(e.icons[1].random());
e.icons[e.icons.length - 5].setIcon(e.icons[0].random());
});
},
spin: function(t) {
this.node.stopAllActions();
var e = cc.moveTo(1, cc.v2(this.node.x, -(this.node.height - 396))).easing(cc.easeInOut(3)), i = cc.callFunc(function() {
0 === t && this.RedT.copy();
this.node.y = 0;
}, this);
if (4 === t) {
var n = cc.callFunc(function() {
this.RedT.EF_vuathang();
this.node.y = 0;
this.RedT.random();
this.RedT.hieuUng();
}, this);
this.node.runAction(cc.sequence(cc.delayTime(.1 * t), e, n));
} else this.node.runAction(cc.sequence(cc.delayTime(.1 * t), e, i));
},
stop: function() {
this.node.stopAllActions();
this.RedT.copy();
this.node.y = 0;
}
});
cc._RF.pop();
}, {} ],
MyNhan_top: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "80d790wSupNPL4vtXPzifrD", "MyNhan_top");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
onLoad: function() {
var t = this, e = cc.instantiate(this.page);
e.y = -280;
this.node.addChild(e);
this.page = e.getComponent("Pagination");
Promise.all(this.content.children.map(function(t) {
return t.getComponent("VQRed_history_item");
})).then(function(e) {
t.content = e;
});
this.page.init(this);
},
onEnable: function() {
this.get_data();
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
g: {
vq_red: {
top: {
red: this.red,
page: t
}
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
this.page.onSet(t.page, t.kmess, t.total);
Promise.all(this.content.map(function(e, i) {
var o = t.data[i];
if (void 0 !== o) {
e.node.active = !0;
e.time.string = n.getStringDateByTime(o.time);
e.phien.string = o.name;
e.cuoc.string = n.numberWithCommas(o.bet);
e.line.string = 2 == o.type ? "Jackpot" : "Bigwin";
e.win.string = n.numberWithCommas(o.win);
} else e.node.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
MyNhan: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "c11c8fL1QBE8aq4//lqcAar", "MyNhan");
var n = t("Helper"), o = t("MyNhan_reel"), c = t("MyNhan_lines"), s = t("MyNhan_playBonus"), a = t("Notice"), h = t("MyNhan_dialog");
cc.Class({
extends: cc.Component,
properties: {
gameBonus: s,
audioBG: cc.AudioSource,
audioClickSpin: {
default: null,
type: cc.AudioClip
},
audioClick: {
default: null,
type: cc.AudioClip
},
audioWin: {
default: null,
type: cc.AudioClip
},
audioBigWin: {
default: null,
type: cc.AudioClip
},
audioJackpot: {
default: null,
type: cc.AudioClip
},
redhat: cc.Node,
reels: {
default: [],
type: o
},
efline: cc.Node,
icon: cc.Prefab,
icons: {
default: [],
type: cc.SpriteFrame
},
betString: {
default: [],
type: cc.String
},
audioIcons: {
default: [],
type: cc.SpriteFrame
},
audioIcon: cc.Sprite,
nodeRed: cc.Node,
nodeXu: cc.Node,
nodeNotice: cc.Node,
prefabNotice: cc.Prefab,
MiniPanel: cc.Prefab,
loading: cc.Node,
notice: a,
dialog: h,
Line: c,
hu: cc.Label,
taikhoan: cc.Label,
tong: cc.Label,
vuathang: cc.Label,
labelLine: cc.Label,
bet: cc.Label,
freeLabel: cc.Label,
phien: cc.Label,
BigWin: cc.Animation,
BigWin_Label: cc.Label,
NoHu_close: cc.Node,
NoHu: cc.Animation,
NoHu_Label: cc.Label,
EF_Bonus: cc.Animation,
EF_Free: cc.Animation,
buttonCoint: cc.Node,
buttonLine: cc.Node,
buttonSpin: cc.Node,
buttonBet: cc.Node,
buttonAuto: cc.Node,
isAuto: !1,
isSpin: !1,
isFreeSpin: !1,
red: !0,
betSelect: 0
},
onLoad: function() {
cc.RedT.inGame = this;
var t = this;
this.Line.init(this);
this.BigWin.on("finished", this.BigWinFinish, this);
this.BigWin.on("play", this.BigWinPlay, this);
this.EF_Free.on("finished", this.EF_FreeFinish, this);
this.NoHu.on("play", this.NoHuPlay, this);
this.EF_Bonus.on("finished", this.EF_BonusFinish, this);
this.gameBonus.init(this);
this.dialog.init();
Promise.all(this.reels.map(function(e) {
e.init(t);
}));
cc.RedT.send({
scene: "vq_red"
});
this.taikhoan.string = n.numberWithCommas(cc.RedT.user.red);
this.speed = 400;
if (cc.RedT.isSoundBackground()) {
this.playMusic();
this.audioIcon.spriteFrame = this.audioIcons[1];
} else this.audioIcon.spriteFrame = this.audioIcons[0];
},
_playSFX: function(t) {
cc.RedT.IS_SOUND && cc.audioEngine.playEffect(t, !1);
},
playClick: function() {
this._playSFX(this.audioClick);
},
BigWinPlay: function() {
var t = cc.callFunc(function() {
this._playSFX(this.audioBigWin);
n.numberTo(this.BigWin_Label, 0, this.H_win, 2e3, !0);
}, this);
this.BigWin.node.runAction(cc.sequence(cc.delayTime(.3), t));
},
BigWinFinish: function() {
this.isBigWin = !1;
this.BigWin.node.active = !1;
this.BigWin_Label.string = "";
this.showLineWin(!1);
this.hieuUng();
},
NoHuPlay: function() {
this.NoHu_Label.string = "";
var t = cc.callFunc(function() {
this._playSFX(this.audioJackpot);
n.numberTo(this.NoHu_Label, 0, this.H_win, 2e3, !0);
}, this);
this.NoHu.node.runAction(cc.sequence(cc.delayTime(.3), t));
var e = cc.callFunc(function() {
this.NoHu_close.active = !0;
}, this);
this.NoHu.node.runAction(cc.sequence(cc.delayTime(4), e));
},
NoHuFinish: function() {
this.isNoHu = !1;
this.isAuto && this.onAuto();
this.showLineWin(!1);
this.hieuUng();
},
NoHuClose: function() {
this.NoHu.node.active = this.NoHu_close.active = !1;
this.NoHuFinish();
},
EF_BonusFinish: function() {
this.EF_Bonus.node.active = !1;
this.gameBonus.onPlay(this.isBonus);
this.isBonus = 0;
this.showLineWin(!1);
},
EF_FreeFinish: function() {
this.isFree = !1;
this.EF_Free.node.active = !1;
this.showLineWin(!1);
this.hieuUng();
},
onData: function(t) {
if (void 0 !== t.user) {
this.userData(t.user);
cc.RedT.userData(t.user);
}
void 0 !== t.VuongQuocRed && this.LongLan(t.VuongQuocRed);
void 0 !== t.mini && null != cc.RedT.minigame && cc.RedT.minigame.onData(t.mini);
void 0 !== t.TopHu && cc.RedT.MiniPanel.TopHu.onData(t.TopHu);
void 0 !== t.taixiu && null != cc.RedT.minigame && cc.RedT.minigame.isLoadTaiXiu && cc.RedT.minigame.TaiXiu.TX_Main.onData(t.taixiu);
},
userData: function(t) {
this.red ? this.taikhoan.string = n.numberWithCommas(t.red) : this.taikhoan.string = n.numberWithCommas(t.xu);
},
LongLan: function(t) {
var e = this;
if (void 0 !== t.status) if (1 === t.status) {
Promise.all(t.cel.map(function(t, i) {
Promise.all(t.map(function(t, n) {
e.reels[i].icons[n].setIcon(t, !0);
}));
}));
this.runReels();
this.H_line_win = t.line_win;
this.H_win = t.win;
this.H_free = t.free;
this.isBonus = t.isBonus;
this.isNoHu = t.isNoHu;
this.isBigWin = t.isBigWin;
this.isFree = t.isFree;
this.isFreeSpin = !!t.free;
} else this.resetSpin();
t.phien && (this.phien.string = "#" + t.phien);
t.bonus && this.gameBonus.onData(t.bonus);
t.log && this.dialog.history.onData(t.log);
t.top && this.dialog.top.onData(t.top);
t.notice && this.addNotice(t.notice);
},
EF_vuathang: function() {
this.showLineWin(!0);
this.vuathang.string = n.numberWithCommas(this.H_win);
this.buttonSpin.active = !this.H_free;
this.freeLabel.string = "Free: " + this.H_free;
this.freeLabel.node.active = !!this.H_free;
},
onLineWin: function(t) {
var e = this;
Promise.all(this.H_line_win.map(function(i) {
Promise.all(e.Line.lines[i.line].map(function(i, n) {
e.efline.children[n].children[i].active = t;
}));
var n = e.Line.mainLine[i.line - 1];
if (t) {
n.onhover();
n.node.pauseSystemEvents();
} else {
n.offhover();
n.node.resumeSystemEvents();
}
}));
},
showLineWin: function(t) {
this.onLineWin(t);
if (!(t || this.isNoHu || this.isBigWin || this.isAuto || this.isFreeSpin)) {
this.eflineN = 0;
this.efLineWin();
}
},
efLineWin: function(t) {
if (this.H_line_win.length) {
this.node.stopAllActions();
void 0 === this.H_line_win[this.eflineN] && (this.eflineN = 0);
this.efOneLineWin(this.eflineN, !0);
var e = cc.callFunc(function() {
this.efOneLineWin(this.eflineN, !1);
this.eflineN += 1;
this.efLineWin();
}, this);
this.node.runAction(cc.sequence(cc.delayTime(1.5), e));
}
},
efOneLineWin: function(t, e) {
var i = this;
t = this.H_line_win[this.eflineN].line;
Promise.all(this.Line.lines[t].map(function(t, n) {
i.efline.children[n].children[t].active = e;
}));
var n = this.Line.mainLine[t - 1];
if (e) {
n.onhover();
n.node.pauseSystemEvents();
} else {
n.offhover();
n.node.resumeSystemEvents();
}
},
hieuUng: function() {
if (this.isBigWin && !this.isNoHu) {
this.BigWin.node.active = !0;
this.BigWin.play();
this.oldBigWin = !0;
} else if (this.isNoHu) {
this.NoHu.node.active = !0;
this.NoHu.play();
} else if (this.isBonus) {
this.EF_Bonus.node.active = !0;
this.EF_Bonus.play();
cc.RedT.audio.playEf("bonus");
} else if (this.isFree) {
this.EF_Free.node.active = !0;
this.EF_Free.play();
} else if (this.H_win > 0) {
var t = new cc.Node();
t.addComponent(cc.Label);
(t = t.getComponent(cc.Label)).string = "+" + n.numberWithCommas(this.H_win);
t.font = cc.RedT.util.fontCong;
t.lineHeight = 130;
t.fontSize = 25;
t.node.position = cc.v2(0, 21);
this.nodeNotice.addChild(t.node);
!this.oldBigWin && this._playSFX(this.audioWin);
t.node.runAction(cc.sequence(cc.moveTo(1.2, cc.v2(0, 105)), cc.callFunc(function() {
this.speed = 0;
t.node.destroy();
this.hieuUng();
this.showLineWin(!1);
}, this)));
this.H_win = 0;
this.oldBigWin = !1;
} else this.isAuto || this.isFreeSpin ? this.timeOut = setTimeout(function() {
this.onAutoSpin();
this.speed = 400;
}.bind(this), this.speed) : this.resetSpin();
},
onChangerBet: function() {
this._playSFX(this.audioClick);
this.betSelect++;
this.betSelect > 2 && (this.betSelect = 0);
this.bet.string = this.betString[this.betSelect];
this.tong.string = n.numberWithCommas(this.Line.data.length * n.getOnlyNumberInString(this.bet.string));
this.onGetHu();
},
changerCoint: function() {
this.red = !this.red;
this.nodeRed.active = !this.nodeRed.active;
this.nodeXu.active = !this.nodeXu.active;
this.userData(cc.RedT.user);
this.onGetHu();
},
onClickAuto: function() {
this._playSFX(this.audioClick);
this.onAuto();
},
onAuto: function() {
this.isAuto = !this.isAuto;
this.isAuto ? this.buttonAuto.color = cc.Color.WHITE : this.buttonAuto.color = this.buttonAuto.color.fromHEX("#8A8A8A");
},
onClickSpin: function() {
this.onSpin();
},
onAutoSpin: function() {
this._playSFX(this.audioClickSpin);
this.onGetSpin();
},
onSpin: function() {
if (this.Line.data.length < 1) this.addNotice("Chọn ít nhất 1 dòng"); else if (!this.isSpin) {
this._playSFX(this.audioClickSpin);
this.node.stopAllActions();
void 0 !== this.eflineN && void 0 !== this.H_line_win && this.H_line_win.length && this.efOneLineWin(this.eflineN, !1);
this.eflineO = this.eflineN = 0;
this.isSpin = !0;
this.setSpin();
this.onGetSpin();
}
},
setSpin: function() {
this.buttonLine.pauseSystemEvents();
this.buttonSpin.pauseSystemEvents();
this.buttonCoint.pauseSystemEvents();
this.buttonBet.pauseSystemEvents();
},
resetSpin: function() {
this.isAuto && this.onAuto();
this.isSpin = !1;
this.buttonLine.resumeSystemEvents();
this.buttonSpin.resumeSystemEvents();
this.buttonCoint.resumeSystemEvents();
this.buttonBet.resumeSystemEvents();
},
runReels: function() {
Promise.all(this.reels.map(function(t, e) {
t.spin(e);
}));
},
copy: function() {
Promise.all(this.reels.map(function(t) {
t.icons[t.icons.length - 1].setIcon(t.icons[2].data);
t.icons[t.icons.length - 2].setIcon(t.icons[1].data);
t.icons[t.icons.length - 3].setIcon(t.icons[0].data);
}));
},
random: function() {
Promise.all(this.reels.map(function(t) {
Promise.all(t.icons.map(function(e, i) {
i > 2 && i < t.icons.length - 3 && e.random();
}));
}));
},
onGetSpin: function() {
cc.RedT.send({
g: {
vq_red: {
spin: {
cuoc: n.getOnlyNumberInString(this.bet.string),
line: this.Line.data
}
}
}
});
},
addNotice: function(t) {
var e = cc.instantiate(this.prefabNotice);
e.getComponent("mini_warning").text.string = t;
this.nodeNotice.addChild(e);
},
backGame: function() {
cc.RedT.inGame.notice.show({
title: "Thoát game",
text: "Xác nhận hành động.\nHành động thực hiện thoát khỏi game này?",
button: {
type: "exit_game",
text: "Thoát"
}
});
},
signOut: function() {
cc.director.preloadScene("MainGame", function() {
cc.director.loadScene("MainGame", function() {
cc.RedT.inGame.signOut();
});
});
},
onGetHu: function() {
var t = this;
if (void 0 !== cc.RedT.setting.topHu.data) {
var e = this, i = n.getOnlyNumberInString(e.bet.string);
Promise.all(cc.RedT.setting.topHu.data.vq_red.filter(function(t) {
return t.type == i && t.red == e.red;
})).then(function(e) {
var i = n.getOnlyNumberInString(t.hu.string), o = e[0].bet;
i - o != 0 && n.numberTo(t.hu, i, o, 2e3, !0);
});
}
},
playMusic: function() {
this.audioBG.play();
},
pauseMusic: function() {
this.audioBG.pause();
},
onSetAudio: function() {
if (cc.RedT.isSoundBackground()) {
cc.RedT.setSoundBackground(!1);
this.pauseMusic();
cc.RedT.IS_SOUND = !1;
cc.RedT.setSoundGame(!1);
this.audioIcon.spriteFrame = this.audioIcons[0];
} else {
cc.RedT.setSoundBackground(!0);
this.playMusic();
cc.RedT.IS_SOUND = !0;
cc.RedT.setSoundGame(!0);
this.audioIcon.spriteFrame = this.audioIcons[1];
}
}
});
cc._RF.pop();
}, {
Helper: "Helper",
MyNhan_dialog: "MyNhan_dialog",
MyNhan_lines: "MyNhan_lines",
MyNhan_playBonus: "MyNhan_playBonus",
MyNhan_reel: "MyNhan_reel",
Notice: "Notice"
} ],
NapRIK: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "a8496RIjCRDxKAy94mZkeyN", "NapRIK");
t("BrowserUtil"), t("Helper");
cc.Class({
extends: cc.Component,
properties: {
head: {
default: null,
type: cc.Node
},
header: {
default: null,
type: cc.Node
},
body: {
default: null,
type: cc.Node
}
},
init: function() {},
onEnable: function() {
this.heade = this.header;
this.head.active = !0;
this.heade.active = !1;
},
onDisable: function() {},
onSelectHead: function(t, e) {
this.head.active = !1;
this.heade.active = !0;
Promise.all(this.header.children.map(function(t) {
t.name == e ? t.getComponent("itemHeadMenuV2").select() : t.getComponent("itemHeadMenuV2").unselect();
}));
Promise.all(this.body.children.map(function(t) {
t.name == e ? t.active = !0 : t.active = !1;
}));
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
NapRed_itemOne: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "3bf1do9lYJMTYqfuawCCr7t", "NapRed_itemOne");
cc.Class({
extends: cc.Component,
properties: {
background: {
default: null,
type: cc.Node
},
text: {
default: null,
type: cc.Label
}
},
init: function(t, e, i) {
this.controll = t;
this.local_arg = e;
this.local_text = i;
},
onClickChanger: function() {
cc.RedT.audio.playClick();
var t = this;
this.controll[this.local_text].string = this.text.string;
"textBank" === this.local_text && (this.controll.bankCode = this.code);
Promise.all(this.controll[this.local_arg].map(function(e) {
e == t ? e.onSelect() : e.unSelect();
}));
this.controll.backT && this.controll.backT(this.data);
},
onSelect: function() {
this.background.active = !0;
this.node.pauseSystemEvents();
},
unSelect: function() {
this.background.active = !1;
this.node.resumeSystemEvents();
}
});
cc._RF.pop();
}, {} ],
NapRed_itemTT: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "692acli1tBGMJGB7Xh9IFJc", "NapRed_itemTT");
cc.Class({
extends: cc.Component,
properties: {
menhgia: {
default: null,
type: cc.Label
},
red: {
default: null,
type: cc.Label
}
},
init: function(t, e) {
this.menhgia.string = t;
this.red.string = e;
}
});
cc._RF.pop();
}, {} ],
NapRed: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "41eebjrhpBCuYVy5G92Kdy9", "NapRed");
var n = t("BrowserUtil"), o = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
header: {
default: null,
type: cc.Node
},
body: {
default: null,
type: cc.Node
},
NhanhMang: {
default: null,
type: cc.Label
},
MenhGia: {
default: null,
type: cc.Label
},
SoThe: {
default: null,
type: cc.EditBox
},
SoSeri: {
default: null,
type: cc.EditBox
},
moreNhaMang: {
default: null,
type: cc.Node
},
moreMenhGia: {
default: null,
type: cc.Node
},
scrollviewNhaMang: {
default: null,
type: cc.ScrollView
},
scrollviewMenhGia: {
default: null,
type: cc.ScrollView
},
bangGia: {
default: null,
type: cc.ScrollView
},
prefabLeft: {
default: null,
type: cc.Prefab
},
prefabRight: {
default: null,
type: cc.Prefab
},
captcha: {
default: null,
type: cc.EditBox
},
capchaSprite: cc.Sprite
},
init: function() {
var t = this;
this.isLoaded = !1;
this.editboxs = [ this.SoThe, this.SoSeri, this.captcha ];
this.keyHandle = function(e) {
return e.keyCode === cc.macro.KEY.tab ? (t.isTop() && t.changeNextFocusEditBox(), 
e.preventDefault && e.preventDefault(), !1) : e.keyCode === cc.macro.KEY.enter ? (n.focusGame(), 
t.onNapClick(), e.preventDefault && e.preventDefault(), !1) : void 0;
};
},
onEnable: function() {
cc.sys.isBrowser && this.addEvent();
this.reCaptcha();
this.isLoaded || cc.RedT.send({
shop: {
info_nap: !0
}
});
},
onDisable: function() {
this.moreNhaMang.active = this.moreMenhGia.active = !1;
cc.sys.isBrowser && this.removeEvent();
this.clean();
},
addEvent: function() {
cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
for (var t in this.editboxs) n.getHTMLElementByEditBox(this.editboxs[t]).addEventListener("keydown", this.keyHandle, !1);
},
removeEvent: function() {
for (var t in this.editboxs) n.getHTMLElementByEditBox(this.editboxs[t]).removeEventListener("keydown", this.keyHandle, !1);
cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
},
onKeyDown: function(t) {
switch (t.keyCode) {
case cc.macro.KEY.tab:
this.isTop() && this.changeNextFocusEditBox();
break;

case cc.macro.KEY.enter:
this.isTop() && this.onNapClick();
}
},
changeNextFocusEditBox: function() {
for (var t = !1, e = 0, i = this.editboxs.length; e < i; e++) if (n.checkEditBoxFocus(this.editboxs[e])) {
n.focusEditBox(this.editboxs[e]);
t = !0;
break;
}
!t && 0 < this.editboxs.length && n.focusEditBox(this.editboxs[0]);
},
isTop: function() {
return !(this.moreNhaMang.active || this.moreMenhGia.active || cc.RedT.inGame.notice.node.active || cc.RedT.inGame.loading.active);
},
clean: function() {
this.SoThe.string = this.SoSeri.string = this.captcha.string = "";
},
onNapClick: function() {
if (this.SoThe.string.length < 11 || this.SoSeri.string.length < 11) cc.RedT.inGame.notice.show({
title: "NẠP RIK",
text: "Thông Tin không hợp lệ..."
}); else if (o.isEmpty(this.captcha.string)) cc.RedT.inGame.notice.show({
title: "NẠP RIK",
text: "Vui lòng nhập chính xác mã xác nhận."
}); else {
cc.RedT.inGame.bgLoading.onData({
active: !0,
text: "Đang gửi dữ liệu..."
});
cc.RedT.send({
shop: {
nap_the: {
nhamang: this.NhanhMang.string,
menhgia: o.getOnlyNumberInString(this.MenhGia.string),
mathe: this.SoThe.string,
seri: this.SoSeri.string,
captcha: this.captcha.string
}
}
});
}
},
onSelectHead: function(t, e) {
Promise.all(this.body.children.map(function(t) {
t.name == e ? t.active = !0 : t.active = !1;
}));
},
toggleMoreNhaMang: function() {
this.moreNhaMang.active = !this.moreNhaMang.active;
this.moreMenhGia.active = !1;
},
toggleMoreMenhGia: function() {
this.moreMenhGia.active = !this.moreMenhGia.active;
},
infoSet: function(t, e, i) {
var n = this, c = arguments.length > 3 && void 0 !== arguments[3] && arguments[3], s = this;
t.length > 0 && Promise.all(t.map(function(t, n) {
var a = cc.instantiate(s.prefabLeft), h = a.getComponent("NapRed_itemOne");
h.init(s, e, i);
if (c) {
if (0 == n) {
h.background.active = !0;
s.NhanhMang.string = t.name;
}
h.text.string = t.name;
s.scrollviewNhaMang.content.addChild(a);
} else {
var r = o.numberWithCommas(t.name), l = o.numberWithCommas(t.values);
if (0 == n) {
h.background.active = !0;
s.MenhGia.string = r;
}
h.text.string = r;
s.scrollviewMenhGia.content.addChild(a);
var u = cc.instantiate(s.prefabRight);
u.getComponent("NapRed_itemTT").init(r, l);
s.bangGia.content.addChild(u);
}
return h;
})).then(function(t) {
n[e] = t;
});
},
onData: function(t) {
if (void 0 !== t.info && !this.isLoaded) {
this.isLoaded = !0;
void 0 !== t.info.nhamang && this.infoSet(t.info.nhamang, "nhamangList", "NhanhMang", !0);
void 0 !== t.info.menhgia && this.infoSet(t.info.menhgia, "menhgiaList", "MenhGia");
}
},
initCaptcha: function(t) {
var e = this, i = new Image();
i.src = t, i.width = 150, i.height = 50, setTimeout(function() {
var t = new cc.Texture2D();
t.initWithElement(i), t.handleLoadedTexture();
var n = new cc.SpriteFrame(t);
e.capchaSprite.spriteFrame = n;
}, 10);
},
reCaptcha: function() {
cc.RedT.send({
captcha: "chargeCard"
});
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
"Network.Cmd": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "9a77535BDFPdLDe/ez3AIxH", "Network.Cmd");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n, o = t("./Network.OutPacket");
(function(t) {
var e = function() {
function t() {}
t.LOGIN = 1;
return t;
}();
t.Code = e;
var i = function(t) {
__extends(i, t);
function i() {
var i = t.call(this) || this;
i.initData(100);
i.setControllerId(1);
i.setCmdId(e.LOGIN);
return i;
}
i.prototype.putData = function(t, e) {
this.packHeader();
this.putString(t);
this.putString(e);
this.updateSize();
};
return i;
}(o.default);
t.Login = i;
var n = function(t) {
__extends(i, t);
function i(i, n) {
var o = t.call(this) || this;
o.initData(100);
o.setControllerId(1);
o.setCmdId(e.LOGIN);
o.packHeader();
o.putString(i);
o.putString(n);
o.updateSize();
return o;
}
return i;
}(o.default);
t.SendLogin = n;
})(n = i.cmd || (i.cmd = {}));
i.default = n;
cc._RF.pop();
}, {
"./Network.OutPacket": "Network.OutPacket"
} ],
"Network.InPacket": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "851d2yV2EVGOayct/dVBmpt", "Network.InPacket");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = function() {
function t(t) {
this._pos = 0;
this._data = new Uint8Array(0);
this._length = 0;
this._controllerId = 0;
this._cmdId = 0;
this._error = 0;
this.init(t);
}
t.prototype.init = function(t) {
this._pos = 0;
this._data = t;
this._length = t.length;
this._controllerId = this.parseByte();
this._cmdId = this.getShort();
this._error = this.parseByte();
};
t.prototype.getCmdId = function() {
return this._cmdId;
};
t.prototype.getControllerId = function() {
return this._controllerId;
};
t.prototype.getError = function() {
return this._error;
};
t.prototype.parseByte = function() {
return this._data[this._pos++];
};
t.prototype.getByte = function() {
return this.parseByte();
};
t.prototype.getBool = function() {
return 0 < this._data[this._pos++];
};
t.prototype.getBytes = function(t) {
for (var e = [], i = 0; i < t; i++) e.push(this.parseByte());
return e;
};
t.prototype.getShort = function() {
if (this._pos + 2 > this._length) return 0;
var t = (this.parseByte() << 8) + (255 & this.parseByte());
return 32767 < t ? t - 65536 : t;
};
t.prototype.getUnsignedShort = function() {
return ((255 & this.parseByte()) << 8) + ((255 & this.parseByte()) << 0);
};
t.prototype.getInt = function() {
return ((255 & this.parseByte()) << 24) + ((255 & this.parseByte()) << 16) + ((255 & this.parseByte()) << 8) + ((255 & this.parseByte()) << 0);
};
t.prototype.byteArrayToLong = function(t) {
var e = !0, i = 0, n = 0;
255 == t[0] && (e = !1);
if (e) for (n = 0; 8 > n; n++) i = 256 * i + t[n]; else {
for (n = i = 1; 7 >= n; n++) i = 256 * i - t[n];
i = -i;
}
return i;
};
t.prototype.getLong = function() {
for (var t = [], e = 0; 8 > e; e++) t[e] = this.parseByte();
return this.byteArrayToLong(t);
};
t.prototype.getDouble = function() {
for (var t = new ArrayBuffer(8), e = new Uint8Array(t), i = 7; 0 <= i; i--) e[7 - i] = this.parseByte();
return new DataView(t).getFloat64(0);
};
t.prototype.getCharArray = function() {
var t = this.getUnsignedShort();
return this.getBytes(t);
};
t.prototype.getString = function() {
for (var t = this.getCharArray(), e = new Uint8Array(t.length), i = 0; i < t.length; i++) e[i] = parseInt(t[i], 10);
var n = String.fromCharCode.apply(null, e);
return decodeURIComponent(escape(n));
};
t.prototype.clean = function() {};
return t;
}();
i.default = n;
cc._RF.pop();
}, {} ],
"Network.NetworkClient": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "d02d3/cUfVJtbLRo2vAnsLe", "Network.NetworkClient");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("./Network.NetworkListener"), o = function() {
function t() {
this.ws = null;
this.host = "";
this.port = 0;
this.isForceClose = !1;
this.isUseWSS = !1;
this.isAutoReconnect = !0;
this._onOpenes = [];
this._onCloses = [];
}
t.prototype.connect = function(t, e) {
console.log("start connect: " + t + ":" + e);
this.isForceClose = !1;
this.host = t;
this.port = e;
if (null == this.ws) {
this.isUseWSS ? cc.sys.isNative && cc.sys.os == cc.sys.OS_ANDROID ? this.ws = new WebSocket("wss://" + t + ":" + e + "/websocket", [], cc.url.raw("resources/raw/cacert.pem")) : this.ws = new WebSocket("wss://" + t + ":" + e + "/websocket") : this.ws = new WebSocket("ws://" + t + ":" + e + "/websocket");
this.ws.binaryType = "arraybuffer";
this.ws.onopen = this.onOpen.bind(this);
this.ws.onmessage = this.onMessage.bind(this);
this.ws.onerror = this.onError.bind(this);
this.ws.onclose = this.onClose.bind(this);
} else if (this.ws.readyState !== WebSocket.OPEN) {
this.ws.close();
this.ws = null;
this.connect(t, e);
}
};
t.prototype.onOpen = function(t) {
console.log("onOpen");
for (var e = 0; e < this._onOpenes.length; e++) {
var i = this._onOpenes[e];
if (i.target && i.target instanceof Object && i.target.node) i.callback(null); else {
this._onOpenes.splice(e, 1);
e--;
}
}
};
t.prototype.onMessage = function(t) {};
t.prototype.onError = function(t) {
console.log("onError");
};
t.prototype.onClose = function(t) {
var e = this;
console.log("onClose");
for (var i = 0; i < this._onCloses.length; i++) {
var n = this._onCloses[i];
if (n.target && n.target instanceof Object && n.target.node) n.callback(null); else {
this._onCloses.splice(i, 1);
i--;
}
}
this.isAutoReconnect && !this.isForceClose && setTimeout(function() {
e.isForceClose || e.connect(e.host, e.port);
}, 2e3);
};
t.prototype.addOnOpen = function(t, e) {
this._onOpenes.push(new n.default(e, t));
};
t.prototype.addOnClose = function(t, e) {
this._onCloses.push(new n.default(e, t));
};
t.prototype.close = function() {
this.isForceClose = !0;
if (this.ws) {
this.ws.close();
this.ws = null;
}
};
t.prototype.isConnected = function() {
return !!this.ws && this.ws.readyState == WebSocket.OPEN;
};
return t;
}();
i.default = o;
cc._RF.pop();
}, {
"./Network.NetworkListener": "Network.NetworkListener"
} ],
"Network.NetworkListener": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "05be0BVFnFFQJR9M4lLsiVt", "Network.NetworkListener");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = function() {
return function(t, e) {
this.target = t;
this.callback = e;
};
}();
i.default = n;
cc._RF.pop();
}, {} ],
"Network.OutPacket": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "aad90ZGA2pCGbMidoqrmj74", "Network.OutPacket");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("./PacketHeaderAnalyze"), o = function() {
function t() {
this._controllerId = 1;
this._cmdId = 0;
this._data = new Array();
this._capacity = new Array();
this._length = 0;
this._pos = 0;
this._isPackedHeader = !1;
}
t.prototype.setCmdId = function(t) {
this._cmdId = t;
};
t.prototype.setControllerId = function(t) {
this._controllerId = t;
};
t.prototype.initData = function(t) {
this._data = [ t ];
this._capacity = t;
};
t.prototype.reset = function() {
this._length = this._pos = 0;
this._isPackedHeader = !1;
};
t.prototype.packHeader = function() {
if (!this._isPackedHeader) {
this._isPackedHeader = !0;
var t = n.default.genHeader(!1, !1);
this.putByte(t);
this.putUnsignedShort(this._length);
this.putByte(this._controllerId);
this.putShort(this._cmdId);
}
};
t.prototype.putByte = function(t) {
this._data[this._pos++] = t;
this._length = this._pos;
return this;
};
t.prototype.putByteArray = function(t) {
this.putShort(t.length);
this.putBytes(t);
return this;
};
t.prototype.putBytes = function(t) {
for (var e = 0; e < t.length; e++) this.putByte(t[e]);
return this;
};
t.prototype.putShort = function(t) {
this.putByte(t >> 8 & 255);
this.putByte(t >> 0 & 255);
return this;
};
t.prototype.putUnsignedShort = function(t) {
this.putByte(t >> 8);
this.putByte(t >> 0);
return this;
};
t.prototype.putInt = function(t) {
this.putByte(t >> 24 & 255);
this.putByte(t >> 16 & 255);
this.putByte(t >> 8 & 255);
this.putByte(t >> 0 & 255);
return this;
};
t.prototype.putLong = function(t) {
0 > t && cc.log("hahaha");
for (var e = [], i = 0; 8 > i; i++) e[i] = 255 & t, t = Math.floor(t / 256);
for (t = 7; 0 <= t; t--) this.putByte(e[t]);
};
t.prototype.putDouble = function(t) {
this.putByte(t >> 24 & 255);
this.putByte(t >> 16 & 255);
this.putByte(t >> 8 & 255);
this.putByte(t >> 0 & 255);
this.putByte(t >> 24 & 255);
this.putByte(t >> 16 & 255);
this.putByte(t >> 8 & 255);
this.putByte(t >> 0 & 255);
return this;
};
t.prototype.putString = function(t) {
this.putByteArray(this._stringConvertToByteArray(t));
return this;
};
t.prototype.updateUnsignedShortAtPos = function(t, e) {
this._data[e] = t >> 8;
this._data[e + 1] = t >> 0;
};
t.prototype.updateSize = function() {
this.updateUnsignedShortAtPos(this._length - 3, t.INDEX_SIZE_PACKET);
};
t.prototype.getData = function() {
return this._data.slice(0, this._length);
};
t.prototype._stringConvertToByteArray = function(t) {
if (null == t) return null;
for (var e = new Uint8Array(t.length), i = 0; i < t.length; i++) e[i] = t.charCodeAt(i);
return e;
};
t.prototype.clean = function() {};
t.INDEX_SIZE_PACKET = 1;
return t;
}();
i.default = o;
cc._RF.pop();
}, {
"./PacketHeaderAnalyze": "PacketHeaderAnalyze"
} ],
NewsContents: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "359e3FxWmpPGarLjvZuJIkS", "NewsContents");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
prefabItem: cc.Prefab
},
init: function(t) {
this.RedT = t;
},
update: function(t) {
this.node.position = cc.v2(this.node.position.x - 160 * t, 0);
-this.node.width > this.node.position.x && this.reset();
},
setNews: function() {
this.node.active = !0;
this.node.position = cc.v2(this.RedT.node.width + 200, 0);
},
reset: function() {
this.node.removeAllChildren();
this.node.active = !1;
},
onData: function(t) {
void 0 !== t.a && this.NewsAddArray(t.a);
t.t;
},
NewsAddArray: function(t) {
var e = this, i = this;
Promise.all(t.map(function(t) {
var e = cc.instantiate(i.prefabItem);
(e = e.getComponent("NewsItem")).users.string = t.users;
e.bet.string = n.numberWithCommas(t.bet);
e.game.string = t.game;
i.node.addChild(e.node);
return e;
})).then(function(t) {
e.node.active || e.setNews();
});
},
NewsAddText: function(t) {
var e = cc.instantiate(this.prefabItem);
e = e.getComponent("NewsItem");
if (t.status) {
e.status.node.active = !0;
if (1 == t.status) {
e.status.string = "(Nổ Hũ)";
e.win.string = "nổ hũ";
} else e.status.string = "(Thắng Lớn)";
}
e.users.string = t.users;
e.bet.string = n.numberWithCommas(t.bet);
e.game.string = t.game;
this.node.addChild(e.node);
this.node.active || this.setNews();
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
NewsItem: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "ed1c0NxAXlNI4ktSR1Kq45Q", "NewsItem");
cc.Class({
extends: cc.Component,
properties: {
status: cc.Label,
users: cc.Label,
win: cc.Label,
bet: cc.Label,
game: cc.Label
}
});
cc._RF.pop();
}, {} ],
NhiemVu_Item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "dbfecgN9AhPuLPczUD6YEnV", "NhiemVu_Item");
t("BrowserUtil");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
tenNv: {
default: null,
type: cc.Label
},
noidung: {
default: null,
type: cc.Label
},
tientrinh: {
default: null,
type: cc.Label
},
phanthuong: {
default: null,
type: cc.Label
},
dieukien: "",
tiendo: "",
ID: "",
testphanthuong: "",
info: ""
},
init: function(t, e, i) {
this.controll = t;
this.info = e;
this.dieukien = e.dieukien;
this.testphanthuong = e.phanthuong;
this.tiendo = i.userInfo.tWinRed;
this.tenNv.string = e.tennv;
this.noidung.string = e.noidung;
this.ID = e.id;
this.phanthuong.string = n.numberWithCommas(this.testphanthuong);
this.tiendo > this.dieukien ? this.tientrinh.string = "(" + n.numberWithCommas(this.dieukien) + "/" + n.numberWithCommas(this.dieukien) + ")" : this.tientrinh.string = "(" + n.numberWithCommas(this.tiendo) + "/" + n.numberWithCommas(this.dieukien) + ")";
},
onNhanThuong: function() {
cc.RedT.audio.playClick();
this.tiendo < this.dieukien ? cc.RedT.inGame.notice.show({
title: "NHIỆM VỤ",
text: "Chưa đủ điều kiện để nhận thưởng"
}) : cc.RedT.send({
nhanthuong: this.info
});
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
NhiemVu: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "fec4f4RMF1Lxb7g9DmcLOmB", "NhiemVu");
t("BrowserUtil"), t("Helper");
cc.Class({
extends: cc.Component,
properties: {
scrollview: {
default: null,
type: cc.ScrollView
},
prefabDaiLy: {
default: null,
type: cc.Prefab
}
},
init: function() {
this.isLoaded = !1;
},
onNhiemVu: function(t) {
var e = this;
e.scrollview.content.removeAllChildren();
t && Promise.all(t.dataNhiemVu.map(function(i) {
var n = cc.instantiate(e.prefabDaiLy), o = n.getComponent("NhiemVu_Item");
o.init(e, i, t);
e.scrollview.content.addChild(n);
return o;
}));
},
onData: function(t) {
console.log(t);
if (void 0 !== t && !this.isLoaded) {
this.isLoaded = !0;
this.onNhiemVu(t);
}
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
NodeScaler: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "47b78nTZ65Nkozgov27lpvd", "NodeScaler");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = cc._decorator, o = n.ccclass, c = n.property, s = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.designResolution = new cc.Size(1280, 720);
e.fitX = !1;
e.fitY = !1;
e.lastWitdh = 0;
e.lastHeight = 0;
e.canvas = null;
return e;
}
e.prototype.start = function() {
this.canvas = this.getCanvas();
this.updateSize();
};
e.prototype.update = function(t) {
this.updateSize();
};
e.prototype.updateSize = function() {
var t = cc.view.getFrameSize();
if (this.lastWitdh !== t.width || this.lastHeight !== t.height) {
this.lastWitdh = t.width;
this.lastHeight = t.height;
if (null != this.canvas && this.fitX && !this.fitY) this.node.scaleX = this.canvas.designResolution.width / this.designResolution.width; else if (null != this.canvas && this.fitY && !this.fitX) this.node.scaleY = this.canvas.designResolution.height / this.designResolution.height; else {
var e = t.width / t.height, i = this.designResolution.width / this.designResolution.height;
this.designResolution.width / this.designResolution.height > t.width / t.height ? this.node.setScale(i / e) : this.node.setScale(e / i);
}
}
};
e.prototype.getCanvas = function(t) {
void 0 === t && (t = null);
null == t && (t = this.node);
if (null != t.parent) {
var e = t.parent.getComponent(cc.Canvas);
return null != e ? e : this.getCanvas(t.parent);
}
return null;
};
__decorate([ c ], e.prototype, "designResolution", void 0);
__decorate([ c ], e.prototype, "fitX", void 0);
__decorate([ c ], e.prototype, "fitY", void 0);
return e = __decorate([ o ], e);
}(cc.Component);
i.default = s;
cc._RF.pop();
}, {} ],
Notice: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "55b77gHOPlJAY+OiMpR3w95", "Notice");
cc.Class({
extends: cc.Component,
properties: {
nodeButton: {
default: null,
type: cc.Node
},
loading: {
default: null,
type: cc.Node
},
title: {
default: null,
type: cc.Label
},
text: {
default: null,
type: cc.Label
},
button: {
default: null,
type: cc.Label
}
},
onDisable: function() {
this.clean();
},
show: function(t) {
this.node.active = !0;
void 0 !== t.load && (cc.RedT.inGame.loading.active = !1);
void 0 !== t.title && (this.title.string = t.title);
void 0 !== t.text && (this.text.string = t.text);
if (void 0 !== t.button) {
this.text.node.y = 8;
this.type = t.button.type;
this.button.string = t.button.text;
this.nodeButton.active = !0;
} else {
this.nodeButton.active = !1;
this.text.node.y = -14;
}
},
close: function() {
cc.RedT.audio.playUnClick();
this.node.active = !1;
},
onClickButton: function() {
cc.RedT.audio.playClick();
switch (this.type) {
case "sign_out":
this.node.active = !1;
cc.RedT.send({
user: {
signOut: !0
}
});
cc.RedT.inGame.resetAuth();
setTimeout(function() {
cc.RedT._socket.close();
}, 100);
break;

case "exit_game":
this.loading.active = !0;
void 0 !== this.timeOut && clearTimeout(this.timeOut);
cc.director.preloadScene("MainGame", function() {
cc.director.loadScene("MainGame", function() {});
});
this.node.active = !1;
break;

case "reg_otp":
this.node.active = !1;
if (null != cc.RedT.inGame.dialog.objShow) {
cc.RedT.inGame.dialog.profile.node.previous = cc.RedT.inGame.dialog.objShow;
cc.RedT.inGame.dialog.objShow.active = !1;
}
cc.RedT.inGame.dialog.showProfile(null, "BaoMat");
cc.RedT.inGame.dialog.profile.BaoMat.onSelectHead(null, "DangKyOTP");
}
},
clean: function() {
this.title.string = this.text.string = this.button.string = "";
}
});
cc._RF.pop();
}, {} ],
"OanTuTi.OanTuTiController": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "1001bWwXCJJUbBx91OmMK41", "OanTuTi.OanTuTiController");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("../ShootFish/Lobby/src/MiniGame"), o = t("../ShootFish/scripts/networks/ShootFishNetworkClient"), c = t("../ShootFish/scripts/common/Configs"), s = t("../ShootFish/scripts/common/Utils"), a = t("../ShootFish/scripts/common/BroadcastReceiver"), h = t("./OanTuTi.PopupCoinTransfer"), r = cc._decorator, l = r.ccclass, u = r.property, d = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.lblCoin = null;
e.lblBet = null;
e.btnBets = [];
e.btnPlayNow = null;
e.panelSelectBet = null;
e.players = null;
e.mePlayer = null;
e.otherPlayer = null;
e.panelSearchingMatch = null;
e.panelPlaying = null;
e.panelResult = null;
e.Notice = null;
e.lblNotice = null;
e.lblSearching = null;
e.btnCancel = null;
e.lblTime = null;
e.progressTime = null;
e.btnPlays = [];
e.sprPlaysActive = [];
e.sprPlaysNormal = [];
e.sprResults = [];
e.toggleAuto = null;
e.popups = [];
e.popupCoinTransfer = null;
e.listBet = [ 1e3, 5e3, 1e4, 5e4, 1e5 ];
e.timePlaying = 10;
e.remainTime = 0;
e.lastBetValue = 0;
e.isPlaying = !1;
return e;
}
i = e;
e.prototype.start = function() {
var t = this;
i.instance = this;
a.default.register(a.default.USER_UPDATE_COIN, function() {
t.node.active && (t.lblCoin.string = s.default.formatNumber(c.default.Login.CoinFish));
}, this);
a.default.send(a.default.USER_UPDATE_COIN);
o.default.getInstance().addListener(function(e, i) {
if (t.node.active) {
if ([ "OttOnMatching", "OttOnMatchStart", "OttOnMatchEnd", "OttOnMatchSolved" ].indexOf(e) >= 0) {
console.log(e);
console.log(i);
}
switch (e) {
case "OttOnMatching":
var n = "";
if (i.userId1 == c.default.Login.UserIdFish) {
n = i.nickname2;
i.avatar2;
} else {
n = i.nickname1;
i.avatar1;
}
t.panelSelectBet.active = !1;
t.panelPlaying.active = !1;
t.players.active = !0;
t.lblSearching.string = "ĐÃ TÌM THẤY ĐỐI THỦ";
t.btnCancel.node.active = !1;
t.otherPlayer.active = !0;
t.otherPlayer.getChildByName("lblNickname").getComponent(cc.Label).string = n;
t.lblBet.string = "CƯỢC: " + Math.floor(i.blind / 1e3) + "K";
break;

case "OttOnMatchStart":
t.panelSearchingMatch.active = !1;
t.panelPlaying.active = !0;
t.panelResult.active = !1;
t.players.active = !0;
t.remainTime = t.timePlaying;
t.lblTime.node.parent.active = !0;
t.progressTime.fillRange = 1;
for (var o = 0; o < t.btnPlays.length; o++) {
t.btnPlays[o].interactable = !0;
t.btnPlays[o].getComponent(cc.Sprite).spriteFrame = t.sprPlaysActive[o];
}
break;

case "OttOnMatchEnd":
var h = i.result, r = i.changeCash1, l = i.changeCash2, u = i.blind, d = t.panelResult.getChildByName("lblWin"), p = t.panelResult.getChildByName("lblLose");
if (i.userId1 == c.default.Login.UserIdFish) {
0 != h && (1 == h ? d.getComponent(cc.Label).string = "+" + s.default.formatNumber(r) : p.getComponent(cc.Label).string = s.default.formatNumber(-u));
c.default.Login.CoinFish = i.cash1;
} else {
0 != h && (2 == h ? d.getComponent(cc.Label).string = "+" + s.default.formatNumber(l) : p.getComponent(cc.Label).string = s.default.formatNumber(-u));
c.default.Login.CoinFish = i.cash2;
}
a.default.send(a.default.USER_UPDATE_COIN);
t.scheduleOnce(function() {
t.resetView();
t.toggleAuto.isChecked ? t.selectBet(t.lastBetValue) : t.isPlaying = !1;
}, 5);

case "OttOnMatchSolved":
t.panelResult.active = !0;
t.lblTime.node.parent.active = !1;
h = i.result;
var g = i.choice1, m = i.choice2, f = t.panelResult.getChildByName("meValue"), v = t.panelResult.getChildByName("otherValue"), b = f.getChildByName("active"), T = v.getChildByName("active");
(d = t.panelResult.getChildByName("lblWin")).active = !1;
(p = t.panelResult.getChildByName("lblLose")).active = !1;
var _ = t.panelResult.getChildByName("hoa");
_.active = !1;
var C = t.panelResult.getChildByName("thang");
C.active = !1;
var y = t.panelResult.getChildByName("thua");
y.active = !1;
if (i.userId1 == c.default.Login.UserIdFish) {
f.getComponent(cc.Sprite).spriteFrame = t.sprResults[g];
v.getComponent(cc.Sprite).spriteFrame = t.sprResults[m];
for (o = 0; o < t.btnPlays.length; o++) {
t.btnPlays[o].interactable = !1;
t.btnPlays[o].getComponent(cc.Sprite).spriteFrame = g == o ? t.sprPlaysActive[o] : t.sprPlaysNormal[o];
}
if (0 == h) {
_.active = !0;
_.getComponent(sp.Skeleton).setAnimation(0, "animation", !1);
b.active = !0;
T.active = !0;
} else if (1 == h) {
C.active = !0;
C.getComponent(sp.Skeleton).setAnimation(0, "animation", !1);
d.active = !0;
b.active = !0;
T.active = !1;
} else {
y.active = !0;
y.getComponent(sp.Skeleton).setAnimation(0, "animation", !1);
p.active = !0;
b.active = !1;
T.active = !0;
}
} else {
f.getComponent(cc.Sprite).spriteFrame = t.sprResults[m];
v.getComponent(cc.Sprite).spriteFrame = t.sprResults[g];
for (o = 0; o < t.btnPlays.length; o++) {
t.btnPlays[o].interactable = !1;
t.btnPlays[o].getComponent(cc.Sprite).spriteFrame = m == o ? t.sprPlaysActive[o] : t.sprPlaysNormal[o];
}
if (0 == h) {
_.active = !0;
_.getComponent(sp.Skeleton).setAnimation(0, "animation", !1);
b.active = !0;
T.active = !0;
} else if (2 == h) {
C.active = !0;
C.getComponent(sp.Skeleton).setAnimation(0, "animation", !1);
d.active = !0;
b.active = !0;
T.active = !1;
} else {
y.active = !0;
y.getComponent(sp.Skeleton).setAnimation(0, "animation", !1);
p.active = !0;
b.active = !1;
T.active = !0;
}
}
}
}
}, this);
for (var e = function(e) {
n.btnBets[e].node.on("click", function() {
t.selectBet(t.listBet[e]);
});
}, n = this, h = 0; h < this.btnBets.length; h++) e(h);
var r = function(e) {
l.btnPlays[e].node.on("click", function() {
t.play(e);
});
}, l = this;
for (h = 0; h < this.btnPlays.length; h++) r(h);
};
e.prototype.init = function(t) {
console.log("reg one two three", t);
};
e.prototype.update = function(t) {
if (this.remainTime > 0) {
this.remainTime = Math.max(0, this.remainTime - t);
var e = Math.round(this.remainTime);
this.lblTime.string = (e > 9 ? "" : "0") + e;
this.progressTime.fillRange = this.remainTime / this.timePlaying;
}
};
e.prototype.openGame = function() {
if (this.node.active) this.reOrder(); else {
t.prototype.show.call(this);
this.toggleAuto.isChecked = !1;
this.resetView();
}
};
e.prototype._onShowed = function() {
var e = this;
t.prototype._onShowed.call(this);
o.default.getInstance().checkConnect("oantuti", function(t) {
if (e.node.active) if (t) {
a.default.send(a.default.USER_UPDATE_COIN);
if (c.default.Login.CoinFish <= 0) {
e.showNotice(!0, "Tiền trong game của bạn đã hết, bạn có muốn chuyển tiền vào không?");
e.popupCoinTransfer.show();
}
} else e.dismiss();
});
};
e.prototype.showNotice = function(t, e) {
this.Notice.active = t;
this.lblNotice.string = e;
};
e.prototype.dimissNotice = function() {
this.Notice.active = !1;
};
e.prototype.dismiss = function() {
if (this.isPlaying) this.showNotice(!0, "Bạn đang chơi không thể thoát."); else {
t.prototype.dismiss.call(this);
for (var e = 0; e < this.popups.length; e++) this.popups[e].active = !1;
}
};
e.prototype.resetView = function() {
this.lblBet.string = "CHỌN CƯỢC";
this.panelSelectBet.active = !0;
this.panelPlaying.active = !1;
this.panelResult.active = !1;
this.players.active = !1;
this.panelSearchingMatch.active = !1;
this.mePlayer.active = !0;
this.otherPlayer.active = !1;
this.otherPlayer.getChildByName("lblNickname").getComponent(cc.Label).string = "";
this.interactableBtnBets(!0);
};
e.prototype.playNow = function() {
this.selectBet(0);
};
e.prototype.selectBet = function(t) {
var e = this;
this.interactableBtnBets(!1);
this.isPlaying = !0;
console.log("betValue: " + t);
o.default.getInstance().request("OTT1", {
userId: c.default.Login.UserIdFish,
nickname: c.default.Login.Nickname,
blind: t
}, function(i) {
if (200 == i.code) {
e.lastBetValue = t;
if (t <= 0) e.lblBet.string = "CƯỢC: __"; else {
var n = Math.floor(t / 1e3);
e.lblBet.string = "CƯỢC: " + s.default.formatNumber(n) + "K";
}
e.panelSelectBet.active = !1;
e.panelSearchingMatch.active = !0;
e.players.active = !0;
e.lblSearching.string = "ĐANG TÌM KIẾM ĐỐI THỦ...";
e.btnCancel.node.active = !0;
} else {
switch (i.code) {
case 302:
e.showNotice(!0, "Số dư không đủ.");
break;

default:
e.showNotice(!0, "Lỗi " + i.code + ", không xác định.");
}
e.interactableBtnBets(!0);
e.isPlaying = !1;
}
}, this);
};
e.prototype.play = function(t) {
var e = this;
o.default.getInstance().request("OTT2", {
userId: c.default.Login.UserIdFish,
choice: t
}, function(i) {
console.log(i);
if (200 == i.code) for (var n = 0; n < e.btnPlays.length; n++) {
e.btnPlays[n].interactable = !1;
e.btnPlays[n].getComponent(cc.Sprite).spriteFrame = n == t ? e.sprPlaysActive[n] : e.sprPlaysNormal[n];
} else {
e.showNotice(!0, "Lỗi " + i.code + ", không xác định.");
e.interactableBtnBets(!0);
}
}, this);
};
e.prototype.interactableBtnBets = function(t) {
for (var e = 0; e < this.btnBets.length; e++) this.btnBets[e].interactable = t;
this.btnPlayNow.interactable = t;
};
e.prototype.actCancel = function() {
var t = this;
o.default.getInstance().request("OTT11", {}, function(e) {
if (200 == e.code) {
t.resetView();
t.isPlaying = !1;
} else t.showNotice(!0, "Lỗi " + e.code + ", không xác định.");
}, this);
};
var i;
e.instance = null;
__decorate([ u(cc.Label) ], e.prototype, "lblCoin", void 0);
__decorate([ u(cc.Label) ], e.prototype, "lblBet", void 0);
__decorate([ u([ cc.Button ]) ], e.prototype, "btnBets", void 0);
__decorate([ u(cc.Button) ], e.prototype, "btnPlayNow", void 0);
__decorate([ u(cc.Node) ], e.prototype, "panelSelectBet", void 0);
__decorate([ u(cc.Node) ], e.prototype, "players", void 0);
__decorate([ u(cc.Node) ], e.prototype, "mePlayer", void 0);
__decorate([ u(cc.Node) ], e.prototype, "otherPlayer", void 0);
__decorate([ u(cc.Node) ], e.prototype, "panelSearchingMatch", void 0);
__decorate([ u(cc.Node) ], e.prototype, "panelPlaying", void 0);
__decorate([ u(cc.Node) ], e.prototype, "panelResult", void 0);
__decorate([ u(cc.Node) ], e.prototype, "Notice", void 0);
__decorate([ u(cc.Label) ], e.prototype, "lblNotice", void 0);
__decorate([ u(cc.Label) ], e.prototype, "lblSearching", void 0);
__decorate([ u(cc.Button) ], e.prototype, "btnCancel", void 0);
__decorate([ u(cc.Label) ], e.prototype, "lblTime", void 0);
__decorate([ u(cc.Sprite) ], e.prototype, "progressTime", void 0);
__decorate([ u([ cc.Button ]) ], e.prototype, "btnPlays", void 0);
__decorate([ u([ cc.SpriteFrame ]) ], e.prototype, "sprPlaysActive", void 0);
__decorate([ u([ cc.SpriteFrame ]) ], e.prototype, "sprPlaysNormal", void 0);
__decorate([ u([ cc.SpriteFrame ]) ], e.prototype, "sprResults", void 0);
__decorate([ u(cc.Toggle) ], e.prototype, "toggleAuto", void 0);
__decorate([ u([ cc.Node ]) ], e.prototype, "popups", void 0);
__decorate([ u(h.default) ], e.prototype, "popupCoinTransfer", void 0);
return e = i = __decorate([ l ], e);
}(n.default);
i.default = d;
cc._RF.pop();
}, {
"../ShootFish/Lobby/src/MiniGame": "MiniGame",
"../ShootFish/scripts/common/BroadcastReceiver": "BroadcastReceiver",
"../ShootFish/scripts/common/Configs": "Configs",
"../ShootFish/scripts/common/Utils": "Utils",
"../ShootFish/scripts/networks/ShootFishNetworkClient": "ShootFishNetworkClient",
"./OanTuTi.PopupCoinTransfer": "OanTuTi.PopupCoinTransfer"
} ],
"OanTuTi.PopupCoinTransfer": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "424c9CgEAVEfZjVopRhDVWQ", "OanTuTi.PopupCoinTransfer");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("../ShootFish/scripts/common/Utils"), o = t("../ShootFish/scripts/networks/ShootFishNetworkClient"), c = t("../ShootFish/scripts/common/Configs"), s = t("../ShootFish/scripts/common/BroadcastReceiver"), a = t("../ShootFish/scripts/networks/MiniGameNetworkClient"), h = t("../ShootFish/Lobby/src/Lobby.Cmd"), r = t("./OanTuTi.OanTuTiController"), l = t("../ShootFish/scripts/common/Dialog2"), u = cc._decorator, d = u.ccclass, p = u.property, g = function() {
function t() {
this.lblBalance = null;
this.edbCoin = null;
this.quickButtons = null;
this.popup = null;
this.values = [ 5e4, 1e5, 2e5, 5e5, 1e6, 2e6, 5e6, 1e7, 2e7 ];
}
t.prototype.start = function(t) {
var e = this;
this.popup = t;
this.edbCoin.node.on("editing-did-ended", function() {
var t = n.default.stringToInt(e.edbCoin.string);
e.edbCoin.string = n.default.formatNumber(t);
});
for (var i, o = function(t) {
i = c.quickButtons.children[t];
var o = c.values[t];
i.getComponentInChildren(cc.Label).string = n.default.formatNumber(o);
i.on("click", function() {
e.edbCoin.string = n.default.formatNumber(o);
});
}, c = this, s = 0; s < this.quickButtons.childrenCount; s++) o(s);
};
t.prototype.submit = function() {
var t = this, e = n.default.stringToInt(this.edbCoin.string);
e <= 0 ? r.default.instance.showNotice(!0, "Số tiền đã nhập không hợp lệ.") : o.default.getInstance().request("xxengCashin", {
ccash: e
}, function(e) {
if (e.ok) {
c.default.Login.CoinFish = e.newCash;
s.default.send(s.default.USER_UPDATE_COIN);
r.default.instance.showNotice(!0, "Thao tác thành công.");
t.reset();
a.default.getInstance().send(new h.default.ReqGetMoneyUse());
} else r.default.instance.showNotice(!0, "Thao tác thất bại, vui lòng thử lại sau.");
}, this.popup);
};
t.prototype.reset = function() {
this.edbCoin.string = "";
this.lblBalance.string = n.default.formatNumber(c.default.Login.Coin);
};
__decorate([ p(cc.Label) ], t.prototype, "lblBalance", void 0);
__decorate([ p(cc.EditBox) ], t.prototype, "edbCoin", void 0);
__decorate([ p(cc.Node) ], t.prototype, "quickButtons", void 0);
return t = __decorate([ d("OanTuTi.PopupCoinTransfer.TabCashIn") ], t);
}();
i.TabCashIn = g;
var m = function() {
function t() {
this.lblBalance = null;
this.edbCoin = null;
this.quickButtons = null;
this.popup = null;
this.values = [ 5e4, 1e5, 2e5, 5e5, 1e6, 2e6, 5e6, 1e7, 2e7 ];
}
t.prototype.start = function(t) {
var e = this;
this.popup = t;
this.edbCoin.node.on("editing-did-ended", function() {
var t = n.default.stringToInt(e.edbCoin.string);
e.edbCoin.string = n.default.formatNumber(t);
});
for (var i, o = function(t) {
i = c.quickButtons.children[t];
var o = c.values[t];
i.getComponentInChildren(cc.Label).string = n.default.formatNumber(o);
i.on("click", function() {
e.edbCoin.string = n.default.formatNumber(o);
});
}, c = this, s = 0; s < this.quickButtons.childrenCount; s++) o(s);
};
t.prototype.submit = function() {
var t = this, e = n.default.stringToInt(this.edbCoin.string);
e <= 0 ? r.default.instance.showNotice(!0, "Số tiền đã nhập không hợp lệ.") : o.default.getInstance().request("xxengCashin", {
ccash: -e
}, function(e) {
if (e.ok) {
c.default.Login.CoinFish = e.newCash;
s.default.send(s.default.USER_UPDATE_COIN);
r.default.instance.showNotice(!0, "Thao tác thành công.");
t.reset();
a.default.getInstance().send(new h.default.ReqGetMoneyUse());
} else r.default.instance.showNotice(!0, "Thao tác thất bại, vui lòng thử lại sau.");
}, this.popup);
};
t.prototype.reset = function() {
this.edbCoin.string = "";
this.lblBalance.string = n.default.formatNumber(c.default.Login.CoinFish);
};
__decorate([ p(cc.Label) ], t.prototype, "lblBalance", void 0);
__decorate([ p(cc.EditBox) ], t.prototype, "edbCoin", void 0);
__decorate([ p(cc.Node) ], t.prototype, "quickButtons", void 0);
return t = __decorate([ d("OanTuTi.PopupCoinTransfer.TabCashOut") ], t);
}();
i.TabCashOut = m;
var f = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.tabs = null;
e.tabContents = null;
e.tabCashIn = null;
e.tabCashOut = null;
e.tabSelectedIdx = 0;
return e;
}
e.prototype.start = function() {
for (var t = this, e = function(e) {
i.tabs.toggleItems[e].node.on("toggle", function() {
t.tabSelectedIdx = e;
t.onTabChanged();
});
}, i = this, o = 0; o < this.tabs.toggleItems.length; o++) e(o);
s.default.register(s.default.USER_UPDATE_COIN, function() {
t.tabCashIn.lblBalance.string = n.default.formatNumber(c.default.Login.Coin);
t.tabCashOut.lblBalance.string = n.default.formatNumber(c.default.Login.CoinFish);
}, this);
this.tabCashIn.start(this);
this.tabCashOut.start(this);
};
e.prototype.show = function() {
t.prototype.show.call(this);
this.tabSelectedIdx = 0;
this.tabs.toggleItems[this.tabSelectedIdx].isChecked = !0;
this.onTabChanged();
};
e.prototype.onTabChanged = function() {
for (var t = 0; t < this.tabContents.childrenCount; t++) this.tabContents.children[t].active = t == this.tabSelectedIdx;
switch (this.tabSelectedIdx) {
case 0:
this.tabCashIn.reset();
break;

case 1:
this.tabCashOut.reset();
}
};
e.prototype.actSubmitCashIn = function() {
this.tabCashIn.submit();
};
e.prototype.actSubmitCashOut = function() {
this.tabCashOut.submit();
};
e.prototype.actClearCashIn = function() {
this.tabCashIn.edbCoin.string = "0";
};
e.prototype.actClearCashOut = function() {
this.tabCashOut.edbCoin.string = "0";
};
__decorate([ p(cc.ToggleContainer) ], e.prototype, "tabs", void 0);
__decorate([ p(cc.Node) ], e.prototype, "tabContents", void 0);
__decorate([ p(g) ], e.prototype, "tabCashIn", void 0);
__decorate([ p(m) ], e.prototype, "tabCashOut", void 0);
return e = __decorate([ d ], e);
}(l.default);
i.default = f;
cc._RF.pop();
}, {
"../ShootFish/Lobby/src/Lobby.Cmd": "Lobby.Cmd",
"../ShootFish/scripts/common/BroadcastReceiver": "BroadcastReceiver",
"../ShootFish/scripts/common/Configs": "Configs",
"../ShootFish/scripts/common/Dialog2": "Dialog2",
"../ShootFish/scripts/common/Utils": "Utils",
"../ShootFish/scripts/networks/MiniGameNetworkClient": "MiniGameNetworkClient",
"../ShootFish/scripts/networks/ShootFishNetworkClient": "ShootFishNetworkClient",
"./OanTuTi.OanTuTiController": "OanTuTi.OanTuTiController"
} ],
"OanTuTi.PopupHistory": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "0068dwLN8ZPcquMs9BSEGUr", "OanTuTi.PopupHistory");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("../ShootFish/scripts/common/Dialog2"), o = t("../ShootFish/scripts/networks/ShootFishNetworkClient"), c = t("../ShootFish/scripts/common/Configs"), s = t("../ShootFish/scripts/common/Utils"), a = cc._decorator, h = a.ccclass, r = a.property, l = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.lblPage = null;
e.itemTemplate = null;
e.page = 1;
e.maxPage = 1;
e.items = new Array();
e.data = null;
return e;
}
e.prototype.show = function() {
t.prototype.show.call(this);
for (var e = 0; e < this.items.length; e++) this.items[e].active = !1;
null != this.itemTemplate && (this.itemTemplate.active = !1);
};
e.prototype.dismiss = function() {
t.prototype.dismiss.call(this);
for (var e = 0; e < this.items.length; e++) this.items[e].active = !1;
};
e.prototype._onShowed = function() {
t.prototype._onShowed.call(this);
this.page = 1;
this.maxPage = 1;
this.lblPage.string = this.page + "/" + this.maxPage;
this.loadData();
};
e.prototype.actNextPage = function() {
if (this.page < this.maxPage) {
this.page++;
this.lblPage.string = this.page + "/" + this.maxPage;
this.loadDataLocal();
}
};
e.prototype.actPrevPage = function() {
if (this.page > 1) {
this.page--;
this.lblPage.string = this.page + "/" + this.maxPage;
this.loadDataLocal();
}
};
e.prototype.loadData = function() {
var t = this;
o.default.getInstance().request("OTT3", {
userId: c.default.Login.UserIdFish
}, function(e) {
console.log(e);
if (200 == e.code) {
if (0 == t.items.length) {
for (var i = 0; i < 10; i++) {
var n = cc.instantiate(t.itemTemplate);
n.parent = t.itemTemplate.parent;
t.items.push(n);
}
t.itemTemplate.destroy();
t.itemTemplate = null;
}
t.data = e.data;
t.maxPage = Math.ceil(t.data.length / 10);
t.page = 1;
t.loadDataLocal();
}
}, this);
};
e.prototype.loadDataLocal = function() {
if (null != this.data) {
this.lblPage.string = this.page + "/" + this.maxPage;
var t = 10 * (this.page - 1), e = 10;
t + e > this.data.length && (e = this.data.length - t);
for (var i = 0; i < this.items.length; i++) {
var n = this.items[i];
if (i < e) {
var o = this.data[t + i];
n.getChildByName("bg").opacity = i % 2 == 0 ? 10 : 0;
n.getChildByName("Session").getComponent(cc.Label).string = o.Id;
n.getChildByName("Time").getComponent(cc.Label).string = o.GameTime;
if (o.Nickname1 == c.default.Login.Nickname) {
n.getChildByName("Choice").getComponent(cc.Label).string = this.getChoiceName(o.Choice1);
n.getChildByName("OtherPlayer").getComponent(cc.Label).string = o.Nickname2;
var a = "Hoà";
if (1 == o.Result) {
n.getChildByName("Receive").getComponent(cc.Label).string = "+" + s.default.formatNumber(o.CashChange1);
a = "Thắng";
} else if (2 == o.Result) {
n.getChildByName("Receive").getComponent(cc.Label).string = s.default.formatNumber(-o.Blind);
a = "Thua";
} else n.getChildByName("Receive").getComponent(cc.Label).string = "+" + s.default.formatNumber(o.Blind);
n.getChildByName("Result").getComponent(cc.Label).string = a;
} else {
n.getChildByName("Choice").getComponent(cc.Label).string = this.getChoiceName(o.Choice2);
n.getChildByName("OtherPlayer").getComponent(cc.Label).string = o.Nickname1;
a = "Hoà";
if (2 == o.Result) {
n.getChildByName("Receive").getComponent(cc.Label).string = "+" + s.default.formatNumber(o.CashChange2);
a = "Thắng";
} else if (1 == o.Result) {
n.getChildByName("Receive").getComponent(cc.Label).string = s.default.formatNumber(-o.Blind);
a = "Thua";
} else n.getChildByName("Receive").getComponent(cc.Label).string = "+" + s.default.formatNumber(o.Blind);
n.getChildByName("Result").getComponent(cc.Label).string = a;
}
n.getChildByName("Bet").getComponent(cc.Label).string = s.default.formatNumber(o.Blind);
n.active = !0;
} else n.active = !1;
}
}
};
e.prototype.getChoiceName = function(t) {
switch (t) {
case 0:
return "Kéo";

case 1:
return "Bao";

case 2:
return "Búa";
}
};
__decorate([ r(cc.Label) ], e.prototype, "lblPage", void 0);
__decorate([ r(cc.Node) ], e.prototype, "itemTemplate", void 0);
return e = __decorate([ h ], e);
}(n.default);
i.default = l;
cc._RF.pop();
}, {
"../ShootFish/scripts/common/Configs": "Configs",
"../ShootFish/scripts/common/Dialog2": "Dialog2",
"../ShootFish/scripts/common/Utils": "Utils",
"../ShootFish/scripts/networks/ShootFishNetworkClient": "ShootFishNetworkClient"
} ],
"OanTuTi.PopupHonors": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "166b51EgHdHaJuV9WMV2vrc", "OanTuTi.PopupHonors");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("../ShootFish/scripts/common/Dialog2"), o = t("../ShootFish/scripts/networks/ShootFishNetworkClient"), c = t("../ShootFish/scripts/common/Configs"), s = t("../ShootFish/scripts/common/Utils"), a = cc._decorator, h = a.ccclass, r = a.property, l = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.lblPage = null;
e.itemTemplate = null;
e.page = 1;
e.maxPage = 1;
e.items = new Array();
e.data = null;
return e;
}
e.prototype.show = function() {
t.prototype.show.call(this);
for (var e = 0; e < this.items.length; e++) this.items[e].active = !1;
null != this.itemTemplate && (this.itemTemplate.active = !1);
};
e.prototype.dismiss = function() {
t.prototype.dismiss.call(this);
for (var e = 0; e < this.items.length; e++) this.items[e].active = !1;
};
e.prototype._onShowed = function() {
t.prototype._onShowed.call(this);
this.page = 1;
this.maxPage = 1;
this.lblPage.string = this.page + "/" + this.maxPage;
this.loadData();
};
e.prototype.actNextPage = function() {
if (this.page < this.maxPage) {
this.page++;
this.lblPage.string = this.page + "/" + this.maxPage;
this.loadDataLocal();
}
};
e.prototype.actPrevPage = function() {
if (this.page > 1) {
this.page--;
this.lblPage.string = this.page + "/" + this.maxPage;
this.loadDataLocal();
}
};
e.prototype.loadData = function() {
var t = this;
o.default.getInstance().request("OTT4", {
userId: c.default.Login.UserIdFish
}, function(e) {
console.log(e);
if (200 == e.code) {
if (0 == t.items.length) {
for (var i = 0; i < 10; i++) {
var n = cc.instantiate(t.itemTemplate);
n.parent = t.itemTemplate.parent;
t.items.push(n);
}
t.itemTemplate.destroy();
t.itemTemplate = null;
}
t.data = e.data;
t.maxPage = Math.ceil(t.data.length / 10);
t.page = 1;
t.loadDataLocal();
}
}, this);
};
e.prototype.loadDataLocal = function() {
if (null != this.data) {
this.lblPage.string = this.page + "/" + this.maxPage;
var t = 10 * (this.page - 1), e = 10;
t + e > this.data.length && (e = this.data.length - t);
for (var i = 0; i < this.items.length; i++) {
var n = this.items[i];
if (i < e) {
var o = this.data[t + i];
n.getChildByName("bg").opacity = i % 2 == 0 ? 10 : 0;
n.getChildByName("Time").getComponent(cc.Label).string = o.GameTime;
n.getChildByName("Bet").getComponent(cc.Label).string = s.default.formatNumber(o.Blind);
n.getChildByName("Player").getComponent(cc.Label).string = o.Nickname1;
n.getChildByName("Choice").getComponent(cc.Label).string = this.getChoiceName(o.Choice1);
n.getChildByName("OtherPlayer").getComponent(cc.Label).string = o.Nickname2;
n.getChildByName("OtherChoice").getComponent(cc.Label).string = this.getChoiceName(o.Choice2);
n.getChildByName("Receive").getComponent(cc.Label).string = o.CashChange1 > o.CashChange2 ? s.default.formatNumber(o.CashChange1) : s.default.formatNumber(o.CashChange2);
n.active = !0;
} else n.active = !1;
}
}
};
e.prototype.getChoiceName = function(t) {
switch (t) {
case 0:
return "Kéo";

case 1:
return "Bao";

case 2:
return "Búa";
}
};
__decorate([ r(cc.Label) ], e.prototype, "lblPage", void 0);
__decorate([ r(cc.Node) ], e.prototype, "itemTemplate", void 0);
return e = __decorate([ h ], e);
}(n.default);
i.default = l;
cc._RF.pop();
}, {
"../ShootFish/scripts/common/Configs": "Configs",
"../ShootFish/scripts/common/Dialog2": "Dialog2",
"../ShootFish/scripts/common/Utils": "Utils",
"../ShootFish/scripts/networks/ShootFishNetworkClient": "ShootFishNetworkClient"
} ],
PacketHeaderAnalyze: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "20c46EIfchK67TjWzmS1EFh", "PacketHeaderAnalyze");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n;
(function(t) {
var e = function() {
function t() {}
t.getDataSize = function(t) {
return this.isBigSize(t) ? this.getIntAt(t, this.BYTE_PACKET_SIZE_INDEX) : this.getUnsignedShortAt(t, this.BYTE_PACKET_SIZE_INDEX);
};
t.getCmdIdFromData = function(t) {
return this.getShortAt(t, 1);
};
t.isBigSize = function(t) {
return this.getBit(t[0], this.BIT_IS_BIG_SIZE_INDEX);
};
t.isCompress = function(t) {
return this.getBit(t[0], this.BIT_IS_COMPRESS_INDEX);
};
t.getValidSize = function(t) {
var e = 0, i = 0;
if (this.isBigSize(t)) {
if (length < this.BIG_HEADER_SIZE) return -1;
e = this.getIntAt(t, this.BYTE_PACKET_SIZE_INDEX);
i = this.BIG_HEADER_SIZE;
} else {
if (length < this.NORMAL_HEADER_SIZE) return -1;
e = this.getUnsignedShortAt(t, this.BYTE_PACKET_SIZE_INDEX);
i = this.NORMAL_HEADER_SIZE;
}
return e + i;
};
t.getBit = function(t, e) {
return 0 != (t & 1 << e);
};
t.genHeader = function(t, e) {
var i;
i = this.setBit(0, 7, !0);
i = this.setBit(i, 6, !1);
i = this.setBit(i, 5, e);
i = this.setBit(i, 4, !0);
return this.setBit(i, 3, t);
};
t.setBit = function(t, e, i) {
return i ? t | 1 << e : t & ~(1 << e);
};
t.getIntAt = function(t, e) {
return ((255 & t[e]) << 24) + ((255 & t[e + 1]) << 16) + ((255 & t[e + 2]) << 8) + ((255 & t[e + 3]) << 0);
};
t.getUnsignedShortAt = function(t, e) {
return ((255 & t[e]) << 8) + ((255 & t[e + 1]) << 0);
};
t.getShortAt = function(t, e) {
return (t[e] << 8) + (255 & t[e + 1]);
};
t.BIT_IS_BINARY_INDEX = 7;
t.BIT_IS_ENCRYPT_INDEX = 6;
t.BIT_IS_COMPRESS_INDEX = 5;
t.BIT_IS_BLUE_BOXED_INDEX = 4;
t.BIT_IS_BIG_SIZE_INDEX = 3;
t.BYTE_PACKET_SIZE_INDEX = 1;
t.BIG_HEADER_SIZE = 5;
t.NORMAL_HEADER_SIZE = 3;
return t;
}();
t.PacketHeaderAnalyze = e;
})(n || (n = {}));
i.default = n.PacketHeaderAnalyze;
cc._RF.pop();
}, {} ],
Pagination_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "7edb4K7i4tECqx8snl3/cVz", "Pagination_item");
cc.Class({
extends: cc.Component,
properties: {
bg: cc.Node,
bg_select: cc.Node,
number: cc.Label
},
start: function() {}
});
cc._RF.pop();
}, {} ],
Pagination: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "a2298FO/xFF7KY+FwgkX4E6", "Pagination");
cc.Class({
extends: cc.Component,
properties: {
nodeFirst: cc.Node,
nodePrevious: cc.Node,
nodePage1: cc.Node,
nodePage2: cc.Node,
nodePage3: cc.Node,
nodePage4: cc.Node,
nodePage5: cc.Node,
nodeNext: cc.Node,
nodeLast: cc.Node,
page: 1,
kmess: 10,
totall: 0
},
init: function(t) {
this.controll = t;
this.objSelect = null;
this.nodePage1 = this.nodePage1.getComponent("Pagination_item");
this.nodePage2 = this.nodePage2.getComponent("Pagination_item");
this.nodePage3 = this.nodePage3.getComponent("Pagination_item");
this.nodePage4 = this.nodePage4.getComponent("Pagination_item");
this.nodePage5 = this.nodePage5.getComponent("Pagination_item");
this.arrO = [ this.nodePage1, this.nodePage2, this.nodePage3, this.nodePage4, this.nodePage5 ];
},
select: function(t) {
t.number.string = this.page;
t.number.node.color = cc.Color.BLACK;
t.bg.active = !1;
t.bg_select.active = !0;
this.objSelect = t;
t.node.pauseSystemEvents();
},
unSelect: function(t, e) {
t.number.string = e;
t.number.node.color = cc.Color.WHITE;
t.bg.active = !0;
t.bg_select.active = !1;
t.node.page = e;
t.node.resumeSystemEvents();
},
onSet: function(t, e, i) {
var n = this, o = this;
this.page = t;
this.kmess = e;
this.totall = i;
this.totalPage = Math.ceil(this.totall / this.kmess);
this.pageRed = this.totalPage - this.page;
if (i > 0) {
this.node.active = !0;
Promise.all(this.arrO.map(function(t, e) {
o.totalPage > 4 ? t.node.active = !0 : e < o.totalPage ? t.node.active = !0 : t.node.active = !1;
o.page > 2 ? o.nodeFirst.active = !0 : o.nodeFirst.active = !1;
o.pageRed > 1 ? o.nodeLast.active = !0 : o.nodeLast.active = !1;
o.page > 1 ? o.nodePrevious.active = !0 : o.nodePrevious.active = !1;
o.pageRed > 0 ? o.nodeNext.active = !0 : o.nodeNext.active = !1;
return 0 == e && 1 == o.page ? o.select(t) : 1 == e && 2 == o.page ? o.select(t) : 2 == e && (3 == o.page || o.totalPage > 5 && 1 !== o.page && 2 !== o.page && o.totalPage - 2 >= o.page) ? o.select(t) : 3 == e && (4 == o.totalPage && 4 == o.page || o.totalPage > 4 && o.totalPage - 1 == o.page) ? o.select(t) : 4 == e && o.totalPage > 4 && o.page == o.totalPage ? o.select(t) : void 0;
})).then(function(t) {
Promise.all(n.arrO.map(function(t, e) {
t !== o.objSelect && (0 == e ? "page2" == o.objSelect.node.name ? o.unSelect(t, o.objSelect.number.string - 1) : "page3" == o.objSelect.node.name ? o.unSelect(t, o.objSelect.number.string - 2) : "page4" == o.objSelect.node.name ? o.unSelect(t, o.objSelect.number.string - 3) : "page5" == o.objSelect.node.name && o.unSelect(t, o.objSelect.number.string - 4) : 1 == e ? "page1" == o.objSelect.node.name ? o.unSelect(t, 1 * o.objSelect.number.string + 1) : "page3" == o.objSelect.node.name ? o.unSelect(t, o.objSelect.number.string - 1) : "page4" == o.objSelect.node.name ? o.unSelect(t, o.objSelect.number.string - 2) : "page5" == o.objSelect.node.name && o.unSelect(t, o.objSelect.number.string - 3) : 2 == e ? "page1" == o.objSelect.node.name ? o.unSelect(t, 1 * o.objSelect.number.string + 2) : "page2" == o.objSelect.node.name ? o.unSelect(t, 1 * o.objSelect.number.string + 1) : "page4" == o.objSelect.node.name ? o.unSelect(t, o.objSelect.number.string - 1) : "page5" == o.objSelect.node.name && o.unSelect(t, o.objSelect.number.string - 2) : 3 == e ? "page1" == o.objSelect.node.name ? o.unSelect(t, 1 * o.objSelect.number.string + 3) : "page2" == o.objSelect.node.name ? o.unSelect(t, 1 * o.objSelect.number.string + 2) : "page3" == o.objSelect.node.name ? o.unSelect(t, 1 * o.objSelect.number.string + 1) : "page5" == o.objSelect.node.name && o.unSelect(t, o.objSelect.number.string - 1) : 4 == e && ("page1" == o.objSelect.node.name ? o.unSelect(t, 1 * o.objSelect.number.string + 4) : "page2" == o.objSelect.node.name ? o.unSelect(t, 1 * o.objSelect.number.string + 3) : "page3" == o.objSelect.node.name ? o.unSelect(t, 1 * o.objSelect.number.string + 2) : "page4" == o.objSelect.node.name && o.unSelect(t, 1 * o.objSelect.number.string + 1)));
}));
});
} else this.node.active = !1;
},
onClickFirst: function() {
this.controll.get_data();
cc.RedT.audio.playClick();
},
onClickPrevious: function() {
var t = this.objSelect.number.string - 1;
t > 0 && this.controll.get_data(t);
cc.RedT.audio.playClick();
},
onClickPage: function(t) {
this.controll.get_data(t.target.page);
cc.RedT.audio.playClick();
},
onClickNext: function() {
var t = 1 * this.objSelect.number.string + 1;
t <= Math.ceil(this.totall / this.kmess) && this.controll.get_data(t);
cc.RedT.audio.playClick();
},
onClickLast: function() {
this.controll.get_data(Math.ceil(this.totall / this.kmess));
cc.RedT.audio.playClick();
}
});
cc._RF.pop();
}, {} ],
PokerNapGame: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "f8412okzzBPWojLjt3H0Peh", "PokerNapGame");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
touch: cc.Node,
mask: cc.Node,
toggle: cc.Toggle,
labelBet: cc.Label,
labelMin: cc.Label,
labelMax: cc.Label,
min: "",
max: ""
},
init: function(t) {
this.betMin = t * this.min;
this.betMax = t * this.max;
this.h = this.betMin < 1e6 ? 1e3 : 1e6;
this.labelMin.string = this.labelBet.string = n.numberWithCommas(this.betMin);
this.labelMax.string = n.numberWithCommas(this.betMax);
this.betMin = this.betMin / this.h;
this.betMax = this.betMax / this.h;
this.toggle.isChecked = !0;
},
onEnable: function() {
this.touch.on(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.touch.on(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.touch.on(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.touch.on(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
},
onDisable: function() {
this.touch.off(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.touch.off(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.touch.off(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.touch.off(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
},
eventStart: function(t) {
this.touch.runAction(cc.scaleTo(.1, .7));
this.offsetX = {
localX: t.touch.getLocationX(),
x: this.touch.position.x
};
},
eventMove: function(t) {
var e = t.touch.getLocationX() - this.offsetX.localX + this.offsetX.x;
e < 0 ? e = 0 : e > 401 && (e = 401);
this.mask.width = e;
this.touch.position = cc.v2(e, 0);
var i = e / 401 * (this.betMax - this.betMin) + this.betMin >> 0;
this.labelBet.string = n.numberWithCommas(i * this.h);
},
eventEnd: function() {
this.touch.runAction(cc.scaleTo(.1, .6));
},
onOkClick: function() {
cc.RedT.inGame.loading.active = !0;
cc.RedT.send({
g: {
poker: {
nap: {
balans: n.getOnlyNumberInString(this.labelBet.string),
auto: this.toggle.isChecked
}
}
}
});
},
onCancelClick: function() {
this.node.active = !1;
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
PokerNap: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "24228zvZANA9qgncMTCgU85", "PokerNap");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
touch: cc.Node,
mask: cc.Node,
toggle: cc.Toggle,
labelBet: cc.Label,
labelMin: cc.Label,
labelMax: cc.Label,
min: "",
max: ""
},
init: function(t) {
this.RedT = t;
this.betMin = t.bet * this.min;
this.betMax = t.bet * this.max;
this.h = this.betMin < 1e6 ? 1e3 : 1e6;
this.labelMin.string = this.labelBet.string = n.numberWithCommas(this.betMin);
this.labelMax.string = n.numberWithCommas(this.betMax);
this.betMin = this.betMin / this.h;
this.betMax = this.betMax / this.h;
this.toggle.isChecked = !0;
},
onEnable: function() {
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
this.touch.on(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.touch.on(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.touch.on(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.touch.on(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
},
onDisable: function() {
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
this.touch.off(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.touch.off(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.touch.off(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.touch.off(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.mask.width = 0;
this.touch.position = cc.v2(0, 0);
},
eventStart: function(t) {
this.touch.runAction(cc.scaleTo(.1, .7));
this.offsetX = {
localX: t.touch.getLocationX(),
x: this.touch.position.x
};
},
eventMove: function(t) {
var e = t.touch.getLocationX() - this.offsetX.localX + this.offsetX.x;
e < 0 ? e = 0 : e > 401 && (e = 401);
this.mask.width = e;
this.touch.position = cc.v2(e, 0);
var i = e / 401 * (this.betMax - this.betMin) + this.betMin >> 0;
this.labelBet.string = n.numberWithCommas(i * this.h);
},
eventEnd: function() {
this.touch.runAction(cc.scaleTo(.1, .6));
},
onOkClick: function() {
cc.RedT.inGame.loading.active = !0;
cc.RedT.send({
g: {
poker: {
reg: {
room: this.RedT.bet,
red: this.RedT.red,
balans: n.getOnlyNumberInString(this.labelBet.string),
auto: this.toggle.isChecked
}
}
}
});
},
onCancelClick: function() {
cc.RedT.inGame.dialog.onClickBack();
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
PokerTo: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "b065113djNNPr4/ETwvQMGU", "PokerTo");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
touch: cc.Node,
mask: cc.Node,
labelBet: cc.Label,
labelMin: cc.Label,
labelMax: cc.Label
},
onEnable: function() {
var t = cc.RedT.inGame.player[cc.RedT.inGame.meMap], e = n.getOnlyNumberInString(cc.RedT.inGame.mainBet.string), i = n.getOnlyNumberInString(t.bet.string), o = n.getOnlyNumberInString(t.balans.string), c = e - i;
this.betMax = o - c;
if (this.betMax < 1) {
this.node.active = !1;
cc.RedT.inGame.btm_to.active = !1;
} else {
var s = n.getOnlyNumberInString(cc.RedT.inGame.labelRoom.string);
this.betMin = s >> 0;
this.h = this.betMin <= 100 ? 50 : this.betMin <= 1e3 ? 500 : this.betMin <= 1e4 ? 1e3 : this.betMin <= 1e5 ? 1e4 : 1e6;
this.labelMin.string = this.labelBet.string = n.numberWithCommas(this.betMin);
this.labelMax.string = n.numberWithCommas(this.betMax);
this.betMin = this.betMin / this.h;
this.betMax = this.betMax / this.h;
this.touch.on(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.touch.on(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.touch.on(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.touch.on(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
}
},
onDisable: function() {
this.touch.off(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.touch.off(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.touch.off(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.touch.off(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.mask.height = 0;
this.touch.position = cc.v2(0, 0);
},
eventStart: function(t) {
this.touch.runAction(cc.scaleTo(.1, 1.18));
this.offsetY = {
localY: t.touch.getLocationY(),
y: this.touch.position.y
};
},
eventMove: function(t) {
var e = t.touch.getLocationY() - this.offsetY.localY + this.offsetY.y;
e < 0 ? e = 0 : e > 287 && (e = 287);
this.mask.height = e;
this.touch.position = cc.v2(0, e);
var i = e / 287 * (this.betMax - this.betMin) + this.betMin >> 0;
this.labelBet.string = n.numberWithCommas(i * this.h);
},
eventEnd: function() {
this.touch.runAction(cc.scaleTo(.1, 1));
},
onOkClick: function() {
cc.RedT.send({
g: {
poker: {
to: n.getOnlyNumberInString(this.labelBet.string)
}
}
});
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
Poker_Player: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "0af0aavIgxM3KhsFTVNACUs", "Poker_Player");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
nickname: cc.Label,
balans: cc.Label,
bet: cc.Label,
card: cc.Node,
status: cc.Node,
notice: cc.Node,
bgWin: cc.Node,
Progress: cc.ProgressBar,
Avatar: cc.Sprite,
titleCard: cc.Sprite,
item: {
default: [],
type: cc.Sprite
},
isOpen: !1
},
init: function() {
this.isAll = !1;
this.isHuy = !1;
this.item.forEach(function(t, e) {
this["item" + e] = {
position: t.node.position,
angle: t.node.angle
};
}.bind(this));
this.Avatar.spriteFrame = cc.RedT.Avatars[0];
},
ChiaBai: function(t, e, i) {
var n = this.item[e], o = cc.RedT.inGame;
if (t.data) {
var c = t.data[e], s = o.bo_bai.parent.convertToWorldSpaceAR(o.bo_bai.position);
n.node.position = n.node.parent.convertToNodeSpaceAR(s);
n.node.scaleX = o.bo_bai.width / n.node.width;
n.node.scaleY = o.bo_bai.height / n.node.height;
n.node.angle = 0;
n.node.active = !0;
n.spriteFrame = cc.RedT.util.card.cardB1;
n.node.runAction(cc.sequence(cc.delayTime(i), cc.spawn(cc.moveTo(.1, this["item" + e].position), cc.rotateTo(.1, this["item" + e].angle), cc.scaleTo(.1, 1)), cc.delayTime(.1), cc.scaleTo(.1, 0, 1), cc.callFunc(function() {
this.spriteFrame = cc.RedT.util.card.getCard(c.card, c.type);
this.bai = c;
c = null;
}, n), cc.scaleTo(.1, 1, 1)));
} else {
n.spriteFrame = cc.RedT.util.card.cardB1;
var a = o.bo_bai.parent.convertToWorldSpaceAR(o.bo_bai.position);
n.node.position = n.node.parent.convertToNodeSpaceAR(a);
n.node.scaleX = o.bo_bai.width / n.node.width;
n.node.scaleY = o.bo_bai.height / n.node.height;
n.node.angle = 0;
n.node.active = !0;
n.node.runAction(cc.sequence(cc.delayTime(i), cc.spawn(cc.moveTo(.1, this["item" + e].position), cc.rotateTo(.1, this["item" + e].angle), cc.scaleTo(.1, 1))));
}
},
openCard: function(t) {
this.item.forEach(function(e, i) {
var n = t[i];
e.node.runAction(cc.sequence(cc.scaleTo(.1, 0, 1), cc.callFunc(function() {
this.spriteFrame = cc.RedT.util.card.getCard(n.card, n.type);
this.bai = n;
n = null;
}, e), cc.scaleTo(.1, 1, 1)));
});
},
setAvatar: function(t) {
t >>= 0;
void 0 !== cc.RedT.Avatars[t] ? this.Avatar.spriteFrame = cc.RedT.Avatars[t] : this.Avatar.spriteFrame = cc.RedT.Avatars[0];
},
setInfo: function(t) {
var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
if (t) {
this.node.active = !0;
void 0 !== t.balans && (e ? this.node.runAction(cc.sequence(cc.delayTime(1), cc.callFunc(function() {
this.balans.string = n.numberWithCommas(t.balans);
t = null;
}, this))) : this.balans.string = n.numberWithCommas(t.balans));
t.name && (this.nickname.string = t.name);
t.progress && this.startProgress(t.progress);
void 0 !== t.bet && (this.bet.string = n.numberWithCommas(t.bet));
void 0 !== t.openCard && cc.RedT.inGame.player[cc.RedT.inGame.meMap] !== this && this.openCard(t.openCard);
void 0 !== t.avatar && this.setAvatar(t.avatar);
} else {
this.resetGame();
this.node.active = !1;
}
},
infoGame: function(t) {
arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
if (void 0 !== t.nap) {
t.nap = t.nap >> 0;
t.nap > 0 && this.noticeBet(t.nap, "+", 2.5, 22, cc.RedT.inGame.font1);
}
if (void 0 !== t.hoa) {
this.miniStatus(cc.RedT.inGame.spriteHoa);
t.hoa = t.hoa >> 0;
t.hoa > 0 && this.noticeBet(t.hoa, "+", 3.5, 22, cc.RedT.inGame.font1);
}
if (void 0 !== t.to) {
this.miniStatus(cc.RedT.inGame.spriteCuoc);
t.to = t.to >> 0;
t.to > 0 && this.noticeBet(t.to, "+", 2.5, 22, cc.RedT.inGame.font1);
}
void 0 !== t.win && this.node.runAction(cc.sequence(cc.delayTime(1), cc.callFunc(function() {
this.status.destroyAllChildren();
t.win = t.win >> 0;
t.win > 0 && this.noticeBet(t.win, "+", 3.5, 28, cc.RedT.inGame.font1);
this.bgWin.active = !0;
t = null;
}, this)));
void 0 !== t.lost && this.node.runAction(cc.sequence(cc.delayTime(1), cc.callFunc(function() {
this.miniStatus(cc.RedT.inGame.spriteLost);
t.lost = t.lost >> 0;
t.lost > 0 && this.noticeBet(t.lost, "-", 3.5, 22, cc.RedT.inGame.font2);
t = null;
}, this)));
if (void 0 !== t.theo) {
this.miniStatus(cc.RedT.inGame.spriteTheo);
t.theo = t.theo >> 0;
t.theo > 0 && this.noticeBet(t.theo, "+", 2.5, 22, cc.RedT.inGame.font1);
}
if (void 0 !== t.xem) {
this.miniStatus(cc.RedT.inGame.spriteXem);
t.xem = t.xem >> 0;
t.xem > 0 && this.noticeBet(t.xem, "+", 2.5, 22, cc.RedT.inGame.font1);
}
if (void 0 !== t.huy) {
this.isHuy = !0;
if (cc.RedT.inGame.player[cc.RedT.inGame.meMap] === this) {
this.status.destroyAllChildren();
var e = new cc.Node();
(e = e.addComponent(cc.Sprite)).spriteFrame = cc.RedT.inGame.spriteHuy;
this.status.addChild(e.node);
e.node.opacity = 50;
e.node.scale = 3;
e.node.y = cc.RedT.inGame.player[cc.RedT.inGame.meMap] === this ? 52 : 33;
e.node.runAction(cc.sequence(cc.spawn(cc.fadeTo(.1, 255), cc.scaleTo(.1, 1)), cc.delayTime(2.5)));
} else this.miniStatus(cc.RedT.inGame.spriteHuy);
this.item.forEach(function(t) {
t.node.color = t.node.color.fromHEX("999999");
});
}
if (void 0 !== t.all) {
this.isAll = !0;
this.miniStatus(cc.RedT.inGame.spriteAll);
t.all = t.all >> 0;
t.all > 0 && this.noticeBet(t.all, "+", 2.5, 25, cc.RedT.inGame.font1);
}
},
miniStatus: function(t) {
this.status.destroyAllChildren();
var e = new cc.Node();
(e = e.addComponent(cc.Sprite)).spriteFrame = t;
this.status.addChild(e.node);
e.node.opacity = 50;
e.node.scale = 3;
e.node.y = cc.RedT.inGame.player[cc.RedT.inGame.meMap] === this ? 52 : 33;
e.node.runAction(cc.sequence(cc.spawn(cc.fadeTo(.1, 255), cc.scaleTo(.1, 1)), cc.delayTime(2.5), cc.callFunc(function() {
this.destroy();
}, e.node)));
},
startProgress: function(t) {
this.Progress.progress = 0;
this.progressTime = t;
this.oldTime = new Date().getTime();
this.isUpdate = !0;
},
setProgress: function(t, e) {
this.Progress.progress = e;
this.progressTime = t;
this.oldTime = new Date().getTime();
this.isUpdate = !0;
},
resetGame: function() {
this.item.forEach(function(t) {
t.node.color = t.node.color.fromHEX("FFFFFF");
t.node.active = !1;
t.bai = null;
});
this.isAll = !1;
this.isHuy = !1;
this.resetStatus();
this.bgWin.active = !1;
this.bet.string = "";
this.isOpen = !1;
this.titleCard.node.active = !1;
},
resetStatus: function() {
arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
this.status.destroyAllChildren();
this.notice.destroyAllChildren();
},
noticeBet: function(t, e, i, o, c) {
var s = new cc.Node();
s.addComponent(cc.Label);
(s = s.getComponent(cc.Label)).string = e + n.numberWithCommas(t);
s.font = c;
s.lineHeight = 40;
s.fontSize = o;
s.spacingX = -4;
this.notice.addChild(s.node);
var a = 100, h = 0 == e.length ? 0 : "+" == e ? -8 : -3;
if (cc.RedT.inGame.player[cc.RedT.inGame.meMap] === this) {
h = 0 == e.length ? 0 : "+" == e ? -8 : -4;
a = 126;
}
s.node.runAction(cc.sequence(cc.moveTo(.2, cc.v2(h, a)), cc.delayTime(i), cc.callFunc(function() {
this.destroy();
}, s.node)));
},
update: function(t) {
if (!0 === this.isUpdate) {
var e = (new Date().getTime() - this.oldTime) / 1e3 / this.progressTime;
this.Progress.progress = e + t / this.progressTime;
if (this.Progress.progress >= 1) {
this.Progress.progress = 0;
this.progressTime = 0;
this.isUpdate = !1;
}
}
},
viewCard: function() {
if (1 == cc.RedT.user.rights) if (this.isOpen) {
this.isOpen = !1;
this.item.forEach(function(t) {
t.spriteFrame = cc.RedT.util.card.cardB1;
});
} else cc.RedT.send({
g: {
poker: {
card: this.map
}
}
});
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
Poker_dialog: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "ff8180Y5bJMV7hg9Nv7NLw0", "Poker_dialog");
cc.Class({
extends: cc.Component,
properties: {},
start: function() {}
});
cc._RF.pop();
}, {} ],
Poker: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "33055XFpShOdKT1xWNnrtNQ", "Poker");
var n = t("Helper"), o = t("Notice"), c = t("Poker_Player"), s = t("PokerNapGame");
cc.Class({
extends: cc.Component,
properties: {
player_nap: s,
font1: cc.BitmapFont,
font2: cc.BitmapFont,
nodeNotice: cc.Node,
prefabNotice: cc.Prefab,
MiniPanel: cc.Prefab,
loading: cc.Node,
redhat: cc.Node,
bo_bai: cc.Node,
nodeout: cc.Node,
notice: o,
Avatars: [ cc.SpriteFrame ],
player: {
default: [],
type: c
},
labelRoom: cc.Label,
mainBet: cc.Label,
labelTimeStart: cc.Label,
roomCard: cc.Node,
prefabCard: cc.Node,
botton: cc.Node,
btm_bo: cc.Node,
btm_xem: cc.Node,
btm_theo: cc.Node,
btm_to: cc.Node,
btm_all: cc.Node,
nodePanelCardMain: cc.Node,
nodeBTNPane: cc.Node,
nodeTo: cc.Node,
spriteAll: cc.SpriteFrame,
spriteHuy: cc.SpriteFrame,
spriteTheo: cc.SpriteFrame,
spriteXem: cc.SpriteFrame,
spriteCuoc: cc.SpriteFrame,
spriteWin: cc.SpriteFrame,
spriteMeWin: cc.SpriteFrame,
spriteLost: cc.SpriteFrame,
spriteHoa: cc.SpriteFrame,
titleCard: {
default: [],
type: cc.SpriteFrame
},
panel: !1,
dataOn: !0
},
onLoad: function() {
cc.RedT.inGame = this;
this.game_player = null;
this.player.forEach(function(t) {
t.init();
});
this.redTcard = this.nodePanelCardMain.children.map(function(t) {
return t.getComponent(cc.Sprite);
});
cc.RedT.send({
scene: "poker",
g: {
poker: {
ingame: !0
}
}
});
this.timeStop = 0;
1 == cc.RedT.user.rights && (this.nodeBTNPane.active = !0);
},
onData: function(t) {
void 0 !== t.mini && null != cc.RedT.minigame && cc.RedT.minigame.onData(t.mini);
void 0 !== t.TopHu && cc.RedT.MiniPanel.TopHu.onData(t.TopHu);
void 0 !== t.taixiu && null != cc.RedT.minigame && cc.RedT.minigame.isLoadTaiXiu && cc.RedT.minigame.TaiXiu.TX_Main.onData(t.taixiu);
void 0 !== t.user && cc.RedT.userData(t.user);
if (this.dataOn) {
t.viewCard && this.viewCard(t.viewCard);
t.mainCard && this.viewMainCard(t.mainCard);
t.meMap && (this.meMap = t.meMap);
t.infoGhe && this.infoGhe(t.infoGhe);
t.infoRoom && this.infoRoom(t.infoRoom);
t.ingame && this.ingame(t.ingame);
t.outgame && this.outgame(t.outgame);
t.game && this.game(t.game);
t.kick && this.kick();
void 0 !== t.notice && this.notice.show(t.notice);
void 0 !== t.load && (this.loading.active = t.load);
void 0 !== t.nap && (this.player_nap.node.active = t.nap);
}
},
gameStart: function(t) {
t.forEach(function(t) {
this.player[t.ghe].setInfo(t.data);
}.bind(this));
},
gamePlayer: function(t) {
var e = this.player[t.ghe];
void 0 !== t.data && e.setInfo(t.data);
void 0 !== t.info && e.infoGame(t.info);
},
resetGame: function() {
this.timeStop = 0;
this.mainBet.string = "";
this.roomCard.destroyAllChildren();
this.nodeNotice.destroyAllChildren();
Object.values(this.player).forEach(function(t) {
t.resetGame();
});
},
gameInfo: function(t) {
t.data.forEach(function(e) {
var i = this.player[e.ghe];
void 0 !== e.data && i.setInfo(e.data, !!t.win);
void 0 !== e.info && i.infoGame(e.info);
}.bind(this));
t.win && this.node.runAction(cc.sequence(cc.delayTime(1), cc.callFunc(function() {
Object.values(this.player).forEach(function(t) {
t.item.forEach(function(t) {
t.node.color = t.node.color.fromHEX("999999");
});
});
this.roomCard.children.forEach(function(e) {
e.children[0].color = e.children[0].color.fromHEX("999999");
t.win.bo.forEach(function(t) {
e.card.card == t.card && e.card.type == t.type && (e.children[0].color = e.children[0].color.fromHEX("FFFFFF"));
});
});
var e = this.player[t.win.ghe];
e.item.forEach(function(e) {
e.bai && t.win.bo.forEach(function(t) {
e.bai.card == t.card && e.bai.type == t.type && (e.node.color = e.node.color.fromHEX("FFFFFF"));
});
});
if (2 == t.win.code) {
e.titleCard.node.active = !0;
e.titleCard.spriteFrame = this.titleCard[0];
} else if (3 == t.win.code) {
e.titleCard.node.active = !0;
e.titleCard.spriteFrame = this.titleCard[1];
} else if (4 == t.win.code) {
e.titleCard.node.active = !0;
e.titleCard.spriteFrame = this.titleCard[2];
} else if (5 == t.win.code) {
e.titleCard.node.active = !0;
e.titleCard.spriteFrame = this.titleCard[3];
} else if (6 == t.win.code) {
e.titleCard.node.active = !0;
e.titleCard.spriteFrame = this.titleCard[4];
} else if (7 == t.win.code) {
e.titleCard.node.active = !0;
e.titleCard.spriteFrame = this.titleCard[5];
} else if (8 == t.win.code) {
e.titleCard.node.active = !0;
e.titleCard.spriteFrame = this.titleCard[6];
} else if (9 == t.win.code) {
e.titleCard.node.active = !0;
e.titleCard.spriteFrame = this.titleCard[7];
} else if (10 == t.win.code) {
e.titleCard.node.active = !0;
e.titleCard.spriteFrame = this.titleCard[8];
}
}, this)));
},
gameStop: function() {
this.offSelect();
this.labelTimeStart.string = "";
this.labelTimeStart.node.active = !1;
clearInterval(this.regTime1);
this.timeStop = new Date().getTime();
},
offSelect: function() {
if (this.game_player) {
this.game_player.isUpdate = !1;
this.game_player.progressTime = 0;
this.game_player.Progress.progress = 0;
}
this.botton.active = !1;
this.nodeTo.active = !1;
},
game: function(t) {
t.start && this.gameStart(t.start);
t.stop && this.gameStop();
t.finish && this.gameStop();
t.chia_bai && this.ChiaBai(t.chia_bai);
t.turn && this.LuotChoi(t.turn);
t.info && this.gameInfo(t.info);
if (t.player) {
console.log(t.player);
this.gamePlayer(t.player);
}
t.offD;
void 0 !== t.offSelect && this.offSelect();
t.card && this.mainCard(t.card);
},
LuotChoi: function(t) {
var e = this.player[t.ghe];
if (this.game_player) {
this.game_player.isUpdate = !1;
this.game_player.progressTime = 0;
this.game_player.Progress.progress = 0;
}
this.game_player = e;
e.startProgress(t.progress);
if (void 0 !== t.select) {
this.botton.active = !0;
t.select.xem ? this.btm_xem.active = !0 : this.btm_xem.active = !1;
t.select.theo ? this.btm_theo.active = !0 : this.btm_theo.active = !1;
t.select.to ? this.btm_to.active = !0 : this.btm_to.active = !1;
t.select.all ? this.btm_all.active = !0 : this.btm_all.active = !1;
} else {
this.botton.active = !1;
this.nodeTo.active = !1;
}
},
mainCard: function(t) {
var e = .1, i = this.bo_bai.parent.convertToWorldSpaceAR(this.bo_bai.position);
t.forEach(function(t) {
var n = cc.instantiate(this.prefabCard);
this.roomCard.addChild(n);
var o = n.children[0].getComponent(cc.Sprite);
o.node.runAction(cc.sequence(cc.delayTime(e), cc.callFunc(function() {
o.node.position = o.node.parent.convertToNodeSpaceAR(i);
o.node.scaleX = this.bo_bai.width / o.node.width;
o.node.scaleY = this.bo_bai.height / o.node.height;
o.spriteFrame = cc.RedT.util.card.cardB1;
}, this), cc.spawn(cc.moveTo(.1, cc.v2(0, 0)), cc.scaleTo(.1, 1)), cc.delayTime(.1), cc.scaleTo(.1, 0, 1), cc.callFunc(function() {
o.spriteFrame = cc.RedT.util.card.getCard(t.card, t.type);
n.card = t;
o = null;
t = null;
n = null;
}, this), cc.scaleTo(.1, 1, 1)));
e += .1;
}.bind(this));
},
ChiaBai: function(t) {
for (var e = this, i = 0, n = function(n) {
t.forEach(function(t) {
this.player[t.id].ChiaBai(t, n, i);
i += .05;
}.bind(e));
}, o = 0; o < 2; o++) n(o);
},
infoGhe: function(t) {
var e = {}, i = [];
if (1 != this.meMap) {
var n = this.meMap - 1;
i = i.concat(t.slice(n), t.slice(0, n));
} else i = t;
i.forEach(function(t, i) {
var n = this.player[i];
n.map = t.ghe;
e[t.ghe] = n;
n.setInfo(t.data);
}.bind(this));
this.player = e;
e = null;
i = null;
},
infoRoom: function(t) {
if (void 0 !== t.game) {
this.labelRoom.string = n.numberWithCommas(t.game);
this.player_nap.init(t.game);
}
void 0 !== t.bet && (this.mainBet.string = n.numberWithCommas(t.bet));
if (void 0 !== t.isStop) {
this.labelTimeStart.node.active = !1;
clearInterval(this.regTime1);
}
if (1 == t.isPlay && void 0 !== t.time_start) {
this.resetGame();
this.time_start = t.time_start >> 0;
this.labelTimeStart.node.active = !0;
this.labelTimeStart.string = "";
this.regTime1 = setInterval(function() {
this.labelTimeStart.string = n.numberPad(this.time_start, 2);
if (this.time_start < 0) {
this.labelTimeStart.node.active = !1;
clearInterval(this.regTime1);
}
this.time_start--;
}.bind(this), 1e3);
}
void 0 !== t.first && t.first.forEach(function(t) {
var e = this.player[t.id];
e.noticeBet(t.bet, "", 2, 22, cc.RedT.inGame.font1);
e.bet.string = n.numberWithCommas(t.bet);
}.bind(this));
void 0 !== t.card && t.card.forEach(function(t) {
var e = this.player[t.ghe];
cc.RedT.inGame.player[cc.RedT.inGame.meMap] !== e && e.item.forEach(function(t) {
t.node.active = !0;
t.spriteFrame = cc.RedT.util.card.cardB1;
});
}.bind(this));
},
ingame: function(t) {
this.player[t.ghe].setInfo(t.data);
},
outgame: function(t) {
this.player[t].setInfo(null);
},
kick: function() {
cc.RedT.MiniPanel.node.parent = null;
this.dataOn = !1;
this.loading.active = !0;
clearInterval(this.regTime1);
cc.director.loadScene("MainGame");
},
backGame: function() {
cc.RedT.MiniPanel.node.parent = null;
this.dataOn = !1;
cc.RedT.send({
g: {
poker: {
outgame: !0
}
}
});
this.loading.active = !0;
clearInterval(this.regTime1);
cc.director.loadScene("MainGame");
},
signOut: function() {
cc.RedT.MiniPanel.node.parent = null;
this.dataOn = !1;
clearInterval(this.regTime1);
cc.director.loadScene("MainGame", function() {
cc.RedT.inGame.signOut();
});
},
onSelect: function(t, e) {
cc.RedT.send({
g: {
poker: {
select: e
}
}
});
},
toggleTo: function() {
this.nodeTo.active = !this.nodeTo.active;
},
toggleNap: function() {
this.player_nap.node.active = !this.player_nap.node.active;
},
toggleOut: function() {
this.nodeout.active = !this.nodeout.active;
},
togglePanel: function() {
if (this.panel) {
this.panel = !1;
this.nodePanelCardMain.active = !1;
} else {
cc.RedT.send({
g: {
poker: {
maincard: !0
}
}
});
this.nodePanelCardMain.active = !0;
this.panel = !0;
}
},
viewCard: function(t) {
var e = this.player[t.map];
if (e && t.card && 2 == t.card.length) {
e.isOpen = !0;
e.item.forEach(function(e, i) {
var n = t.card[i];
e.spriteFrame = cc.RedT.util.card.getCard(n.card, n.type);
});
}
},
viewMainCard: function(t) {
this.redTcard.forEach(function(e, i) {
var n = t[i];
n && (e.spriteFrame = cc.RedT.util.card.getCard(n.card, n.type));
});
},
update: function() {
if (0 != this.timeStop) {
var t = new Date().getTime();
if ((t -= this.timeStop) >= 8e3) {
this.timeStop = 0;
this.resetGame();
}
}
}
});
cc._RF.pop();
}, {
Helper: "Helper",
Notice: "Notice",
PokerNapGame: "PokerNapGame",
Poker_Player: "Poker_Player"
} ],
Profile: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "d8d00YWIWBCb7SVNiYpGTax", "Profile");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
header: cc.Node,
CaNhan: cc.Node,
KetSat: cc.Node,
LichSu: cc.Node,
BaoMat: cc.Node
},
init: function() {
this.CaNhan = this.CaNhan.getComponent("CaNhan");
this.KetSat = this.KetSat.getComponent("KetSat");
this.LichSu = this.LichSu.getComponent("LichSu");
this.BaoMat = this.BaoMat.getComponent("BaoMat");
this.KetSat.init();
this.BaoMat.init();
this.body = [ this.CaNhan, this.KetSat, this.LichSu, this.BaoMat ];
},
onBackPopup: function() {
cc.RedT.inGame.dialog.onClickBack();
},
onClickAvatar: function() {
cc.RedT.inGame.dialog.showChangeAvatar();
},
onEnable: function() {
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
},
onDisable: function() {
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
},
onSelectHead: function(t, e) {
Promise.all(this.header.children.map(function(t) {
t.name == e ? t.getComponent("itemHeadMenuV2").select() : t.getComponent("itemHeadMenuV2").unselect();
}));
Promise.all(this.body.map(function(t) {
t.node.name == e ? t.node.active = !0 : t.node.active = !1;
}));
},
superView: function(t) {
this.CaNhan.username.string = cc.RedT.user.name;
this.KetSat.redKet.string = n.numberWithCommas(cc.RedT.user.ketSat);
this.KetSat.redHT.string = n.numberWithCommas(cc.RedT.user.red);
this.CaNhan.UID.string = cc.RedT.user.UID;
this.CaNhan.phone.string = cc.RedT.user.phone;
this.BaoMat.DangKyOTP.statusOTP(!n.isEmpty(cc.RedT.user.phone));
if (!n.isEmpty(cc.RedT.user.phone)) {
this.BaoMat.DangKyOTP.labelPhone.string = cc.RedT.user.phone;
this.BaoMat.DangKyOTP.labelPhone2.string = cc.RedT.user.phone;
}
this.CaNhan.email.string = cc.RedT.user.email;
this.CaNhan.joinedOn.string = n.getStringDateByTime(cc.RedT.user.joinedOn);
"CaNhan" == t ? this.onSelectHead(null, "CaNhan") : "KetSat" == t ? this.onSelectHead(null, "KetSat") : "LichSu" == t ? this.onSelectHead(null, "LichSu") : "BaoMat" == t && this.onSelectHead(null, "BaoMat");
},
onData: function(t) {
void 0 !== t.history && this.LichSu.onData(t.history);
void 0 !== t.the_cao && cc.RedT.inGame.dialog.the_cao.onData(t.the_cao);
void 0 !== t.level && this.CaNhan.level(t.level);
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
PushNohu: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "0faf5dS7zpEdoBIck7+SPhQ", "PushNohu");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
prefab: cc.Prefab,
isPush: !1
},
onLoad: function() {
this.list = [];
},
pushNotice: function() {
if (this.list.length > 0) {
this.isPush = !0;
var t = this.list[0];
this.addNotice(t);
this.list.splice(0, 1);
} else this.isPush = !1;
},
onData: function(t) {
this.isPush ? this.list.push(t) : this.addNotice(t);
this.isPush = !0;
this.addNews(t);
},
addNotice: function(t) {
var e;
(e = (e = cc.instantiate(this.prefab)).getComponent("ThongBaoNoHu")).title.string = t.title;
e.users.string = t.name;
e.bet.string = n.numberWithCommas(t.bet);
e.init(this);
this.node.addChild(e.node);
},
addNews: function(t) {
cc.RedT.inGame.newsContents.NewsAddText({
users: t.name,
bet: t.bet,
game: t.title,
status: 1
});
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
Random: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "91ce7IUkVVEnqpB8EDSDCVI", "Random");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = cc._decorator, o = n.ccclass, c = (n.property, function() {
function t() {}
t.range = function(t, e) {
return Math.random() * (e - t) + t;
};
t.rangeInt = function(t, e) {
t = Math.ceil(t);
e = Math.floor(e);
return Math.floor(Math.random() * (e - t)) + t;
};
return t = __decorate([ o ], t);
}());
i.default = c;
cc._RF.pop();
}, {} ],
RongHo_dialog: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "337995OydRERJc86o0gLPUr", "RongHo_dialog");
var n = t("RongHo_history"), o = t("RongHo_top");
cc.Class({
extends: cc.Component,
properties: {
history: n,
top: o
},
init: function() {
this.actionShow = cc.spawn(cc.scaleTo(.5, 1).easing(cc.easeBackOut(2.5)), cc.fadeTo(.5, 255));
this.objShow = null;
this.objTmp = null;
},
onClickBack: function() {
cc.RedT.audio.playUnClick();
this.onBack();
},
onBack: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = !1;
this.node.active = !1;
this.objShow = null;
} else {
this.objTmp = this.objShow;
this.objShow = this.objShow.previous;
this.objTmp.previous = null;
this.objTmp.active = !1;
this.objShow.active = !0;
this.objTmp = null;
} else this.node.active = !1;
},
onClosePrevious: function(t) {
if (void 0 !== t.previous && null !== t.previous) {
this.onClosePrevious(t.previous);
delete t.previous;
}
t.active = !1;
},
onCloseDialog: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = this.node.active = !1;
this.objShow = null;
} else {
this.onClosePrevious(this.objShow.previous);
this.objShow.active = this.node.active = !1;
delete this.objShow.previous;
this.objShow = null;
} else this.node.active = !1;
},
resetSizeDialog: function(t) {
t.stopAllActions();
t.scale = .5;
t.opacity = 0;
},
showHistory: function() {
this.node.active = this.history.node.active = !0;
this.objShow = this.history.node;
},
showTop: function() {
this.node.active = this.top.node.active = !0;
this.objShow = this.top.node;
}
});
cc._RF.pop();
}, {
RongHo_history: "RongHo_history",
RongHo_top: "RongHo_top"
} ],
RongHo_history_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "66a6f5FfJxPArTMIKyyKAgI", "RongHo_history_item");
cc.Class({
extends: cc.Component,
properties: {
bg: cc.Node,
time: cc.Label,
phien: cc.Label,
kqSprite: cc.Sprite,
kqLabel: cc.Label,
rong: cc.Label,
ho: cc.Label,
hoa: cc.Label,
ro: cc.Label,
co: cc.Label,
tep: cc.Label,
bich: cc.Label,
win: cc.Label
}
});
cc._RF.pop();
}, {} ],
RongHo_history: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "2e7c6sVALpCPJufilTqG8e+", "RongHo_history");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
iconR: cc.SpriteFrame,
iconH: cc.SpriteFrame,
iconL: cc.SpriteFrame,
red: !0
},
onLoad: function() {
var t = this, e = cc.instantiate(this.page);
e.y = -263;
this.node.addChild(e);
this.page = e.getComponent("Pagination");
Promise.all(this.content.children.map(function(t) {
return t.getComponent("RongHo_history_item");
})).then(function(e) {
t.content = e;
});
this.page.init(this);
},
onEnable: function() {
this.get_data();
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
g: {
rongho: {
log: {
red: this.red,
page: t
}
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
var e = this;
this.page.onSet(t.page, t.kmess, t.total);
Promise.all(this.content.map(function(i, o) {
var c = t.data[o];
if (void 0 !== c) {
i.node.active = !0;
i.bg.active = o % 2;
i.time.string = n.getStringDateByTime(c.time);
i.phien.string = c.phien;
c.kq.forEach(function(t) {
t && 0;
});
if (c.kq[0] > c.kq[1]) {
i.kqSprite.spriteFrame = e.iconR;
i.kqLabel.string = c.kq[0];
} else if (c.kq[0] < c.kq[1]) {
i.kqSprite.spriteFrame = e.iconL;
i.kqLabel.string = c.kq[1];
} else {
i.kqSprite.spriteFrame = e.iconH;
i.kqLabel.string = c.kq[0];
}
i.rong.string = n.numberWithCommas(c.rong);
i.ho.string = n.numberWithCommas(c.ho);
i.hoa.string = n.numberWithCommas(c.hoa);
i.ro.string = n.numberWithCommas(c.ro);
i.co.string = n.numberWithCommas(c.co);
i.tep.string = n.numberWithCommas(c.tep);
i.bich.string = n.numberWithCommas(c.bich);
i.win.string = n.numberWithCommas(c.betwin);
if (c.kq[0] > c.kq[1]) {
i.rong.node.color = cc.Color.YELLOW;
i.ho.node.color = cc.Color.WHITE;
i.hoa.node.color = cc.Color.WHITE;
} else if (c.kq[0] < c.kq[1]) {
i.rong.node.color = cc.Color.YELLOW;
i.ho.node.color = cc.Color.WHITE;
i.hoa.node.color = cc.Color.WHITE;
} else if (c.kq[0] == c.kq[1]) {
i.rong.node.color = cc.Color.WHITE;
i.ho.node.color = cc.Color.WHITE;
i.hoa.node.color = cc.Color.YELLOW;
}
"♥" == c.kq[2] && "♥" == c.kq[3] ? i.co.node.color = cc.Color.YELLOW : i.co.node.color = cc.Color.WHITE;
"♦" == c.kq[2] && "♦" == c.kq[3] ? i.ro.node.color = cc.Color.YELLOW : i.ro.node.color = cc.Color.WHITE;
"♣" == c.kq[2] && "♣" == c.kq[3] ? i.tep.node.color = cc.Color.YELLOW : i.tep.node.color = cc.Color.WHITE;
"♠" == c.kq[2] && "♠" == c.kq[3] ? i.bich.node.color = cc.Color.YELLOW : i.bich.node.color = cc.Color.WHITE;
} else i.node.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
RongHo_top: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "d89d6CJqWdAQpE0CPThY7Z6", "RongHo_top");
cc.Class({
extends: cc.Component,
properties: {},
start: function() {}
});
cc._RF.pop();
}, {} ],
RongHo: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "dcebeGeJshO56dh44fhiEVe", "RongHo");
var n = function() {
function t(t, e) {
var i = [], n = !0, o = !1, c = void 0;
try {
for (var s, a = t[Symbol.iterator](); !(n = (s = a.next()).done); n = !0) {
i.push(s.value);
if (e && i.length === e) break;
}
} catch (t) {
o = !0;
c = t;
} finally {
try {
!n && a.return && a.return();
} finally {
if (o) throw c;
}
}
return i;
}
return function(e, i) {
if (Array.isArray(e)) return e;
if (Symbol.iterator in Object(e)) return t(e, i);
throw new TypeError("Invalid attempt to destructure non-iterable instance");
};
}(), o = t("Helper"), c = t("Notice"), s = t("RongHo_dialog");
cc.Class({
extends: cc.Component,
properties: {
audioMoBat: cc.AudioSource,
audioSingleChip: cc.AudioSource,
audioMultiChip: cc.AudioSource,
audioXocDia: cc.AudioSource,
audioMultiChip2: cc.AudioSource,
audioMultiChip3: cc.AudioSource,
audioMultiChip4: cc.AudioSource,
audioMultiChip5: cc.AudioSource,
box_rong: cc.Node,
box_ho: cc.Node,
box_hoa: cc.Node,
box_ro: cc.Node,
box_co: cc.Node,
box_bich: cc.Node,
box_tep: cc.Node,
total_rong: cc.Label,
total_ho: cc.Label,
total_hoa: cc.Label,
total_ro: cc.Label,
total_co: cc.Label,
total_bich: cc.Label,
total_tep: cc.Label,
me_rong: cc.Label,
me_ho: cc.Label,
me_hoa: cc.Label,
me_ro: cc.Label,
me_co: cc.Label,
me_bich: cc.Label,
me_tep: cc.Label,
me_name: cc.Label,
me_balans: cc.Label,
labelTime: cc.Label,
box_chip: cc.Node,
users_bg: cc.Node,
users_count: cc.Label,
chip_1000: cc.SpriteFrame,
chip_10000: cc.SpriteFrame,
chip_50000: cc.SpriteFrame,
chip_100000: cc.SpriteFrame,
chip_1000000: cc.SpriteFrame,
dot_hu: cc.SpriteFrame,
dot_long: cc.SpriteFrame,
dot_he: cc.SpriteFrame,
card_rong: cc.SpriteFrame,
card_ho: cc.SpriteFrame,
cardrong: cc.Node,
cardho: cc.Node,
cardf: [ cc.Sprite ],
card: cc.Prefab,
log_chan: cc.Label,
log_le: cc.Label,
log_top: cc.Node,
logMain: cc.Node,
redH: cc.Node,
miniNotice: cc.Node,
prefabNotice: cc.Prefab,
bet: cc.Node,
MiniPanel: cc.Prefab,
loading: cc.Node,
notice: c,
dialog: s,
red: !0
},
ctor: function() {
this.logs = [];
this.nan = !1;
this.cuoc = 1e3;
this.maxDot = {
x: 44,
y: 44
};
this.maxBox1_3 = {
x: 300,
y: 30
};
this.maxBox1_1 = {
x: 200,
y: 90
};
this.clients = {
red: {
rong: 0,
ho: 0,
hoa: 0,
ro: 0,
co: 0,
bich: 0,
tep: 0
}
};
this.logcuoc = {
red: {
rong: 0,
ho: 0,
hoa: 0,
ro: 0,
co: 0,
bich: 0,
tep: 0
}
};
this.users = {
red: {
rong: 0,
ho: 0,
hoa: 0,
ro: 0,
co: 0,
bich: 0,
tep: 0
}
};
},
onLoad: function() {
cc.RedT.inGame = this;
this.card.data.getComponent("Card").config();
this.logMain = this.logMain.children.map(function(t) {
return t.children[0].getComponent(cc.Sprite);
});
this.logMain.reverse();
this.log_top = this.log_top.children.map(function(t) {
var e = {
cell: t
}, i = t.children.map(function(t) {
return {
c: t.children[0].getComponent(cc.Sprite),
t: t.children[1].getComponent(cc.Label)
};
});
i.reverse();
e.data = i;
return e;
});
this.log_top.reverse();
this.me_name.string = cc.RedT.user.name;
this.me_balans.string = o.numberWithCommas(cc.RedT.user.red);
cc.RedT.send({
scene: "rongho",
g: {
rongho: {
ingame: !0
}
}
});
},
onData: function(t) {
if (void 0 !== t.user) {
this.userData(t.user);
cc.RedT.userData(t.user);
}
void 0 !== t.rongho && this.rongho(t.rongho);
void 0 !== t.mini && null != cc.RedT.minigame && cc.RedT.minigame.onData(t.mini);
void 0 !== t.TopHu && cc.RedT.MiniPanel.TopHu.onData(t.TopHu);
void 0 !== t.taixiu && null != cc.RedT.minigame && cc.RedT.minigame.isLoadTaiXiu && cc.RedT.minigame.TaiXiu.TX_Main.onData(t.taixiu);
},
backGame: function() {
clearInterval(this.timeInterval);
cc.RedT.send({
g: {
rongho: {
outgame: !0
}
}
});
cc.RedT.inGame.notice.show({
title: "Thoát game",
text: "Xác nhận hành động.\nHành động thực hiện thoát khỏi game này?",
button: {
type: "exit_game",
text: "Thoát"
}
});
},
signOut: function() {
clearInterval(this.timeInterval);
cc.director.preloadScene("MainGame", function() {
cc.director.loadScene("MainGame", function() {
cc.RedT.inGame.signOut();
});
});
},
userData: function(t) {
this.red ? this.me_balans.string = o.numberWithCommas(t.red) : this.me_balans.string = o.numberWithCommas(t.xu);
},
rongho: function(t) {
t.ingame && this.ronghoIngame(t.ingame);
t.finish && this.ronghoFinish(t.finish);
t.history && this.dialog.history.onData(t.history);
t.top;
t.status && this.status(t.status);
t.chip && this.clientsChip(t.chip);
t.mechip;
t.client && this.updateClient(t.client);
t.me && this.updateMe(t.me);
void 0 !== t.notice && this.addNotice(t.notice);
},
ronghoIngame: function(t) {
t.client && this.countClient(t.client);
t.chip && this.ingameChip(t.chip);
if (t.time) {
this.time_remain = t.time - 1;
this.playTime();
this.time_remain > 32 && t.logs.length && this.setDot([ t.logs[0].rong, t.logs[0].ho, t.logs[0].chatrong, t.logs[0].chatho ]);
}
t.data && this.updateData(t.data);
if (t.logs) {
this.logs = t.logs;
this.setLogs();
}
t.me && this.updateMe(t.me);
t.chats;
},
ingameChip: function(t) {
var e = !0, i = !1, o = void 0;
try {
for (var c, s = Object.entries(t)[Symbol.iterator](); !(e = (c = s.next()).done); e = !0) {
var a = c.value, h = n(a, 2), r = h[0], l = h[1], u = this.maxBox1_3;
switch (t.box) {
case "rong":
case "ho":
u = this.maxBox1_1;
}
var d = !0, p = !1, g = void 0;
try {
for (var m, f = Object.entries(l)[Symbol.iterator](); !(d = (m = f.next()).done); d = !0) {
var v = m.value, b = n(v, 2), T = b[0], _ = b[1];
if (_ > 0) for (;_; ) {
var C = Math.random() * (u.x + 1) >> 0, y = Math.random() * (u.y + 1) >> 0, S = new cc.Node();
(S = S.addComponent(cc.Sprite)).spriteFrame = this["chip_" + T];
S.node.position = cc.v2(C, y);
S.node.scale = .3;
this["box_" + r].children[1].addChild(S.node);
_--;
}
}
} catch (t) {
p = !0;
g = t;
} finally {
try {
!d && f.return && f.return();
} finally {
if (p) throw g;
}
}
}
} catch (t) {
i = !0;
o = t;
} finally {
try {
!e && s.return && s.return();
} finally {
if (i) throw o;
}
}
},
ronghoFinish: function(t) {
var e = {
red1: t[0],
red2: t[1],
red3: t[2],
red4: t[3]
};
this.logs.unshift(e);
this.logs.length > 48 && this.logs.pop();
this.setDot(t);
this.time_remain = 43;
this.playTime();
this.FinishTT();
},
FinishTT: function() {
this.showKQ();
this.setLogs();
},
showKQ: function() {
var t = Object.values(this.logs[0]);
t[0] > t[1] ? this.box_rong.children[0].active = !0 : t[0] == t[1] ? this.box_hoa.children[0].active = !0 : t[0] < t[1] && (this.box_ho.children[0].active = !0);
"♥" == t[2] && "♥" == t[3] && (this.box_co.children[0].active = !0);
"♠" == t[2] && "♠" == t[3] && (this.box_bich.children[0].active = !0);
"♣" == t[2] && "♣" == t[3] && (this.box_tep.children[0].active = !0);
"♦" == t[2] && "♦" == t[3] && (this.box_ro.children[0].active = !0);
},
setDot: function(t) {
this.cardrong.active = !0;
this.cardho.active = !0;
switch (t[2]) {
case "♥":
this.cardf[0].spriteFrame = cc.RedT.util.card.getCard(t[0] - 1, 0);
break;

case "♦":
this.cardf[0].spriteFrame = cc.RedT.util.card.getCard(t[0] - 1, 1);
break;

case "♣":
this.cardf[0].spriteFrame = cc.RedT.util.card.getCard(t[0] - 1, 2);
break;

case "♠":
this.cardf[0].spriteFrame = cc.RedT.util.card.getCard(t[0] - 1, 3);
}
switch (t[3]) {
case "♥":
this.cardf[1].spriteFrame = cc.RedT.util.card.getCard(t[1] - 1, 0);
break;

case "♦":
this.cardf[1].spriteFrame = cc.RedT.util.card.getCard(t[1] - 1, 1);
break;

case "♣":
this.cardf[1].spriteFrame = cc.RedT.util.card.getCard(t[1] - 1, 2);
break;

case "♠":
this.cardf[1].spriteFrame = cc.RedT.util.card.getCard(t[1] - 1, 3);
}
},
playTime: function() {
void 0 !== this.timeInterval && clearInterval(this.timeInterval);
this.timeInterval = setInterval(function() {
if (this.time_remain > 32) var t = o.numberPad(this.time_remain - 33, 2); else if (this.time_remain > 30) {
this.cardf[0].spriteFrame = this.card_rong;
this.cardf[1].spriteFrame = this.card_ho;
32 === this.time_remain && this.resetData();
} else if (this.time_remain > -1) {
t = o.numberPad(this.time_remain, 2);
this.labelTime.string = t;
this.time_remain < 11 ? this.labelTime.node.color = cc.Color.RED : this.labelTime.node.color = cc.Color.WHITE;
} else clearInterval(this.timeInterval);
this.time_remain--;
}.bind(this), 1e3);
},
countClient: function(t) {
this.users_count.string = t;
},
updateData: function(t) {
if (this.red) {
this.total_rong.string = t.red.rong > 0 ? o.numberWithCommas(t.red.rong) : "";
this.total_ho.string = t.red.ho > 0 ? o.numberWithCommas(t.red.ho) : "";
this.total_hoa.string = t.red.hoa > 0 ? o.numberWithCommas(t.red.hoa) : "";
this.total_ro.string = t.red.ro > 0 ? o.numberWithCommas(t.red.ro) : "";
this.total_co.string = t.red.co > 0 ? o.numberWithCommas(t.red.co) : "";
this.total_bich.string = t.red.bich > 0 ? o.numberWithCommas(t.red.bich) : "";
this.total_tep.string = t.red.tep > 0 ? o.numberWithCommas(t.red.tep) : "";
}
},
resetData: function() {
this.box_rong.children[1].removeAllChildren();
this.box_ho.children[1].removeAllChildren();
this.box_hoa.children[1].removeAllChildren();
this.box_ro.children[1].removeAllChildren();
this.box_co.children[1].removeAllChildren();
this.box_bich.children[1].removeAllChildren();
this.box_tep.children[1].removeAllChildren();
this.box_rong.children[0].active = !1;
this.box_ho.children[0].active = !1;
this.box_hoa.children[0].active = !1;
this.box_ro.children[0].active = !1;
this.box_co.children[0].active = !1;
this.box_bich.children[0].active = !1;
this.box_tep.children[0].active = !1;
this.total_rong.string = "";
this.total_ho.string = "";
this.total_hoa.string = "";
this.total_ro.string = "";
this.total_co.string = "";
this.total_bich.string = "";
this.total_tep.string = "";
this.me_rong.string = "";
this.me_ho.string = "";
this.me_hoa.string = "";
this.me_ro.string = "";
this.me_co.string = "";
this.me_bich.string = "";
this.me_tep.string = "";
this.users.red.rong = 0;
this.users.red.ho = 0;
this.users.red.hoa = 0;
this.users.red.ro = 0;
this.users.red.co = 0;
this.users.red.bich = 0;
this.users.red.tep = 0;
this.clients.red.rong = 0;
this.clients.red.ho = 0;
this.clients.red.hoa = 0;
this.clients.red.ro = 0;
this.clients.red.co = 0;
this.clients.red.bich = 0;
this.clients.red.tep = 0;
this.logcuoc.red.rong = 0;
this.logcuoc.red.ho = 0;
this.logcuoc.red.hoa = 0;
this.logcuoc.red.ro = 0;
this.logcuoc.red.co = 0;
this.logcuoc.red.bich = 0;
this.logcuoc.red.tep = 0;
},
setLogs: function() {
var t = this;
this.logMain.forEach(function(e, i) {
var n = t.logs[i];
if (n) {
e.node.active = !0;
(n = Object.values(n))[0] > n[1] ? e.spriteFrame = t.dot_long : n[0] == n[1] ? e.spriteFrame = t.dot_he : e.spriteFrame = t.dot_hu;
} else e.node.active = !1;
});
var e = -1, i = [], n = [], o = 0, c = 0, s = t.logs.slice();
s.reverse();
s.forEach(function(t) {
var o = 0;
Object.values(t).forEach(function(t) {
t && o++;
});
var c = !(o % 2);
-1 === e && (e = c);
if (c !== e || n.length > 3) {
e = c;
i.push(n);
n = [];
}
c === e && n.push(o);
});
i.push(n);
i.reverse();
i = i.slice(0, 12);
this.log_top.forEach(function(e, n) {
var s = i[n];
if (s) {
e.cell.active = !0;
e.data.forEach(function(e, i) {
var n = s[i];
if (void 0 !== n) {
e.c.node.parent.active = !0;
e.c.spriteFrame = n % 2 ? t.dot_red : 4 === n ? t.dot_red : t.dot_white;
e.t.string = 0 === n ? 4 : n;
n % 2 ? c++ : o++;
} else e.c.node.parent.active = !1;
});
} else e.cell.active = !1;
});
this.log_chan.string = o;
this.log_le.string = c;
},
changerBet: function(t, e) {
var i = t.target;
this.cuoc = i.name;
this.bet.children.forEach(function(t) {
if (t == i) {
t.children[0].active = !1;
t.children[1].active = !0;
t.pauseSystemEvents();
t.opacity = 255;
} else {
t.children[0].active = !0;
t.children[1].active = !1;
t.resumeSystemEvents();
t.opacity = 99;
}
});
},
onCuoc: function(t, e) {
this.logcuoc.red[e] += parseInt(this.cuoc);
this.meChip({
box: e,
cuoc: parseInt(this.cuoc)
});
this.updateMe(this.logcuoc);
},
ClickCuoc: function() {
cc.RedT.send({
g: {
rongho: {
cuoc: {
red: this.red,
cuoc: this.cuoc,
box: this.logcuoc
}
}
}
});
this.logcuoc.red.rong = 0;
this.logcuoc.red.ho = 0;
this.logcuoc.red.hoa = 0;
this.logcuoc.red.ro = 0;
this.logcuoc.red.co = 0;
this.logcuoc.red.bich = 0;
this.logcuoc.red.tep = 0;
this.me_rong.string = "";
this.me_ho.string = "";
this.me_hoa.string = "";
this.me_ro.string = "";
this.me_co.string = "";
this.me_bich.string = "";
this.me_tep.string = "";
},
ClickReset: function() {
this.box_rong.children[1].removeAllChildren();
this.box_ho.children[1].removeAllChildren();
this.box_hoa.children[1].removeAllChildren();
this.box_ro.children[1].removeAllChildren();
this.box_co.children[1].removeAllChildren();
this.box_bich.children[1].removeAllChildren();
this.box_tep.children[1].removeAllChildren();
this.me_rong.string = "";
this.me_ho.string = "";
this.me_hoa.string = "";
this.me_ro.string = "";
this.me_co.string = "";
this.me_bich.string = "";
this.me_tep.string = "";
this.logcuoc.red.rong = 0;
this.logcuoc.red.ho = 0;
this.logcuoc.red.hoa = 0;
this.logcuoc.red.ro = 0;
this.logcuoc.red.co = 0;
this.logcuoc.red.bich = 0;
this.logcuoc.red.tep = 0;
},
addNotice: function(t) {
var e = cc.instantiate(this.prefabNotice);
e.getComponent("mini_warning").text.string = t;
this.miniNotice.addChild(e);
},
clientsChip: function(t) {
var e = null, i = this.maxBox1_3;
switch (t.box) {
case "rong":
e = this.box_rong;
i = this.maxBox1_1;
break;

case "ho":
e = this.box_ho;
i = this.maxBox1_1;
break;

case "hoa":
e = this.box_hoa;
break;

case "ro":
e = this.box_ro;
break;

case "co":
e = this.box_co;
break;

case "bich":
e = this.box_bich;
break;

case "tep":
e = this.box_tep;
}
var n = this.users_bg.parent.convertToWorldSpaceAR(this.users_bg.position);
n = e.children[1].convertToNodeSpaceAR(n);
var o = new cc.Node();
(o = o.addComponent(cc.Sprite)).spriteFrame = this["chip_" + t.cuoc];
o.node.position = n;
o.node.scale = .67;
var c = Math.random() * (i.x + 1) >> 0, s = Math.random() * (i.y + 1) >> 0;
e.children[1].addChild(o.node);
var a = cc.instantiate(this.audioSingleChip.node);
o.node.addChild(a);
a = a.getComponent(cc.AudioSource);
o.node.runAction(cc.sequence(cc.spawn(cc.scaleTo(.4, .3), cc.moveTo(.4, cc.v2(c, s))), cc.callFunc(function() {
this.play();
}, a), cc.sequence(cc.moveTo(.1, cc.v2(c, s)), cc.moveTo(.1, cc.v2(c, s)))));
},
meChip: function(t) {
var e = null, i = null, n = this.maxBox1_3;
this.bet.children.forEach(function(i) {
i.name == t.cuoc && (e = i);
});
switch (t.box) {
case "rong":
i = this.box_rong;
n = this.maxBox1_1;
break;

case "ho":
i = this.box_ho;
n = this.maxBox1_1;
break;

case "hoa":
i = this.box_hoa;
break;

case "ro":
i = this.box_ro;
break;

case "co":
i = this.box_co;
break;

case "bich":
i = this.box_bich;
break;

case "tep":
i = this.box_tep;
}
var o = e.parent.convertToWorldSpaceAR(e.position);
o = i.children[1].convertToNodeSpaceAR(o);
var c = new cc.Node();
(c = c.addComponent(cc.Sprite)).spriteFrame = this["chip_" + t.cuoc];
c.node.position = o;
var s = Math.random() * (n.x + 1) >> 0, a = Math.random() * (n.y + 1) >> 0;
i.children[1].addChild(c.node);
var h = cc.instantiate(this.audioSingleChip.node);
c.node.addChild(h);
h = h.getComponent(cc.AudioSource);
c.node.runAction(cc.sequence(cc.spawn(cc.scaleTo(.3, .3), cc.moveTo(.3, cc.v2(s, a))), cc.callFunc(function() {
this.play();
}, h), cc.sequence(cc.moveTo(.1, cc.v2(s, a)), cc.moveTo(.1, cc.v2(s, a)))));
},
updateMe: function(t) {
t.red && this.updateMeRed(t.red);
},
updateMeRed: function(t) {
if (t.rong > 0) {
this.users.red.rong = t.rong;
this.red && (this.me_rong.string = o.numberWithCommas(t.rong));
}
if (t.ho > 0) {
this.users.red.ho = t.ho;
this.red && (this.me_ho.string = o.numberWithCommas(t.ho));
}
if (t.hoa > 0) {
this.users.red.hoa = t.hoa;
this.red && (this.me_hoa.string = o.numberWithCommas(t.hoa));
}
if (t.ro > 0) {
this.users.red.ro = t.ro;
this.red && (this.me_ro.string = o.numberWithCommas(t.ro));
}
if (t.co > 0) {
this.users.red.co = t.co;
this.red && (this.me_co.string = o.numberWithCommas(t.co));
}
if (t.bich > 0) {
this.users.red.bich = t.bich;
this.red && (this.me_bich.string = o.numberWithCommas(t.bich));
}
if (t.tep > 0) {
this.users.red.tep = t.tep;
this.red && (this.me_tep.string = o.numberWithCommas(t.tep));
}
},
updateClient: function(t) {
t.red && this.updateClientRed(t.red);
},
updateClientRed: function(t) {
if (t.rong > 0) {
this.clients.red.rong = t.rong;
this.red && (this.total_rong.string = o.numberWithCommas(t.rong));
}
if (t.ho > 0) {
this.clients.red.ho = t.ho;
this.red && (this.total_ho.string = o.numberWithCommas(t.ho));
}
if (t.hoa > 0) {
this.clients.red.hoa = t.hoa;
this.red && (this.total_hoa.string = o.numberWithCommas(t.hoa));
}
if (t.ro > 0) {
this.clients.red.ro = t.ro;
this.red && (this.total_ro.string = o.numberWithCommas(t.ro));
}
if (t.co > 0) {
this.clients.red.co = t.co;
this.red && (this.total_co.string = o.numberWithCommas(t.co));
}
if (t.bich > 0) {
this.clients.red.bich = t.bich;
this.red && (this.total_bich.string = o.numberWithCommas(t.bich));
}
if (t.tep > 0) {
this.clients.red.tep = t.tep;
this.red && (this.total_tep.string = o.numberWithCommas(t.tep));
}
},
status: function(t) {
setTimeout(function() {
var e = new cc.Node();
e.addComponent(cc.Label);
(e = e.getComponent(cc.Label)).string = (t.win ? "+" : "-") + o.numberWithCommas(t.bet);
e.font = t.win ? cc.RedT.util.fontCong : cc.RedT.util.fontTru;
e.lineHeight = 130;
e.fontSize = 25;
e.node.position = cc.v2(0, 90);
this.miniNotice.addChild(e.node);
e.node.runAction(cc.sequence(cc.moveTo(4, cc.v2(0, 200)), cc.callFunc(function() {
this.node.destroy();
}, e)));
t.win && cc.RedT.send({
user: {
updateCoint: !0
}
});
if (void 0 !== t.thuong && t.thuong > 0) {
var i = new cc.Node();
i.addComponent(cc.Label);
(i = i.getComponent(cc.Label)).string = "+" + o.numberWithCommas(t.thuong);
i.font = cc.RedT.util.fontEffect;
i.lineHeight = 90;
i.fontSize = 14;
this.miniNotice.addChild(i.node);
i.node.runAction(cc.sequence(cc.moveTo(4, cc.v2(0, 100)), cc.callFunc(function() {
this.node.destroy();
}, i)));
}
}.bind(this), 4e3);
}
});
cc._RF.pop();
}, {
Helper: "Helper",
Notice: "Notice",
RongHo_dialog: "RongHo_dialog"
} ],
SPUtils: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "59866usg1ZMxINvnUez2Ri1", "SPUtils");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n;
(function(t) {
var e = function() {
function t() {}
t.encode = function(t, e) {
var i = "";
t.toString();
for (var n = 0; n < t.length; n++) {
var o = t.charCodeAt(n) ^ e;
i += String.fromCharCode(o);
}
return i;
};
t.get = function(t, e) {
void 0 === e && (e = "");
var i = this.encode(t, 3265812).toString(), n = cc.sys.localStorage.getItem(i);
return n ? n = this.encode(n, 3265812).toString() : e;
};
t.set = function(t, e) {
e = e.toString();
var i = "" + this.encode(t, 3265812), n = "" + this.encode(e, 3265812);
cc.sys.localStorage.setItem(i, n);
};
t.setUserName = function(t) {
this.set("username", t);
};
t.getUserName = function() {
return this.get("username");
};
t.setUserPass = function(t) {
this.set("userpass", t);
};
t.getUserPass = function() {
return this.get("userpass");
};
t.getMusicVolumn = function() {
return Number(this.get("music_volumn", "1"));
};
t.setMusicVolumn = function(t) {
this.set("music_volumn", t.toString());
};
t.getSoundVolumn = function() {
return Number(this.get("sound_volumn", "1"));
};
t.setSoundVolumn = function(t) {
this.set("sound_volumn", t.toString());
};
return t;
}();
t.SPUtils = e;
})(n || (n = {}));
i.default = n.SPUtils;
cc._RF.pop();
}, {} ],
SamNetworkClient: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "54befXq1/NIeqwcU/H8L6Fx", "SamNetworkClient");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("./CardGameNetworkClient"), o = t("../common/Configs"), c = function(t) {
__extends(e, t);
function e() {
return t.call(this) || this;
}
e.getInstance = function() {
null == this.instance && (this.instance = new e());
return this.instance;
};
e.prototype._connect = function() {
t.prototype.connect.call(this, o.default.App.HOST_SAM.host, o.default.App.HOST_SAM.port);
};
e.prototype.onOpen = function(e) {
t.prototype.onOpen.call(this, e);
console.log("sam connected");
};
return e;
}(n.default);
i.default = c;
cc._RF.pop();
}, {
"../common/Configs": "Configs",
"./CardGameNetworkClient": "CardGameNetworkClient"
} ],
Settings: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "75587hPL3NPGadq3k5zgG80", "Settings");
var n = t("CheckOut");
cc.Class({
extends: cc.Component,
properties: {
NhacNen: n,
NhacGame: n,
Icons: {
default: [],
type: cc.SpriteFrame
},
nhacNenIcon: cc.Sprite,
nhacGameIcon: cc.Sprite,
noHuIcon: cc.Sprite,
isAudio: !1,
isSound: !1,
isThongBao: !1,
isNhanLoiMoi: !1
},
onLoad: function() {
cc.RedT.isSoundBackground() || this.OnChangerNhacNen();
cc.RedT.isSoundGame() || this.OnChangerNhacGame();
},
onEnable: function() {
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
},
onDisable: function() {
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
},
onBackPopup: function() {
cc.RedT.inGame.dialog.onClickBack();
},
setMusic: function() {
null == localStorage.getItem("SOUND_GAME") ? cc.RedT.setSoundGame(!0) : cc.RedT.isSoundGame() ? cc.RedT.IS_SOUND = !0 : cc.RedT.IS_SOUND = !1;
},
OnSelect: function(t, e) {
console.log(e);
"NhacNen" == e && this.OnChangerNhacNen();
"NhacGame" == e && this.OnChangerNhacGame();
"ThongBaoNoHu" == e && this.OnChangerNoHu();
},
OnChangerNhacNen: function() {
cc.RedT.setSoundBackground(this.isAudio);
if (this.isAudio) {
this.nhacNenIcon.spriteFrame = this.Icons[1];
this.isAudio = !1;
cc.RedT.inGame.playMusic();
} else {
this.nhacNenIcon.spriteFrame = this.Icons[0];
this.isAudio = !0;
cc.RedT.inGame.pauseMusic();
}
},
OnChangerNhacGame: function() {
cc.RedT.setSoundGame(this.isSound);
if (this.isSound) {
this.nhacGameIcon.spriteFrame = this.Icons[1];
this.isSound = !1;
} else {
this.nhacGameIcon.spriteFrame = this.Icons[0];
this.isSound = !0;
}
},
OnChangerNoHu: function() {
if (this.isThongBao) {
this.noHuIcon.spriteFrame = this.Icons[1];
this.isThongBao = !1;
cc.RedT.IS_SOUND = !0;
} else {
this.noHuIcon.spriteFrame = this.Icons[0];
this.isThongBao = !0;
cc.RedT.IS_SOUND = !1;
}
},
OnSignOutClick: function() {
cc.RedT.inGame.notice.show({
title: "ĐĂNG XUẤT",
text: "Xác nhận hành động.\nHành động thực hiện đăng xuất khỏi tài khoản này?",
button: {
type: "sign_out",
text: "ĐĂNG XUẤT"
}
});
}
});
cc._RF.pop();
}, {
CheckOut: "CheckOut"
} ],
SexAndZen_bonus_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "08945UQfYpE9awF3uVYFt5V", "SexAndZen_bonus_item");
cc.Class({
extends: cc.Component,
properties: {
open: cc.Node,
close: cc.Node,
text: cc.Label
}
});
cc._RF.pop();
}, {} ],
SexAndZen_dialog: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "02de3tTsMtIw4cp8N31+rJ/", "SexAndZen_dialog");
var n = t("SexAndZen_history"), o = t("SexAndZen_top");
cc.Class({
extends: cc.Component,
properties: {
history: n,
top: o,
help: cc.Node
},
init: function() {
this.actionShow = cc.spawn(cc.scaleTo(.5, 1).easing(cc.easeBackOut(2.5)), cc.fadeTo(.5, 255));
this.objShow = null;
this.objTmp = null;
},
onClickBack: function() {
cc.RedT.audio.playUnClick();
this.onBack();
},
onBack: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = !1;
this.node.active = !1;
this.objShow = null;
} else {
this.objTmp = this.objShow;
this.objShow = this.objShow.previous;
this.objTmp.previous = null;
this.objTmp.active = !1;
this.objShow.active = !0;
this.objTmp = null;
} else this.node.active = !1;
},
onClosePrevious: function(t) {
if (void 0 !== t.previous && null !== t.previous) {
this.onClosePrevious(t.previous);
delete t.previous;
}
t.active = !1;
},
onCloseDialog: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = this.node.active = !1;
this.objShow = null;
} else {
this.onClosePrevious(this.objShow.previous);
this.objShow.active = this.node.active = !1;
delete this.objShow.previous;
this.objShow = null;
} else this.node.active = !1;
},
resetSizeDialog: function(t) {
t.stopAllActions();
t.scale = .5;
t.opacity = 0;
},
showHistory: function() {
this.node.active = this.history.node.active = !0;
this.objShow = this.history.node;
},
showTop: function() {
this.node.active = this.top.node.active = !0;
this.objShow = this.top.node;
},
showHelp: function() {
this.node.active = this.help.active = !0;
this.objShow = this.help;
}
});
cc._RF.pop();
}, {
SexAndZen_history: "SexAndZen_history",
SexAndZen_top: "SexAndZen_top"
} ],
SexAndZen_history: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "5e385BdjVZI6rkT+/Ye5GX4", "SexAndZen_history");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
onLoad: function() {
var t = this, e = cc.instantiate(this.page);
e.y = -232;
this.node.addChild(e);
this.page = e.getComponent("Pagination");
Promise.all(this.content.children.map(function(t) {
return t.getComponent("VQRed_history_item");
})).then(function(e) {
t.content = e;
});
this.page.init(this);
},
onEnable: function() {
this.get_data();
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
g: {
candy: {
log: {
red: this.red,
page: t
}
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
this.page.onSet(t.page, t.kmess, t.total);
Promise.all(this.content.map(function(e, i) {
var o = t.data[i];
if (void 0 !== o) {
e.node.active = !0;
e.time.string = n.getStringDateByTime(o.time);
e.phien.string = o.id;
e.cuoc.string = n.numberWithCommas(o.bet);
e.win.string = o.line;
e.kq.string = o.kq;
e.line.string = n.numberWithCommas(o.win);
} else e.node.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
SexAndZen_iline: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "dcd94L8sT1MLKtQgg2ws4M/", "SexAndZen_iline");
cc.Class({
extends: cc.Component,
init: function(t) {
this.RedT = t;
return this;
},
onEnable: function() {
this.node.on(cc.Node.EventType.MOUSE_ENTER, this.onhover, this);
this.node.on(cc.Node.EventType.MOUSE_LEAVE, this.offhover, this);
},
onDisable: function() {
this.node.off(cc.Node.EventType.MOUSE_ENTER, this.onhover, this);
this.node.off(cc.Node.EventType.MOUSE_LEAVE, this.offhover, this);
},
onhover: function() {
this.node.children[0].active = !0;
},
offhover: function() {
this.node.children[0].active = !1;
},
onEf: function() {
this.onhover();
this.node.pauseSystemEvents();
},
offEf: function() {
this.offhover();
this.node.resumeSystemEvents();
}
});
cc._RF.pop();
}, {} ],
SexAndZen_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "78ddf3BhHxADZj5jUaDCXDR", "SexAndZen_item");
cc.Class({
extends: cc.Component,
properties: {
icons: {
default: [],
type: cc.Prefab
}
},
init: function(t) {
this.RedT = t;
},
random: function() {
var t = 11 * Math.random() >> 0;
this.setIcon(t);
return t;
},
setIcon: function(t) {
var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
this.node.removeAllChildren();
var i = cc.instantiate(this.icons[t]);
i.setScale(cc.v2(1.2, 1.2));
this.node.addChild(i);
e && (this.data = t);
}
});
cc._RF.pop();
}, {} ],
SexAndZen_lines: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "ff5c9HDgeRHfZgjm/hA78vn", "SexAndZen_lines");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
nodeEfLine: cc.Node,
nodeLine: cc.Node,
mainLine: cc.Node
},
init: function(t) {
var e = this;
this.lines = {
1: [ 1, 1, 1, 1, 1 ],
2: [ 0, 0, 0, 0, 0 ],
3: [ 2, 2, 2, 2, 2 ],
4: [ 1, 1, 0, 1, 1 ],
5: [ 1, 1, 2, 1, 1 ],
6: [ 0, 0, 1, 0, 0 ],
7: [ 2, 2, 1, 2, 2 ],
8: [ 0, 2, 0, 2, 0 ],
9: [ 2, 0, 2, 0, 2 ],
10: [ 1, 0, 2, 0, 1 ],
11: [ 2, 1, 0, 1, 2 ],
12: [ 0, 1, 2, 1, 0 ],
13: [ 1, 2, 1, 0, 1 ],
14: [ 1, 0, 1, 2, 1 ],
15: [ 2, 1, 1, 1, 2 ],
16: [ 0, 1, 1, 1, 0 ],
17: [ 1, 2, 2, 2, 1 ],
18: [ 1, 0, 0, 0, 1 ],
19: [ 2, 2, 1, 0, 0 ],
20: [ 0, 0, 1, 2, 2 ]
};
this.RedT = t;
var i = this;
Promise.all(this.mainLine.children.map(function(t) {
return t.getComponent("SexAndZen_iline").init(i.RedT);
})).then(function(t) {
e.mainLine = t;
});
this.selectAll(null, "1");
},
onOpen: function() {
cc.RedT.audio.playClick();
this.node.active = !0;
},
onClose: function() {
cc.RedT.audio.playUnClick();
this.node.active && this.data.length < 1 ? this.RedT.addNotice("Chọn ít nhất 1 dòng") : this.node.active = !1;
},
select: function(t) {
var e = t.target;
if (e.children[0].active) {
e.children[0].active = !1;
e.children[1].active = !0;
} else {
e.children[0].active = !0;
e.children[1].active = !1;
}
this.check();
},
check: function() {
var t = this;
Promise.all(this.nodeLine.children.map(function(t, e) {
return t.children[0].active ? e + 1 : void 0;
})).then(function(e) {
Promise.all(e.filter(function(t) {
return void 0 !== t;
})).then(function(e) {
t.data = e;
t.RedT.labelLine.string = e.length;
t.RedT.tong.string = n.numberWithCommas(e.length * n.getOnlyNumberInString(t.RedT.bet.string));
});
});
},
selectChan: function() {
var t = this;
Promise.all(this.nodeLine.children.map(function(t, e) {
var i = e + 1;
if (!(i % 2)) {
t.children[0].active = !1;
t.children[1].active = !0;
return i;
}
t.children[0].active = !0;
t.children[1].active = !1;
})).then(function(e) {
Promise.all(e.filter(function(t) {
return void 0 !== t;
})).then(function(e) {
t.data = e;
t.RedT.labelLine.string = e.length;
t.RedT.tong.string = n.numberWithCommas(e.length * n.getOnlyNumberInString(t.RedT.bet.string));
});
});
},
selectLe: function() {
var t = this;
Promise.all(this.nodeLine.children.map(function(t, e) {
var i = e + 1;
if (i % 2) {
t.children[0].active = !1;
t.children[1].active = !0;
return i;
}
t.children[0].active = !0;
t.children[1].active = !1;
})).then(function(e) {
Promise.all(e.filter(function(t) {
return void 0 !== t;
})).then(function(e) {
t.data = e;
t.RedT.labelLine.string = e.length;
t.RedT.tong.string = n.numberWithCommas(e.length * n.getOnlyNumberInString(t.RedT.bet.string));
});
});
},
selectAll: function(t, e) {
var i = this;
Promise.all(this.nodeLine.children.map(function(t, i) {
var n = "1" == e;
t.children[0].active = n;
t.children[1].active = !n;
return n ? i + 1 : void 0;
})).then(function(t) {
Promise.all(t.filter(function(t, e) {
return void 0 !== t;
})).then(function(t) {
i.data = t;
i.RedT.labelLine.string = t.length;
i.RedT.tong.string = n.numberWithCommas(t.length * n.getOnlyNumberInString(i.RedT.bet.string));
});
});
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
SexAndZen_playBonus: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "af8977swZBDJ5U3NaX2JlZ4", "SexAndZen_playBonus");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
numberBonus: cc.Label,
listBox: cc.Node,
notice: cc.Node,
numberWin: cc.Label
},
init: function(t) {
this.RedT = t;
},
onPlay: function() {
this.reset();
this.node.active = !0;
this.numberBonus.string = 10;
},
onClickBox: function(t, e) {
if (this.numberBonus.string) {
cc.RedT.audio.playClick();
this.onSend(e);
}
},
closeNotice: function() {
this.notice.active = this.node.active = !1;
this.RedT.hieuUng();
},
onData: function(t) {
if (void 0 !== t.box) {
var e = this.listBox.children[t.box];
e.children[0].active = !1;
e.children[1].active = e.children[2].active = !0;
e.children[2].getComponent(cc.Label).string = n.numberWithCommas(t.bet);
this.numberBonus.string = t.bonus;
}
if (void 0 !== t.win) {
this.notice.active = !0;
this.numberWin.string = n.numberWithCommas(t.win);
this.RedT.vuathang.string = n.numberWithCommas(1 * n.getOnlyNumberInString(this.RedT.vuathang.string) + t.win);
}
},
onSend: function(t) {
cc.RedT.send({
g: {
candy: {
bonus: {
box: t
}
}
}
});
},
reset: function() {
Promise.all(this.listBox.children.map(function(t) {
t.children[0].active = !0;
t.children[1].active = t.children[2].active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
SexAndZen_reel: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "01eef5jSclEgadHsXo4wAqY", "SexAndZen_reel");
cc.Class({
extends: cc.Component,
init: function(t) {
var e = this;
this.RedT = t;
this.icons = [];
var i = this, n = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
Promise.all(n.map(function(t, e) {
var o = cc.instantiate(i.RedT.icon);
i.node.addChild(o);
(o = o.getComponent("SexAndZen_item")).init(i.RedT);
e > 2 && e < n.length - 3 && o.random();
return o;
})).then(function(t) {
e.icons = t;
e.icons[e.icons.length - 1].setIcon(e.icons[4].random());
e.icons[e.icons.length - 2].setIcon(e.icons[3].random());
e.icons[e.icons.length - 3].setIcon(e.icons[2].random());
e.icons[e.icons.length - 4].setIcon(e.icons[1].random());
e.icons[e.icons.length - 5].setIcon(e.icons[0].random());
});
},
spin: function(t, e) {
this.node.stopAllActions();
var i = cc.moveTo(e, cc.v2(this.node.x, -(this.node.height - 606))).easing(cc.easeInOut(3)), n = cc.callFunc(function() {
0 === t && this.RedT.copy();
this.node.y = 0;
}, this);
if (4 === t) {
var o = cc.callFunc(function() {
this.RedT.EF_vuathang();
this.node.y = 0;
this.RedT.random();
this.RedT.hieuUng();
}, this);
this.node.runAction(cc.sequence(cc.delayTime(.1 * t), i, o));
} else this.node.runAction(cc.sequence(cc.delayTime(.1 * t), i, n));
},
stop: function() {
this.node.stopAllActions();
this.RedT.copy();
this.node.y = 0;
}
});
cc._RF.pop();
}, {} ],
SexAndZen_top: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "39594zuXFJJMqZNY7ldtC9U", "SexAndZen_top");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
item: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
onEnable: function() {
this.get_data();
},
get_data: function() {
arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
cc.RedT.send({
g: {
candy: {
top: this.red
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
this.content.removeAllChildren();
var e = this;
Promise.all(t.map(function(t, i) {
var o = cc.instantiate(e.item), c = o.getComponent("VQRed_history_item");
c.time.string = n.getStringDateByTime(t.time);
c.phien.string = t.name;
c.cuoc.string = n.numberWithCommas(t.bet);
c.line.string = n.numberWithCommas(t.win);
c.win.string = 2 == t.type ? "Nổ Hũ" : "Thắng lớn";
o.children[0].active = !(1 & i);
e.content.addChild(o);
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
SexAndZen: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "7bf1clbIVFN/4oSFt3cMzg7", "SexAndZen");
var n = t("Helper"), o = t("SexAndZen_reel"), c = t("SexAndZen_lines"), s = t("SexAndZen_playBonus"), a = t("Notice"), h = t("SexAndZen_dialog");
cc.Class({
extends: cc.Component,
properties: {
gameBonus: s,
audioBG: cc.AudioSource,
audioClickSpin: {
default: null,
type: cc.AudioClip
},
audioClick: {
default: null,
type: cc.AudioClip
},
audioWin: {
default: null,
type: cc.AudioClip
},
audioBigWin: {
default: null,
type: cc.AudioClip
},
audioJackpot: {
default: null,
type: cc.AudioClip
},
redhat: cc.Node,
reels: {
default: [],
type: o
},
icon: cc.Prefab,
icons: {
default: [],
type: cc.SpriteFrame
},
betString: {
default: [],
type: cc.String
},
audioIcons: {
default: [],
type: cc.SpriteFrame
},
audioIcon: cc.Sprite,
nodeNotice: cc.Node,
prefabNotice: cc.Prefab,
MiniPanel: cc.Prefab,
loading: cc.Node,
notice: a,
dialog: h,
Line: c,
hu: cc.Label,
taikhoan: cc.Label,
tong: cc.Label,
vuathang: cc.Label,
labelLine: cc.Label,
bet: cc.Label,
freeLabel: cc.Label,
phien: cc.Label,
BigWin: cc.Animation,
BigWin_Label: cc.Label,
bangThuong: cc.Node,
NoHu: cc.Animation,
NoHu_Label: cc.Label,
EF_Bonus: cc.Animation,
EF_Free: cc.Animation,
efline: cc.Node,
buttonCoint: cc.Node,
buttonLine: cc.Node,
buttonSpin: cc.Node,
buttonSpinSpeed: cc.Node,
buttonBet: cc.Node,
buttonAuto: cc.Node,
buttonStop: cc.Node,
Game: cc.Node,
ChonCuoc: cc.Node,
hu100: cc.Label,
hu1000: cc.Label,
hu10000: cc.Label,
fontCong: cc.Font,
isSpeed: !1,
isForceSpeed: !1,
isAuto: !1,
isSpin: !1,
isFreeSpin: !1,
red: !0,
betSelect: 0
},
onLoad: function() {
cc.RedT.inGame = this;
var t = this;
this.Line.init(this);
this.BigWin.on("finished", this.BigWinFinish, this);
this.BigWin.on("play", this.BigWinPlay, this);
this.EF_Free.on("finished", this.EF_FreeFinish, this);
this.NoHu.on("finished", this.NoHuFinish, this);
this.NoHu.on("play", this.NoHuPlay, this);
this.EF_Bonus.on("finished", this.EF_BonusFinish, this);
this.gameBonus.init(this);
this.dialog.init();
Promise.all(this.reels.map(function(e) {
e.init(t);
}));
this.Game.active = !1;
this.ChonCuoc.active = !0;
this.onGetAllHu();
cc.RedT.send({
scene: "candy"
});
this.taikhoan.string = n.numberWithCommas(cc.RedT.user.red);
this.speed = 400;
this.resetSpin();
if (cc.RedT.isSoundBackground()) {
this.playMusic();
this.audioIcon.spriteFrame = this.audioIcons[1];
} else this.audioIcon.spriteFrame = this.audioIcons[0];
},
_playSFX: function(t) {
cc.RedT.IS_SOUND && cc.audioEngine.playEffect(t, !1);
},
playClick: function() {
this._playSFX(this.audioClick);
},
BigWinPlay: function() {
var t = cc.callFunc(function() {
this._playSFX(this.audioBigWin);
n.numberTo(this.BigWin_Label, 0, this.H_win, 2e3, !0);
}, this);
this.BigWin.node.runAction(cc.sequence(cc.delayTime(.3), t));
},
BigWinFinish: function() {
this.isBigWin = !1;
this.BigWin.node.active = !1;
this.BigWin_Label.string = "";
this.showLineWin(!1);
this.hieuUng();
},
NoHuPlay: function() {
this.NoHu_Label.string = "";
var t = cc.callFunc(function() {
this._playSFX(this.audioJackpot);
n.numberTo(this.NoHu_Label, 0, this.H_win, 2e3, !0);
}, this);
this.NoHu.node.runAction(cc.sequence(cc.delayTime(.3), t));
var e = cc.callFunc(function() {}, this);
this.NoHu.node.runAction(cc.sequence(cc.delayTime(4), e));
},
NoHuFinish: function() {
this.isNoHu = !1;
this.isAuto && this.onAuto();
this.showLineWin(!1);
this.hieuUng();
},
NoHuClose: function() {
this.NoHu.node.active = !1;
this.NoHuFinish();
},
EF_BonusFinish: function() {
this.EF_Bonus.node.active = !1;
this.gameBonus.onPlay(this.isBonus);
this.isBonus = 0;
this.showLineWin(!1);
},
EF_FreeFinish: function() {
this.isFree = !1;
this.EF_Free.node.active = !1;
this.showLineWin(!1);
this.hieuUng();
},
onData: function(t) {
if (void 0 !== t.user) {
this.userData(t.user);
cc.RedT.userData(t.user);
}
void 0 !== t.candy && this.SexAndZen(t.candy);
void 0 !== t.mini && null != cc.RedT.minigame && cc.RedT.minigame.onData(t.mini);
void 0 !== t.TopHu && cc.RedT.MiniPanel.TopHu.onData(t.TopHu);
void 0 !== t.taixiu && null != cc.RedT.minigame && cc.RedT.minigame.isLoadTaiXiu && cc.RedT.minigame.TaiXiu.TX_Main.onData(t.taixiu);
},
userData: function(t) {
this.red ? this.taikhoan.string = n.numberWithCommas(t.red) : this.taikhoan.string = n.numberWithCommas(t.xu);
},
SexAndZen: function(t) {
var e = this;
if (void 0 !== t.status) if (1 === t.status) {
this.buttonStop.active = !!this.isAuto;
this.buttonAuto.active = !this.buttonStop.active;
Promise.all(t.cel.map(function(t, i) {
Promise.all(t.map(function(t, n) {
e.reels[i].icons[n].setIcon(t, !0);
}));
}));
this.runReels(this.isSpeed);
this.H_line_win = t.line_win;
this.H_win = t.win;
this.H_free = t.free;
this.isBonus = t.isBonus;
this.isNoHu = t.isNoHu;
this.isBigWin = t.isBigWin;
this.isFree = t.isFree;
this.isFreeSpin = !!t.free;
} else this.resetSpin();
t.phien && (this.phien.string = "#" + t.phien);
t.bonus && this.gameBonus.onData(t.bonus);
t.log && this.dialog.history.onData(t.log);
t.top && this.dialog.top.onData(t.top);
t.notice && this.addNotice(t.notice);
},
EF_vuathang: function() {
this.showLineWin(!0);
this.vuathang.string = n.numberWithCommas(this.H_win);
this.freeLabel.string = this.H_free;
},
onLineWin: function(t) {
var e = this;
Promise.all(this.H_line_win.map(function(i) {
Promise.all(e.Line.lines[i.line].map(function(i, n) {
e.efline.children[n].children[i].active = t;
}));
var n = e.Line.mainLine[i.line - 1];
if (t) {
n.onhover();
n.node.pauseSystemEvents();
} else {
n.offhover();
n.node.resumeSystemEvents();
}
}));
},
showLineWin: function(t) {
this.onLineWin(t);
if (!(t || this.isNoHu || this.isBigWin || this.isAuto || this.isFreeSpin)) {
this.eflineN = 0;
this.efLineWin();
}
},
efLineWin: function(t) {
if (this.H_line_win.length) {
this.node.stopAllActions();
void 0 === this.H_line_win[this.eflineN] && (this.eflineN = 0);
this.efOneLineWin(this.eflineN, !0);
var e = cc.callFunc(function() {
this.efOneLineWin(this.eflineN, !1);
this.eflineN += 1;
this.efLineWin();
}, this);
this.node.runAction(cc.sequence(cc.delayTime(1.5), e));
}
},
efOneLineWin: function(t, e) {
var i = this;
t = this.H_line_win[this.eflineN].line;
Promise.all(this.Line.lines[t].map(function(t, n) {
i.efline.children[n].children[t].active = e;
}));
var n = this.Line.mainLine[t - 1];
if (e) {
n.onhover();
n.node.pauseSystemEvents();
} else {
n.offhover();
n.node.resumeSystemEvents();
}
},
hieuUng: function() {
if (this.isBigWin && !this.isNoHu) {
this.BigWin.node.active = !0;
this.BigWin.play();
this.oldBigWin = !0;
} else if (this.isNoHu) {
this.NoHu.node.active = !0;
this.NoHu.play();
} else if (this.isBonus) {
this.EF_Bonus.node.active = !0;
this.EF_Bonus.play();
cc.RedT.audio.playEf("bonus");
} else if (this.isFree) {
this.EF_Free.node.active = !0;
this.EF_Free.play();
} else if (this.H_win > 0) {
var t = new cc.Node();
t.addComponent(cc.Label);
(t = t.getComponent(cc.Label)).string = n.numberWithCommas(this.H_win);
t.font = this.fontCong;
t.lineHeight = 130;
t.fontSize = 70;
t.node.position = cc.v2(0, 21);
this.nodeNotice.addChild(t.node);
!this.oldBigWin && this._playSFX(this.audioWin);
t.node.runAction(cc.sequence(cc.moveTo(1.2, cc.v2(0, 105)), cc.callFunc(function() {
this.speed = 0;
t.node.destroy();
this.hieuUng();
this.showLineWin(!1);
}, this)));
this.H_win = 0;
this.oldBigWin = !1;
} else this.isAuto || this.isFreeSpin ? this.timeOut = setTimeout(function() {
this.onAutoSpin();
this.speed = 400;
}.bind(this), this.speed) : this.resetSpin();
},
onChangerBet: function(t, e) {
this._playSFX(this.audioClick);
this.betSelect++;
this.betSelect > 2 && (this.betSelect = 0);
this.bet.string = e;
this.tong.string = n.numberWithCommas(this.Line.data.length * n.getOnlyNumberInString(this.bet.string));
this.Game.active = !0;
this.ChonCuoc.active = !1;
this.resetSpin();
this.onStop();
this.onGetHu();
},
onSelectBet: function() {
this.Game.active = !1;
this.ChonCuoc.active = !0;
this.onGetAllHu();
this.onGetHu();
},
onClickAuto: function() {
this._playSFX(this.audioClick);
this.onAuto();
},
onClickStop: function() {
cc.RedT.audio.playClick();
this.onStop();
},
onAuto: function() {
this.isAuto = !this.isAuto;
this.buttonAuto.color = this.isAuto ? cc.Color.WHITE : cc.color(200, 200, 200);
this.buttonStop.active = this.isSpin;
},
onStop: function() {
this.isAuto = this.buttonStop.active = !1;
this.buttonAuto.active = !0;
this.isForceSpeed = !1;
this.buttonAuto.color = cc.color(200, 200, 200);
},
onClickSpin: function() {
this.isSpeed = !1;
this.onSpin();
},
onClickSpinSpeed: function() {
this.isSpeed = !0;
this.isAuto && (this.isForceSpeed = !0);
this.onSpin();
},
onAutoSpin: function() {
this._playSFX(this.audioClickSpin);
this.onGetSpin();
},
onSpin: function() {
if (this.Line.data.length < 1) this.addNotice("Chọn ít nhất 1 dòng"); else if (!this.isSpin) {
this._playSFX(this.audioClickSpin);
this.node.stopAllActions();
void 0 !== this.eflineN && void 0 !== this.H_line_win && this.H_line_win.length && this.efOneLineWin(this.eflineN, !1);
this.eflineO = this.eflineN = 0;
this.isSpin = !0;
this.setSpin();
this.onGetSpin();
}
},
setSpin: function() {
this.buttonLine.pauseSystemEvents();
this.buttonSpin.pauseSystemEvents();
this.buttonSpinSpeed.pauseSystemEvents();
this.buttonCoint.pauseSystemEvents();
this.buttonBet.pauseSystemEvents();
},
resetSpin: function() {
this.isAuto && this.onAuto();
this.isSpin = this.buttonStop.active = !1;
this.isForceSpeed = !1;
this.buttonLine.resumeSystemEvents();
this.buttonSpin.resumeSystemEvents();
this.buttonSpinSpeed.resumeSystemEvents();
this.buttonCoint.resumeSystemEvents();
this.buttonBet.resumeSystemEvents();
},
runReels: function(t) {
var e = this;
Promise.all(this.reels.map(function(i, n) {
t || e.isForceSpeed ? i.spin(n, .25) : i.spin(n, 1);
}));
this.isSpeed = !1;
},
copy: function() {
Promise.all(this.reels.map(function(t) {
t.icons[t.icons.length - 1].setIcon(t.icons[2].data);
t.icons[t.icons.length - 2].setIcon(t.icons[1].data);
t.icons[t.icons.length - 3].setIcon(t.icons[0].data);
}));
},
random: function() {
Promise.all(this.reels.map(function(t) {
Promise.all(t.icons.map(function(e, i) {
i > 2 && i < t.icons.length - 3 && e.random();
}));
}));
},
onGetSpin: function() {
cc.RedT.send({
g: {
candy: {
spin: {
cuoc: n.getOnlyNumberInString(this.bet.string),
red: this.red,
line: this.Line.data
}
}
}
});
},
addNotice: function(t) {
var e = cc.instantiate(this.prefabNotice);
e.getComponent("mini_warning").text.string = t;
this.nodeNotice.addChild(e);
},
backGame: function() {
cc.RedT.inGame.notice.show({
title: "Thoát game",
text: "Xác nhận hành động.\nHành động thực hiện thoát khỏi game này?",
button: {
type: "exit_game",
text: "Thoát"
}
});
},
signOut: function() {
cc.director.preloadScene("MainGame", function() {
cc.director.loadScene("MainGame", function() {
cc.RedT.inGame.signOut();
});
});
},
onGetHu: function() {
var t = this;
if (void 0 !== cc.RedT.setting.topHu.data) {
var e = this, i = n.getOnlyNumberInString(e.bet.string);
Promise.all(cc.RedT.setting.topHu.data.candy.filter(function(t) {
return t.type == i && t.red == e.red;
})).then(function(e) {
var i = n.getOnlyNumberInString(t.hu.string), o = e[0].bet;
i - o != 0 && n.numberTo(t.hu, i, o, 2e3, !0);
});
}
},
onGetAllHu: function() {
var t = this;
if (void 0 !== cc.RedT.setting.topHu.data) {
n.getOnlyNumberInString(this.bet.string);
Promise.all(cc.RedT.setting.topHu.data.candy.filter(function(t) {
return 1 == t.red;
})).then(function(e) {
var i = e.filter(function(t) {
return 100 == t.type;
}), o = e.filter(function(t) {
return 1e3 == t.type;
}), c = e.filter(function(t) {
return 1e4 == t.type;
}), s = n.getOnlyNumberInString(t.hu100.string), a = n.getOnlyNumberInString(t.hu1000.string), h = n.getOnlyNumberInString(t.hu10000.string);
s - i[0].bet != 0 && n.numberTo(t.hu100, n.getOnlyNumberInString(t.hu100.string), i[0].bet, 4900, !0);
a - o[0].bet != 0 && n.numberTo(t.hu1000, n.getOnlyNumberInString(t.hu1000.string), o[0].bet, 4900, !0);
h - c[0].bet != 0 && n.numberTo(t.hu10000, n.getOnlyNumberInString(t.hu10000.string), c[0].bet, 4900, !0);
});
}
},
BangThuongToggle: function() {
cc.RedT.audio.playClick();
this.bangThuong.active = !this.bangThuong.active;
},
playMusic: function() {
this.audioBG.play();
},
pauseMusic: function() {
this.audioBG.pause();
},
onSetAudio: function() {
if (cc.RedT.isSoundBackground()) {
cc.RedT.setSoundBackground(!1);
this.pauseMusic();
cc.RedT.IS_SOUND = !1;
cc.RedT.setSoundGame(!1);
this.audioIcon.spriteFrame = this.audioIcons[0];
} else {
cc.RedT.setSoundBackground(!0);
this.playMusic();
cc.RedT.IS_SOUND = !0;
cc.RedT.setSoundGame(!0);
this.audioIcon.spriteFrame = this.audioIcons[1];
}
}
});
cc._RF.pop();
}, {
Helper: "Helper",
Notice: "Notice",
SexAndZen_dialog: "SexAndZen_dialog",
SexAndZen_lines: "SexAndZen_lines",
SexAndZen_playBonus: "SexAndZen_playBonus",
SexAndZen_reel: "SexAndZen_reel"
} ],
"ShootFish.Bullet": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "2f69aJMRRhPd6XQI0cJ7r8a", "ShootFish.Bullet");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("./scripts/common/Utils"), o = t("./ShootFish.Play"), c = cc._decorator, s = c.ccclass, a = c.property, h = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.bullet = null;
e.fishNet = null;
e.id = "";
e.targetFishId = -1;
e.worldSize = cc.size(1280, 720);
e.exploreDuration = .8;
e.vX = 0;
e.vY = 0;
e.collisionCount = 4;
e.isExplored = !1;
e.isExploring = !1;
e.curExplore = 0;
e.circle = null;
return e;
}
e.prototype.run = function() {
var t = Number(o.default.SERVER_CONFIG.BulletSpeed);
(isNaN(t) || 0 == t) && (t = 1400);
var e = n.default.degreesToVec2(this.node.angle);
this.vX = e.x * t;
this.vY = e.y * t;
this.collisionCount = 4;
this.isExplored = !1;
this.isExploring = !1;
this.bullet.active = !0;
this.fishNet.active = !1;
this.circle = new SAT.Circle(new SAT.Vector(this.node.position.x, this.node.position.y), Number(o.default.SERVER_CONFIG.BulletRadius));
};
e.prototype.updateRealTime = function(t) {
if (!this.isExplored) if (this.isExploring) {
this.curExplore -= t;
if (this.curExplore <= 0) {
this.isExplored = !0;
this.node.active = !1;
}
} else {
var e = this.node.position;
e.x += this.vX * t;
e.y += this.vY * t;
this.node.position = e;
if (Math.abs(e.x) > this.worldSize.width / 2) {
this.vX *= -1;
var i = Math.atan2(this.vY, this.vX) * n.default.Rad2Deg;
this.node.angle = i;
e.x = (e.x < 0 ? -1 : 1) * this.worldSize.width / 2;
this.node.position = e;
this.collisionCount--;
} else if (Math.abs(e.y) > this.worldSize.height / 2) {
this.vY *= -1;
i = Math.atan2(this.vY, this.vX) * n.default.Rad2Deg;
this.node.angle = i;
e.y = (e.y < 0 ? -1 : 1) * this.worldSize.height / 2;
this.node.position = e;
this.collisionCount--;
}
this.circle.pos = new SAT.Vector(this.node.position.x, this.node.position.y);
this.collisionCount < 0 && (this.node.active = !1);
}
};
e.prototype.explore = function() {
this.isExploring = !0;
this.curExplore = this.exploreDuration;
this.bullet.active = !1;
this.fishNet.active = !0;
this.fishNet.opacity = 0;
this.fishNet.angle = 0;
this.fishNet.scale = 0;
this.fishNet.stopAllActions();
this.fishNet.runAction(cc.spawn(cc.sequence(cc.scaleTo(.3, 1.1), cc.delayTime(.07), cc.scaleTo(.3, 1)), cc.fadeIn(.1), cc.sequence(cc.delayTime(.25), cc.rotateTo(.5, 35)), cc.sequence(cc.delayTime(.4), cc.fadeOut(.3))));
};
e.prototype.getCircle = function() {
return this.circle;
};
__decorate([ a(cc.Node) ], e.prototype, "bullet", void 0);
__decorate([ a(cc.Node) ], e.prototype, "fishNet", void 0);
return e = __decorate([ s ], e);
}(cc.Component);
i.default = h;
cc._RF.pop();
}, {
"./ShootFish.Play": "ShootFish.Play",
"./scripts/common/Utils": "Utils"
} ],
"ShootFish.CoinEffect": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "fec12WfiXtFMJsjk22fyIG+", "ShootFish.CoinEffect");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("./scripts/common/Utils"), o = cc._decorator, c = o.ccclass, s = o.property, a = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.lblCoin = null;
e.coinExplore = null;
e.coin0 = null;
e.coin1 = null;
e.coin2 = null;
return e;
}
e.prototype.run = function(t, e, i) {
var o = this;
this.coinExplore.node.position = e;
this.coin0.stopAllActions();
this.coin0.position = e.clone().add(cc.v2(n.default.randomRange(80, -80), n.default.randomRange(80, -80)));
this.coin0.scale = 0;
this.coin1.stopAllActions();
this.coin1.position = e.clone().add(cc.v2(n.default.randomRange(80, -80), n.default.randomRange(80, -80)));
this.coin1.scale = 0;
this.coin2.stopAllActions();
this.coin2.position = e.clone().add(cc.v2(n.default.randomRange(80, -80), n.default.randomRange(80, -80)));
this.coin2.scale = 0;
this.lblCoin.string = n.default.formatNumber(t);
this.lblCoin.node.position = e;
this.lblCoin.node.stopAllActions();
this.lblCoin.node.opacity = 0;
this.lblCoin.node.scale = 0;
this.lblCoin.node.runAction(cc.sequence(cc.spawn(cc.fadeIn(.2), cc.scaleTo(.2, 1)), cc.moveBy(.1, new cc.Vec2(0, 5)), cc.moveBy(.1, new cc.Vec2(0, -5)), cc.moveBy(.1, new cc.Vec2(0, 5)), cc.moveBy(.1, new cc.Vec2(0, -5)), cc.moveBy(.1, new cc.Vec2(0, 5)), cc.moveBy(.1, new cc.Vec2(0, -5)), cc.moveBy(.1, new cc.Vec2(0, 5)), cc.moveBy(.1, new cc.Vec2(0, -5)), cc.fadeOut(.15)));
this.coinExplore.setAnimation(0, "Idle", !1);
this.coin0.runAction(cc.sequence(cc.scaleTo(.15, n.default.randomRange(.7, 1)), cc.delayTime(.4), cc.moveBy(.1, new cc.Vec2(0, 50)), cc.moveBy(.1, new cc.Vec2(0, -50)), cc.moveBy(.1, new cc.Vec2(0, 50)), cc.moveBy(.1, new cc.Vec2(0, -50)), cc.moveTo(.7, i), cc.scaleTo(.15, 0)));
this.coin1.runAction(cc.sequence(cc.scaleTo(.15, n.default.randomRange(.7, 1)), cc.delayTime(.55), cc.moveBy(.1, new cc.Vec2(0, 50)), cc.moveBy(.1, new cc.Vec2(0, -50)), cc.moveBy(.1, new cc.Vec2(0, 50)), cc.moveBy(.1, new cc.Vec2(0, -50)), cc.moveTo(.7, i), cc.scaleTo(.15, 0)));
this.coin2.runAction(cc.sequence(cc.scaleTo(.15, n.default.randomRange(.7, 1)), cc.delayTime(.7), cc.moveBy(.1, new cc.Vec2(0, 50)), cc.moveBy(.1, new cc.Vec2(0, -50)), cc.moveBy(.1, new cc.Vec2(0, 50)), cc.moveBy(.1, new cc.Vec2(0, -50)), cc.moveTo(.7, i), cc.scaleTo(.15, 0), cc.callFunc(function() {
o.node.active = !1;
})));
};
__decorate([ s(cc.Label) ], e.prototype, "lblCoin", void 0);
__decorate([ s(sp.Skeleton) ], e.prototype, "coinExplore", void 0);
__decorate([ s(cc.Node) ], e.prototype, "coin0", void 0);
__decorate([ s(cc.Node) ], e.prototype, "coin1", void 0);
__decorate([ s(cc.Node) ], e.prototype, "coin2", void 0);
return e = __decorate([ c ], e);
}(cc.Component);
i.default = a;
cc._RF.pop();
}, {
"./scripts/common/Utils": "Utils"
} ],
"ShootFish.EffectBigWin": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "cd36fNeFjhPXbX3/wEmDO0E", "ShootFish.EffectBigWin");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("./scripts/common/Utils"), o = cc._decorator, c = o.ccclass, s = o.property, a = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.skeleton = null;
e.lblNickname = null;
e.lblCoin = null;
return e;
}
e.prototype.show = function(t, e, i) {
var o = this;
void 0 === e && (e = null);
void 0 === i && (i = 0);
this.node.stopAllActions();
if (t) {
this.lblCoin.string = n.default.formatNumber(i);
this.lblCoin.node.active = !1;
this.lblNickname.string = e;
this.lblNickname.node.active = !1;
this.skeleton.setAnimation(0, "animation", !1);
this.node.active = !0;
this.node.runAction(cc.sequence(cc.delayTime(.7), cc.callFunc(function() {
o.lblNickname.node.active = !0;
o.lblCoin.node.active = !0;
}), cc.delayTime(3), cc.callFunc(function() {
o.node.active = !1;
})));
} else this.node.active = !1;
};
__decorate([ s(sp.Skeleton) ], e.prototype, "skeleton", void 0);
__decorate([ s(cc.Label) ], e.prototype, "lblNickname", void 0);
__decorate([ s(cc.Label) ], e.prototype, "lblCoin", void 0);
return e = __decorate([ c ], e);
}(cc.Component);
i.default = a;
cc._RF.pop();
}, {
"./scripts/common/Utils": "Utils"
} ],
"ShootFish.EffectJackpot": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "8c8a5PhhdFLaarDFRKZYji+", "ShootFish.EffectJackpot");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("./scripts/common/Utils"), o = cc._decorator, c = o.ccclass, s = o.property, a = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.skeletons = [];
e.lblNickname = null;
e.lblCoin = null;
return e;
}
e.prototype.show = function(t, e, i) {
var o = this;
void 0 === e && (e = null);
void 0 === i && (i = 0);
this.node.stopAllActions();
if (t) {
this.lblCoin.string = n.default.formatNumber(i);
this.lblCoin.node.active = !1;
this.lblNickname.string = e;
this.lblNickname.node.active = !1;
for (var c = 0; c < this.skeletons.length; c++) this.skeletons[c].setAnimation(0, "Idle", !1);
this.node.active = !0;
this.node.runAction(cc.sequence(cc.delayTime(.7), cc.callFunc(function() {
o.lblNickname.node.active = !0;
o.lblCoin.node.active = !0;
}), cc.delayTime(5), cc.callFunc(function() {
o.node.active = !1;
})));
} else this.node.active = !1;
};
__decorate([ s([ sp.Skeleton ]) ], e.prototype, "skeletons", void 0);
__decorate([ s(cc.Label) ], e.prototype, "lblNickname", void 0);
__decorate([ s(cc.Label) ], e.prototype, "lblCoin", void 0);
return e = __decorate([ c ], e);
}(cc.Component);
i.default = a;
cc._RF.pop();
}, {
"./scripts/common/Utils": "Utils"
} ],
"ShootFish.Fish": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "8d6653uVO9OV6BYe00JuWnr", "ShootFish.Fish");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("./ShootFish.Play"), o = t("./scripts/common/Utils"), c = t("./scripts/networks/ShootFishNetworkClient"), s = cc._decorator, a = s.ccclass, h = s.property, r = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.anim = null;
e.lblId = null;
e.isDie = !1;
e.type = -1;
e.polygon = null;
e.dataPointsUpdate = [];
e.currentStep = 0;
e.currentTimeStep = -1;
e.currentVStepX = 0;
e.currentVStepY = 0;
return e;
}
e.prototype.setData = function(t) {
this.id = t.id;
this.lblId.string = this.id.toString();
if (t.h <= 0 || 0 == t.path.length) {
this.die();
0 == t.path.length && console.log("fishData path length = 0");
} else {
if (this.type != t.t) {
this.type = t.t;
this.anim.removeAllChildren();
cc.instantiate(n.default.instance.getFishAnimByType(this.type)).parent = this.anim;
var e = t.H, i = t.w;
this.polygon = new SAT.Box(new SAT.Vector(0, 0), e, i).toPolygon();
this.polygon.translate(-e / 2, -i / 2);
this.node.width = e;
this.node.height = i;
}
var s = Number(t.dx), a = Number(t.dy), h = Number(t.px), r = Number(t.py), l = t.path, u = c.default.serverCurrentTimeMillis();
this.node.angle = Math.atan2(a, s) * o.default.Rad2Deg;
for (var d = [], p = 0; p < l.length; p++) {
var g = {
t: Number(l[p].t)
};
g.p = cc.v2(Number(l[p].x), Number(l[p].y));
switch (n.default.instance.mePlayer.serverPos) {
case 1:
g.p = cc.v2(-Number(l[p].x), Number(l[p].y));
break;

case 2:
g.p = cc.v2(-Number(l[p].x), -Number(l[p].y));
break;

case 3:
g.p = cc.v2(Number(l[p].x), -Number(l[p].y));
}
d.push(g);
}
this.node.position = cc.v2(h, r);
switch (n.default.instance.mePlayer.serverPos) {
case 1:
this.node.position = cc.v2(-h, r);
break;

case 2:
this.node.position = cc.v2(-h, -r);
break;

case 3:
this.node.position = cc.v2(h, -r);
}
var m = !0, f = -1;
this.dataPointsUpdate.length = 0;
for (var v = 1; v < d.length; v++) {
var b = d[v - 1], T = d[v], _ = b.p, C = T.p, y = b.t, S = T.t;
if (u - S < 0) {
f < 0 && (f = v);
var R = C.clone().sub(_), N = Math.atan2(R.y, R.x) * o.default.Rad2Deg, L = 0;
if (m) {
L = (S - u) / 1e3;
m = !1;
} else L = (S - y) / 1e3;
this.dataPointsUpdate.push({
p: C,
t: L,
a: N,
tms: S
});
}
}
this.currentTimeStep = -1;
this.currentStep = 0;
this.currentVStepX = 0;
this.currentVStepY = 0;
if (this.dataPointsUpdate.length > 0) {
this.currentTimeStep = this.dataPointsUpdate[this.currentStep].t;
R = this.dataPointsUpdate[this.currentStep].p.sub(this.node.position);
this.currentVStepX = R.x / this.currentTimeStep;
this.currentVStepY = R.y / this.currentTimeStep;
this.node.angle = this.dataPointsUpdate[this.currentStep].a;
} else console.log("can't find path: " + this.id);
this.isDie = !1;
this.node.active = !0;
}
};
e.prototype.updateRealTime = function(t) {
if (this.node.active && !this.isDie && this.dataPointsUpdate.length > 0 && this.currentTimeStep >= 0) {
var e = this.node.position;
this.currentTimeStep -= t;
if (this.currentTimeStep < 0) {
this.currentStep++;
if (this.currentStep < this.dataPointsUpdate.length) {
this.currentTimeStep = this.dataPointsUpdate[this.currentStep].t + Math.abs(this.currentTimeStep);
this.node.angle = this.dataPointsUpdate[this.currentStep].a;
this.polygon.angle = this.node.angle * o.default.Deg2Rad;
var i = this.dataPointsUpdate[this.currentStep].p.sub(e);
this.currentVStepX = i.x / this.currentTimeStep;
this.currentVStepY = i.y / this.currentTimeStep;
}
}
e.x += this.currentVStepX * t;
e.y += this.currentVStepY * t;
this.node.position = e;
}
};
e.prototype.die = function() {
this.isDie = !0;
this.node.active = !1;
};
e.prototype.getPolygon = function() {
this.polygon.pos = new SAT.Vector(this.node.position.x, this.node.position.y);
return this.polygon;
};
e.prototype.hurt = function() {
if (0 != this.anim.children.length && 0 != this.anim.children[0].children.length) {
this.anim.children[0].children[0].stopActionByTag(99);
var t = cc.sequence(cc.tintTo(.05, 255, 54, 54), cc.delayTime(.1), cc.tintTo(.05, 255, 255, 255));
t.setTag(99);
this.anim.children[0].children[0].runAction(t);
}
};
__decorate([ h(cc.Node) ], e.prototype, "anim", void 0);
__decorate([ h(cc.Label) ], e.prototype, "lblId", void 0);
return e = __decorate([ a ], e);
}(cc.Component);
i.default = r;
cc._RF.pop();
}, {
"./ShootFish.Play": "ShootFish.Play",
"./scripts/common/Utils": "Utils",
"./scripts/networks/ShootFishNetworkClient": "ShootFishNetworkClient"
} ],
"ShootFish.Lobby": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "12d4bkUeOdAipp+x9lVtFE1", "ShootFish.Lobby");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("./ShootFish.Play"), o = t("./scripts/common/Configs"), c = t("./ShootFish.PopupCoinTransfer"), s = t("./scripts/common/Utils"), a = t("./scripts/common/BroadcastReceiver"), h = t("./scripts/networks/MiniGameNetworkClient"), r = t("./scripts/networks/Network.InPacket"), l = t("./Lobby/src/Lobby.Cmd"), u = t("./scripts/networks/ShootFishNetworkClient"), d = cc._decorator, p = d.ccclass, g = d.property, m = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.Thinhdeptryyy = null;
e.MiniPanel = null;
e.Notice = null;
e.Loading = null;
e.lblLoading = null;
e.lblNotice = null;
e.playNode = null;
e.lblBalance = null;
e.popupCoinTransfer = null;
e.play = null;
e.timeOutLoading = null;
return e;
}
i = e;
e.prototype.onLoad = function() {
var t = this;
i.instance = this;
cc.RedT.inGame = this;
o.default.Login.Coin = cc.RedT.user.red;
this.play = this.playNode.getComponent(n.default);
this.play.node.active = !1;
this.lblBalance.string = s.default.formatNumber(o.default.Login.CoinFish);
a.default.register(a.default.USER_UPDATE_COIN, function() {
t.lblBalance.string = s.default.formatNumber(o.default.Login.CoinFish);
}, this);
u.default.getInstance().checkConnect("banca", function(e) {
if (e) {
n.default.SERVER_CONFIG = o.default.Login.FishConfigs;
a.default.send(a.default.USER_UPDATE_COIN);
if (o.default.Login.CoinFish <= 0) {
t.showNotice(!0, "Tiền trong Bắn Cá của bạn đã hết, bạn có muốn chuyển tiền vào không?");
t.popupCoinTransfer.show();
}
} else t.showNotice(!0, "Đăng nhập thất bại, vui lòng thử lại.");
});
u.default.getInstance().addOnClose(function() {
t.showNotice(!0, "Mất kết nối, đang thử kết nối lại...");
}, this);
h.default.getInstance().addListener(function(t) {
switch (new r.default(t).getCmdId()) {
case l.default.Code.GET_MONEY_USE:
var e = new l.default.ResGetMoneyUse(t);
o.default.Login.Coin = e.moneyUse;
a.default.send(a.default.USER_UPDATE_COIN);
}
}, this);
cc.RedT.send({
scene: "shootfish",
g: {
shootfish: {
ingame: !0
}
}
});
};
e.prototype.actBack = function() {
var t = this;
cc.audioEngine.stopAll();
cc.director.preloadScene("MainGame", function(e, i, n) {
t.showErrLoading("Đang tải..." + parseInt("" + e / i * 100) + "%");
}, function(t, e) {
u.default.getInstance().backgame();
cc.director.loadScene("MainGame");
});
};
e.prototype.actHonors = function() {};
e.prototype.showErrLoading = function(t) {
this.showLoading(!0, -1);
this.lblLoading.string = t || "Mất kết nối, đang thử lại...";
};
e.prototype.showLoading = function(t, e) {
var i = this;
void 0 === e && (e = 15);
this.lblLoading.string = "Đang tải...";
null != this.timeOutLoading && clearTimeout(this.timeOutLoading);
if (t) {
e > 0 && (this.timeOutLoading = setTimeout(function() {
i.showLoading(!1);
}, 1e3 * e));
this.Loading.active = !0;
} else this.Loading.active = !1;
};
e.prototype.actRoom1 = function() {
this.show(!1);
this.play.show(!0, 1);
};
e.prototype.actRoom2 = function() {
this.show(!1);
this.play.show(!0, 2);
};
e.prototype.actRoom3 = function() {
this.show(!1);
this.play.show(!0, 3);
};
e.prototype.onData = function(t) {
void 0 !== t.shootfish && this.ShootFish(t.shootfish);
void 0 !== t.mini && null != cc.RedT.minigame && cc.RedT.minigame.onData(t.mini);
void 0 !== t.TopHu && cc.RedT.MiniPanel.TopHu.onData(t.TopHu);
void 0 !== t.taixiu && null != cc.RedT.minigame && cc.RedT.minigame.isLoadTaiXiu && cc.RedT.minigame.TaiXiu.TX_Main.onData(t.taixiu);
};
e.prototype.ShootFish = function(t) {
if (void 0 !== t.user) {
o.default.Login.Coin = t.user.red;
this.popupCoinTransfer.userData(t.user.red);
cc.RedT.userData(t.user);
}
void 0 !== t.notice && this.showNotice(!0, t.notice);
};
e.prototype.showNotice = function(t, e) {
this.Notice.active = t;
this.lblNotice.string = e;
};
e.prototype.dimissNotice = function() {
this.Notice.active = !1;
};
e.prototype.show = function(t) {
this.node.active = t;
a.default.send(a.default.USER_UPDATE_COIN);
};
var i;
e.instance = null;
__decorate([ g(cc.Node) ], e.prototype, "Thinhdeptryyy", void 0);
__decorate([ g(cc.Prefab) ], e.prototype, "MiniPanel", void 0);
__decorate([ g(cc.Node) ], e.prototype, "Notice", void 0);
__decorate([ g(cc.Node) ], e.prototype, "Loading", void 0);
__decorate([ g(cc.Node) ], e.prototype, "lblLoading", void 0);
__decorate([ g(cc.Label) ], e.prototype, "lblNotice", void 0);
__decorate([ g(cc.Node) ], e.prototype, "playNode", void 0);
__decorate([ g(cc.Label) ], e.prototype, "lblBalance", void 0);
__decorate([ g(c.default) ], e.prototype, "popupCoinTransfer", void 0);
return e = i = __decorate([ p ], e);
}(cc.Component);
i.default = m;
cc._RF.pop();
}, {
"./Lobby/src/Lobby.Cmd": "Lobby.Cmd",
"./ShootFish.Play": "ShootFish.Play",
"./ShootFish.PopupCoinTransfer": "ShootFish.PopupCoinTransfer",
"./scripts/common/BroadcastReceiver": "BroadcastReceiver",
"./scripts/common/Configs": "Configs",
"./scripts/common/Utils": "Utils",
"./scripts/networks/MiniGameNetworkClient": "MiniGameNetworkClient",
"./scripts/networks/Network.InPacket": "Network.InPacket",
"./scripts/networks/ShootFishNetworkClient": "ShootFishNetworkClient"
} ],
"ShootFish.PanelMenu": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "a55ea5KIX5PPb8Fc5IquQjw", "ShootFish.PanelMenu");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("./ShootFish.Play"), o = cc._decorator, c = o.ccclass, s = o.property, a = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.arrow = null;
e.btnSound = null;
e.sfSoundOn = null;
e.sfSoundOff = null;
e.btnMusic = null;
e.sfMusicOn = null;
e.sfMusicOff = null;
e.isShow = !1;
e.soundState = 1;
e.musicState = 1;
return e;
}
e.prototype.show = function(t) {
this.isShow = t;
if (this.isShow) {
this.node.runAction(cc.moveTo(.3, cc.v2(-115, 0)));
this.arrow.runAction(cc.rotateTo(.3, 0));
} else {
this.node.runAction(cc.moveTo(.3, cc.v2(0, 0)));
this.arrow.runAction(cc.rotateTo(.3, 180));
}
this.btnSound.getComponent(cc.Sprite).spriteFrame = this.getSound() > 0 ? this.sfSoundOn : this.sfSoundOff;
this.btnMusic.getComponent(cc.Sprite).spriteFrame = this.getMussic() > 0 ? this.sfMusicOn : this.sfMusicOff;
};
e.prototype.toggleShow = function() {
this.show(!this.isShow);
};
e.prototype.toggleSound = function() {
var t = this.getSound() > 0 ? 0 : 1;
this.btnSound.getComponent(cc.Sprite).spriteFrame = t > 0 ? this.sfSoundOn : this.sfSoundOff;
n.default.instance.settingSound();
};
e.prototype.toggleMusic = function() {
var t = this.getMussic() > 0 ? 0 : 1;
console.log("toggle music result " + t);
this.btnMusic.getComponent(cc.Sprite).spriteFrame = t > 0 ? this.sfMusicOn : this.sfMusicOff;
n.default.instance.settingMusic();
};
e.prototype.getSound = function() {
var t = cc.sys.localStorage.getItem("sound_fish_shot");
null != t && (this.soundState = parseInt(t));
return this.soundState;
};
e.prototype.getMussic = function() {
var t = cc.sys.localStorage.getItem("music_fish_shot");
null != t && (this.musicState = parseInt(t));
return this.musicState;
};
__decorate([ s(cc.Node) ], e.prototype, "arrow", void 0);
__decorate([ s(cc.Button) ], e.prototype, "btnSound", void 0);
__decorate([ s(cc.SpriteFrame) ], e.prototype, "sfSoundOn", void 0);
__decorate([ s(cc.SpriteFrame) ], e.prototype, "sfSoundOff", void 0);
__decorate([ s(cc.Button) ], e.prototype, "btnMusic", void 0);
__decorate([ s(cc.SpriteFrame) ], e.prototype, "sfMusicOn", void 0);
__decorate([ s(cc.SpriteFrame) ], e.prototype, "sfMusicOff", void 0);
return e = __decorate([ c ], e);
}(cc.Component);
i.default = a;
cc._RF.pop();
}, {
"./ShootFish.Play": "ShootFish.Play"
} ],
"ShootFish.Player": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "e57206fFGtP15vHqkZU1nQW", "ShootFish.Player");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("./scripts/common/Utils"), o = cc._decorator, c = o.ccclass, s = o.property, a = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.localPos = 0;
e.lblNickname = null;
e.lblCoin = null;
e.lblBet = null;
e.gunRotate = null;
e.sprGunBar = null;
e.sprFramesGunBar = [];
e.guns = [];
e.id = 0;
e.username = "";
e.nickname = "";
e.coin = 0;
e.avatar = "";
e.serverPos = -1;
e.gun = null;
e.curGunIdx = -1;
return e;
}
e.prototype.set = function(t, e, i, o, c) {
this.id = t;
this.username = e;
this.nickname = i;
this.coin = o;
this.avatar = c;
this.gunRotate.angle = 0;
this.node.active = !0;
this.lblNickname.string = this.nickname;
this.lblCoin.string = n.default.formatNumber(o);
switch (this.localPos) {
case 0:
case 1:
this.gunRotate.angle = 90;
break;

case 2:
case 3:
this.gunRotate.angle = -90;
}
this.setGun(0);
};
e.prototype.leave = function() {
this.id = -1;
this.nickname = "";
this.coin = 0;
this.avatar = "";
this.node.active = !1;
};
e.prototype.setGun = function(t) {
t >= this.guns.length && (t = 0);
if (this.curGunIdx != t) {
this.curGunIdx = t;
for (var e = 0; e < this.guns.length; e++) this.guns[e].node.active = e == t;
this.sprGunBar.spriteFrame = this.sprFramesGunBar[t];
this.gun = this.guns[t];
}
};
e.prototype.rotateGun = function(t) {
var e = this.gunRotate.convertToWorldSpaceAR(cc.Vec2.ZERO), i = t.sub(e), o = Math.atan2(i.y, i.x) * n.default.Rad2Deg;
o < -90 ? o = 180 : o < 0 && o > -90 && (o = 0);
this.gunRotate.angle = o;
};
e.prototype.shoot = function() {
this.gun.setAnimation(0, "2", !1);
this.gun.addAnimation(0, "1", !0);
};
__decorate([ s ], e.prototype, "localPos", void 0);
__decorate([ s(cc.Label) ], e.prototype, "lblNickname", void 0);
__decorate([ s(cc.Label) ], e.prototype, "lblCoin", void 0);
__decorate([ s(cc.Label) ], e.prototype, "lblBet", void 0);
__decorate([ s(cc.Node) ], e.prototype, "gunRotate", void 0);
__decorate([ s(cc.Sprite) ], e.prototype, "sprGunBar", void 0);
__decorate([ s([ cc.SpriteFrame ]) ], e.prototype, "sprFramesGunBar", void 0);
__decorate([ s([ sp.Skeleton ]) ], e.prototype, "guns", void 0);
return e = __decorate([ c ], e);
}(cc.Component);
i.default = a;
cc._RF.pop();
}, {
"./scripts/common/Utils": "Utils"
} ],
"ShootFish.Play": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "984b9+Fq2BGlY3uixmOU8BE", "ShootFish.Play");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("./ShootFish.Player"), o = t("./ShootFish.Bullet"), c = t("./scripts/common/Utils"), s = t("./ShootFish.Fish"), a = t("./scripts/common/Configs"), h = t("./scripts/common/Tween"), r = t("./ShootFish.CoinEffect"), l = t("./ShootFish.EffectJackpot"), u = t("./ShootFish.Lobby"), d = t("./ShootFish.PanelMenu"), p = t("./ShootFish.PopupGuide"), g = t("./ShootFish.EffectBigWin"), m = t("./scripts/networks/ShootFishNetworkClient"), f = cc._decorator, v = f.ccclass, b = f.property, T = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.lobby = null;
e.loading = null;
e.touchPad = null;
e.sprFramesBullet = [];
e.bulletTemplate = null;
e.players = [];
e.fishsAnim = [];
e.fishsNode = null;
e.fishTemplate = null;
e.coinEffectTemplate = null;
e.lblJackpot = null;
e.toggleAuto = null;
e.target = null;
e.waveState = null;
e.btnFastShoot = null;
e.progressFastShoot = null;
e.lblFastShootTime = null;
e.btnTargetFish = null;
e.progressTargetFish = null;
e.lblTargetFishTime = null;
e.effectJackpot = null;
e.effectBigWin = null;
e.effectMegaWin = null;
e.panelMenu = null;
e.popupGuide = null;
e.lblPing = null;
e.lblServerTime = null;
e.soundShoot = null;
e.soundCoin = null;
e.soundBigWin = null;
e.soundBg = null;
e.soundOff = null;
e.musicOff = null;
e.mePlayer = null;
e.bullets = [];
e.fishs = [];
e.coinEffects = [];
e.isStateGeted = !1;
e.inited = !1;
e.lastUpdateTime = -1;
e.roomId = 0;
e.listBet = [];
e.listJackpot = [];
e.betIdx = 0;
e.mapPlayersIdx = [ [ 0, 1, 2, 3 ], [ 1, 0, 3, 2 ], [ 2, 3, 0, 1 ], [ 3, 2, 1, 0 ] ];
e.shootInterval = .25;
e.fastShootInterval = .13;
e.curShootInterval = 0;
e.isShoot = !1;
e.isFastShoot = !1;
e.isTargetFish = !1;
e.targetFish = null;
e.intervalFindTargetFish = 2;
e.curIntervalFindTargetFish = 0;
e.curTimeFastShootCountdown = 0;
e.curTimeTargetFishCountdown = 0;
e.tweens = new Array();
e.remoteMusicBackground = null;
e.musicState = 1;
e.soundState = 1;
return e;
}
i = e;
e.prototype.init = function() {
this.inited || (this.mePlayer = this.players[0]);
};
e.prototype.onLoad = function() {
i.instance = this;
};
e.prototype.start = function() {
var t = this;
this.bulletTemplate.active = !1;
this.touchPad.on(cc.Node.EventType.TOUCH_START, function(e) {
var i = e.getLocation();
t.mePlayer.rotateGun(i);
t.isShoot = !0;
}, this.touchPad);
this.touchPad.on(cc.Node.EventType.TOUCH_MOVE, function(e) {
var i = e.getLocation();
t.mePlayer.rotateGun(i);
}, this.touchPad);
this.touchPad.on(cc.Node.EventType.TOUCH_END, function(e) {
t.isShoot = !1;
}, this.touchPad);
this.touchPad.on(cc.Node.EventType.TOUCH_CANCEL, function(e) {
t.isShoot = !1;
}, this.touchPad);
this.toggleAuto.node.on("toggle", function() {
if (t.toggleAuto.isChecked) {
t.touchPad.active = !1;
t.curIntervalFindTargetFish = t.intervalFindTargetFish;
t.isShoot = !0;
t.findTargetFishInWorld();
} else t.stopAutoShoot();
});
m.default.getInstance().addListener(function(e, i) {
if (t.node.active && t.isStateGeted) switch (e) {
case "OnUpdateJackpot":
t.listJackpot.length = 0;
t.listJackpot.push(i[t.roomId + "1"]);
t.listJackpot.push(i[t.roomId + "2"]);
t.listJackpot.push(i[t.roomId + "3"]);
t.listJackpot.push(i[t.roomId + "4"]);
h.default.numberTo(t.lblJackpot, t.listJackpot[t.betIdx], .3);
break;

case "OnEnterPlayer":
var n = i.data, o = t.mapPlayersIdx[t.mePlayer.serverPos][n.posIndex];
(m = t.players[o]).set(n.id, n.playerId, n.nickname, n.cash, n.avatar);
m.serverPos = n.posIndex;
m.lblBet.string = c.default.formatNumberMin(t.listBet[t.betIdx]);
break;

case "OnLeavePlayer":
if ((r = i.playerId) == a.default.Login.UsernameFish) {
1 == i.reason && u.default.instance.showNotice(!0, "Bạn được mời ra khỏi phòng do không thao tác trong thời gian dài.");
t.back();
}
if (null == (m = t.getPlayerByUsername(r))) break;
m.leave();
break;

case "OnUpdateObject":
var s = i.id;
if (null == (p = t.getFishById(s))) {
console.log("can't find fish " + s);
break;
}
p.setData(i);
break;

case "OnUpdateCash":
var r = i.playerId, l = Number(i.cash), d = i.scr;
r == a.default.Login.UsernameFish && (a.default.Login.CoinFish = l);
if (null == (m = t.getPlayerByUsername(r))) break;
m.coin = l;
m.lblCoin.string = c.default.formatNumber(l);
switch (d) {
case 2:
t.effectBigWin.show(!1);
t.effectMegaWin.show(!1);
t.effectJackpot.show(!0, m.nickname, l);
}
break;

case "OnObjectDie":
s = i.id, l = i.value;
var p, g = i.playerId;
if (null == (p = t.getFishById(s))) break;
p.die();
if (p == t.targetFish) {
t.exploreAllBulletWithTargetFishId(t.targetFish.id);
t.target.active = !1;
t.targetFish = null;
t.curIntervalFindTargetFish = 0;
}
if (null == (m = t.getPlayerByUsername(g))) break;
t.getCoinEffect().run(l, p.node.position, m.node.position);
1 == t.soundState && cc.audioEngine.play(t.soundCoin, !1, 1);
switch (p.type) {
case 15:
case 16:
case 17:
case 18:
case 19:
case 20:
case 21:
t.effectJackpot.node.active || t.effectMegaWin.show(!0, m.nickname, l);
break;

case 22:
case 23:
case 24:
t.effectJackpot.node.active || t.effectBigWin.show(!0, m.nickname, l);
}
break;

case "OnShoot":
r = i.playerId;
var m, f = Number(i.type) - 1, v = i.rad, b = Number(i.target);
if (r == a.default.Login.UsernameFish) break;
if (null == (m = t.getPlayerByUsername(r))) break;
var T = v;
switch (t.mePlayer.serverPos) {
case 0:
T = v;
break;

case 1:
T = Math.PI - v;
break;

case 2:
T = v - Math.PI;
break;

case 3:
T = -v;
}
m.lblBet.string = c.default.formatNumberMin(t.listBet[f]);
m.gunRotate.angle = T * c.default.Rad2Deg;
m.setGun(f);
m.shoot();
var _ = t.getBullet();
_.targetFishId = b;
_.bullet.getComponent(cc.Sprite).spriteFrame = t.sprFramesBullet[f];
_.node.angle = m.gunRotate.angle;
var C = _.node.parent.convertToNodeSpaceAR(m.gunRotate.convertToWorldSpaceAR(cc.Vec2.ZERO));
C.x += 90 * c.default.degreesToVec2(_.node.angle).x;
C.y += 90 * c.default.degreesToVec2(_.node.angle).y;
_.node.position = C;
_.run();
break;

case "OnChat":
break;

case "OnNewState":
switch (i.state) {
case 3:
t.waveState.stopAllActions();
t.waveState.active = !0;
var y = t.waveState.position;
y.x = 1400;
t.waveState.position = y;
y.x = -1400;
t.waveState.runAction(cc.sequence(cc.moveTo(1, y), cc.callFunc(function() {
t.waveState.active = !1;
})));
}
break;

case "OnJackpot":
var S = i.nickname, R = i.value, N = "Phòng 1";
switch (i.tableIndex) {
case 2:
N = "Phòng 2";
break;

case 3:
N = "Phòng 3";
}
c.default.formatNumber(R);
}
}, this);
this.init();
this.checkMusicOnStart();
this.checkSoundOnStart();
};
e.prototype.checkMusicOnStart = function() {
var t = cc.sys.localStorage.getItem("music_fish_shot");
if (null != t) this.musicState = parseInt(t); else {
this.musicState = 1;
cc.sys.localStorage.setItem("music_fish_shot", "1");
}
0 == this.musicState ? this.musicOff.active = !0 : this.musicOff.active = !1;
1 == this.musicState && (this.remoteMusicBackground = cc.audioEngine.playMusic(this.soundBg, !0));
};
e.prototype.checkSoundOnStart = function() {
var t = cc.sys.localStorage.getItem("sound_fish_shot");
if (null != t) this.soundState = parseInt(t); else {
this.soundState = 1;
cc.sys.localStorage.setItem("sound_fish_shot", "1");
}
0 == this.soundState ? this.soundOff.active = !0 : this.soundOff.active = !1;
};
e.prototype.settingMusic = function() {
console.log(this.musicOff.active);
this.musicOff.active = !this.musicOff.active;
if (this.musicOff.active) {
cc.audioEngine.stop(this.remoteMusicBackground);
this.musicState = 0;
} else {
this.remoteMusicBackground = cc.audioEngine.playMusic(this.soundBg, !0);
this.musicState = 1;
}
cc.sys.localStorage.setItem("music_fish_shot", "" + this.musicState);
};
e.prototype.settingSound = function() {
console.log(this.soundOff.active);
this.soundOff.active = !this.soundOff.active;
this.soundOff.active ? this.soundState = 0 : this.soundState = 1;
cc.sys.localStorage.setItem("sound_fish_shot", "" + this.soundState);
};
e.prototype.onDisable = function() {
this.tweens.forEach(function(t) {
t.stop();
});
};
e.prototype.onDestroy = function() {
this.tweens.forEach(function(t) {
t.stop();
});
};
e.prototype.update = function(t) {
null != this.lblPing && (this.lblPing.string = m.default.PING + "ms");
null != this.lblServerTime && this.lblServerTime.node.active && (this.lblServerTime.string = "t: " + m.default.systemCurrentTimeMillis() + " d: " + m.default.TIME_DISTANCE + " mp: " + m.default.MIN_PING);
var e = m.default.systemCurrentTimeMillis();
if (this.isStateGeted && this.lastUpdateTime > 0 && e - this.lastUpdateTime > 500) {
console.log("onresume getstate");
this.getState(!1);
}
this.lastUpdateTime = e;
if (this.curTimeFastShootCountdown > 0) {
this.curTimeFastShootCountdown = Math.max(0, this.curTimeFastShootCountdown - t);
this.lblFastShootTime.string = Math.round(this.curTimeFastShootCountdown) + "s";
if (0 == this.curTimeFastShootCountdown) {
this.lblFastShootTime.node.active = !1;
this.btnFastShoot.enabled = !0;
}
}
if (this.curTimeTargetFishCountdown > 0) {
this.curTimeTargetFishCountdown = Math.max(0, this.curTimeTargetFishCountdown - t);
this.lblTargetFishTime.string = Math.round(this.curTimeTargetFishCountdown) + "s";
if (0 == this.curTimeTargetFishCountdown) {
this.lblTargetFishTime.node.active = !1;
this.btnTargetFish.enabled = !0;
}
}
this.updateShoot(t);
for (var i = 0, n = this.bullets.length; i < n; i++) {
this.bullets[i].updateRealTime(t);
}
var o = new Array();
for (i = 0, n = this.fishs.length; i < n; i++) {
var c = this.fishs[i];
c.updateRealTime(t);
c.node.active && Math.abs(c.node.x) < 704 && Math.abs(c.node.y) < 360 * 1.1 ? o.push(c.getPolygon()) : o.push(null);
}
i = 0;
for (var s = this.bullets.length; i < s; i++) {
var a = this.bullets[i];
if (a.node.active && !a.isExploring && !a.isExplored) for (var h = a.getCircle(), r = 0, l = this.fishs.length; r < l; r++) {
var u = this.fishs[r];
if (null != o[r] && !(a.targetFishId > 0 && a.targetFishId != u.id)) {
if (SAT.testCirclePolygon(h, o[r])) {
a.explore();
u.hurt();
break;
}
}
}
}
o.length = 0;
};
e.prototype.play = function() {
var t = this;
this.isStateGeted = !1;
this.resetView();
m.default.getInstance().ping(function() {
m.default.getInstance().ping(function() {
m.default.getInstance().ping(function() {
console.log(t.roomId);
m.default.getInstance().request("play", {
playerId: a.default.Login.UsernameFish,
password: a.default.Login.PasswordFish,
index: t.roomId
}, function(e) {
console.log(e);
if (e.ok) t.getState(!0); else {
switch (e.err) {
case 4:
u.default.instance.showNotice(!0, "Số dư không đủ vui lòng nạp thêm.");
u.default.instance.popupCoinTransfer.show();
break;

case 1:
m.default.getInstance().request("quit", null, function() {}, t);
u.default.instance.showNotice(!0, "Lỗi " + e.err + ", vui lòng thử lại.");
break;

default:
u.default.instance.showNotice(!0, "Lỗi " + e.err + ", không xác định.");
}
t.show(!1);
t.lobby.getComponent(u.default).show(!0);
}
}, t);
}, t);
}, t);
}, this);
};
e.prototype.resetView = function() {
this.betIdx = 0;
for (var t = 0; t < this.players.length; t++) this.players[t].leave();
for (t = 0; t < this.fishs.length; t++) this.fishs[t].node.removeFromParent();
this.fishs.length = 0;
for (t = 0; t < this.bullets.length; t++) this.bullets[t].node.active = !1;
for (t = 0; t < this.coinEffects.length; t++) this.coinEffects[t].node.active = !1;
this.effectBigWin.show(!1);
this.effectMegaWin.show(!1);
this.effectJackpot.show(!1);
this.popupGuide.active = !1;
this.waveState.stopAllActions();
this.waveState.active = !1;
};
e.prototype.getJackpot = function() {
var t = this;
m.default.getInstance().request("getJackpot", null, function(e) {
if (e.ok) {
t.listJackpot.length = 0;
t.listJackpot.push(e.data[t.roomId + "1"]);
t.listJackpot.push(e.data[t.roomId + "2"]);
t.listJackpot.push(e.data[t.roomId + "3"]);
t.listJackpot.push(e.data[t.roomId + "4"]);
h.default.numberTo(t.lblJackpot, t.listJackpot[t.betIdx], .3);
}
}, this);
};
e.prototype.getState = function(t) {
var e = this;
t || u.default.instance.showLoading(!0);
this.isStateGeted = !1;
this.resetView();
m.default.getInstance().request("state", null, function(n) {
t || u.default.instance.showLoading(!1);
for (var o = n.players, h = null, r = 0, l = 0; l < o.length; l++) if (o[l].playerId == a.default.Login.UsernameFish) {
r = o[l].posIndex;
h = o[l];
a.default.Login.CoinFish = o[l].cash;
break;
}
console.log("mePlayerServerPos: " + r);
for (l = 0; l < o.length; l++) {
var d = e.mapPlayersIdx[r][o[l].posIndex], p = o[l], g = e.players[d];
g.set(p.id, p.playerId, p.nickname, p.cash, p.avatar);
g.serverPos = p.posIndex;
g.lblBet.string = c.default.formatNumberMin(e.listBet[e.betIdx]);
}
var m = n.objects.concat(n.sobjects);
for (l = 0; l < m.length; l++) {
var f = cc.instantiate(e.fishTemplate).getComponent(s.default);
f.node.parent = e.fishsNode;
f.setData(m[l]);
e.fishs.push(f);
}
var v = n.time - h.rfire, b = i.SERVER_CONFIG.FastFireCoolDownS;
e.progressFastShoot.progress = 0;
if (v > b) {
e.btnFastShoot.enabled = !0;
e.lblFastShootTime.node.active = !1;
} else {
e.btnFastShoot.enabled = !1;
e.curTimeFastShootCountdown = v;
e.lblFastShootTime.string = e.curTimeFastShootCountdown + "s";
e.lblFastShootTime.node.active = !0;
}
var T = n.time - h.snipe, _ = i.SERVER_CONFIG.SnipeCoolDownS;
e.progressTargetFish.progress = 0;
if (T > _) {
e.btnTargetFish.enabled = !0;
e.lblFastShootTime.node.active = !1;
} else {
e.btnTargetFish.enabled = !1;
e.curTimeTargetFishCountdown = T;
e.lblTargetFishTime.string = e.curTimeTargetFishCountdown + "s";
e.lblTargetFishTime.node.active = !0;
}
e.isStateGeted = !0;
e.getJackpot();
t && (e.loading.active = !1);
}, this);
};
e.prototype.updateShoot = function(t) {
if (this.toggleAuto.isChecked || this.isTargetFish) if (null != this.targetFish) {
var e = this.mePlayer.gunRotate.convertToWorldSpaceAR(cc.Vec2.ZERO), i = this.targetFish.node.convertToWorldSpaceAR(cc.v2(this.targetFish.node.width / 2, 0)), n = c.default.v2Distance(i, e);
if (Math.abs(this.targetFish.node.x) > 512 || Math.abs(this.targetFish.node.y) > 288 || n < 135) {
this.exploreAllBulletWithTargetFishId(this.targetFish.id);
this.target.active = !1;
this.targetFish = null;
this.curIntervalFindTargetFish = 0;
} else {
var o = i.sub(e), s = Math.atan2(o.y, o.x) * c.default.Rad2Deg;
this.mePlayer.gunRotate.angle = s;
this.target.position = this.target.parent.convertToNodeSpaceAR(i);
}
} else if (!this.isTargetFish) {
this.curIntervalFindTargetFish = Math.max(0, this.curIntervalFindTargetFish - t);
0 == this.curIntervalFindTargetFish && this.findTargetFishInWorld();
}
if (this.curShootInterval > 0) this.curShootInterval = Math.max(0, this.curShootInterval - t); else if (this.isShoot) {
this.curShootInterval = this.isFastShoot ? this.fastShootInterval : this.shootInterval;
if (a.default.Login.CoinFish < this.listBet[this.betIdx]) {
u.default.instance.showNotice(!0, "Số dư không đủ, vui lòng nạp thêm.");
this.isShoot = !1;
this.toggleAuto.isChecked && this.stopAutoShoot();
return;
}
if ((this.toggleAuto.isChecked || this.isTargetFish) && null == this.targetFish) return;
a.default.Login.CoinFish = Math.max(0, a.default.Login.CoinFish - this.listBet[this.betIdx]);
this.mePlayer.coin = a.default.Login.CoinFish;
this.mePlayer.lblCoin.string = c.default.formatNumber(a.default.Login.CoinFish);
this.mePlayer.shoot();
1 == this.soundState && cc.audioEngine.play(this.soundShoot, !1, 1);
var h = this.mePlayer.gunRotate.angle, r = this.getBullet();
r.bullet.getComponent(cc.Sprite).spriteFrame = this.sprFramesBullet[this.betIdx];
r.targetFishId = null != this.targetFish ? this.targetFish.id : -1;
r.node.angle = h;
var l = r.node.parent.convertToNodeSpaceAR(this.mePlayer.gunRotate.convertToWorldSpaceAR(cc.Vec2.ZERO));
l.x += 90 * c.default.degreesToVec2(r.node.angle).x;
l.y += 90 * c.default.degreesToVec2(r.node.angle).y;
r.node.position = l;
r.run();
var d = h * c.default.Deg2Rad;
switch (this.mePlayer.serverPos) {
case 0:
d = d;
break;

case 1:
d = Math.PI - d;
break;

case 2:
d -= Math.PI;
break;

case 3:
d = -d;
}
m.default.getInstance().notify("shoot", {
rad: d,
type: this.betIdx + 1,
target: null != this.targetFish ? this.targetFish.id : -1,
rapidFire: this.isFastShoot,
auto: !1
});
}
};
e.prototype.findTargetFishInWorld = function() {
this.curIntervalFindTargetFish = this.intervalFindTargetFish;
for (var t = [], e = this.mePlayer.gunRotate.convertToWorldSpaceAR(cc.Vec2.ZERO), i = 0; i < this.fishs.length; i++) {
var n = this.fishs[i].node;
if (n.active && Math.abs(n.position.x) <= 512 && Math.abs(n.position.y) <= 288) {
var o = n.convertToWorldSpaceAR(cc.Vec2.ZERO), s = c.default.v2Distance(e, o);
s >= 135 && t.push({
fish: this.fishs[i],
distance: s
});
}
}
if (t.length > 0) {
this.targetFish = t[c.default.randomRangeInt(0, t.length)].fish;
this.target.active = !0;
this.target.position = this.targetFish.node.position;
}
};
e.prototype.stopAutoShoot = function() {
this.isShoot = !1;
this.toggleAuto.isChecked = !1;
this.target.active = !1;
this.touchPad.active = !0;
this.curIntervalFindTargetFish = 0;
this.targetFish = null;
};
e.prototype.getBullet = function() {
for (var t = null, e = 0; e < this.bullets.length; e++) if (!this.bullets[e].node.active) {
t = this.bullets[e];
break;
}
if (null == t) {
var i = cc.instantiate(this.bulletTemplate);
i.parent = this.bulletTemplate.parent;
t = i.getComponent(o.default);
this.bullets.push(t);
}
t.node.active = !0;
t.targetFishId = -1;
return t;
};
e.prototype.exploreAllBulletWithTargetFishId = function(t) {
for (var e = 0; e < this.bullets.length; e++) this.bullets[e].node.active && this.bullets[e].targetFishId >= 0 && this.bullets[e].targetFishId == t && (this.bullets[e].targetFishId = -1);
};
e.prototype.getCoinEffect = function() {
for (var t = null, e = 0; e < this.coinEffects.length; e++) if (!this.coinEffects[e].node.active) {
t = this.coinEffects[e];
break;
}
if (null == t) {
var i = cc.instantiate(this.coinEffectTemplate);
i.parent = this.coinEffectTemplate.parent;
t = i.getComponent(r.default);
this.coinEffects.push(t);
}
t.node.active = !0;
t.node.setSiblingIndex(t.node.parent.children.length - 1);
return t;
};
e.prototype.getFishById = function(t) {
for (var e = 0; e < this.fishs.length; e++) if (this.fishs[e].id == t) return this.fishs[e];
return null;
};
e.prototype.getPlayerById = function(t) {
if (t <= 0) return null;
for (var e = 0; e < this.players.length; e++) if (this.players[e].id > 0 && this.players[e].id == t) return this.players[e];
return null;
};
e.prototype.getPlayerByUsername = function(t) {
if (null == t || "" == t) return null;
for (var e = 0; e < this.players.length; e++) if (null != this.players[e].username && "" != this.players[e].username && this.players[e].username == t) return this.players[e];
return null;
};
e.prototype.getFishAnimByType = function(t) {
var e = "";
switch (t) {
case 0:
e = "fish0";
break;

case 1:
e = "fish1";
break;

case 2:
e = "fish2";
break;

case 3:
e = "fish3";
break;

case 4:
e = "fish4";
break;

case 5:
e = "fish5";
break;

case 6:
e = "fish6";
break;

case 7:
e = "fish7";
break;

case 8:
case 9:
e = "fish9";
break;

case 10:
e = "fish10";
break;

case 11:
e = "fish11";
break;

case 12:
e = "fish12";
break;

case 13:
e = "fish13";
break;

case 14:
e = "fish14";
break;

case 15:
e = "fish15";
break;

case 16:
e = "fish16";
break;

case 17:
e = "fish17";
break;

case 18:
e = "fish18";
break;

case 19:
e = "fish19";
break;

case 20:
e = "fish20";
break;

case 21:
e = "fish21";
break;

case 22:
e = "fish22";
break;

case 23:
e = "fish23";
break;

case 24:
e = "fish24";
}
for (var i = 0; i < this.fishsAnim.length; i++) if (null != this.fishsAnim[i].name && "" != this.fishsAnim[i].name && this.fishsAnim[i].name == e) return this.fishsAnim[i];
return this.fishsAnim[0];
};
e.prototype.actGetState = function() {
this.getState(!1);
};
e.prototype.actBetUp = function() {
if (this.betIdx < this.listBet.length - 1) {
this.betIdx++;
this.mePlayer.lblBet.string = c.default.formatNumberMin(this.listBet[this.betIdx]);
this.mePlayer.setGun(this.betIdx);
h.default.numberTo(this.lblJackpot, this.listJackpot[this.betIdx], .3);
}
};
e.prototype.actBetDown = function() {
if (this.betIdx > 0) {
this.betIdx--;
this.mePlayer.lblBet.string = c.default.formatNumberMin(this.listBet[this.betIdx]);
this.mePlayer.setGun(this.betIdx);
h.default.numberTo(this.lblJackpot, this.listJackpot[this.betIdx], .3);
}
};
e.prototype.actBack = function() {
this.back();
};
e.prototype.actFastShoot = function() {
var t = this;
this.isFastShoot = !0;
this.btnFastShoot.enabled = !1;
var e = i.SERVER_CONFIG.FastFireDuration;
this.progressFastShoot.progress = 1;
this.tweens.push(cc.tween(this.progressFastShoot).to(e, {
progress: 0
}).call(function() {
t.isFastShoot = !1;
t.curTimeFastShootCountdown = i.SERVER_CONFIG.FastFireCoolDownS;
t.lblFastShootTime.string = t.curTimeFastShootCountdown + "s";
t.lblFastShootTime.node.active = !0;
}).start());
};
e.prototype.actTargetFish = function() {
var t = this;
this.isShoot = !0;
this.isTargetFish = !0;
this.btnTargetFish.enabled = !1;
var e = i.SERVER_CONFIG.SnipeDurationS;
this.progressTargetFish.progress = 1;
this.tweens.push(cc.tween(this.progressTargetFish).to(e, {
progress: 0
}).call(function() {
t.isTargetFish = !1;
t.targetFish = null;
t.target.active = !1;
t.curTimeTargetFishCountdown = i.SERVER_CONFIG.SnipeCoolDownS;
t.lblTargetFishTime.string = t.curTimeTargetFishCountdown + "s";
t.lblTargetFishTime.node.active = !0;
t.fishs.forEach(function(t) {
t.getComponent(cc.Button).enabled = !1;
});
t.isShoot = t.toggleAuto.isChecked;
t.touchPad.active = !t.toggleAuto.isChecked;
}).start());
this.touchPad.active = !1;
this.fishs.forEach(function(e) {
e.getComponent(cc.Button).enabled = !0;
e.node.off("click");
e.node.on("click", function() {
t.targetFish = e;
t.target.active = !0;
});
});
};
e.prototype.back = function() {
var t = this;
this.isStateGeted = !1;
this.stopAutoShoot();
u.default.instance.showLoading(!0);
m.default.getInstance().request("quit", null, function() {
u.default.instance.showLoading(!1);
t.resetView();
t.show(!1);
t.lobby.getComponent(u.default).show(!0);
}, this);
};
e.prototype.actEffectJackpotTest = function() {
this.effectJackpot.show(!0, "Test nickname", 54032423);
};
e.prototype.actEffectBigWinTest = function() {
this.effectBigWin.show(!0, "Test nickname", 54032423);
};
e.prototype.actEffectMegaWinTest = function() {
this.effectMegaWin.show(!0, "Test nickname", 54032423);
};
e.prototype.show = function(t, e) {
void 0 === e && (e = 0);
if (t) {
if (null == i.SERVER_CONFIG) {
this.lobby.getComponent(u.default).show(!0);
u.default.instance.showNotice(!0, "Bạn chưa đăng nhập.");
return;
}
this.node.active = !0;
this.loading.active = !0;
this.roomId = e;
this.stopAutoShoot();
this.listBet.length = 0;
this.listBet.push(i.SERVER_CONFIG.TypeToValue.Bullet1 * i.SERVER_CONFIG.TableBulletValueRate[this.roomId]);
this.listBet.push(i.SERVER_CONFIG.TypeToValue.Bullet2 * i.SERVER_CONFIG.TableBulletValueRate[this.roomId]);
this.listBet.push(i.SERVER_CONFIG.TypeToValue.Bullet3 * i.SERVER_CONFIG.TableBulletValueRate[this.roomId]);
this.listBet.push(i.SERVER_CONFIG.TypeToValue.Bullet4 * i.SERVER_CONFIG.TableBulletValueRate[this.roomId]);
this.shootInterval = 1 / i.SERVER_CONFIG.FIRE_RATE;
this.fastShootInterval = this.shootInterval / i.SERVER_CONFIG.FastFireRate;
this.play();
} else {
this.popupGuide.active && this.popupGuide.getComponent(p.default).dismiss();
this.node.active = !1;
}
};
var i;
e.instance = null;
e.SERVER_CONFIG = null;
__decorate([ b(cc.Node) ], e.prototype, "lobby", void 0);
__decorate([ b(cc.Node) ], e.prototype, "loading", void 0);
__decorate([ b(cc.Node) ], e.prototype, "touchPad", void 0);
__decorate([ b([ cc.SpriteFrame ]) ], e.prototype, "sprFramesBullet", void 0);
__decorate([ b(cc.Node) ], e.prototype, "bulletTemplate", void 0);
__decorate([ b([ n.default ]) ], e.prototype, "players", void 0);
__decorate([ b([ cc.Node ]) ], e.prototype, "fishsAnim", void 0);
__decorate([ b(cc.Node) ], e.prototype, "fishsNode", void 0);
__decorate([ b(cc.Node) ], e.prototype, "fishTemplate", void 0);
__decorate([ b(cc.Node) ], e.prototype, "coinEffectTemplate", void 0);
__decorate([ b(cc.Label) ], e.prototype, "lblJackpot", void 0);
__decorate([ b(cc.Toggle) ], e.prototype, "toggleAuto", void 0);
__decorate([ b(cc.Node) ], e.prototype, "target", void 0);
__decorate([ b(cc.Node) ], e.prototype, "waveState", void 0);
__decorate([ b(cc.Button) ], e.prototype, "btnFastShoot", void 0);
__decorate([ b(cc.ProgressBar) ], e.prototype, "progressFastShoot", void 0);
__decorate([ b(cc.Label) ], e.prototype, "lblFastShootTime", void 0);
__decorate([ b(cc.Button) ], e.prototype, "btnTargetFish", void 0);
__decorate([ b(cc.ProgressBar) ], e.prototype, "progressTargetFish", void 0);
__decorate([ b(cc.Label) ], e.prototype, "lblTargetFishTime", void 0);
__decorate([ b(l.default) ], e.prototype, "effectJackpot", void 0);
__decorate([ b(g.default) ], e.prototype, "effectBigWin", void 0);
__decorate([ b(g.default) ], e.prototype, "effectMegaWin", void 0);
__decorate([ b(d.default) ], e.prototype, "panelMenu", void 0);
__decorate([ b(cc.Node) ], e.prototype, "popupGuide", void 0);
__decorate([ b(cc.Label) ], e.prototype, "lblPing", void 0);
__decorate([ b(cc.Label) ], e.prototype, "lblServerTime", void 0);
__decorate([ b({
type: cc.AudioClip
}) ], e.prototype, "soundShoot", void 0);
__decorate([ b({
type: cc.AudioClip
}) ], e.prototype, "soundCoin", void 0);
__decorate([ b({
type: cc.AudioClip
}) ], e.prototype, "soundBigWin", void 0);
__decorate([ b({
type: cc.AudioClip
}) ], e.prototype, "soundBg", void 0);
__decorate([ b(cc.Node) ], e.prototype, "soundOff", void 0);
__decorate([ b(cc.Node) ], e.prototype, "musicOff", void 0);
return e = i = __decorate([ v ], e);
}(cc.Component);
i.default = T;
cc._RF.pop();
}, {
"./ShootFish.Bullet": "ShootFish.Bullet",
"./ShootFish.CoinEffect": "ShootFish.CoinEffect",
"./ShootFish.EffectBigWin": "ShootFish.EffectBigWin",
"./ShootFish.EffectJackpot": "ShootFish.EffectJackpot",
"./ShootFish.Fish": "ShootFish.Fish",
"./ShootFish.Lobby": "ShootFish.Lobby",
"./ShootFish.PanelMenu": "ShootFish.PanelMenu",
"./ShootFish.Player": "ShootFish.Player",
"./ShootFish.PopupGuide": "ShootFish.PopupGuide",
"./scripts/common/Configs": "Configs",
"./scripts/common/Tween": "Tween",
"./scripts/common/Utils": "Utils",
"./scripts/networks/ShootFishNetworkClient": "ShootFishNetworkClient"
} ],
"ShootFish.PopupCoinTransfer": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "9fa1ail0mNB76lTbLTi3c3d", "ShootFish.PopupCoinTransfer");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("./scripts/common/Dialog2"), o = t("./scripts/common/BroadcastReceiver"), c = t("./scripts/common/Utils"), s = t("./scripts/common/Configs"), a = t("./scripts/networks/ShootFishNetworkClient"), h = t("./ShootFish.Lobby"), r = cc._decorator, l = r.ccclass, u = r.property, d = function() {
function t() {
this.lblBalance = null;
this.edbCoin = null;
this.quickButtons = null;
this.popup = null;
this.values = [ 5e4, 1e5, 2e5, 5e5, 1e6, 2e6, 5e6, 1e7, 2e7 ];
}
t.prototype.start = function(t) {
var e = this;
this.popup = t;
this.edbCoin.node.on("editing-did-ended", function() {
var t = c.default.stringToInt(e.edbCoin.string);
e.edbCoin.string = c.default.formatNumber(t);
});
for (var i, n = function(t) {
i = o.quickButtons.children[t];
var n = o.values[t];
i.getComponentInChildren(cc.Label).string = c.default.formatNumber(n);
i.on("click", function() {
e.edbCoin.string = c.default.formatNumber(n);
});
}, o = this, s = 0; s < this.quickButtons.childrenCount; s++) n(s);
};
t.prototype.submit = function() {
var t = this, e = c.default.stringToInt(this.edbCoin.string);
if (e <= 0) h.default.instance.showNotice(!0, "Số tiền đã nhập không hợp lệ."); else {
h.default.instance.showLoading(!0, -1);
a.default.getInstance().request("xxengCashin", {
ccash: e
}, function(e) {
if (0 != e.ok) {
s.default.Login.CoinFish = e.newCash;
o.default.send(o.default.USER_UPDATE_COIN);
s.default.Login.Coin = e.Cash;
cc.RedT.userData({
data: {
red: e.Cash
}
});
h.default.instance.showNotice(!0, "Thao tác thành công.");
h.default.instance.showLoading(!1, -1);
t.reset();
} else {
h.default.instance.showNotice(!0, "Thao tác thất bại, vui lòng thử lại sau.");
h.default.instance.showLoading(!1, -1);
}
}, this.popup);
}
};
t.prototype.reset = function() {
this.edbCoin.string = "";
this.lblBalance.string = c.default.formatNumber(s.default.Login.Coin);
};
__decorate([ u(cc.Label) ], t.prototype, "lblBalance", void 0);
__decorate([ u(cc.EditBox) ], t.prototype, "edbCoin", void 0);
__decorate([ u(cc.Node) ], t.prototype, "quickButtons", void 0);
return t = __decorate([ l("PopupCoinTransfer.TabCashIn") ], t);
}();
i.TabCashIn = d;
var p = function() {
function t() {
this.lblBalance = null;
this.edbCoin = null;
this.quickButtons = null;
this.popup = null;
this.values = [ 5e4, 1e5, 2e5, 5e5, 1e6, 2e6, 5e6, 1e7, 2e7 ];
}
t.prototype.start = function(t) {
var e = this;
this.popup = t;
this.edbCoin.node.on("editing-did-ended", function() {
var t = c.default.stringToInt(e.edbCoin.string);
e.edbCoin.string = c.default.formatNumber(t);
});
for (var i, n = function(t) {
i = o.quickButtons.children[t];
var n = o.values[t];
i.getComponentInChildren(cc.Label).string = c.default.formatNumber(n);
i.on("click", function() {
e.edbCoin.string = c.default.formatNumber(n);
});
}, o = this, s = 0; s < this.quickButtons.childrenCount; s++) n(s);
};
t.prototype.submit = function() {
var t = this, e = c.default.stringToInt(this.edbCoin.string);
if (e <= 0) h.default.instance.showNotice(!0, "Số tiền đã nhập không hợp lệ."); else {
h.default.instance.showLoading(!0, -1);
a.default.getInstance().request("xxengCashin", {
ccash: -e
}, function(e) {
if (0 != e.ok) {
s.default.Login.CoinFish = e.newCash;
o.default.send(o.default.USER_UPDATE_COIN);
s.default.Login.Coin = e.Cash;
cc.RedT.userData({
data: {
red: e.Cash
}
});
h.default.instance.showNotice(!0, "Thao tác thành công.");
h.default.instance.showLoading(!1, -1);
t.reset();
} else {
h.default.instance.showNotice(!0, "Thao tác thất bại, vui lòng thử lại sau.");
h.default.instance.showLoading(!1, -1);
}
}, this.popup);
}
};
t.prototype.reset = function() {
this.edbCoin.string = "";
this.lblBalance.string = c.default.formatNumber(s.default.Login.CoinFish);
};
__decorate([ u(cc.Label) ], t.prototype, "lblBalance", void 0);
__decorate([ u(cc.EditBox) ], t.prototype, "edbCoin", void 0);
__decorate([ u(cc.Node) ], t.prototype, "quickButtons", void 0);
return t = __decorate([ l("PopupCoinTransfer.TabCashOut") ], t);
}();
i.TabCashOut = p;
var g = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.tabs = null;
e.tabContents = null;
e.tabCashIn = null;
e.tabCashOut = null;
e.tabSelectedIdx = 0;
return e;
}
e.prototype.start = function() {
for (var t = this, e = function(e) {
i.tabs.toggleItems[e].node.on("toggle", function() {
t.tabSelectedIdx = e;
t.onTabChanged();
});
}, i = this, n = 0; n < this.tabs.toggleItems.length; n++) e(n);
o.default.register(o.default.USER_UPDATE_COIN, function() {
t.tabCashIn.lblBalance.string = c.default.formatNumber(s.default.Login.Coin);
t.tabCashOut.lblBalance.string = c.default.formatNumber(s.default.Login.CoinFish);
}, this);
this.tabCashIn.start(this);
this.tabCashOut.start(this);
};
e.prototype.show = function() {
t.prototype.show.call(this);
this.tabSelectedIdx = 0;
this.tabs.toggleItems[this.tabSelectedIdx].isChecked = !0;
this.onTabChanged();
};
e.prototype.userData = function(t) {
s.default.Login.Coin = t;
this.tabCashIn.lblBalance.string = c.default.formatNumber(s.default.Login.Coin);
this.tabCashOut.lblBalance.string = c.default.formatNumber(s.default.Login.CoinFish);
};
e.prototype.onTabChanged = function() {
for (var t = 0; t < this.tabContents.childrenCount; t++) this.tabContents.children[t].active = t == this.tabSelectedIdx;
for (var e = 0; e < this.tabs.toggleItems.length; e++) this.tabs.toggleItems[e].node.getComponentInChildren(cc.LabelOutline).color = e == this.tabSelectedIdx ? cc.Color.BLACK.fromHEX("#AA5F00") : cc.Color.BLACK.fromHEX("#4677F3");
switch (this.tabSelectedIdx) {
case 0:
this.tabCashIn.reset();
break;

case 1:
this.tabCashOut.reset();
}
};
e.prototype.onData = function(t) {};
e.prototype.actSubmitCashIn = function() {
this.tabCashIn.submit();
};
e.prototype.actSubmitCashOut = function() {
this.tabCashOut.submit();
};
e.prototype.actClearCashIn = function() {
this.tabCashIn.edbCoin.string = "0";
};
e.prototype.actClearCashOut = function() {
this.tabCashOut.edbCoin.string = "0";
};
__decorate([ u(cc.ToggleContainer) ], e.prototype, "tabs", void 0);
__decorate([ u(cc.Node) ], e.prototype, "tabContents", void 0);
__decorate([ u(d) ], e.prototype, "tabCashIn", void 0);
__decorate([ u(p) ], e.prototype, "tabCashOut", void 0);
return e = __decorate([ l ], e);
}(n.default);
i.default = g;
cc._RF.pop();
}, {
"./ShootFish.Lobby": "ShootFish.Lobby",
"./scripts/common/BroadcastReceiver": "BroadcastReceiver",
"./scripts/common/Configs": "Configs",
"./scripts/common/Dialog2": "Dialog2",
"./scripts/common/Utils": "Utils",
"./scripts/networks/ShootFishNetworkClient": "ShootFishNetworkClient"
} ],
"ShootFish.PopupGuide": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "96a5ey8T+xPcJT+f5KdjdFX", "ShootFish.PopupGuide");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("./scripts/common/Dialog2"), o = t("./ShootFish.Play"), c = cc._decorator, s = c.ccclass, a = c.property, h = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.grid = null;
e.itemTemplate = null;
e.items = [];
e.mapFishType = {
0: [ "Cuttle", 1 ],
1: [ "GoldFish", 1 ],
2: [ "LightenFish", 1 ],
3: [ "Mermaid", 1 ],
4: [ "Octopus", 1 ],
5: [ "PufferFish", 1 ],
6: [ "SeaFish", 1 ],
7: [ "Shark", 1 ],
8: [ "Stringray", 1 ],
9: [ "Turtle", 1 ],
10: [ "CaThanTai", 1 ],
11: [ "FlyingFish", 1 ],
12: [ "GoldenFrog", .2 ],
13: [ "SeaTurtle", 1 ],
14: [ "MerMan", 1 ],
15: [ "Phoenix", .7 ],
16: [ "MermaidBig", .6 ],
17: [ "MermaidSmall", .6 ],
18: [ "BombFish", .6 ],
19: [ "Fish19", .6 ],
20: [ "Fish20", .6 ],
21: [ "Fish21", .4 ],
22: [ "Fish22", .3 ],
23: [ "Fish23", .3 ],
24: [ "Fish24", .3 ]
};
return e;
}
e.prototype.show = function() {
t.prototype.show.call(this);
this.itemTemplate.active = !1;
};
e.prototype._onShowed = function() {
t.prototype._onShowed.call(this);
if (null != o.default.SERVER_CONFIG) for (var e in this.mapFishType) {
var i = this.mapFishType[e][0], n = this.mapFishType[e][1], c = o.default.SERVER_CONFIG.FishPhysicalData[i], s = cc.instantiate(this.itemTemplate);
s.parent = this.grid;
s.active = !0;
var a = cc.instantiate(o.default.instance.getFishAnimByType(Number(e)));
a.parent = s.getChildByName("fishParent");
a.scale = n;
a.angle = 35;
s.getChildByName("lblFactor").getComponent(cc.Label).string = (c.Health / 100).toString();
this.items.push(s);
}
};
e.prototype.dismiss = function() {
this.items.forEach(function(t) {
t.removeFromParent();
});
t.prototype.dismiss.call(this);
};
__decorate([ a(cc.Node) ], e.prototype, "grid", void 0);
__decorate([ a(cc.Node) ], e.prototype, "itemTemplate", void 0);
return e = __decorate([ s ], e);
}(n.default);
i.default = h;
cc._RF.pop();
}, {
"./ShootFish.Play": "ShootFish.Play",
"./scripts/common/Dialog2": "Dialog2"
} ],
ShootFishNetworkClient: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "67b32TSLuBDyITpP+LjS3tz", "ShootFishNetworkClient");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("../../scripts/common/Configs"), o = t("../../ShootFish.Lobby"), c = t("../../../OanTuTi/OanTuTi.OanTuTiController"), s = cc._decorator, a = s.ccclass, h = (s.property, 
function() {
return function(t, e) {
this.target = t;
this.callback = e;
};
}()), r = function() {
return function(t, e) {
this.target = t;
this.callback = e;
};
}(), l = function() {
return function(t, e) {
this.target = t;
this.callback = e;
};
}(), u = function() {
function t() {
this.isUseWSS = n.default.App.USE_WSS;
this.isAutoReconnect = !0;
this.ws = null;
this.host = "wss://api.cloudvps.help/";
this.port = 443;
this.isForceClose = !1;
this.onOpenes = [];
this.onCloses = [];
this.xorKey = "dmVyeSBzZWNyZXQ";
this.requests = new Object();
this.intervalPing = -1;
this.listeners = new Array();
this.isLogining = !1;
this.isLogined = !1;
this.onLogined = null;
}
e = t;
t.serverCurrentTimeMillis = function() {
return Date.now() - this.TIME_DISTANCE + Math.round(e.MIN_PING / 2);
};
t.systemCurrentTimeMillis = function() {
return Date.now();
};
t.getInstance = function() {
null == this.instance && (this.instance = new e());
return this.instance;
};
t.prototype.checkConnect = function(t, e) {
this.onLogined = e;
if (this.isConnected()) this.isLogined ? this.onLogined(this.isLogined) : this.login(t); else {
"banca" == t ? o.default.instance.showNotice(!0, "Kết nối thành công") : "oantuti" == t && c.default.instance.showNotice(!0, "Kết nối thành công");
this.connect();
}
};
t.prototype.RandomUserName = function(t) {
for (var e = "", i = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", n = i.length, o = 0; o < t; o++) e += i.charAt(Math.floor(Math.random() * n));
return e;
};
t.prototype.login = function(t) {
var i = this;
if (!this.isLogining) {
this.isLogining = !0;
"banca" == t ? o.default.instance.showNotice(!0, "Đang kết nối...") : "oantuti" == t && c.default.instance.showNotice(!0, "Đang kết nối...");
this.Username = cc.RedT.user.name;
this.request("quickLogin", {
deviceId: this.Username,
platform: "android",
language: "vi"
}, function(e) {
i.isLogining = !1;
console.log(e);
if (e.ok) {
"banca" == t ? o.default.instance.showNotice(!0, "Kết nối thành công") : "oantuti" == t && c.default.instance.showNotice(!0, "Kết nối thành công");
n.default.Login.CoinFish = e.cash;
n.default.Login.UsernameFish = e.username;
n.default.Login.PasswordFish = e.password;
n.default.Login.UserIdFish = e.userId;
n.default.Login.FishConfigs = e.config;
n.default.Login.Nickname = e.username;
null != i.onLogined && i.onLogined(!0);
} else null != i.onLogined && i.onLogined(!1);
}, e.NODE_FIXED);
}
};
t.prototype.onOpen = function(t) {
var e = this;
console.log("onOpen");
this.intervalPing = setInterval(function() {
return e.ping();
}, 3e3);
this.ping();
for (var i = 0; i < this.onOpenes.length; i++) {
var n = this.onOpenes[i];
if (n.target && n.target instanceof Object && n.target.node) n.callback(); else {
this.onOpenes.splice(i, 1);
i--;
}
}
null != this.onLogined && this.login();
};
t.prototype.onMessage = function(t) {
var e = new Uint8Array(t.data);
e = this.doXOR(e, 0, e.length);
var i = msgpack.decode(e);
if (i.hasOwnProperty("msgId")) if (0 == i.msgId) for (var n = 0; n < this.listeners.length; n++) {
if ((o = this.listeners[n]).target && o.target instanceof Object && o.target.node) o.callback(i.route, i.data); else {
this.listeners.splice(n, 1);
n--;
}
} else if (this.requests.hasOwnProperty(i.msgId)) {
var o;
(o = this.requests[i.msgId]).target && o.target instanceof Object && o.target.node && o.callback(i.data);
delete this.requests[i.msgId];
}
};
t.prototype.onError = function(t) {
console.log("onError");
};
t.prototype.onClose = function(t) {
var e = this;
console.log("onClose");
this.intervalPing > 0 && clearInterval(this.intervalPing);
for (var i = 0; i < this.onCloses.length; i++) {
var n = this.onCloses[i];
if (n.target && n.target instanceof Object && n.target.node) n.callback(); else {
this.isLogined = !1;
this.onCloses.splice(i, 1);
i--;
}
}
this.isAutoReconnect && !this.isForceClose && setTimeout(function() {
e.isForceClose || e.connect();
}, 2e3);
};
t.prototype.send = function(t) {
if (this.isConnected()) {
var e = msgpack.encode(t);
e = this.doXOR(e, 0, e.length);
this.ws.send(e);
}
};
t.prototype.doXOR = function(t, e, i) {
for (var n = 0, o = e + i, c = e; c < o; c++) {
t[c] = t[c] ^ Number(this.xorKey.charAt(n % this.xorKey.length));
n++;
}
return t;
};
t.prototype.connect = function() {
console.log("start connect: " + this.host);
this.isForceClose = !1;
if (null == this.ws) {
this.isUseWSS ? (cc.sys.isNative && (cc.sys.os, cc.sys.OS_ANDROID), this.ws = new WebSocket(this.host)) : this.ws = new WebSocket(this.host);
this.ws.binaryType = "arraybuffer";
this.ws.onopen = this.onOpen.bind(this);
this.ws.onmessage = this.onMessage.bind(this);
this.ws.onerror = this.onError.bind(this);
this.ws.onclose = this.onClose.bind(this);
} else if (this.ws.readyState !== WebSocket.OPEN) {
this.ws.close();
this.ws = null;
this.connect();
}
};
t.prototype.addOnOpen = function(t, e) {
this.onOpenes.push(new l(e, t));
};
t.prototype.addOnClose = function(t, e) {
this.onCloses.push(new l(e, t));
};
t.prototype.close = function() {
this.isForceClose = !0;
this.ws && this.ws.close();
};
t.prototype.backgame = function() {
this.isLogined = !1;
null != this.onLogined && this.onLogined(!1);
};
t.prototype.isConnected = function() {
return !!this.ws && this.ws.readyState == WebSocket.OPEN;
};
t.prototype.addListener = function(t, e) {
this.listeners.push(new h(e, t));
};
t.prototype.request = function(t, i, n, o) {
e.reqId++;
e.reqId > 64999 && (e.reqId = 1);
this.requests[e.reqId] = new r(o, n);
this.send({
data: "object" == typeof i && null != i && i ? i : {},
msgId: e.reqId,
route: t
});
};
t.prototype.notify = function(t, e) {
this.send({
data: "object" == typeof e && null != e && e ? e : {},
msgId: 0,
route: t
});
};
t.prototype.ping = function(t, i) {
void 0 === t && (t = null);
void 0 === i && (i = null);
var n = Date.now();
this.request("ping", null, function(i) {
e.PING = Date.now() - n;
if (e.MIN_PING < 0 || e.PING < e.MIN_PING) {
e.MIN_PING = e.PING;
e.TIME_DISTANCE = Date.now() - i.time;
}
null != t && t();
}, null != i ? i : e.NODE_FIXED);
};
var e;
t.reqId = 0;
t.MIN_PING = -1;
t.PING = 0;
t.TIME_DISTANCE = 0;
t.NODE_FIXED = new cc.Node().addComponent(cc.Sprite);
return t = e = __decorate([ a ], t);
}();
i.default = u;
cc._RF.pop();
}, {
"../../../OanTuTi/OanTuTi.OanTuTiController": "OanTuTi.OanTuTiController",
"../../ShootFish.Lobby": "ShootFish.Lobby",
"../../scripts/common/Configs": "Configs"
} ],
Shop: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "7c3a2CceMBL14CXynIjq7O1", "Shop");
var n = t("Bank");
cc.Class({
extends: cc.Component,
properties: {
header: {
default: null,
type: cc.Node
},
NapRIK: {
default: null,
type: cc.Node
},
Banking: {
default: null,
type: cc.Node
},
NapRed: {
default: null,
type: cc.Node
},
TieuRed: {
default: null,
type: cc.Node
},
ChuyenRed: {
default: null,
type: cc.Node
},
Momo: {
default: null,
type: cc.Node
},
DaiLy: {
default: null,
type: cc.Node
},
Bank: n
},
init: function() {
this.NapRed = this.NapRed.getComponent("NapRed");
this.TieuRed = this.TieuRed.getComponent("TieuRed");
this.ChuyenRed = this.ChuyenRed.getComponent("ChuyenRed");
this.Momo = this.Momo.getComponent("MomoController");
this.Banking = this.Banking.getComponent("BankingController");
this.NapRIK = this.NapRIK.getComponent("NapRIK");
this.NapRed.init();
this.TieuRed.init();
this.ChuyenRed.init();
this.Bank.init();
this.Momo.init();
this.NapRIK.init();
this.Banking.init();
this.body = [ this.NapRed, this.NapRIK, this.TieuRed, this.ChuyenRed, this.Momo, this.Bank, this.Banking ];
},
onEnable: function() {
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
},
onDisable: function() {
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
},
onSelectHead: function(t, e) {
Promise.all(this.header.children.map(function(t) {
t.name == e ? t.getComponent("itemHeadMenuV2").select() : t.getComponent("itemHeadMenuV2").unselect();
}));
Promise.all(this.body.map(function(t) {
t.node.name == e ? t.node.active = !0 : t.node.active = !1;
}));
},
onBackPopup: function() {
cc.RedT.inGame.dialog.onClickBack();
},
showDaiLy: function() {
this.node.active = !1;
cc.RedT.inGame.dialog.showDaiLy();
},
superView: function(t) {
if ("NapRIK" == t || "ThongTinNapRed" == t || "QuyDinhNapRed" == t) {
this.onSelectHead(null, "NapRIK");
"NapRIK" != t && this.NapRed.onSelectHead(null, t);
} else if ("TieuRed" == t || "RutBank" == t || "MuaTheNap" == t) {
this.onSelectHead(null, "TieuRed");
"TieuRed" != t && this.TieuRed.onSelectHead(null, t);
} else if ("ChuyenRed" == t) {
this.onSelectHead(null, "ChuyenRed");
this.ChuyenRed.onSelectHead(null, "ChuyenRed_DaiLy");
}
},
onData: function(t) {
void 0 !== t.nap_red && this.NapRed.onData(t.nap_red);
void 0 !== t.mua_the_nap && this.TieuRed.MuaTheCao.onData(t.mua_the_nap);
void 0 !== t.info_rut && this.TieuRed.RutBank.onData(t.info_rut);
void 0 !== t.chuyen_red && this.ChuyenRed.onData(t.chuyen_red);
t.bank && this.Bank.onData(t.bank);
void 0 !== t.daily && this.ChuyenRed.onDaiLy(t.daily);
void 0 !== t.momo && this.Momo.onData(t.momo);
void 0 !== t.banking && this.Banking.onData(t.banking);
}
});
cc._RF.pop();
}, {
Bank: "Bank"
} ],
Sicbo_dialog: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "72932QaBbBMs6XtlECaB34k", "Sicbo_dialog");
var n = t("Sicbo_history"), o = t("XocXoc_top");
cc.Class({
extends: cc.Component,
properties: {
history: n,
top: o
},
init: function() {
this.actionShow = cc.spawn(cc.scaleTo(.5, 1).easing(cc.easeBackOut(2.5)), cc.fadeTo(.5, 255));
this.objShow = null;
this.objTmp = null;
},
onClickBack: function() {
cc.RedT.audio.playUnClick();
this.onBack();
},
onBack: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = !1;
this.node.active = !1;
this.objShow = null;
} else {
this.objTmp = this.objShow;
this.objShow = this.objShow.previous;
this.objTmp.previous = null;
this.objTmp.active = !1;
this.objShow.active = !0;
this.objTmp = null;
} else this.node.active = !1;
},
onClosePrevious: function(t) {
if (void 0 !== t.previous && null !== t.previous) {
this.onClosePrevious(t.previous);
delete t.previous;
}
t.active = !1;
},
onCloseDialog: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = this.node.active = !1;
this.objShow = null;
} else {
this.onClosePrevious(this.objShow.previous);
this.objShow.active = this.node.active = !1;
delete this.objShow.previous;
this.objShow = null;
} else this.node.active = !1;
},
resetSizeDialog: function(t) {
t.stopAllActions();
t.scale = .5;
t.opacity = 0;
},
showHistory: function() {
this.node.active = this.history.node.active = !0;
this.objShow = this.history.node;
},
showTop: function() {
this.node.active = this.top.node.active = !0;
this.objShow = this.top.node;
}
});
cc._RF.pop();
}, {
Sicbo_history: "Sicbo_history",
XocXoc_top: "XocXoc_top"
} ],
Sicbo_history_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "e80e8j0+G9N5YJIYv1e6Hi6", "Sicbo_history_item");
cc.Class({
extends: cc.Component,
properties: {
bg: cc.Node,
time: cc.Label,
phien: cc.Label,
kqSprite: cc.Sprite,
kqLabel: cc.Label,
chan: cc.Label,
le: cc.Label,
box1: cc.Label,
box2: cc.Label,
box3: cc.Label,
box4: cc.Label,
box5: cc.Label,
box6: cc.Label,
win: cc.Label
}
});
cc._RF.pop();
}, {} ],
Sicbo_history: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "4c9fbVdg8dPWYvBYDMy2ccM", "Sicbo_history");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
iconRed: cc.SpriteFrame,
iconWhite: cc.SpriteFrame,
red: !0
},
onLoad: function() {
var t = this, e = cc.instantiate(this.page);
e.y = -263;
this.node.addChild(e);
this.page = e.getComponent("Pagination");
Promise.all(this.content.children.map(function(t) {
return t.getComponent("Sicbo_history_item");
})).then(function(e) {
t.content = e;
});
this.page.init(this);
},
onEnable: function() {
this.get_data();
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
g: {
sicbo: {
log: {
red: this.red,
page: t
}
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
var e = this;
this.page.onSet(t.page, t.kmess, t.total);
Promise.all(this.content.map(function(i, o) {
var c = t.data[o];
if (void 0 !== c) {
i.node.active = !0;
i.bg.active = o % 2;
i.time.string = n.getStringDateByTime(c.time);
i.phien.string = c.phien;
2 === c.kq || 4 === c.kq || 6 === c.kq ? i.kqSprite.spriteFrame = e.iconWhite : i.kqSprite.spriteFrame = e.iconRed;
i.kqLabel.string = c.kq;
i.chan.string = n.numberWithCommas(c.chan);
i.le.string = n.numberWithCommas(c.le);
i.box1.string = n.numberWithCommas(c.box1);
i.box2.string = n.numberWithCommas(c.box2);
i.box3.string = n.numberWithCommas(c.box3);
i.box4.string = n.numberWithCommas(c.box4);
i.box5.string = n.numberWithCommas(c.box5);
i.box6.string = n.numberWithCommas(c.box6);
i.win.string = n.numberWithCommas(c.betwin);
if (2 === c.kq || 4 === c.kq || 6 === c.kq) {
i.chan.node.color = cc.Color.YELLOW;
i.le.node.color = cc.Color.WHITE;
} else {
i.le.node.color = cc.Color.YELLOW;
i.chan.node.color = cc.Color.WHITE;
}
1 === c.kq ? i.box1.node.color = cc.Color.YELLOW : i.box1.node.color = cc.Color.WHITE;
2 === c.kq ? i.box2.node.color = cc.Color.YELLOW : i.box2.node.color = cc.Color.WHITE;
3 === c.kq ? i.box3.node.color = cc.Color.YELLOW : i.box3.node.color = cc.Color.WHITE;
4 === c.kq ? i.box4.node.color = cc.Color.YELLOW : i.box4.node.color = cc.Color.WHITE;
5 === c.kq ? i.box5.node.color = cc.Color.YELLOW : i.box5.node.color = cc.Color.WHITE;
6 === c.kq ? i.box6.node.color = cc.Color.YELLOW : i.box6.node.color = cc.Color.WHITE;
} else i.node.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
Sicbo: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "eabc1xR2ONHqoexcmsvfClR", "Sicbo");
var n = function() {
function t(t, e) {
var i = [], n = !0, o = !1, c = void 0;
try {
for (var s, a = t[Symbol.iterator](); !(n = (s = a.next()).done); n = !0) {
i.push(s.value);
if (e && i.length === e) break;
}
} catch (t) {
o = !0;
c = t;
} finally {
try {
!n && a.return && a.return();
} finally {
if (o) throw c;
}
}
return i;
}
return function(e, i) {
if (Array.isArray(e)) return e;
if (Symbol.iterator in Object(e)) return t(e, i);
throw new TypeError("Invalid attempt to destructure non-iterable instance");
};
}(), o = t("Helper"), c = t("Notice"), s = t("Sicbo_dialog");
cc.Class({
extends: cc.Component,
properties: {
audioMoBat: cc.AudioSource,
audioSingleChip: cc.AudioSource,
audioMultiChip: cc.AudioSource,
audioXocDia: cc.AudioSource,
audioMultiChip2: cc.AudioSource,
audioMultiChip3: cc.AudioSource,
audioMultiChip4: cc.AudioSource,
audioMultiChip5: cc.AudioSource,
box_chan: cc.Node,
box_le: cc.Node,
box_1: cc.Node,
box_2: cc.Node,
box_3: cc.Node,
box_4: cc.Node,
box_5: cc.Node,
box_6: cc.Node,
total_chan: cc.Label,
total_le: cc.Label,
total_1: cc.Label,
total_2: cc.Label,
total_3: cc.Label,
total_4: cc.Label,
total_5: cc.Label,
total_6: cc.Label,
me_chan: cc.Label,
me_le: cc.Label,
me_1: cc.Label,
me_2: cc.Label,
me_3: cc.Label,
me_4: cc.Label,
me_5: cc.Label,
me_6: cc.Label,
me_name: cc.Label,
me_balans: cc.Label,
nodeTime: cc.Node,
labelTime: cc.Label,
timeWait: cc.Label,
nodeWait: cc.Node,
box_chip: cc.Node,
users_bg: cc.Node,
users_count: cc.Label,
nodeBat: cc.Node,
chip_1000: cc.SpriteFrame,
chip_5000: cc.SpriteFrame,
chip_20000: cc.SpriteFrame,
chip_50000: cc.SpriteFrame,
chip_100000: cc.SpriteFrame,
chip_500000: cc.SpriteFrame,
dot_red: cc.SpriteFrame,
dot_white: cc.SpriteFrame,
dice: cc.Sprite,
xucxac: {
default: [],
type: cc.SpriteFrame
},
log_chan: cc.Label,
log_le: cc.Label,
log_top: cc.Node,
logMain: cc.Node,
redH: cc.Node,
miniNotice: cc.Node,
Animation: cc.Animation,
prefabNotice: cc.Prefab,
bet: cc.Node,
MiniPanel: cc.Prefab,
loading: cc.Node,
notice: c,
dialog: s,
red: !0
},
ctor: function() {
this.logs = [];
this.nan = !1;
this.cuoc = "1000";
this.actionBatOpen = cc.moveTo(.5, cc.v2(170, 120));
this.actionBatClose = cc.sequence(cc.callFunc(function() {
this.resetData();
}, this), cc.moveTo(.5, cc.v2(0, 0)), cc.delayTime(.5), cc.callFunc(function() {
this.audioXocDia.play();
this.Animation.play();
}, this));
this.maxDot = {
x: 44,
y: 44
};
this.maxBox1_3 = {
x: 40,
y: 40
};
this.maxBox1_1 = {
x: -40,
y: -40
};
this.clients = {
chan: 0,
le: 0,
box1: 0,
box2: 0,
box3: 0,
box4: 0,
box5: 0,
box6: 0
};
this.logcuoc = {
chan: 0,
le: 0,
box1: 0,
box2: 0,
box3: 0,
box4: 0,
box5: 0,
box6: 0
};
this.users = {
chan: 0,
le: 0,
box1: 0,
box2: 0,
box3: 0,
box4: 0,
box5: 0,
box6: 0
};
},
onLoad: function() {
cc.RedT.inGame = this;
this.logMain = this.logMain.children.map(function(t) {
return t.children[0].getComponent(cc.Sprite);
});
this.logMain.reverse();
this.log_top = this.log_top.children.map(function(t) {
var e = {
cell: t
}, i = t.children.map(function(t) {
return {
c: t.children[0].getComponent(cc.Sprite),
t: t.children[1].getComponent(cc.Label)
};
});
i.reverse();
e.data = i;
return e;
});
this.log_top.reverse();
this.me_name.string = cc.RedT.user.name;
this.me_balans.string = o.numberWithCommas(cc.RedT.user.red);
cc.RedT.send({
scene: "sicbo",
g: {
sicbo: {
ingame: !0
}
}
});
},
onData: function(t) {
if (void 0 !== t.user) {
this.userData(t.user);
cc.RedT.userData(t.user);
}
void 0 !== t.sicbo && this.sicbo(t.sicbo);
void 0 !== t.mini && null != cc.RedT.minigame && cc.RedT.minigame.onData(t.mini);
void 0 !== t.TopHu && cc.RedT.MiniPanel.TopHu.onData(t.TopHu);
void 0 !== t.taixiu && null != cc.RedT.minigame && cc.RedT.minigame.isLoadTaiXiu && cc.RedT.minigame.TaiXiu.TX_Main.onData(t.taixiu);
},
backGame: function() {
clearInterval(this.timeInterval);
cc.RedT.send({
g: {
sicbo: {
outgame: !0
}
}
});
cc.RedT.inGame.notice.show({
title: "Thoát game",
text: "Xác nhận hành động.\nHành động thực hiện thoát khỏi game này?",
button: {
type: "exit_game",
text: "Thoát"
}
});
},
signOut: function() {
clearInterval(this.timeInterval);
cc.director.preloadScene("MainGame", function() {
cc.director.loadScene("MainGame", function() {
cc.RedT.inGame.signOut();
});
});
},
userData: function(t) {
this.red && (this.me_balans.string = o.numberWithCommas(t.red));
},
sicbo: function(t) {
t.ingame && this.sicboIngame(t.ingame);
t.finish && this.sicboFinish(t.finish);
t.history && this.dialog.history.onData(t.history);
t.top;
t.status && this.status(t.status);
t.chip && this.clientsChip(t.chip);
t.mechip && this.meChip(t.mechip);
t.client && this.updateClientRed(t.client);
t.me && this.updateMeRed(t.me);
void 0 !== t.notice && this.addNotice(t.notice);
},
sicboIngame: function(t) {
t.client && this.countClient(t.client);
t.chip && this.ingameChip(t.chip);
if (t.time) {
this.time_remain = t.time - 1;
this.playTime();
if (this.time_remain > 32 && t.logs.length) {
this.nodeBat.position = cc.v2(0, 246);
this.setDot([ t.logs[0].red1, t.logs[0].red2, t.logs[0].red3, t.logs[0].red4 ]);
}
}
t.data && this.updateData(t.data);
if (t.logs) {
this.logs = t.logs;
this.setLogs();
}
t.me && this.updateMeRed(t.me);
t.chats;
},
ingameChip: function(t) {
var e = !0, i = !1, o = void 0;
try {
for (var c, s = Object.entries(t)[Symbol.iterator](); !(e = (c = s.next()).done); e = !0) {
var a = c.value, h = n(a, 2), r = h[0], l = h[1], u = this.maxBox1_3;
switch (t.box) {
case "chan":
case "le":
u = this.maxBox1_1;
}
var d = !0, p = !1, g = void 0;
try {
for (var m, f = Object.entries(l)[Symbol.iterator](); !(d = (m = f.next()).done); d = !0) {
var v = m.value, b = n(v, 2), T = b[0], _ = b[1];
if (_ > 0) for (;_; ) {
var C = Math.random() * (u.x + 1) >> 0, y = Math.random() * (u.y + 1) >> 0, S = new cc.Node();
(S = S.addComponent(cc.Sprite)).spriteFrame = this["chip_" + T];
S.node.position = cc.v2(C, y);
S.node.scale = 1;
this["box_" + r].children[1].addChild(S.node);
_--;
}
}
} catch (t) {
p = !0;
g = t;
} finally {
try {
!d && f.return && f.return();
} finally {
if (p) throw g;
}
}
}
} catch (t) {
i = !0;
o = t;
} finally {
try {
!e && s.return && s.return();
} finally {
if (i) throw o;
}
}
},
sicboFinish: function(t) {
var e = {
data: t
};
this.logs.unshift(e);
this.logs.length > 48 && this.logs.pop();
this.setDot(t);
this.nodeTime.active = !1;
this.time_remain = 43;
this.playTime();
this.nan || this.FinishTT();
},
FinishTT: function() {
this.audioMoBat.play();
this.nodeBat.runAction(cc.sequence(this.actionBatOpen, cc.callFunc(this.showKQ, this)));
this.setLogs();
},
showKQ: function() {
var t = Object.values(this.logs[0]);
2 === t[0] || 4 === t[0] || 6 === t[0] ? this.box_chan.children[0].active = !0 : this.box_le.children[0].active = !0;
switch (t[0]) {
case 1:
this.box_1.children[0].active = !0;
break;

case 2:
this.box_2.children[0].active = !0;
break;

case 3:
this.box_3.children[0].active = !0;
break;

case 4:
this.box_4.children[0].active = !0;
break;

case 5:
this.box_5.children[0].active = !0;
break;

case 6:
this.box_6.children[0].active = !0;
}
},
setDot: function(t) {
var e = Math.random() * (this.maxDot.x + 1) >> 0, i = Math.random() * (this.maxDot.y + 1) >> 0;
i - e > 22 && (i -= i / 1.4);
this.dice.node.position = cc.v2(e, i);
this.dice.spriteFrame = this.xucxac[t - 1];
},
playTime: function() {
void 0 !== this.timeInterval && clearInterval(this.timeInterval);
this.timeInterval = setInterval(function() {
if (this.time_remain > 32) {
var t = o.numberPad(this.time_remain - 33, 2);
this.timeWait.string = t;
this.nodeTime.active = !1;
this.nodeWait.active = !0;
} else if (this.time_remain > 30) {
this.nodeTime.active = !1;
this.nodeWait.active = !1;
32 === this.time_remain && this.nodeBat.runAction(this.actionBatClose);
} else if (this.time_remain > -1) {
t = o.numberPad(this.time_remain, 2);
this.nodeTime.active = !0;
this.nodeWait.active = !1;
this.labelTime.string = t;
this.time_remain < 11 ? this.labelTime.color = cc.Color.RED : this.labelTime.color = cc.Color.WHITE;
} else clearInterval(this.timeInterval);
this.time_remain--;
}.bind(this), 1e3);
},
countClient: function(t) {
this.users_count.string = t;
},
updateData: function(t) {
if (this.red) {
this.total_chan.string = t.chan > 0 ? o.numberWithCommas(t.chan) : "";
this.total_le.string = t.le > 0 ? o.numberWithCommas(t.le) : "";
this.total_1.string = t.box1 > 0 ? o.numberWithCommas(t.box1) : "";
this.total_2.string = t.box2 > 0 ? o.numberWithCommas(t.box2) : "";
this.total_3.string = t.box3 > 0 ? o.numberWithCommas(t.box3) : "";
this.total_4.string = t.box4 > 0 ? o.numberWithCommas(t.box4) : "";
this.total_5.string = t.box5 > 0 ? o.numberWithCommas(t.box5) : "";
this.total_6.string = t.box6 > 0 ? o.numberWithCommas(t.box6) : "";
}
},
resetData: function() {
this.box_chan.children[1].removeAllChildren();
this.box_le.children[1].removeAllChildren();
this.box_1.children[1].removeAllChildren();
this.box_2.children[1].removeAllChildren();
this.box_3.children[1].removeAllChildren();
this.box_4.children[1].removeAllChildren();
this.box_5.children[1].removeAllChildren();
this.box_6.children[1].removeAllChildren();
this.box_chan.children[0].active = !1;
this.box_le.children[0].active = !1;
this.box_1.children[0].active = !1;
this.box_2.children[0].active = !1;
this.box_3.children[0].active = !1;
this.box_4.children[0].active = !1;
this.box_5.children[0].active = !1;
this.box_6.children[0].active = !1;
this.total_chan.string = "";
this.total_le.string = "";
this.total_1.string = "";
this.total_2.string = "";
this.total_3.string = "";
this.total_4.string = "";
this.total_5.string = "";
this.total_6.string = "";
this.me_chan.string = "";
this.me_le.string = "";
this.me_1.string = "";
this.me_2.string = "";
this.me_3.string = "";
this.me_4.string = "";
this.me_5.string = "";
this.me_6.string = "";
this.users.chan = 0;
this.users.le = 0;
this.users.box1 = 0;
this.users.box2 = 0;
this.users.box3 = 0;
this.users.box4 = 0;
this.users.box5 = 0;
this.users.box6 = 0;
this.clients.chan = 0;
this.clients.le = 0;
this.clients.box1 = 0;
this.clients.box2 = 0;
this.clients.box3 = 0;
this.clients.box4 = 0;
this.clients.box5 = 0;
this.clients.box6 = 0;
this.logcuoc.chan = 0;
this.logcuoc.le = 0;
this.logcuoc.box1 = 0;
this.logcuoc.box2 = 0;
this.logcuoc.box3 = 0;
this.logcuoc.box4 = 0;
this.logcuoc.box5 = 0;
this.logcuoc.box6 = 0;
},
setLogs: function() {
var t = this;
this.logMain.forEach(function(e, i) {
var n = t.logs[i];
if (n) {
e.node.active = !0;
2 === (n = Object.values(n))[0] || 4 === n[0] || 6 === n[0] ? e.spriteFrame = t.dot_white : e.spriteFrame = t.dot_red;
} else e.node.active = !1;
});
},
changerBet: function(t, e) {
var i = t.target;
this.cuoc = i.name;
this.bet.children.forEach(function(t) {
if (t == i) {
t.children[0].active = !0;
t.children[1].active = !0;
t.pauseSystemEvents();
} else {
t.children[0].active = !0;
t.children[1].active = !1;
t.resumeSystemEvents();
}
});
},
onCuoc: function(t, e) {
cc.RedT.send({
g: {
sicbo: {
cuoc: {
red: this.red,
cuoc: this.cuoc,
box: e
}
}
}
});
},
addNotice: function(t) {
var e = cc.instantiate(this.prefabNotice);
e.getComponent("mini_warning").text.string = t;
this.miniNotice.addChild(e);
},
clientsChip: function(t) {
var e = null, i = this.maxBox1_3;
switch (t.box) {
case "chan":
e = this.box_chan;
i = this.maxBox1_1;
break;

case "le":
e = this.box_le;
i = this.maxBox1_1;
break;

case "box1":
e = this.box_1;
break;

case "box2":
e = this.box_2;
break;

case "box3":
e = this.box_3;
break;

case "box4":
e = this.box_4;
break;

case "box5":
e = this.box_5;
break;

case "box6":
e = this.box_6;
}
var n = this.users_bg.parent.convertToWorldSpaceAR(this.users_bg.position);
n = e.children[1].convertToNodeSpaceAR(n);
var o = new cc.Node();
(o = o.addComponent(cc.Sprite)).spriteFrame = this["chip_" + t.cuoc];
o.node.position = n;
o.node.scale = .67;
var c = Math.random() * i.x >> 0, s = Math.random() * i.y >> 0;
e.children[1].addChild(o.node);
var a = cc.instantiate(this.audioSingleChip.node);
o.node.addChild(a);
a = a.getComponent(cc.AudioSource);
o.node.runAction(cc.sequence(cc.spawn(cc.scaleTo(.4, 1), cc.moveTo(.4, cc.v2(c, s))), cc.callFunc(function() {
this.play();
}, a), cc.sequence(cc.moveTo(.1, cc.v2(c, s)), cc.moveTo(.1, cc.v2(c, s)))));
},
meChip: function(t) {
var e = null, i = null, n = this.maxBox1_3;
this.bet.children.forEach(function(i) {
i.name == t.cuoc && (e = i);
});
switch (t.box) {
case "chan":
i = this.box_chan;
n = this.maxBox1_1;
break;

case "le":
i = this.box_le;
n = this.maxBox1_1;
break;

case "box1":
i = this.box_1;
break;

case "box2":
i = this.box_2;
break;

case "box3":
i = this.box_3;
break;

case "box4":
i = this.box_4;
break;

case "box5":
i = this.box_5;
break;

case "box6":
i = this.box_6;
}
var o = e.parent.convertToWorldSpaceAR(e.position);
o = i.children[1].convertToNodeSpaceAR(o);
var c = new cc.Node();
(c = c.addComponent(cc.Sprite)).spriteFrame = this["chip_" + t.cuoc];
c.node.position = o;
var s = Math.random() * (n.x + 3) >> 0, a = Math.random() * (n.y + 3) >> 0;
i.children[1].addChild(c.node);
var h = cc.instantiate(this.audioSingleChip.node);
c.node.addChild(h);
h = h.getComponent(cc.AudioSource);
c.node.runAction(cc.sequence(cc.spawn(cc.scaleTo(.3, 1), cc.moveTo(.3, cc.v2(s, a))), cc.callFunc(function() {
this.play();
}, h), cc.sequence(cc.moveTo(.1, cc.v2(s, a + 10)), cc.moveTo(.1, cc.v2(s, a)))));
},
updateMeRed: function(t) {
if (t.chan > 0) {
this.users.chan = t.chan;
this.red && (this.me_chan.string = o.numberWithCommas(t.chan));
}
if (t.le > 0) {
this.users.le = t.le;
this.red && (this.me_le.string = o.numberWithCommas(t.le));
}
if (t.box1 > 0) {
this.users.box1 = t.box1;
this.red && (this.me_1.string = o.numberWithCommas(t.box1));
}
if (t.box2 > 0) {
this.users.box2 = t.box2;
this.red && (this.me_2.string = o.numberWithCommas(t.box2));
}
if (t.box3 > 0) {
this.users.box3 = t.box3;
this.red && (this.me_3.string = o.numberWithCommas(t.box3));
}
if (t.box4 > 0) {
this.users.box4 = t.box4;
this.red && (this.me_4.string = o.numberWithCommas(t.box4));
}
if (t.box5 > 0) {
this.users.box5 = t.box5;
this.red && (this.me_5.string = o.numberWithCommas(t.box5));
}
if (t.box6 > 0) {
this.users.box6 = t.box6;
this.red && (this.me_6.string = o.numberWithCommas(t.box6));
}
},
updateClientRed: function(t) {
if (t.chan > 0) {
this.clients.chan = t.chan;
this.red && (this.total_chan.string = o.numberWithCommas(t.chan));
}
if (t.le > 0) {
this.clients.le = t.le;
this.red && (this.total_le.string = o.numberWithCommas(t.le));
}
if (t.box1 > 0) {
this.clients.box1 = t.box1;
this.red && (this.total_1.string = o.numberWithCommas(t.box1));
}
if (t.box2 > 0) {
this.clients.box2 = t.box2;
this.red && (this.total_2.string = o.numberWithCommas(t.box2));
}
if (t.box3 > 0) {
this.clients.box3 = t.box3;
this.red && (this.total_3.string = o.numberWithCommas(t.box3));
}
if (t.box4 > 0) {
this.clients.box4 = t.box4;
this.red && (this.total_4.string = o.numberWithCommas(t.box4));
}
if (t.box5 > 0) {
this.clients.box5 = t.box5;
this.red && (this.total_5.string = o.numberWithCommas(t.box5));
}
if (t.box6 > 0) {
this.clients.box6 = t.box6;
this.red && (this.total_6.string = o.numberWithCommas(t.box6));
}
},
status: function(t) {
setTimeout(function() {
var e = new cc.Node();
e.addComponent(cc.Label);
(e = e.getComponent(cc.Label)).string = (t.win ? "+" : "-") + o.numberWithCommas(t.bet);
e.font = t.win ? cc.RedT.util.fontCong : cc.RedT.util.fontTru;
e.lineHeight = 130;
e.fontSize = 25;
e.node.position = cc.v2(0, 90);
this.miniNotice.addChild(e.node);
e.node.runAction(cc.sequence(cc.moveTo(4, cc.v2(0, 200)), cc.callFunc(function() {
this.node.destroy();
}, e)));
t.win && cc.RedT.send({
user: {
updateCoint: !0
}
});
if (void 0 !== t.thuong && t.thuong > 0) {
var i = new cc.Node();
i.addComponent(cc.Label);
(i = i.getComponent(cc.Label)).string = "+" + o.numberWithCommas(t.thuong);
i.font = cc.RedT.util.fontEffect;
i.lineHeight = 90;
i.fontSize = 14;
this.miniNotice.addChild(i.node);
i.node.runAction(cc.sequence(cc.moveTo(4, cc.v2(0, 100)), cc.callFunc(function() {
this.node.destroy();
}, i)));
}
}.bind(this), 4e3);
}
});
cc._RF.pop();
}, {
Helper: "Helper",
Notice: "Notice",
Sicbo_dialog: "Sicbo_dialog"
} ],
SieuZon_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "15d9dWMZ29EaZrt3z81D7ad", "SieuZon_item");
cc.Class({
extends: cc.Component,
properties: {
userName: cc.Label,
userVip: cc.Label
},
setData: function(t) {
this.userName.string = t.Name, this.userVip.string = t.VipPoint;
}
});
cc._RF.pop();
}, {} ],
SieuZon: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "700eeyE/ydIrK2TDW8GpLFo", "SieuZon");
t("BrowserUtil"), t("Helper");
cc.Class({
extends: cc.Component,
properties: {
header: cc.Node,
body: cc.Node,
LabelName: {
default: [],
type: cc.Label
},
LabelPoint: {
default: [],
type: cc.Label
},
LabelGiaiThuong: {
default: [],
type: cc.Label
},
LabelGiaTri: {
default: [],
type: cc.Label
},
userRank: cc.Label,
userVIP: cc.Label,
Time: cc.Label,
onLoadData: !1
},
init: function() {
var t = this;
Promise.all(this.header.children.map(function(t) {
return t.getComponent("itemHeadMenuV2");
})).then(function(e) {
t.header = e;
});
},
onEnable: function() {
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
cc.RedT.send({
sieuzon: {
data: "Show"
}
});
},
onDisable: function() {
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
},
onBackPopup: function() {
cc.RedT.inGame.dialog.onClickBack();
},
onData: function(t) {
if (t.top.length) {
t.user.UserRank > 999 ? this.userRank.string = ">999" : this.userRank.string = t.user.UserRank;
this.userVIP.string = t.user.VipPoint;
for (var e = 0; e < t.top.length; e++) {
this.LabelName[e].string = t.top[e].Name;
this.LabelPoint[e].string = t.top[e].VipPoint;
this.LabelGiaiThuong[e].string = t.reward[e].giaithuong;
this.LabelGiaTri[e].string = t.reward[e].giatri;
}
}
},
onSelectHeader: function(t, e) {
Promise.all(this.header.map(function(t) {
t.node.name == e ? t.select() : t.unselect();
}));
Promise.all(this.body.children.map(function(t) {
t.name == e ? t.active = !0 : t.active = !1;
}));
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
SignIn: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "1c678NmitZCp6ybtgqTKrnQ", "SignIn");
var n = t("BrowserUtil");
cc.Class({
extends: cc.Component,
properties: {
username: {
default: null,
type: cc.EditBox
},
password: {
default: null,
type: cc.EditBox
},
captcha: cc.EditBox,
capchaSprite: cc.Sprite,
checkboxOn: cc.Node,
checkboxOff: cc.Node
},
onLoad: function() {
var t = this;
this.editboxs = [ this.username, this.password ];
this.editboxs_i = 0;
this.keyHandle = function(e) {
return e.keyCode === cc.macro.KEY.tab ? (t.changeNextFocusEditBox(), e.preventDefault && e.preventDefault(), 
!1) : e.keyCode === cc.macro.KEY.enter ? (n.focusGame(), t.onLoginClick(), e.preventDefault && e.preventDefault(), 
!1) : e.keyCode === cc.macro.KEY.escape ? (cc.RedT.inGame.dialog.onClickBack(), 
e.preventDefault && e.preventDefault(), !1) : void 0;
};
var e = localStorage.getItem("username"), i = localStorage.getItem("password");
e && i && (this.username.string = e, this.password.string = i, this.checkboxOn.active = !0, 
this.checkboxOff.active = !1);
},
onEnable: function() {
cc.sys.isBrowser && this.addEvent();
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
},
onDisable: function() {
cc.sys.isBrowser && this.removeEvent();
this.clean();
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
},
addEvent: function() {
cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
for (var t in this.editboxs) n.getHTMLElementByEditBox(this.editboxs[t]).addEventListener("keydown", this.keyHandle, !1);
},
removeEvent: function() {
for (var t in this.editboxs) n.getHTMLElementByEditBox(this.editboxs[t]).removeEventListener("keydown", this.keyHandle, !1);
cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
},
onBackPopup: function() {
cc.RedT.inGame.dialog.onClickBack();
},
onClickDangKy: function() {
cc.RedT.inGame.dialog.showSignUp();
},
onClickQuenMatKhau: function() {
cc.RedT.inGame.dialog.showForGotPass();
},
onKeyDown: function(t) {
switch (t.keyCode) {
case cc.macro.KEY.escape:
this.isTop() && cc.RedT.inGame.dialog.onClickBack();
break;

case cc.macro.KEY.tab:
this.isTop() && this.changeNextFocusEditBox();
break;

case cc.macro.KEY.enter:
this.isTop() && this.onLoginClick();
}
},
toPassword: function() {
5 == this.password.inputFlag && (this.password.inputFlag = 0);
},
toNormal: function() {
0 == this.password.inputFlag && (this.password.inputFlag = 5);
},
changeNextFocusEditBox: function() {
for (var t = !1, e = 0, i = this.editboxs.length; e < i; e++) if (n.checkEditBoxFocus(this.editboxs[e])) {
n.focusEditBox(this.editboxs[e]);
t = !0;
break;
}
!t && 0 < this.editboxs.length && n.focusEditBox(this.editboxs[0]);
},
isTop: function() {
return !cc.RedT.inGame.notice.node.active && !cc.RedT.inGame.loading.active;
},
clean: function() {
this.username.string = this.captcha.string = this.password.string = "";
this.captcha.node.active = !1;
},
onLoginClick: function() {
var t = null;
this.username.string.length > 32 || this.username.string.length < 3 || null === this.username.string.match(new RegExp("^[a-zA-Z0-9]+$")) ? t = "Tên tài khoản không đúng!!" : (this.password.string.length > 32 || this.password.string.length < 6) && (t = "Mật khẩu không đúng!!");
if (t) cc.RedT.inGame.notice.show({
title: "ĐĂNG NHẬP",
text: t
}); else if (!0 === this.captcha.node.active) if (this.captcha.string.length > 6 || this.captcha.string.length < 4) cc.RedT.inGame.notice.show({
title: "ĐĂNG NHẬP",
text: "Captcha không đúng!!"
}); else {
cc.RedT.inGame.auth({
authentication: {
username: this.username.string,
password: this.password.string,
captcha: this.captcha.string
}
});
this.checkboxOn.active ? (localStorage.setItem("username", this.username.string), 
localStorage.setItem("password", this.password.string)) : (localStorage.removeItem("username"), 
localStorage.removeItem("password"));
} else {
cc.RedT.inGame.auth({
authentication: {
username: this.username.string,
password: this.password.string
}
});
this.checkboxOn.active ? (localStorage.setItem("username", this.username.string), 
localStorage.setItem("password", this.password.string)) : (localStorage.removeItem("username"), 
localStorage.removeItem("password"));
}
},
initCaptcha: function(t) {
this.captcha.node.active = !0;
var e = new Image();
e.src = t;
e.width = 150;
e.height = 50;
setTimeout(function() {
var t = new cc.Texture2D();
t.initWithElement(e);
t.handleLoadedTexture();
var i = new cc.SpriteFrame(t);
this.capchaSprite.spriteFrame = i;
}.bind(this), 10);
},
reCaptcha: function() {
cc.RedT.send({
captcha: "signIn"
});
},
rememberMe: function() {
this.checkboxOn.active ? (this.checkboxOff.active = !0, this.checkboxOn.active = !1) : (this.checkboxOff.active = !1, 
this.checkboxOn.active = !0);
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil"
} ],
SignName: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "428fapqUBNMxZBikn0+ylYv", "SignName");
var n = t("BrowserUtil");
cc.Class({
extends: cc.Component,
properties: {
username: {
default: null,
type: cc.EditBox
}
},
onLoad: function() {
var t = this;
this.keyHandle = function(e) {
return e.keyCode === cc.macro.KEY.tab ? (t.changeNextFocusEditBox(), e.preventDefault && e.preventDefault(), 
!1) : e.keyCode === cc.macro.KEY.enter ? (n.focusGame(), t.onSignNameClick(), e.preventDefault && e.preventDefault(), 
!1) : void 0;
};
},
onEnable: function() {
cc.sys.isBrowser && this.addEvent();
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
},
onDisable: function() {
cc.sys.isBrowser && this.removeEvent();
this.clean();
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
},
addEvent: function() {
cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
n.getHTMLElementByEditBox(this.username).addEventListener("keydown", this.keyHandle, !1);
},
removeEvent: function() {
n.getHTMLElementByEditBox(this.username).removeEventListener("keydown", this.keyHandle, !1);
cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
},
onKeyDown: function(t) {
switch (t.keyCode) {
case cc.macro.KEY.tab:
this.isTop() && this.changeNextFocusEditBox();
break;

case cc.macro.KEY.enter:
this.isTop() && this.onSignNameClick();
}
},
changeNextFocusEditBox: function() {
n.focusEditBox(this.username);
},
isTop: function() {
return !cc.RedT.inGame.notice.node.active && !cc.RedT.inGame.loading.active;
},
clean: function() {
this.username.string = "";
},
onSignNameClick: function() {
this.username.string.length > 14 || this.username.string.length < 3 || null === this.username.string.match(new RegExp("^[a-zA-Z0-9]+$")) ? cc.RedT.inGame.notice.show({
title: "TÊN NHÂN VẬT",
text: "Tên Nhân vật từ 3 đến 14 ký tự và không chứa ký tự đặc biệt!!"
}) : cc.RedT.send({
signName: {
name: this.username.string,
ref: cc.RedT.ref
}
});
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil"
} ],
SignOut: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "1d01bAfcztH8oV27UvkQBVe", "SignOut");
cc.Class({
extends: cc.Component,
properties: {},
start: function() {}
});
cc._RF.pop();
}, {} ],
SignUp: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "0dcbdkfFWFJo7s1gZAEcYsa", "SignUp");
var n = t("BrowserUtil");
cc.Class({
extends: cc.Component,
properties: {
username: {
default: null,
type: cc.EditBox
},
password: {
default: null,
type: cc.EditBox
},
repassword: {
default: null,
type: cc.EditBox
},
captcha: {
default: null,
type: cc.EditBox
},
ref: {
default: null,
type: cc.EditBox
},
capchaSprite: cc.Sprite
},
onLoad: function() {
var t = this;
this.editboxs = [ this.username, this.password, this.repassword, this.captcha ];
this.keyHandle = function(e) {
return e.keyCode === cc.macro.KEY.tab ? (t.changeNextFocusEditBox(), e.preventDefault && e.preventDefault(), 
!1) : e.keyCode === cc.macro.KEY.enter ? (n.focusGame(), t.onSignUpClick(), e.preventDefault && e.preventDefault(), 
!1) : e.keyCode === cc.macro.KEY.escape ? (cc.RedT.inGame.dialog.onClickBack(), 
e.preventDefault && e.preventDefault(), !1) : void 0;
};
null != cc.RedT.ref && (this.ref.string = cc.RedT.ref);
},
onEnable: function() {
cc.sys.isBrowser && this.addEvent();
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
this.reCaptcha();
},
onDisable: function() {
cc.sys.isBrowser && this.removeEvent();
this.clean();
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
},
addEvent: function() {
cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
for (var t in this.editboxs) n.getHTMLElementByEditBox(this.editboxs[t]).addEventListener("keydown", this.keyHandle, !1);
},
removeEvent: function() {
for (var t in this.editboxs) n.getHTMLElementByEditBox(this.editboxs[t]).removeEventListener("keydown", this.keyHandle, !1);
cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
},
onKeyDown: function(t) {
switch (t.keyCode) {
case cc.macro.KEY.escape:
this.isTop() && cc.RedT.inGame.dialog.onClickBack();
break;

case cc.macro.KEY.tab:
this.isTop() && this.changeNextFocusEditBox();
break;

case cc.macro.KEY.enter:
this.isTop() && this.onSignUpClick();
}
},
changeNextFocusEditBox: function() {
for (var t = !1, e = 0, i = this.editboxs.length; e < i; e++) if (n.checkEditBoxFocus(this.editboxs[e])) {
n.focusEditBox(this.editboxs[e]);
t = !0;
break;
}
!t && 0 < this.editboxs.length && n.focusEditBox(this.editboxs[0]);
},
isTop: function() {
return !cc.RedT.inGame.notice.node.active && !cc.RedT.inGame.loading.active;
},
clean: function() {
this.username.string = this.password.string = this.repassword.string = this.captcha.string = "";
},
onBackPopup: function() {
cc.RedT.inGame.dialog.onClickBack();
},
onClickDangNhap: function() {
cc.RedT.inGame.dialog.showSignIn();
},
onSignUpClick: function() {
var t = null;
this.username.string.length > 32 || this.username.string.length < 3 ? t = "Độ dài Tên tài khoản 3 - 32 ký tự!!" : this.password.string.length > 32 || this.password.string.length < 6 ? t = "Độ dài mật khẩu 6 - 32 ký tự!!" : this.password.string !== this.repassword.string ? t = "Xác nhận mật khẩu không khớp!" : this.captcha.string.length < 4 ? t = "Vui lòng nhập Captcha." : this.username.string == this.password.string ? t = "Tài khoản không được trùng với mật khẩu!!" : null === this.username.string.match(new RegExp("^[a-zA-Z0-9]+$")) && (t = "Tên chỉ gồm Chữ và Số!");
if (t) cc.RedT.inGame.notice.show({
title: "ĐĂNG KÝ",
text: t
}); else {
cc.RedT.inGame.auth({
authentication: {
username: this.username.string,
password: this.password.string,
register: !0,
captcha: this.captcha.string
}
});
cc.RedT.ref = this.ref.string;
}
},
initCaptcha: function(t) {
var e = this, i = new Image();
i.src = t, i.width = 150, i.height = 50, setTimeout(function() {
var t = new cc.Texture2D();
t.initWithElement(i), t.handleLoadedTexture();
var n = new cc.SpriteFrame(t);
e.capchaSprite.spriteFrame = n;
}, 10);
},
reCaptcha: function() {
cc.RedT.send({
captcha: "signUp"
});
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil"
} ],
SlotNetworkClient: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "fa6a5HiidJFNohMYqtMHOjk", "SlotNetworkClient");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("./Network.NetworkClient"), o = t("./Network.NetworkListener"), c = t("../common/Configs"), s = t("./Network.Cmd"), a = t("./Network.InPacket"), h = t("../common/App"), r = function(t) {
__extends(e, t);
function e() {
var e = t.call(this) || this;
e.listeners = new Array();
e.isLogin = !1;
e.onLogined = null;
e.isUseWSS = c.default.App.USE_WSS;
return e;
}
e.getInstance = function() {
null == this.instance && (this.instance = new e());
return this.instance;
};
e.prototype.checkConnect = function(t) {
this.onLogined = t;
null != this.ws && this.ws.readyState == WebSocket.CONNECTING || (this.isConnected() ? this.isLogin && null != this.onLogined && this.onLogined() : this.connect());
};
e.prototype.connect = function() {
t.prototype.connect.call(this, c.default.App.HOST_SLOT.host, c.default.App.HOST_SLOT.port);
};
e.prototype.onError = function(t) {
h.default.instance.showLoading(!1);
console.log("onError");
};
e.prototype.onOpen = function(e) {
t.prototype.onOpen.call(this, e);
this.send(new s.default.SendLogin(c.default.Login.Nickname, c.default.Login.AccessToken));
console.log("slot connected");
};
e.prototype.onMessage = function(t) {
for (var e = new Uint8Array(t.data), i = 0; i < this.listeners.length; i++) {
var n = this.listeners[i];
if (n.target && n.target instanceof Object && n.target.node) n.callback(e); else {
this.listeners.splice(i, 1);
i--;
}
}
switch (new a.default(e).getCmdId()) {
case s.default.Code.LOGIN:
this.isLogin = !0;
null != this.onLogined && this.onLogined();
}
};
e.prototype.addListener = function(t, e) {
this.listeners.push(new o.default(e, t));
};
e.prototype.send = function(t) {
for (var e = new Int8Array(t._length), i = 0; i < t._length; i++) e[i] = t._data[i];
null != this.ws && this.isConnected() && this.ws.send(e.buffer);
};
e.prototype.sendCheck = function(t) {
var e = this;
this.checkConnect(function() {
e.send(t);
});
};
return e;
}(n.default);
i.default = r;
cc._RF.pop();
}, {
"../common/App": "App",
"../common/Configs": "Configs",
"./Network.Cmd": "Network.Cmd",
"./Network.InPacket": "Network.InPacket",
"./Network.NetworkClient": "Network.NetworkClient",
"./Network.NetworkListener": "Network.NetworkListener"
} ],
Splash: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "75b79AEMXNJqYRJtb538JJ4", "Splash");
cc.Class({
extends: cc.Component,
properties: {
messageLabel: cc.Label,
LabelVersion: cc.Label,
manifestUrl: {
default: null,
type: cc.Asset
},
retryButtonNode: cc.Node,
updateProgressBar: cc.Node,
star: cc.Node,
_am: null,
_updating: !1,
_canRetry: !1,
_storagePath: ""
},
onLoad: function() {
this.isLoadScene = !1;
this.isLoadConfig = !1;
this.initOneSign();
cc.sys.isBrowser ? this.loadAssets() : (this.initHotUpdate(), this.checkUpdate());
},
initOneSign: function() {
this.checkPlugin() && (sdkbox.PluginOneSignal.init(), sdkbox.PluginOneSignal.setListener({
onSendTag: function(t, e, i) {},
onGetTags: function(t) {},
onIdsAvailable: function(t, e) {},
onPostNotification: function(t, e) {},
onNotification: function(t, e, i) {}
}));
},
checkPlugin: function() {
return "undefined" == typeof sdkbox ? (console.log("sdkbox is undefined"), !1) : void 0 !== sdkbox.PluginOneSignal || (console.log("sdkbox.PluginFacebook is undefined"), 
!1);
},
loadAssets: function() {
this.updateProgress(0);
this.messageLabel.string = "Đang lấy dữ liệu game ...";
setTimeout(function() {
this.loadScene();
}.bind(this), 100);
},
loadScene: function() {
cc.director.preloadScene("MainGame", this.onProgress.bind(this), this.onLoaded.bind(this));
},
onProgress: function(t, e) {
var i = t / e * 729 >> 0, n = (100 * t / e).toFixed(2), o = 0;
n > o && (o = n);
this.messageLabel.string = Math.round(o) + "%";
this.updateProgress(i);
},
onLoaded: function(t, e) {
cc.director.loadScene("MainGame");
},
onDestroy: function() {
if (this._updateListener) {
this._am.setEventCallback(null);
this._updateListener = null;
}
},
initHotUpdate: function() {
this.updateProgress(0);
this._storagePath = (jsb.fileUtils ? jsb.fileUtils.getWritablePath() : "/") + "remote-asset";
this._am = new jsb.AssetsManager("", this._storagePath, this.versionCompareHandle);
this._am.setVerifyCallback(function(t, e) {
e.compressed;
return !0;
}.bind(this));
cc.sys.os === cc.sys.OS_ANDROID && this._am.setMaxConcurrentTask(2);
},
checkUpdate: function() {
if (this._updating) this.messageLabel.string = "Đang kiểm tra phiên bản ..."; else {
this._am.getState() === jsb.AssetsManager.State.UNINITED && this._am.loadLocalManifest(this.manifestUrl.nativeUrl);
this._am.setEventCallback(this.checkCb.bind(this));
this._am.checkUpdate();
this._updating = !0;
}
},
hotUpdate: function() {
if (this._am && !this._updating) {
this._am.setEventCallback(this.updateCb.bind(this));
this._am.getState() === jsb.AssetsManager.State.UNINITED && this._am.loadLocalManifest(this.manifestUrl.nativeUrl);
this._failCount = 0;
this._am.update();
this._updating = !0;
}
},
retry: function() {
!this._updating && this._canRetry && (this.retryButtonNode.active = !1, this._canRetry = !1, 
this.messageLabel.string = "Thử lại ...", this._am.downloadFailedAssets());
},
checkCb: function(t) {
var e = !1, i = !1;
switch (t.getEventCode()) {
case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:
this.messageLabel.string = "Không tìm thấy Hot Update ...";
break;

case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:
case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:
this.messageLabel.string = "Tải manifest thất bại ...";
break;

case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:
this.updateProgress(729);
this.messageLabel.string = "Phiên bản mới nhất ...";
e = !0;
break;

case jsb.EventAssetsManager.NEW_VERSION_FOUND:
this.messageLabel.string = "Tìm thấy phiên bản cập nhật ...";
this.updateProgress(0);
i = !0;
break;

default:
return;
}
this._am.setEventCallback(null);
this._checkListener = null;
this._updating = !1;
i && this.hotUpdate();
e && this.loadAssets();
},
updateCb: function(t) {
var e = !1, i = !1;
switch (t.getEventCode()) {
case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:
this.messageLabel.string = "1007";
this.retryButtonNode.active = !0;
i = !0;
break;

case jsb.EventAssetsManager.UPDATE_PROGRESSION:
var n = 729 * t.getPercent();
this.updateProgress(n);
this.messageLabel.string = "1006";
var o = 100 * t.getPercent() >> 0;
this.messageLabel.string = o + "%";
break;

case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:
case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:
this.messageLabel.string = "1005";
this.retryButtonNode.active = !0;
i = !0;
break;

case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:
this.updateProgress(729);
this.messageLabel.string = "1004";
this.retryButtonNode.active = !0;
i = !0;
break;

case jsb.EventAssetsManager.UPDATE_FINISHED:
this.messageLabel.string = "1003";
this.retryButtonNode.active = !0;
e = !0;
break;

case jsb.EventAssetsManager.UPDATE_FAILED:
this.messageLabel.string = "1002";
this.retryButtonNode.active = !0;
this._updating = !1;
this._canRetry = !0;
break;

case jsb.EventAssetsManager.ERROR_UPDATING:
this.messageLabel.string = "1001";
break;

case jsb.EventAssetsManager.ERROR_DECOMPRESS:
this.messageLabel.string = t.getMessage();
}
if (i) {
this._am.setEventCallback(null);
this._updateListener = null;
this._updating = !1;
}
if (e) {
this._am.setEventCallback(null);
this._updateListener = null;
var c = jsb.fileUtils.getSearchPaths(), s = this._am.getLocalManifest().getSearchPaths();
Array.prototype.unshift.apply(c, s);
cc.sys.localStorage.setItem("HotUpdateSearchPaths", JSON.stringify(c));
jsb.fileUtils.setSearchPaths(c);
cc.audioEngine.stopAll();
cc.game.restart();
}
},
onRetryClick: function() {
this.retry();
cc.sys.isBrowser ? this.loadAssets() : (this.initHotUpdate(), this.checkUpdate());
},
versionCompareHandle: function(t, e) {
console.log("JS Custom Version Compare: version A is " + t + ", version B is " + e), 
console.log("JS Custom Version Compare: version A is " + t + ", version B is " + e);
for (var i = t.split("."), n = e.split("."), o = 0; o < i.length; ++o) {
var c = parseInt(i[o]), s = parseInt(n[o] || 0);
if (c !== s) return c - s;
}
return n.length > i.length ? -1 : 0;
},
updateProgress: function(t) {
this.updateProgressBar.width = t;
this.star.position = cc.v2(t, 0);
}
});
cc._RF.pop();
}, {} ],
SubpackageDownloader: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "42427g+lbNAIayqS7v03+/v", "SubpackageDownloader");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n, o = t("./Configs"), c = cc._decorator, s = c.ccclass;
c.property;
(function(t) {
var e = function() {
function t() {
this.isDownloading = !1;
this._storagePath = "";
this.failCount = 0;
}
e = t;
t.getInstance = function() {
null == this.instance && (this.instance = new e());
return this.instance;
};
t.prototype._downloadSubpackage = function(t, e) {
if (!this.isDownloading) {
console.log("CC_JSB: " + !0);
console.log("CC_DEBUG: " + !1);
console.log("CC_DEV: " + !1);
console.log("CC_EDITOR: " + !1);
console.log("CC_PREVIEW: " + !1);
console.log("CC_TEST: " + !1);
console.log("CC_BUILD: " + !0);
cc.loader.downloader.loadSubpackage(t, function(t) {
if (t) {
console.log(t.stack);
e(t.stack, 0);
} else e(null, 0);
});
}
};
t.prototype.checkUpdate = function(t, e) {
var i = this, n = Date.now(), c = JSON.stringify({
packageUrl: o.default.App.SUBPACKAGE_URL + "subpackages/" + t + "/",
remoteManifestUrl: o.default.App.SUBPACKAGE_URL + "subpackages/" + t + "/project.manifest?t=" + n,
remoteVersionUrl: o.default.App.SUBPACKAGE_URL + "subpackages/" + t + "/version.manifest?t=" + n,
version: "0.0.0"
});
this._am = new jsb.AssetsManager("", this._storagePath, function(t, e) {
console.log("JS Custom Version Compare: version A is " + t + ", version B is " + e);
for (var i = t.split("."), n = e.split("."), o = 0; o < i.length; ++o) {
var c = parseInt(i[o]), s = parseInt(n[o] || 0);
if (c !== s) return c - s;
}
return n.length > i.length ? -1 : 0;
});
if (this._am.getState() === jsb.AssetsManager.State.UNINITED) {
var s = new jsb.Manifest(c, this._storagePath);
this._am.loadLocalManifest(s, this._storagePath);
}
this._am.setEventCallback(function(n) {
switch (n.getEventCode()) {
case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:
console.log("No local manifest file found, hot update skipped.");
e("No local manifest file found, hot update skipped.", 0);
break;

case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:
case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:
console.log("Fail to download manifest file, hot update skipped.");
e("Fail to download manifest file, hot update skipped.", 0);
break;

case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:
console.log("Already up to date with the latest remote version 1.");
cc.loader.downloader.loadSubpackage(t, function(t) {
if (t) {
console.log(t.stack);
e(t.stack, 0);
} else e(null, 0);
});
break;

case jsb.EventAssetsManager.NEW_VERSION_FOUND:
console.log("New version found, please try to update.");
i._am.update();
break;

case jsb.EventAssetsManager.UPDATE_PROGRESSION:
console.log("files: " + n.getDownloadedFiles() + " / " + n.getTotalFiles());
console.log("bytes: " + n.getTotalBytes() + " / " + n.getDownloadedBytes());
console.log("event.getPercent(): " + n.getPercent());
var o = Number(n.getDownloadedFiles() / n.getTotalFiles());
e("progress", o);
break;

case jsb.EventAssetsManager.UPDATE_FINISHED:
cc.loader.downloader.loadSubpackage(t, function(t) {
if (t) {
console.log(t.stack);
e(t.stack, 0);
} else e(null, 0);
});
break;

case jsb.EventAssetsManager.UPDATE_FAILED:
console.log("Update failed. " + n.getMessage());
i.failCount < 5 ? i._am.downloadFailedAssets() : e("Update failed. " + n.getMessage(), 0);
i.failCount++;
break;

case jsb.EventAssetsManager.ERROR_UPDATING:
console.log("Asset update error: " + n.getAssetId() + ", " + n.getMessage());
break;

case jsb.EventAssetsManager.ERROR_DECOMPRESS:
console.log("Decompress error: " + n.getMessage());
e("Decompress error: " + n.getMessage(), 0);
break;

default:
return;
}
});
this._am.checkUpdate();
};
t.downloadSubpackage = function(t, e) {
this.getInstance()._downloadSubpackage(t, e);
};
var e;
t.instance = null;
return t = e = __decorate([ s ], t);
}();
t.SubpackageDownloader = e;
})(n || (n = {}));
i.default = n.SubpackageDownloader;
cc._RF.pop();
}, {
"./Configs": "Configs"
} ],
TX2NetworkClient: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "69d0adPiFtOMqlmb32t610p", "TX2NetworkClient");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("./Network.NetworkClient"), o = t("./Network.NetworkListener"), c = t("../common/Configs"), s = t("./Network.InPacket"), a = t("./Network.Cmd"), h = function(t) {
__extends(e, t);
function e() {
var e = t.call(this) || this;
e.listeners = new Array();
e.isLogin = !1;
e.onLogined = null;
e.isUseWSS = c.default.App.USE_WSS;
return e;
}
e.getInstance = function() {
null == this.instance && (this.instance = new e());
return this.instance;
};
e.prototype.checkConnect = function(t) {
void 0 === t && (t = null);
this.onLogined = t;
null != this.ws && this.ws.readyState == WebSocket.CONNECTING || (this.isConnected() ? this.isLogin && null != this.onLogined && this.onLogined() : this.connect());
};
e.prototype.connect = function() {
t.prototype.connect.call(this, c.default.App.HOST_TAI_XIU_MINI2.host, c.default.App.HOST_TAI_XIU_MINI2.port);
};
e.prototype.onOpen = function(e) {
t.prototype.onOpen.call(this, e);
this.send(new a.default.SendLogin(c.default.Login.Nickname, c.default.Login.AccessToken));
console.log("tx2 connected");
};
e.prototype.onMessage = function(t) {
for (var e = new Uint8Array(t.data), i = 0; i < this.listeners.length; i++) {
var n = this.listeners[i];
if (n.target && n.target instanceof Object && n.target.node) n.callback(e); else {
this.listeners.splice(i, 1);
i--;
}
}
switch (new s.default(e).getCmdId()) {
case a.default.Code.LOGIN:
this.isLogin = !0;
if (null != this.onLogined) {
console.log("Logined");
this.onLogined();
}
}
};
e.prototype.addListener = function(t, e) {
this.listeners.push(new o.default(e, t));
};
e.prototype.send = function(t) {
for (var e = new Int8Array(t._length), i = 0; i < t._length; i++) e[i] = t._data[i];
null != this.ws && this.isConnected() && this.ws.send(e.buffer);
};
e.prototype.sendCheck = function(t) {
var e = this;
this.checkConnect(function() {
e.send(t);
});
};
return e;
}(n.default);
i.default = h;
cc._RF.pop();
}, {
"../common/Configs": "Configs",
"./Network.Cmd": "Network.Cmd",
"./Network.InPacket": "Network.InPacket",
"./Network.NetworkClient": "Network.NetworkClient",
"./Network.NetworkListener": "Network.NetworkListener"
} ],
TaiXiuBoard_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "e6c11CHYW1PjZKvnSwp1SEF", "TaiXiuBoard_item");
cc.Class({
extends: cc.Component,
properties: {
colorOn: "",
colorOff: "",
bgOn: {
default: null,
type: cc.SpriteFrame
},
bgOff: {
default: null,
type: cc.SpriteFrame
},
text: {
default: null,
type: cc.Node
}
},
onLoad: function(t) {
this.sprite = this.node.getComponent(cc.Sprite);
},
onEnable: function() {
this.node.on(cc.Node.EventType.MOUSE_ENTER, this.eventOnENTER, this);
this.node.on(cc.Node.EventType.MOUSE_LEAVE, this.eventOnLEAVE, this);
},
onDisable: function() {
this.node.off(cc.Node.EventType.MOUSE_ENTER, this.eventOnENTER, this);
this.node.off(cc.Node.EventType.MOUSE_LEAVE, this.eventOnLEAVE, this);
},
eventOnENTER: function() {
this.text.color = this.text.color.fromHEX(this.colorOn);
this.sprite.spriteFrame = this.bgOn;
},
eventOnLEAVE: function() {
this.text.color = this.text.color.fromHEX(this.colorOff);
this.sprite.spriteFrame = this.bgOff;
}
});
cc._RF.pop();
}, {} ],
TaiXiuBoard: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "71423kGPWNLUrUcOrvZ688E", "TaiXiuBoard");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
nodeChonTien: {
default: null,
type: cc.Node
},
nodeChonSo: {
default: null,
type: cc.Node
}
},
init: function(t) {
this.RedT = t;
},
ChonTienClick: function(t, e) {
this.RedT.input.string = n.numberWithCommas(1 * n.getOnlyNumberInString(this.RedT.input.string) + 1 * e);
},
ChonSoClick: function(t, e) {
this.RedT.input.string = n.numberWithCommas(n.getOnlyNumberInString(this.RedT.input.string + e));
},
onBackClick: function() {
var t = n.getOnlyNumberInString(this.RedT.input.string);
this.RedT.input.string = n.numberWithCommas(t.slice(0, t.length - 1));
},
onCleanClick: function() {
this.RedT.input.string = "";
},
onAllClick: function() {
this.RedT.input.string = n.numberWithCommas(this.RedT.red ? cc.RedT.user.red : cc.RedT.user.xu);
},
onChangerTypeClick: function() {
if (this.nodeChonTien.active) {
this.nodeChonTien.active = !1;
this.nodeChonSo.active = !0;
} else {
this.nodeChonSo.active = !1;
this.nodeChonTien.active = !0;
}
},
onCuocClick: function() {},
onCloseClick: function() {
this.node.active = !1;
this.RedT.input.string = this.RedT.RedT.board ? "" : "ĐẶT";
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
TaiXiuChat: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "e4b59QQx49GyaeME6czSwsj", "TaiXiuChat");
var n = t("Helper"), o = t("BrowserUtil");
cc.Class({
extends: cc.Component,
properties: {
content: {
default: null,
type: cc.ScrollView
},
item: {
default: null,
type: cc.Prefab
},
input: {
default: null,
type: cc.EditBox
},
layout: {
default: null,
type: cc.Layout
},
sfRanks: [ cc.SpriteFrame ],
isLoad: !1
},
init: function(t) {
this.RedT = t;
void 0 !== cc.RedT.setting.taixiu.chat_active && (this.node.active = cc.RedT.setting.taixiu.chat_active);
},
onLoad: function() {
var t = this;
this.keyHandle = function(e) {
return e.keyCode === cc.macro.KEY.tab ? (e.preventDefault && e.preventDefault(), 
!1) : e.keyCode === cc.macro.KEY.enter ? (o.focusGame(), t.onChatClick(), e.preventDefault && e.preventDefault(), 
!1) : void 0;
};
},
onEnable: function() {
cc.sys.isBrowser && this.addEvent();
if (!this.isLoad) {
cc.RedT.send({
shop: {
get_daily: !0
}
});
this.getData();
}
},
onDisable: function() {
cc.sys.isBrowser && this.removeEvent();
this.clean();
},
addEvent: function() {
o.getHTMLElementByEditBox(this.input).addEventListener("keydown", this.keyHandle, !1);
},
removeEvent: function() {
o.getHTMLElementByEditBox(this.input).removeEventListener("keydown", this.keyHandle, !1);
},
getData: function() {
this.isLoad = !0;
cc.RedT.send({
taixiu: {
getLogChat: !0
}
});
},
message: function(t) {
var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], i = cc.instantiate(this.item);
i.getComponent(cc.Label).string = "[V" + (t.vip - 1 >> 0) + "]" + t.user + ":\t" + t.value;
var n = i.getChildByName("name").getComponent(cc.Label);
if (cc.RedT.daily_list.length) {
var o = new RegExp("^" + t.user + "$", "i");
Promise.all(cc.RedT.daily_list.map(function(t) {
o.test(t.NICKNAME.string) && (n.node.color = cc.Color.YELLOW);
}));
}
t.vip >= 2 && t.vip <= 4 && (n.node.color = cc.Color.MAGENTA);
t.vip >= 5 && (n.node.color = new cc.Color(0, 242, 255));
"Hệ Thống" !== t.user && "thinhdev" !== t.user || (n.node.color = cc.Color.RED);
n.string = "[V" + (t.vip - 1 >> 0) + "]" + t.user;
this.content.content.addChild(i);
e && this.layout.node.height > 300 && this.layout.node.height - this.layout.node.position.y - 134 < 70 && setTimeout(function() {
this.content.scrollToBottom(.1);
}.bind(this), 100);
},
logs: function(t) {
var e = this;
if (t.length) {
var i = this;
Promise.all(t.map(function(t) {
return i.message(t);
})).then(function(t) {
setTimeout(function() {
this.content.scrollToBottom(.1);
}.bind(e), 100);
});
}
},
onData: function(t) {
void 0 !== t.message && this.message(t.message, !0);
void 0 !== t.logs && this.logs(t.logs);
},
onChatClick: function() {
if (n.isEmpty(this.input.string)) this.RedT.onData({
err: "Nhập nội dung..."
}); else {
cc.RedT.send({
taixiu: {
chat: this.input.string
}
});
this.onData({
message: {
user: cc.RedT.user.name,
value: this.input.string,
vip: cc.RedT.vip
}
});
this.clean();
}
},
toggle: function() {
this.RedT.setTop();
cc.RedT.audio.playClick();
this.node.active = cc.RedT.setting.taixiu.chat_active = !this.node.active;
},
clean: function() {
this.input.string = "";
},
reset: function() {
this.content.content.destroyAllChildren();
this.node.active = !1;
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
TaiXiuDuaTop: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "0d14aR8NTpFS51EKXaupiVH", "TaiXiuDuaTop");
t("BrowserUtil");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
itemTemplate: cc.Node,
sfTops: [ cc.SpriteFrame ],
sfRanks: [ cc.SpriteFrame ]
},
init: function(t) {
this.RedT = t;
},
onEnable: function() {
for (var t = 1; t < this.itemTemplate.parent.childrenCount; t++) this.itemTemplate.parent.children[t].active = !0;
this.get_data();
},
onDisable: function() {
for (var t = 1; t < this.itemTemplate.parent.childrenCount; t++) this.itemTemplate.parent.children[t].active = !1;
},
eventStart: function(t) {
this.setTop();
},
setTop: function() {
this.node.parent.insertChild(this.node);
this.RedT.setTop();
},
toggle: function() {
this.setTop();
cc.RedT.audio.playClick();
this.node.active = cc.RedT.setting.taixiu.top_active = !this.node.active;
},
getItem: function() {
for (var t = null, e = 1; e < this.itemTemplate.parent.childrenCount; e++) {
var i = this.itemTemplate.parent.children[e];
if (i != this.itemTemplate && !i.active) {
t = i;
break;
}
}
null == t && ((t = cc.instantiate(this.itemTemplate)).parent = this.itemTemplate.parent);
t.active = !0;
return t;
},
get_data: function() {
cc.RedT.send({
taixiu: {
get_duatop: !0
}
});
this.onData({
top: [ {
Name: "trieeu8888",
VipPoint: "9999999999"
}, {
Name: "duyeng",
VipPoint: "9999999998"
}, {
Name: "toanuy",
VipPoint: "9999999997"
}, {
Name: "nguyuc",
VipPoint: "9999999996"
}, {
Name: "khanhao8386",
VipPoint: "9999999995"
}, {
Name: "khagiaia",
VipPoint: "7355"
}, {
Name: "thuonng",
VipPoint: "7347"
}, {
Name: "phuohi",
VipPoint: "7346"
}, {
Name: "canonong",
VipPoint: "7342"
}, {
Name: "nhandoi",
VipPoint: "7311"
}, {
Name: "uydoaan",
VipPoint: "7308"
}, {
Name: "phongbe8888",
VipPoint: "7304"
}, {
Name: "ngonien",
VipPoint: "7302"
}, {
Name: "viencacam",
VipPoint: "7299"
}, {
Name: "oanhlhlo",
VipPoint: "7283"
}, {
Name: "tranthao",
VipPoint: "7282"
}, {
Name: "hopluoong",
VipPoint: "7279"
}, {
Name: "diepong",
VipPoint: "7278"
}, {
Name: "thanhng",
VipPoint: "7277"
}, {
Name: "phuonan",
VipPoint: "7274"
} ]
});
},
onData: function(t) {
if (t.top.length) for (var e = 0; e < t.top.length; e++) {
var i = this.getItem();
i.getChildByName("4").active = !1;
i.getChildByName("0").getComponent(cc.Label).string = e + 1;
i.getChildByName("1").getComponent(cc.Label).string = t.top[e].Name;
i.getChildByName("2").getComponent(cc.Label).string = n.numberWithCommas(t.top[e].VipPoint) + " VIN";
i.getChildByName("3").getComponent(cc.Label).string = n.numberWithCommas(.006 * t.top[e].VipPoint) + " VIN (0.6%)";
if (e > 2) {
i.getChildByName("bar").getComponent(cc.Sprite).spriteFrame = this.sfTops[0];
i.getChildByName("top").getComponent(cc.Sprite).spriteFrame = this.sfRanks[0];
} else {
i.getChildByName("bar").getComponent(cc.Sprite).spriteFrame = this.sfTops[e + 1];
i.getChildByName("top").getComponent(cc.Sprite).spriteFrame = this.sfRanks[e + 1];
i.getChildByName("4").active = !0;
i.getChildByName("4").getComponent(cc.Label).string = n.numberWithCommas(t.top[e].VipPoint) + " VIN";
}
}
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
TaiXiuLichSuPhien_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "47ebeX3OGJIioJo+XYY5AW7", "TaiXiuLichSuPhien_item");
cc.Class({
extends: cc.Component,
properties: {
time: {
default: null,
type: cc.Label
},
user: {
default: null,
type: cc.Label
},
cuoc: {
default: null,
type: cc.Label
},
tralai: {
default: null,
type: cc.Label
}
}
});
cc._RF.pop();
}, {} ],
TaiXiuLichSuPhien: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "66490CKFvdK6JST1Zi6Whaj", "TaiXiuLichSuPhien");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
itemPrefab: {
default: null,
type: cc.Prefab
},
dice: {
default: [],
type: cc.Sprite
},
leftCuoc: {
default: null,
type: cc.Label
},
leftTraLai: {
default: null,
type: cc.Label
},
rightCuoc: {
default: null,
type: cc.Label
},
rightTraLai: {
default: null,
type: cc.Label
},
phien: {
default: null,
type: cc.Label
},
nodeTai: {
default: null,
type: cc.Node
},
nodeXiu: {
default: null,
type: cc.Node
},
nodeChan: {
default: null,
type: cc.Node
},
nodeLe: {
default: null,
type: cc.Node
},
scrollViewLeft: {
default: null,
type: cc.ScrollView
},
scrollViewRight: {
default: null,
type: cc.ScrollView
},
nodeNext: {
default: null,
type: cc.Node
},
nodePrevious: {
default: null,
type: cc.Node
},
labelGame: {
default: null,
type: cc.Label
},
nodeRED: {
default: null,
type: cc.Node
},
nodeXU: {
default: null,
type: cc.Node
},
effectTai: {
default: null,
type: cc.Node
},
effectXiu: {
default: null,
type: cc.Node
}
},
init: function(t) {
this.RedT = t;
},
onEnable: function() {
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
},
onDisable: function() {
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
},
onChangerGame: function() {
this.labelGame.string = this.RedT.TX_Main.taixiu ? "Chẵn Lẻ" : "Tài Xỉu";
this.nodeTai.active = this.RedT.TX_Main.taixiu;
this.nodeXiu.active = this.RedT.TX_Main.taixiu;
this.nodeChan.active = !this.RedT.TX_Main.taixiu;
this.nodeLe.active = !this.RedT.TX_Main.taixiu;
},
onChangerCoint: function() {
this.nodeRED.active = !this.nodeRED.active;
this.nodeXU.active = !this.nodeXU.active;
},
onChangerGameClick: function() {
this.RedT.TX_Main.onChangerGame();
this.getPhien(this.isPhien);
},
onChangerCointClick: function() {
this.RedT.TX_Main.onChangerRED();
this.getPhien(this.isPhien);
},
onGetPhienClick: function(t) {
this.getPhien(t.target.phien);
},
getPhien: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
if (t) {
cc.RedT.inGame.loading.active = !0;
cc.RedT.send({
taixiu: {
get_phien: {
red: this.RedT.TX_Main.red,
taixiu: this.RedT.TX_Main.taixiu,
phien: t
}
}
});
}
},
onNextClick: function(t) {
this.getPhien(this.isPhien + 1);
},
onPreviousClick: function(t) {
this.getPhien(this.isPhien - 1);
},
onData: function(t) {
var e = this;
this.setNew();
cc.RedT.inGame.loading.active = !1;
null != cc.RedT.minigame && cc.RedT.minigame.Dialog.showTaiXiuLichSuPhien();
this.leftCuoc.string = n.numberWithCommas(t.tong_L);
this.rightCuoc.string = n.numberWithCommas(t.tong_R);
this.leftTraLai.string = n.numberWithCommas(t.tong_tralai_L);
this.rightTraLai.string = n.numberWithCommas(t.tong_tralai_R);
this.phien.string = t.phien + "  -  " + n.getStringDateByTime(t.time);
this.isPhien = t.phien;
var i = t.dice[0] + t.dice[1] + t.dice[2], o = cc.RedT.setting.taixiu.logs[0].phien - t.phien;
this.nodePrevious.active = !(o > 17);
this.nodeNext.active = !(o < 1);
if (i > 10) {
this.effectTai.active = !0;
this.effectXiu.active = !1;
} else {
this.effectTai.active = !1;
this.effectXiu.active = !0;
}
Promise.all(this.dice.map(function(i, n) {
var o = t.dice[n];
i.spriteFrame = e.RedT.TX_Main.diceSF[o - 1];
}));
if (this.RedT.TX_Main.taixiu) {
this.nodeTai.color = i > 10 ? cc.Color.WHITE : this.nodeTai.color.fromHEX("#ACACAC");
this.nodeXiu.color = i > 10 ? this.nodeTai.color.fromHEX("#ACACAC") : cc.Color.WHITE;
this.nodeTai.opacity = i > 10 ? 255 : 100;
this.nodeXiu.opacity = i > 10 ? 100 : 255;
} else {
this.nodeChan.color = i % 2 ? this.nodeChan.color.fromHEX("#ACACAC") : cc.Color.WHITE;
this.nodeLe.color = i % 2 ? cc.Color.WHITE : this.nodeChan.color.fromHEX("#ACACAC");
this.nodeChan.opacity = i % 2 ? 100 : 255;
this.nodeLe.opacity = i % 2 ? 255 : 100;
}
Promise.all(t.dataL.map(function(t) {
var i = cc.instantiate(e.itemPrefab), o = i.getComponent("TaiXiuLichSuPhien_item");
o.time.string = n.getStringHourByTime(t.time);
o.user.string = t.name;
o.cuoc.string = n.numberWithCommas(t.bet);
o.tralai.string = n.numberWithCommas(t.tralai);
e.scrollViewLeft.content.addChild(i);
}));
Promise.all(t.dataR.map(function(t) {
var i = cc.instantiate(e.itemPrefab), o = i.getComponent("TaiXiuLichSuPhien_item");
o.time.string = n.getStringHourByTime(t.time);
o.user.string = t.name;
o.cuoc.string = n.numberWithCommas(t.bet);
o.tralai.string = n.numberWithCommas(t.tralai);
e.scrollViewRight.content.addChild(i);
}));
},
setNew: function() {
this.scrollViewLeft.content.destroyAllChildren();
this.scrollViewRight.content.destroyAllChildren();
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
TaiXiuLichSu_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "06a2bfDqLRFiorJC/4mw+4h", "TaiXiuLichSu_item");
cc.Class({
extends: cc.Component,
properties: {
time: {
default: null,
type: cc.Label
},
phien: {
default: null,
type: cc.Label
},
dat: {
default: null,
type: cc.Label
},
ketqua: {
default: null,
type: cc.Label
},
cuoc: {
default: null,
type: cc.Label
},
donvi: {
default: null,
type: cc.Label
},
tralai: {
default: null,
type: cc.Label
},
image: {
default: null,
type: cc.Sprite
}
}
});
cc._RF.pop();
}, {} ],
TaiXiuLichSu: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "80da9UrNe9D45tJEXBxj5Wd", "TaiXiuLichSu");
var n;
function o(t, e, i) {
e in t ? Object.defineProperty(t, e, {
value: i,
enumerable: !0,
configurable: !0,
writable: !0
}) : t[e] = i;
return t;
}
var c = t("Helper"), s = t("Pagination");
cc.Class((o(n = {
extends: cc.Component,
properties: {
content: cc.Node,
page: s
},
init: function(t) {
this.RedT = t;
},
onEnable: function() {
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
},
onDisable: function() {
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
},
onLoad: function() {
var t = this;
this.page.init(this);
Promise.all(this.content.children.map(function(t) {
return t.getComponent("TaiXiuLichSu_item");
})).then(function(e) {
t.content = e;
});
}
}, "onEnable", function() {
this.get_data();
}), o(n, "onDisable", function() {}), o(n, "get_data", function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
taixiu: {
get_log: {
page: t
}
}
});
}), o(n, "onData", function(t) {
cc.RedT.inGame.loading.active = !1;
this.page.onSet(t.page, t.kmess, t.total);
Promise.all(this.content.map(function(e, i) {
var n = t.data[i];
if (void 0 !== n) {
e.node.active = !0;
var o = n.dice1 + n.dice2 + n.dice3;
e.time.string = c.getStringDateByTime(n.time);
e.phien.string = n.phien;
e.dat.string = n.taixiu ? n.select ? "Tài" : "Xỉu" : n.select ? "Chẵn" : "Lẻ";
e.ketqua.string = n.dice1 + "-" + n.dice2 + "-" + n.dice3 + "  " + o;
e.cuoc.string = c.numberWithCommas(n.bet);
e.tralai.string = c.numberWithCommas(n.tralai);
e.donvi.string = n.win ? c.numberWithCommas(n.betwin + n.bet) : c.numberWithCommas(n.betwin);
e.donvi.node.color = cc.Color.YELLOW;
e.time.node.color = n.win ? cc.Color.YELLOW : e.time.node.color.fromHEX("#E2E2E2");
e.dat.node.color = n.win ? cc.Color.YELLOW : e.dat.node.color.fromHEX("#E2E2E2");
} else e.node.active = !1;
}));
}), n));
cc._RF.pop();
}, {
Helper: "Helper",
Pagination: "Pagination"
} ],
TaiXiuMain_logTips: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "43178FyrtFOhKXVCK9EK0Dk", "TaiXiuMain_logTips");
cc.Class({
extends: cc.Component,
properties: {
text: {
default: null,
type: cc.Label
},
tips: {
default: null,
type: cc.Node
}
},
onLoad: function() {
this.sprite = this.getComponent(cc.Sprite);
},
onEnable: function() {
this.node.on(cc.Node.EventType.MOUSE_ENTER, this.eventOnENTER, this);
this.node.on(cc.Node.EventType.MOUSE_LEAVE, this.eventOnLEAVE, this);
},
onDisable: function() {
this.node.off(cc.Node.EventType.MOUSE_ENTER, this.eventOnENTER, this);
this.node.off(cc.Node.EventType.MOUSE_LEAVE, this.eventOnLEAVE, this);
},
eventOnENTER: function() {
this.tips.active = !0;
},
eventOnLEAVE: function() {
this.tips.active = !1;
}
});
cc._RF.pop();
}, {} ],
TaiXiuMain: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "a1f5dGzy/ZDl7mqfiHNadfE", "TaiXiuMain");
var n = t("TaiXiuBoard"), o = t("TaiXiuChat"), c = t("BrowserUtil"), s = t("Helper"), a = t("TaiXiu_efScale");
cc.Class({
extends: cc.Component,
properties: {
background: {
default: null,
type: cc.Node
},
inputL: cc.Node,
inputR: cc.Node,
nodeXoay: cc.Animation,
inputLTxt: cc.Label,
inputRTxt: cc.Label,
totalLeft: {
default: null,
type: cc.Label
},
totalRight: {
default: null,
type: cc.Label
},
myLeft: {
default: null,
type: cc.Label
},
myRight: {
default: null,
type: cc.Label
},
playerLeft: {
default: null,
type: cc.Label
},
playerRight: {
default: null,
type: cc.Label
},
nodeKetQua: {
default: null,
type: cc.Node
},
SpineKetQua: {
default: null,
type: cc.Node
},
labelKetQua: {
default: null,
type: cc.Label
},
timeWait: {
default: null,
type: cc.Label
},
nodeTimeWait: {
default: null,
type: cc.Node
},
timeCuoc: {
default: null,
type: cc.Label
},
skeCountDown: sp.Skeleton,
nodeChanLe: {
default: null,
type: cc.Node
},
nodeTaiXiu: {
default: null,
type: cc.Node
},
labelPhien: {
default: null,
type: cc.Label
},
diaNan: {
default: null,
type: cc.Node
},
dice: {
default: [],
type: cc.Sprite
},
diceSF: {
default: [],
type: cc.SpriteFrame
},
cointRED: {
default: null,
type: cc.Node
},
cointXU: {
default: null,
type: cc.Node
},
dotLogs: {
default: null,
type: cc.Node
},
gameCover: {
default: null,
type: cc.Label
},
diceAnimation: {
default: null,
type: cc.Animation
},
skeDice: sp.Skeleton,
efTai: a,
efXiu: a,
efChan: a,
efLe: a,
efnodeTai: cc.Node,
efnodeXiu: cc.Node,
frameNan: {
default: [],
type: cc.SpriteFrame
},
spriteNan: {
default: null,
type: cc.Sprite
},
dot_black: {
default: null,
type: cc.SpriteFrame
},
dot_white: {
default: null,
type: cc.SpriteFrame
},
dot_yellow: {
default: null,
type: cc.SpriteFrame
},
notice: {
default: null,
type: cc.Node
},
mini_warning: {
default: null,
type: cc.Prefab
},
fontCong: {
default: null,
type: cc.BitmapFont
},
fontTru: {
default: null,
type: cc.BitmapFont
},
WIN_HT: {
default: null,
type: cc.Label
},
WIN_DN: {
default: null,
type: cc.Label
},
LOST_HT: {
default: null,
type: cc.Label
},
LOST_DN: {
default: null,
type: cc.Label
},
TX_Chat: o,
TX_Board: n,
red: !0,
taixiu: !0
},
init: function(t) {
var e = this;
this.RedT = t;
cc.RedT.setting.taixiu.data = cc.RedT.setting.taixiu.data || {
taixiu: {},
chanle: {},
du_day: {}
};
this.isNan = !1;
this.abc = !1;
this.animXoay = this.nodeXoay.play();
if (void 0 === cc.RedT.util.fontCong) {
cc.RedT.util.fontCong = this.fontCong;
cc.RedT.util.fontTru = this.fontTru;
}
void 0 === cc.RedT.setting.taixiu.red && (cc.RedT.setting.taixiu.red = this.red);
void 0 === cc.RedT.setting.taixiu.taixiu && (cc.RedT.setting.taixiu.taixiu = this.taixiu);
void 0 === cc.RedT.setting.taixiu.getLogs && (cc.RedT.setting.taixiu.getLogs = !1);
void 0 === cc.RedT.setting.taixiu.isNan && (cc.RedT.setting.taixiu.isNan = !1);
console.log("reg tai xiu");
Promise.all(this.dotLogs.children.map(function(t) {
var e = t.getComponent(cc.Sprite);
e.mod = t.getComponent("TaiXiuMain_logTips");
return e;
})).then(function(t) {
e.dotLogs = t;
});
this.onDiceAnimationFinish = function(t) {
this.setDice(!0);
if (this.isNan) ; else {
this.dataLogs();
this.abc = !0;
this.nodeKetQua.active = !0;
this.SpineKetQua.active = !0;
if (this.diemSo > 10) {
this.efTai.play();
this.efnodeTai.active = !0;
} else {
this.efXiu.play();
this.efnodeXiu.active = !0;
}
this.diemSo % 2 ? this.efLe.play() : this.efChan.play();
}
this.diceAnimation.node.active = !1;
};
if (cc.RedT.setting.taixiu.getLogs) {
void 0 !== cc.RedT.setting.taixiu.position && (this.node.position = cc.RedT.setting.taixiu.position);
if (void 0 !== cc.RedT.setting.taixiu.time_remain) {
cc.RedT.setting.taixiu.time_remain++;
this.nextRealTime();
}
this.reLoadGame();
}
},
onLoad: function() {
var t = this;
this.ttOffset = null;
this.editboxs = [ this.inputLeft, this.inputRight ];
this.TX_Board.init(this);
this.TX_Chat.init(this);
this.diaNan.getComponent("TaiXiu_DiaNan").init(this);
this.keyHandle = function(e) {
return e.keyCode === cc.macro.KEY.tab ? (t.changeNextFocusEditBox(), e.preventDefault && e.preventDefault(), 
!1) : e.keyCode === cc.macro.KEY.enter ? (c.focusGame(), t.onCuocClick(), e.preventDefault && e.preventDefault(), 
!1) : void 0;
};
this.diceAnimation.on("finished", this.onDiceAnimationFinish, this);
this.onCuocClick = function() {
var e = s.getOnlyNumberInString(t.input.string);
e = parseInt(e);
t.input.string = "";
t.TX_Board.node.active = !1;
if (isNaN(e) || e < 1e3) {
var i = cc.instantiate(t.mini_warning);
i.getComponent("mini_warning").text.string = "Tiền cược phải lớn hơn 1.000 " + (t.red, 
"VIN");
t.notice.addChild(i);
} else cc.RedT.send({
taixiu: {
cuoc: {
select: "left" == t.inputOld,
bet: e
}
}
});
};
if (this.RedT.board) {
this.inputL.active = this.inputR.active = !1;
this.inputLeft.node.active = this.inputRight.node.active = !0;
}
},
onEnable: function() {
this.background.on(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.background.on(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.background.on(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.background.on(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.background.on(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
this.RedT.board;
cc.RedT.MiniPanel.nodeTimePopup.active = !1;
this.RedT.board;
},
onDisable: function() {
this.background.off(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.background.off(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.background.off(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.background.off(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.background.off(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
this.RedT.board;
cc.RedT.IS_LOGIN && (cc.RedT.MiniPanel.nodeTimePopup.active = !0);
this.RedT.board;
},
updateValue: function(t) {
var e = s.numberWithCommas(s.getOnlyNumberInString(this.value));
this.value = "0" == e ? "" : e;
},
clean: function() {
this.inputLeft.string = this.inputRight.string = "";
},
initGame: function(t) {
t != this.taixiu && this.onChangerGame();
},
onChangerGame: function() {
cc.RedT.setting.taixiu.taixiu = this.taixiu = !this.taixiu;
this.gameCover.string = this.taixiu ? "Chẵn Lẻ" : "Tài Xỉu";
this.nodeTaiXiu.active = this.taixiu;
this.nodeChanLe.active = !this.taixiu;
if (cc.RedT.setting.taixiu.getLogs) {
this.dataLogs();
this.RedT.TX_ThongKe.onChangerGame();
this.RedT.TX_LichSuPhien.onChangerGame();
this.taixiu && this.onDataTaiXiu(cc.RedT.setting.taixiu.data.taixiu);
!this.taixiu && this.onDataChanLe(cc.RedT.setting.taixiu.data.chanle);
this.onDuDay(cc.RedT.setting.taixiu.data.du_day);
}
},
onChangerNan: function() {
cc.RedT.setting.taixiu.isNan = this.isNan = !this.isNan;
this.spriteNan.spriteFrame = this.isNan ? this.frameNan[1] : this.frameNan[0];
},
reLoadGame: function() {
this.regTimeOut2 = setTimeout(function() {
cc.RedT.setting.taixiu.red != this.red && this.onChangerRED();
cc.RedT.setting.taixiu.taixiu != this.taixiu ? this.onChangerGame() : this.dataLogs();
cc.RedT.setting.taixiu.isNan != this.isNan && this.onChangerNan();
this.onDuDay(cc.RedT.setting.taixiu.data.du_day);
cc.RedT.setting.taixiu.taixiu ? this.onDataTaiXiu(cc.RedT.setting.taixiu.data.taixiu) : this.onDataChanLe(cc.RedT.setting.taixiu.data.chanle);
}.bind(this), 50);
this.setPhien();
},
onChangerRED: function() {
cc.RedT.setting.taixiu.red = this.red = !this.red;
this.cointRED.active = !this.cointRED.active;
this.cointXU.active = !this.cointXU.active;
this.totalLeft.node.color = this.totalRight.node.color = this.red ? this.totalRight.node.color.fromHEX("#FFEB0A") : this.totalRight.node.color.fromHEX("#FFFFFF");
this.RedT.TX_LichSuPhien.onChangerCoint();
this.taixiu && this.onDataTaiXiu(cc.RedT.setting.taixiu.data.taixiu);
!this.taixiu && this.onDataChanLe(cc.RedT.setting.taixiu.data.chanle);
this.onDuDay(cc.RedT.setting.taixiu.data.du_day);
},
eventStart: function(t) {
this.setTop();
this.ttOffset = cc.v2(t.touch.getLocationX() - this.node.position.x, t.touch.getLocationY() - this.node.position.y);
},
eventMove: function(t) {
this.node.position = cc.v2(t.touch.getLocationX() - this.ttOffset.x, t.touch.getLocationY() - this.ttOffset.y);
},
eventEnd: function() {
cc.RedT.setting.taixiu.position = this.node.position;
},
setTop: function() {
this.node.parent.insertChild(this.node);
this.RedT.setTop();
},
onSelectInput: function(t, e) {
this.TX_Board.node.active = !0;
this.inputOld = e;
switch (e) {
case "right":
this.input = this.RedT.board ? this.inputRight : this.inputRTxt;
break;

case "left":
this.input = this.RedT.board ? this.inputLeft : this.inputLTxt;
}
},
onChangerInput: function() {
var t = s.numberWithCommas(s.getOnlyNumberInString(this.input.string));
this.input.string = "0" == t ? "" : t;
},
setPhien: function() {
var t = cc.RedT.setting.taixiu.logs[0].phien;
this.labelPhien.string = "#" + t;
},
setDice: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = this;
Promise.all(this.dice.map(function(n, o) {
e && (n.spriteFrame = i.diceSF[cc.RedT.setting.taixiu.logs[0].dice[o] - 1]);
n.node.active = t;
}));
},
onGetHistory: function() {
cc.RedT.inGame.loading.active = !0;
null != cc.RedT.minigame && cc.RedT.minigame.Dialog.showTaiXiuLichSu();
},
onGetPhienClick: function(t) {
this.getPhien(t.target.phien);
},
getPhien: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
if (t) {
cc.RedT.inGame.loading.active = !0;
cc.RedT.send({
taixiu: {
get_phien: {
red: this.RedT.TX_Main.red,
taixiu: this.RedT.TX_Main.taixiu,
phien: t
}
}
});
}
},
onData: function(t) {
void 0 !== t.get_phien && this.RedT.TX_LichSuPhien.onData(t.get_phien);
if (void 0 !== t.err) {
var e = cc.instantiate(this.mini_warning);
e.getComponent("mini_warning").text.string = t.err;
this.notice.addChild(e);
}
if (void 0 !== t.du_day) {
Object.assign(cc.RedT.setting.taixiu.data.du_day, t.du_day);
this.onDuDay(t.du_day);
}
if (void 0 !== t.taixiu) {
Object.assign(cc.RedT.setting.taixiu.data.taixiu, t.taixiu);
this.taixiu && this.onDataTaiXiu(t.taixiu);
}
if (void 0 !== t.chanle) {
Object.assign(cc.RedT.setting.taixiu.data.chanle, t.chanle);
!this.taixiu && this.onDataChanLe(t.chanle);
}
void 0 !== t.get_top && this.RedT.TX_Top.onData(t.get_top);
void 0 !== t.get_duatop && this.RedT.TX_Top.onDataDuaTop(t.get_duatop);
void 0 !== t.chat && this.TX_Chat.onData(t.chat);
void 0 !== t.status && this.status(t.status);
void 0 !== t.get_log && this.RedT.TX_LichSu.onData(t.get_log);
if (void 0 !== t.logs) {
cc.RedT.setting.taixiu.logs = t.logs;
this.dataLogs();
this.setPhien();
if (cc.RedT.setting.taixiu.time_remain > 60) {
this.setDice(!0);
this.nodeTimeWait.active = !0;
this.skeCountDown.node.active = !1;
}
cc.RedT.setting.taixiu.getLogs = !0;
}
if (void 0 !== t.time_remain) {
cc.RedT.setting.taixiu.time_remain = t.time_remain;
this.playTime();
}
if (void 0 !== t.finish) {
if (cc.RedT.setting.taixiu.getLogs) {
void 0 !== this.timeInterval && clearInterval(this.timeInterval);
cc.RedT.setting.taixiu.logs.unshift({
dice: [ t.finish.dices[0], t.finish.dices[1], t.finish.dices[2] ],
phien: t.finish.phien
});
cc.RedT.setting.taixiu.logs.length > 120 && cc.RedT.setting.taixiu.logs.pop();
this.diemSo = t.finish.dices[0] + t.finish.dices[1] + t.finish.dices[2];
this.labelKetQua.string = this.diemSo;
if (this.isNan) {
this.diaNan.active = !0;
this.diaNan.position = cc.v2(-167, 15);
this.spriteNan.node.active = !1;
this.showResult();
} else this.showResult();
this.nodeTimeWait.active = !0;
this.skeCountDown.node.active = !1;
}
cc.RedT.setting.taixiu.time_remain = 77;
this.playTime();
}
},
showResult: function() {
var t = this;
this.skeDice.node.active = !0;
this.skeDice.setAnimation(0, "animation", !1);
this.skeDice.setCompleteListener(function() {
t.setDice(!0);
t.skeDice.node.active = !1;
if (t.isNan) ; else {
t.dataLogs();
t.abc = !0;
t.nodeKetQua.active = !0;
t.SpineKetQua.active = !0;
if (t.diemSo > 10) {
t.efTai.play();
t.efnodeTai.active = !0;
} else {
t.efXiu.play();
t.efnodeXiu.active = !0;
}
t.diemSo % 2 ? t.efLe.play() : t.efChan.play();
}
});
},
efStop: function() {
this.efTai.stop();
this.efXiu.stop();
this.efLe.stop();
this.efChan.stop();
this.efnodeXiu.active = !1;
this.efnodeTai.active = !1;
},
moDia: function() {
this.dataLogs();
this.nodeKetQua.active = !0;
this.SpineKetQua.active = !0;
if (this.diemSo > 10) {
this.efTai.play();
this.efnodeTai.active = !0;
} else {
this.efXiu.play();
this.efnodeXiu.active = !0;
}
this.diemSo % 2 ? this.efLe.play() : this.efChan.play();
},
playTime: function() {
void 0 !== this.timeInterval && clearInterval(this.timeInterval);
this.timeInterval = setInterval(function() {
if (cc.RedT.setting.taixiu.time_remain > 61) {
var t = s.numberPad(cc.RedT.setting.taixiu.time_remain - 62, 2);
cc.RedT.MiniPanel.timePopup.node.active && (cc.RedT.MiniPanel.timePopup.string = t) && (cc.RedT.MiniPanel.timePopup.node.color = cc.color(255, 0, 0, 255));
this.timeWait.string = "00:" + s.numberPad(t, 2);
this.animXoay.speed = 0;
if (this.diaNan.x >= 50) {
this.moDia();
this.abc = !0;
}
if (this.diaNan.x <= -350) {
this.moDia();
this.abc = !0;
}
if (this.diaNan.y >= 125) {
this.moDia();
this.abc = !0;
}
if (this.diaNan.y <= -250) {
this.moDia();
this.abc = !0;
}
cc.RedT.setting.taixiu.time_remain < 71 && this.efStop();
if (cc.RedT.setting.taixiu.time_remain < 66) {
this.nodeKetQua.active = !1;
this.SpineKetQua.active = !1;
this.isNan && (this.diaNan.active = !1);
}
} else {
if (this.dice[0].node.active) {
this.setDice(!1, !1);
this.reset();
}
this.efStop();
this.nodeTimeWait.active = this.nodeKetQua.active = this.diaNan.active = this.SpineKetQua.active = !1;
this.skeCountDown.node.active = this.spriteNan.node.active = !0;
if (cc.RedT.setting.taixiu.time_remain > 0) {
t = s.numberPad(cc.RedT.setting.taixiu.time_remain - 1, 1);
cc.RedT.setting.taixiu.getLogs && this.skeCountDown.setAnimation(0, "s" + (t < 10 ? "0" + t : t), !1);
cc.RedT.MiniPanel.timePopup.node.active && (cc.RedT.MiniPanel.timePopup.string = t) && (cc.RedT.MiniPanel.timePopup.node.color = cc.color(255, 0, 0, 255));
if (cc.RedT.setting.taixiu.time_remain <= 6) {
this.animXoay.speed = 5;
cc.RedT.setting.taixiu.time_remain <= 5 && (this.animXoay.speed = 10);
} else this.animXoay.speed = 1;
} else clearInterval(this.timeInterval);
}
cc.RedT.setting.taixiu.time_remain--;
}.bind(this), 1e3);
},
nextRealTime: function() {
if (cc.RedT.setting.taixiu.time_remain > 61) {
this.setDice(!0);
this.nodeTimeWait.active = !0;
this.skeCountDown.node.active = !1;
var t = s.numberPad(cc.RedT.setting.taixiu.time_remain - 62, 2);
cc.RedT.MiniPanel.timePopup.node.color = cc.color(255, 0, 0, 255);
cc.RedT.MiniPanel.timePopup.string = t;
this.timeWait.string = "00:" + s.numberPad(t, 2);
this.animXoay.speed = 0;
} else {
this.nodeTimeWait.active = !1;
this.skeCountDown.node.active = !0;
if (cc.RedT.setting.taixiu.time_remain > 0) {
t = s.numberPad(cc.RedT.setting.taixiu.time_remain - 1, 2);
cc.RedT.setting.taixiu.getLogs && this.skeCountDown.setAnimation(0, "s" + (t < 10 ? "0" + t : t), !1);
cc.RedT.MiniPanel.timePopup.node.color = cc.color(155, 75, 2, 255);
cc.RedT.MiniPanel.timePopup.string = t;
if (cc.RedT.setting.taixiu.time_remain <= 6) {
this.animXoay.speed = 5;
cc.RedT.setting.taixiu.time_remain <= 5 && (this.animXoay.speed = 10);
} else this.animXoay.speed = 1;
}
}
},
onDataChanLe: function(t) {
if (this.red) {
void 0 !== t.red_chan && s.numberTo(this.totalLeft, s.getOnlyNumberInString(this.totalLeft.string), t.red_chan, 900, !0);
void 0 !== t.red_le && s.numberTo(this.totalRight, s.getOnlyNumberInString(this.totalRight.string), t.red_le, 900, !0);
void 0 !== t.red_me_chan && s.numberTo(this.myLeft, s.getOnlyNumberInString(this.myLeft.string), t.red_me_chan, 900, !0);
void 0 !== t.red_me_le && s.numberTo(this.myRight, s.getOnlyNumberInString(this.myRight.string), t.red_me_le, 900, !0);
void 0 !== t.red_player_chan && s.numberTo(this.playerLeft, s.getOnlyNumberInString(this.playerLeft.string), t.red_player_chan, 900, !0);
void 0 !== t.red_player_le && s.numberTo(this.playerRight, s.getOnlyNumberInString(this.playerRight.string), t.red_player_le, 900, !0);
} else {
void 0 !== t.xu_chan && (this.totalLeft.string = s.numberWithCommas(t.xu_chan));
void 0 !== t.xu_le && (this.totalRight.string = s.numberWithCommas(t.xu_le));
void 0 !== t.xu_me_chan && (this.myLeft.string = s.numberWithCommas(t.xu_me_chan));
void 0 !== t.xu_me_le && (this.myRight.string = s.numberWithCommas(t.xu_me_le));
void 0 !== t.xu_player_chan && (this.playerLeft.string = s.numberWithCommas(t.xu_player_chan));
void 0 !== t.xu_player_le && (this.playerRight.string = s.numberWithCommas(t.xu_player_le));
}
},
onDataTaiXiu: function(t) {
void 0 !== cc.RedT.inGame.onGetTaiXiu && cc.RedT.inGame.onGetTaiXiu(t.red_tai, t.red_xiu);
if (this.red) {
void 0 !== t.red_tai && s.numberTo(this.totalLeft, s.getOnlyNumberInString(this.totalLeft.string), t.red_tai, 900, !0);
void 0 !== t.red_xiu && s.numberTo(this.totalRight, s.getOnlyNumberInString(this.totalRight.string), t.red_xiu, 900, !0);
void 0 !== t.red_me_tai && s.numberTo(this.myLeft, s.getOnlyNumberInString(this.myLeft.string), t.red_me_tai, 900, !0);
void 0 !== t.red_me_xiu && s.numberTo(this.myRight, s.getOnlyNumberInString(this.myRight.string), t.red_me_xiu, 900, !0);
void 0 !== t.red_player_tai && s.numberTo(this.playerLeft, s.getOnlyNumberInString(this.playerLeft.string), t.red_player_tai, 900, !0);
void 0 !== t.red_player_xiu && s.numberTo(this.playerRight, s.getOnlyNumberInString(this.playerRight.string), t.red_player_xiu, 900, !0);
} else {
void 0 !== t.xu_tai && (this.totalLeft.string = s.numberWithCommas(t.xu_tai));
void 0 !== t.xu_xiu && (this.totalRight.string = s.numberWithCommas(t.xu_xiu));
void 0 !== t.xu_me_tai && (this.myLeft.string = s.numberWithCommas(t.xu_me_tai));
void 0 !== t.xu_me_xiu && (this.myRight.string = s.numberWithCommas(t.xu_me_xiu));
void 0 !== t.xu_player_tai && (this.playerLeft.string = s.numberWithCommas(t.xu_player_tai));
void 0 !== t.xu_player_xiu && (this.playerRight.string = s.numberWithCommas(t.xu_player_xiu));
}
},
onDuDay: function(t) {
if (this.taixiu) if (this.red) {
this.WIN_HT.string = t.tLineWinRedH;
this.WIN_DN.string = t.tLineWinRed;
this.LOST_HT.string = t.tLineLostRedH;
this.LOST_DN.string = t.tLineLostRed;
} else {
this.WIN_HT.string = t.tLineWinXuH;
this.WIN_DN.string = t.tLineWinXu;
this.LOST_HT.string = t.tLineLostXuH;
this.LOST_DN.string = t.tLineLostXu;
} else if (this.red) {
this.WIN_HT.string = t.cLineWinRedH;
this.WIN_DN.string = t.cLineWinRed;
this.LOST_HT.string = t.cLineLostRedH;
this.LOST_DN.string = t.cLineLostRed;
} else {
this.WIN_HT.string = t.cLineWinXuH;
this.WIN_DN.string = t.cLineWinXu;
this.LOST_HT.string = t.cLineLostXuH;
this.LOST_DN.string = t.cLineLostXu;
}
},
dataLogs: function() {
if (cc.RedT.setting.taixiu.logs.length) {
var t = this;
Promise.all(this.dotLogs.map(function(e, i) {
var n = cc.RedT.setting.taixiu.logs[i];
if (void 0 !== n) {
var o = n.dice[0] + n.dice[1] + n.dice[2];
e.node.active = !0;
e.node.phien = n.phien;
e.mod.text.string = n.dice[0] + "-" + n.dice[1] + "-" + n.dice[2];
e.spriteFrame = t.taixiu ? o < 11 ? t.dot_white : t.dot_black : o % 2 ? t.dot_black : t.dot_yellow;
} else e.node.active = !1;
}));
var e = [], i = [], n = [], o = [], c = -1, s = [], a = [], h = 0, r = 0, l = cc.RedT.setting.taixiu.logs.slice(0, 19);
l.reverse();
new Promise(function(c, s) {
for (var a = 0; a < l.length; a++) {
if (void 0 !== l[a]) {
t.RedT.TX_ThongKe.lineAc(a, !0);
var h = l[a].dice[0], r = l[a].dice[1], u = l[a].dice[2], d = h + r + u;
e[a] = {
x: 28 * a,
y: 28 * h - 28,
dice: h
};
i[a] = {
x: 28 * a,
y: 28 * r - 28,
dice: r
};
n[a] = {
x: 28 * a,
y: 28 * u - 28,
dice: u
};
o[a] = {
x: 27.7 * a,
y: 9.233 * d - 27.7,
tong: d
};
} else t.RedT.TX_ThongKe.lineAc(a, !1);
}
t.RedT.TX_ThongKe.draw(t.RedT.TX_ThongKe.dice1_line, t.RedT.TX_ThongKe.dice1_dots, e);
t.RedT.TX_ThongKe.draw(t.RedT.TX_ThongKe.dice2_line, t.RedT.TX_ThongKe.dice2_dots, i);
t.RedT.TX_ThongKe.draw(t.RedT.TX_ThongKe.dice3_line, t.RedT.TX_ThongKe.dice3_dots, n);
t.RedT.TX_ThongKe.draw_Tong(t.RedT.TX_ThongKe.tong_line, o);
});
var u = Promise.all(this.RedT.TX_ThongKe.KetQuaDot.map(function(e, i) {
var n = cc.RedT.setting.taixiu.logs[i];
if (void 0 !== n) {
e.node.active = !0;
var o = n.dice[0] + n.dice[1] + n.dice[2];
e.spriteFrame = t.taixiu ? o < 11 ? t.dot_white : t.dot_black : o % 2 ? t.dot_black : t.dot_yellow;
return t.taixiu ? o > 10 ? 1 : 0 : o % 2 ? 0 : 1;
}
e.node.active = !1;
return -1;
})), d = new Promise(function(e, i) {
var n = cc.RedT.setting.taixiu.logs.slice();
n.reverse();
var o = !0, h = !1, r = void 0;
try {
for (var l, u = n[Symbol.iterator](); !(o = (l = u.next()).done); o = !0) {
var d = l.value, p = d.dice[0] + d.dice[1] + d.dice[2], g = t.taixiu ? p > 10 ? 1 : 0 : p % 2 ? 0 : 1;
-1 === c && (c = g);
if (g != c || a.length > 4) {
c = g;
s.push(a);
a = [];
}
g == c && a.push(p);
}
} catch (t) {
h = !0;
r = t;
} finally {
try {
!o && u.return && u.return();
} finally {
if (h) throw r;
}
}
s.push(a);
e(s);
});
Promise.all([ u, d ]).then(function(e) {
var i = e[1];
i.reverse();
(i = i.slice(0, 20)).reverse();
t.RedT.TX_ThongKe.KetQuaLeft.string = e[0].filter(function(t) {
return 1 == t;
}).length;
t.RedT.TX_ThongKe.KetQuaRight.string = e[0].filter(function(t) {
return 0 == t;
}).length;
Promise.all(t.RedT.TX_ThongKe.DiemSoCel.map(function(e, n) {
var o = i[n];
if (void 0 !== o) {
e.active = !0;
return Promise.all(e.RedT.map(function(e, i) {
var n = o[i];
if (void 0 !== n) {
var c = t.taixiu ? n > 10 : !(n % 2);
h = c ? h + 1 : h;
r = c ? r : r + 1;
e.active = !0;
e.color = t.taixiu ? c ? cc.Color.BLACK : cc.Color.WHITE : c ? cc.Color.YELLOW : cc.Color.BLACK;
e.text.string = n;
e.text.node.color = t.taixiu ? c ? cc.Color.WHITE : cc.Color.BLACK : c ? cc.Color.BLACK : cc.Color.WHITE;
} else e.active = !1;
}));
}
e.active = !1;
})).then(function(e) {
t.RedT.TX_ThongKe.DiemSoLeft.string = h;
t.RedT.TX_ThongKe.DiemSoRight.string = r;
});
});
}
},
reset: function() {
this.setPhien();
this.isNan && this.dataLogs();
cc.RedT.setting.taixiu.data.chanle.red_chan = cc.RedT.setting.taixiu.data.chanle.red_le = cc.RedT.setting.taixiu.data.chanle.red_me_chan = cc.RedT.setting.taixiu.data.chanle.red_me_le = cc.RedT.setting.taixiu.data.chanle.red_player_chan = cc.RedT.setting.taixiu.data.chanle.red_player_le = cc.RedT.setting.taixiu.data.chanle.xu_chan = cc.RedT.setting.taixiu.data.chanle.xu_le = cc.RedT.setting.taixiu.data.chanle.xu_me_chan = cc.RedT.setting.taixiu.data.chanle.xu_me_le = cc.RedT.setting.taixiu.data.chanle.xu_player_chan = cc.RedT.setting.taixiu.data.chanle.xu_player_le = cc.RedT.setting.taixiu.data.taixiu.red_me_tai = cc.RedT.setting.taixiu.data.taixiu.red_me_xiu = cc.RedT.setting.taixiu.data.taixiu.red_player_tai = cc.RedT.setting.taixiu.data.taixiu.red_player_xiu = cc.RedT.setting.taixiu.data.taixiu.red_tai = cc.RedT.setting.taixiu.data.taixiu.red_xiu = cc.RedT.setting.taixiu.data.taixiu.xu_me_tai = cc.RedT.setting.taixiu.data.taixiu.xu_me_xiu = cc.RedT.setting.taixiu.data.taixiu.xu_player_tai = cc.RedT.setting.taixiu.data.taixiu.xu_player_xiu = cc.RedT.setting.taixiu.data.taixiu.xu_tai = cc.RedT.setting.taixiu.data.taixiu.xu_xiu = this.totalLeft.string = this.totalRight.string = this.myLeft.string = this.myRight.string = this.playerLeft.string = this.playerRight.string = 0;
},
setDefautl: function() {
cc.RedT.setting.taixiu.getLogs = cc.RedT.MiniPanel.nodeTimePopup.active = !1;
void 0 !== this.timeInterval && clearInterval(this.timeInterval);
this.TX_Chat.reset();
clearTimeout(this.regTimeOut);
clearTimeout(this.regTimeOut2);
},
status: function(t) {
this.regTimeOut = setTimeout(function() {
if (this.abc) {
var e = new cc.Node();
e.addComponent(cc.Label);
(e = e.getComponent(cc.Label)).string = (t.win ? "+" : "-") + s.numberWithCommas(t.bet);
e.font = t.win ? this.fontCong : this.fontTru;
e.lineHeight = 130;
e.fontSize = 22;
e.node.position = cc.v2(t.select ? -252 : 252, -50);
this.notice.addChild(e.node);
e.node.runAction(cc.sequence(cc.moveTo(3, cc.v2(t.select ? -252 : 252, 130)), cc.callFunc(function() {
this.node.destroy();
}, e)));
if (void 0 !== t.thuong && t.thuong > 0) {
var i = new cc.Node();
i.addComponent(cc.Label);
(i = i.getComponent(cc.Label)).string = (t.win ? "+" : "-") + s.numberWithCommas(t.thuong);
i.font = cc.RedT.util.fontEffect;
i.lineHeight = 90;
i.fontSize = 14;
this.notice.addChild(i.node);
i.node.runAction(cc.sequence(cc.moveTo(3, cc.v2(0, 100)), cc.callFunc(function() {
this.node.destroy();
}, i)));
}
}
cc.RedT.send({
taixiu: {
get_new: !0
}
});
}.bind(this), 7e3);
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper",
TaiXiuBoard: "TaiXiuBoard",
TaiXiuChat: "TaiXiuChat",
TaiXiu_efScale: "TaiXiu_efScale"
} ],
TaiXiuThongKe: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "44a1auDXjdMUYNeCt2i6vXW", "TaiXiuThongKe");
cc.Class({
extends: cc.Component,
properties: {
background: {
default: null,
type: cc.Node
},
header: {
default: null,
type: cc.Node
},
body: {
default: null,
type: cc.Node
},
nodeTaiXiu: {
default: null,
type: cc.Node
},
nodeChanLe: {
default: null,
type: cc.Node
},
KetQuaLeft: {
default: null,
type: cc.Label
},
KetQuaRight: {
default: null,
type: cc.Label
},
KetQuaDot: {
default: null,
type: cc.Node
},
DiemSoCel: {
default: null,
type: cc.Node
},
DiemSoLeft: {
default: null,
type: cc.Label
},
DiemSoRight: {
default: null,
type: cc.Label
},
node1: {
default: null,
type: cc.Node
},
node2: {
default: null,
type: cc.Node
},
dice1_line: {
default: null,
type: cc.Graphics
},
dice2_line: {
default: null,
type: cc.Graphics
},
dice3_line: {
default: null,
type: cc.Graphics
},
tong_line: {
default: null,
type: cc.Graphics
},
dice1_dot: {
default: null,
type: cc.Node
},
dice2_dot: {
default: null,
type: cc.Node
},
dice3_dot: {
default: null,
type: cc.Node
},
tong_dot: {
default: null,
type: cc.Node
},
line_dotT: {
default: null,
type: cc.Node
},
line_dot1: {
default: null,
type: cc.Node
},
line_dot2: {
default: null,
type: cc.Node
},
line_dot3: {
default: null,
type: cc.Node
}
},
init: function(t) {
var e = this;
this.RedT = t;
void 0 !== cc.RedT.setting.taixiu.tk_position && (this.node.position = cc.RedT.setting.taixiu.tk_position);
void 0 !== cc.RedT.setting.taixiu.tk_active && (this.node.active = cc.RedT.setting.taixiu.tk_active);
Promise.all(this.KetQuaDot.children.map(function(t) {
return t.getComponent(cc.Sprite);
})).then(function(t) {
e.KetQuaDot = t;
});
Promise.all(this.DiemSoCel.children.map(function(t) {
t.RedT = Promise.all(t.children.map(function(t) {
t.text = t.children[0].getComponent(cc.Label);
return t;
}));
t.RedT.then(function(e) {
t.RedT = e;
});
return t;
})).then(function(t) {
e.DiemSoCel = t;
});
Promise.all(this.dice1_dot.children.map(function(t) {
t.text = t.children[0].getComponent(cc.Label);
return t;
})).then(function(t) {
e.dice1_dots = t;
});
Promise.all(this.dice2_dot.children.map(function(t) {
t.text = t.children[0].getComponent(cc.Label);
return t;
})).then(function(t) {
e.dice2_dots = t;
});
Promise.all(this.dice3_dot.children.map(function(t) {
t.text = t.children[0].getComponent(cc.Label);
return t;
})).then(function(t) {
e.dice3_dots = t;
});
Promise.all(this.tong_dot.children.map(function(t) {
t.text = t.children[0].getComponent(cc.Label);
return t;
})).then(function(t) {
e.tong_dots = t;
});
},
onLoad: function() {
var t = this;
this.ttOffset = null;
Promise.all(this.header.children.map(function(t) {
return t.getComponent("itemContentMenu");
})).then(function(e) {
t.header = e;
});
},
onEnable: function() {
this.background.on(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.background.on(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.background.on(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.background.on(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.background.on(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
},
onDisable: function() {
this.background.off(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.background.off(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.background.off(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.background.off(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.background.off(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
},
onChangerGame: function() {
this.nodeTaiXiu.active = !this.nodeTaiXiu.active;
this.nodeChanLe.active = !this.nodeChanLe.active;
},
eventStart: function(t) {
this.setTop();
this.ttOffset = cc.v2(t.touch.getLocationX() - this.node.position.x, t.touch.getLocationY() - this.node.position.y);
},
eventMove: function(t) {
this.node.position = cc.v2(t.touch.getLocationX() - this.ttOffset.x, t.touch.getLocationY() - this.ttOffset.y);
},
eventEnd: function() {
cc.RedT.setting.taixiu.tk_position = this.node.position;
},
setTop: function() {
this.node.parent.insertChild(this.node);
this.RedT.setTop();
},
onSelectHeader: function(t, e) {
Promise.all(this.header.map(function(t) {
t.node.name == e ? t.select() : t.unselect();
}));
Promise.all(this.body.children.map(function(t) {
t.name == e ? t.active = !0 : t.active = !1;
}));
},
onToggleClick: function() {
cc.RedT.audio.playClick();
this.setTop();
this.node.active = cc.RedT.setting.taixiu.tk_active = !this.node.active;
},
onChangerClick: function() {
this.node1.active = !this.node1.active;
this.node2.active = !this.node2.active;
},
draw: function(t, e, i) {
t.clear();
for (var n = i.length, o = 0; o < n; o++) {
var c = e[o], s = i[o];
c.text.string = s.dice;
c.position = cc.v2(c.position.x, s.y);
0 === o ? t.moveTo(s.x, s.y) : t.lineTo(s.x, s.y);
}
t.stroke();
},
draw_Tong: function(t, e) {
t.clear();
for (var i = 0, n = e.length; i < n; i++) {
var o = e[i], c = this.tong_dots[i];
0 === i ? t.moveTo(o.x, o.y) : t.lineTo(o.x, o.y);
c.text.string = o.tong;
c.text.node.color = this.RedT.TX_Main.taixiu ? o.tong > 10 ? cc.Color.WHITE : cc.Color.BLACK : o.tong % 2 ? cc.Color.WHITE : cc.Color.BLACK;
c.position = cc.v2(c.position.x, o.y);
c.color = this.RedT.TX_Main.taixiu ? o.tong > 10 ? cc.Color.BLACK : cc.Color.WHITE : o.tong % 2 ? cc.Color.BLACK : cc.Color.YELLOW;
}
t.stroke();
},
lineAc: function(t, e) {
this.dice1_dots[t].active = e;
this.dice2_dots[t].active = e;
this.dice3_dots[t].active = e;
this.tong_dots[t].active = e;
},
showLineTong: function() {
cc.RedT.audio.playClick();
this.tong_dot.active = !this.tong_dot.active;
this.tong_line.node.active = !this.tong_line.node.active;
this.line_dotT.active = !this.line_dotT.active;
},
showLineDice1: function() {
cc.RedT.audio.playClick();
this.dice1_dot.active = !this.dice1_dot.active;
this.dice1_line.node.active = !this.dice1_line.node.active;
this.line_dot1.active = !this.line_dot1.active;
},
showLineDice2: function() {
cc.RedT.audio.playClick();
this.dice2_dot.active = !this.dice2_dot.active;
this.dice2_line.node.active = !this.dice2_line.node.active;
this.line_dot2.active = !this.line_dot2.active;
},
showLineDice3: function() {
cc.RedT.audio.playClick();
this.dice3_dot.active = !this.dice3_dot.active;
this.dice3_line.node.active = !this.dice3_line.node.active;
this.line_dot3.active = !this.line_dot3.active;
}
});
cc._RF.pop();
}, {} ],
TaiXiuTop: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "5c979o56KBFA7IxEoBHBpgJ", "TaiXiuTop");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
background: {
default: null,
type: cc.Node
},
scrollview: {
default: null,
type: cc.ScrollView
},
listduatop: cc.ScrollView,
item: {
default: null,
type: cc.Prefab
},
topimage: [ cc.SpriteFrame ],
itemTemplate: cc.Node,
sfTops: [ cc.SpriteFrame ],
sfRanks: [ cc.SpriteFrame ],
header: cc.Node,
body: cc.Node,
game: {
default: null,
type: cc.Label
},
cRed: {
default: null,
type: cc.Node
},
cXu: {
default: null,
type: cc.Node
}
},
init: function(t) {
var e = this;
this.RedT = t;
void 0 !== cc.RedT.setting.taixiu.top_position && (this.node.position = cc.RedT.setting.taixiu.top_position);
void 0 !== cc.RedT.setting.taixiu.top_active && (this.node.active = cc.RedT.setting.taixiu.top_active);
Promise.all(this.header.children.map(function(t) {
return t.getComponent("itemHeadMenu");
})).then(function(t) {
e.header = t;
});
},
onLoad: function() {
this.ttOffset = null;
this.taixiu = this.red = !0;
},
onEnable: function() {
this.background.on(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.background.on(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.background.on(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.background.on(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.background.on(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
this.get_data();
},
onDisable: function() {
this.background.off(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.background.off(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.background.off(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.background.off(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.background.off(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
for (var t = 1; t < this.itemTemplate.parent.childrenCount; t++) this.itemTemplate.parent.children[t].active = !1;
},
eventStart: function(t) {
this.setTop();
this.ttOffset = cc.v2(t.touch.getLocationX() - this.node.position.x, t.touch.getLocationY() - this.node.position.y);
},
eventMove: function(t) {
this.node.position = cc.v2(t.touch.getLocationX() - this.ttOffset.x, t.touch.getLocationY() - this.ttOffset.y);
},
eventEnd: function() {
cc.RedT.setting.taixiu.top_position = this.node.position;
},
setTop: function() {
this.node.parent.insertChild(this.node);
this.RedT.setTop();
},
getItem: function() {
for (var t = null, e = 1; e < this.itemTemplate.parent.childrenCount; e++) {
var i = this.itemTemplate.parent.children[e];
if (i != this.itemTemplate && !i.active) {
t = i;
break;
}
}
null == t && ((t = cc.instantiate(this.itemTemplate)).parent = this.itemTemplate.parent);
t.active = !0;
return t;
},
toggle: function() {
this.setTop();
cc.RedT.audio.playClick();
this.node.active = cc.RedT.setting.taixiu.top_active = !this.node.active;
},
onChangerGame: function() {
this.taixiu = !this.taixiu;
this.game.string = this.taixiu ? "Chẵn Lẻ" : "Tài Xỉu";
this.get_data();
},
onChangerRed: function() {
this.red = !this.red;
this.cRed.active = !this.cRed.active;
this.cXu.active = !this.cXu.active;
this.get_data();
},
get_data: function() {
cc.RedT.send({
taixiu: {
get_top: {
red: this.red,
taixiu: this.taixiu
}
}
});
cc.RedT.send({
taixiu: {
get_duatop: !0
}
});
},
onSelectHeader: function(t, e) {
Promise.all(this.header.map(function(t) {
t.node.name == e ? t.select() : t.unselect();
}));
Promise.all(this.body.children.map(function(t) {
t.name == e ? t.active = !0 : t.active = !1;
}));
},
onDataDuaTop: function(t) {
if (t.top.length) for (var e = 0; e < t.top.length; e++) {
var i = this.getItem();
i.getChildByName("4").active = !1;
i.getChildByName("0").getComponent(cc.Label).string = e + 1;
i.getChildByName("1").getComponent(cc.Label).string = t.top[e].Name;
i.getChildByName("2").getComponent(cc.Label).string = n.numberWithCommas(t.top[e].RedPlay) + " VIN";
i.getChildByName("3").getComponent(cc.Label).string = n.numberWithCommas(.008 * t.top[e].RedPlay) + " VIN (0.8%)";
if (e > 2) {
i.getChildByName("bar").getComponent(cc.Sprite).spriteFrame = this.sfTops[0];
i.getChildByName("top").getComponent(cc.Sprite).spriteFrame = this.sfRanks[0];
} else {
i.getChildByName("bar").getComponent(cc.Sprite).spriteFrame = this.sfTops[e + 1];
i.getChildByName("top").getComponent(cc.Sprite).spriteFrame = this.sfRanks[e + 1];
i.getChildByName("4").active = !0;
i.getChildByName("4").getComponent(cc.Label).string = n.numberWithCommas(t.reward[e].Reward) + " VIN";
}
}
},
onData: function(t) {
this.scrollview.content.destroyAllChildren();
var e = this;
Promise.all(t.map(function(t, i) {
var o = cc.instantiate(e.item), c = o.getComponent("TaiXiuLichSu_item");
if (i < 3) {
c.image.spriteFrame = e.topimage[i];
c.time.string = "";
} else {
c.image.spriteFrame = null;
c.time.string = i + 1;
}
c.phien.string = t.name;
c.dat.string = n.numberWithCommas(t.bet);
c.node.children[0].active = i % 2;
e.scrollview.content.addChild(o);
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
TaiXiu_DiaNan: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "48692rupkxLUqFjhMjk6S43", "TaiXiu_DiaNan");
cc.Class({
extends: cc.Component,
init: function(t) {
this.RedT = t;
},
onLoad: function() {
this.ttOffset = null;
},
onEnable: function() {
this.node.on(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.node.on(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.node.on(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.node.on(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.node.on(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
},
onDisable: function() {
this.node.off(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.node.off(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.node.off(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.node.off(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.node.off(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
},
eventStart: function(t) {
this.setTop();
this.ttOffset = cc.v2(t.touch.getLocationX() - this.node.position.x, t.touch.getLocationY() - this.node.position.y);
},
eventMove: function(t) {
this.node.position = cc.v2(t.touch.getLocationX() - this.ttOffset.x, t.touch.getLocationY() - this.ttOffset.y);
},
eventEnd: function() {},
setTop: function() {
this.RedT.setTop();
}
});
cc._RF.pop();
}, {} ],
TaiXiu_efScale: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "1dcc4TRp5REZa8M+IY8ljzM", "TaiXiu_efScale");
cc.Class({
extends: cc.Component,
play: function() {
this.node.runAction(cc.repeatForever(cc.sequence(cc.scaleTo(.15, .85), cc.scaleTo(.15, 1.15))));
},
stop: function() {
this.node.stopAllActions();
this.node.scale = 1;
}
});
cc._RF.pop();
}, {} ],
TaiXiu: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "72234cg0ORLl7lPDSiermrl", "TaiXiu");
var n = t("TaiXiuMain"), o = t("TaiXiuThongKe"), c = t("TaiXiuDuaTop"), s = t("TaiXiuTop");
cc.Class({
extends: cc.Component,
properties: {
TX_Main: n,
TX_ThongKe: o,
TX_Top: s,
TX_DuaTop: c,
board: !0
},
init: function(t) {
this.RedT = t;
this.node.runScale = !1;
cc.RedT.setting.taixiu = cc.RedT.setting.taixiu || {
getLogs: !1
};
console.log("obj", t);
this.TX_LichSu = t.Dialog.TaiXiuLichSu;
this.TX_LichSuPhien = t.Dialog.TaiXiuLichSuPhien;
this.TX_LichSuPhien.init(t.TaiXiu);
this.TX_Main.init(this);
this.TX_ThongKe.init(this);
this.TX_Top.init(this);
this.TX_DuaTop.init(this);
"true" == localStorage.getItem("taixiu") && (this.node.active = !0);
},
onEnable: function() {
this.regEvent(!0);
},
onDisable: function() {
this.regEvent(!1);
},
regEvent: function(t) {
cc.RedT.send({
taixiu: cc.RedT.setting.taixiu.getLogs ? {
view: t
} : {
view: t,
getLogs: !0
}
});
},
setTop: function() {
cc.RedT.setting.taixiu.scale = .8333333;
this.node.parent.insertChild(this.node);
},
openGame: function(t) {
var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "1";
cc.RedT.audio.playClick();
if (cc.RedT.IS_LOGIN) {
this.TX_Main.initGame("1" == e);
this.node.active = !0;
localStorage.setItem("taixiu", !0);
this.setTop();
} else cc.RedT.inGame.dialog.showSignIn();
},
closeGame: function() {
cc.RedT.audio.playUnClick();
this.node.active = this.TX_Top.node.active = this.TX_ThongKe.node.active = this.TX_Main.TX_Board.node.active = !1;
localStorage.setItem("taixiu", !1);
},
newGame: function() {
this.TX_ThongKe.node.active = this.TX_Main.TX_Board.node.active = !1;
this.TX_Main.setDefautl();
},
signIn: function() {
!this.node.active && (this.TX_Main.nodeTimePopup.active = !0);
}
});
cc._RF.pop();
}, {
TaiXiuDuaTop: "TaiXiuDuaTop",
TaiXiuMain: "TaiXiuMain",
TaiXiuThongKe: "TaiXiuThongKe",
TaiXiuTop: "TaiXiuTop"
} ],
TamHung_bonus_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "41d44OoMtBBS5sseW0BdC7f", "TamHung_bonus_item");
cc.Class({
extends: cc.Component,
properties: {
open: cc.Node,
close: cc.Node,
text: cc.Label
}
});
cc._RF.pop();
}, {} ],
TamHung_dialog: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "3242ahGu+xMooMKVtORzcRm", "TamHung_dialog");
var n = t("TamHung_history"), o = t("TamHung_top");
cc.Class({
extends: cc.Component,
properties: {
history: n,
top: o
},
init: function() {
this.actionShow = cc.spawn(cc.scaleTo(.5, 1).easing(cc.easeBackOut(2.5)), cc.fadeTo(.5, 255));
this.objShow = null;
this.objTmp = null;
},
onClickBack: function() {
cc.RedT.audio.playUnClick();
this.onBack();
},
onBack: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = !1;
this.node.active = !1;
this.objShow = null;
} else {
this.objTmp = this.objShow;
this.objShow = this.objShow.previous;
this.objTmp.previous = null;
this.objTmp.active = !1;
this.objShow.active = !0;
this.objTmp = null;
} else this.node.active = !1;
},
onClosePrevious: function(t) {
if (void 0 !== t.previous && null !== t.previous) {
this.onClosePrevious(t.previous);
delete t.previous;
}
t.active = !1;
},
onCloseDialog: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = this.node.active = !1;
this.objShow = null;
} else {
this.onClosePrevious(this.objShow.previous);
this.objShow.active = this.node.active = !1;
delete this.objShow.previous;
this.objShow = null;
} else this.node.active = !1;
},
resetSizeDialog: function(t) {
t.stopAllActions();
t.scale = .5;
t.opacity = 0;
},
showHistory: function() {
this.history.node.previous = this.objShow;
this.node.active = this.history.node.active = !0;
this.objShow = this.history.node;
},
showTop: function() {
this.node.active = this.top.node.active = !0;
this.objShow = this.top.node;
}
});
cc._RF.pop();
}, {
TamHung_history: "TamHung_history",
TamHung_top: "TamHung_top"
} ],
TamHung_history: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "54c92+ps1BERo+D70OiEi9L", "TamHung_history");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
onLoad: function() {
var t = this, e = cc.instantiate(this.page);
e.y = -315;
this.node.addChild(e);
this.page = e.getComponent("Pagination");
Promise.all(this.content.children.map(function(t) {
return t.getComponent("VQRed_history_item");
})).then(function(e) {
t.content = e;
});
this.page.init(this);
},
onEnable: function() {
this.get_data();
},
onDisable: function() {},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
g: {
tamhung: {
log: {
red: this.red,
page: t
}
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
this.page.onSet(t.page, t.kmess, t.total);
Promise.all(this.content.map(function(e, i) {
var o = t.data[i];
if (void 0 !== o) {
e.node.active = !0;
e.time.string = n.getStringDateByTime(o.time);
e.phien.string = o.id;
e.cuoc.string = n.numberWithCommas(o.bet);
e.line.string = o.kq + " Dòng";
e.win.string = n.numberWithCommas(o.win);
} else e.node.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
TamHung_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "993b8dz2upHU5/8IOAHCPS2", "TamHung_item");
cc.Class({
extends: cc.Component,
properties: {
icons: {
default: [],
type: cc.Prefab
}
},
init: function(t) {
this.RedT = t;
},
random: function() {
var t = 7 * Math.random() >> 0;
this.setIcon(t);
return t;
},
setIcon: function(t) {
var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
this.node.removeAllChildren();
var i = cc.instantiate(this.icons[t]);
this.node.addChild(i);
e && (this.data = t);
}
});
cc._RF.pop();
}, {} ],
TamHung_lines: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "6ee12zYBipMUILNCNzZtku/", "TamHung_lines");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
nodeEfLine: cc.Node,
nodeLine: cc.Node,
mainLine: cc.Node
},
init: function(t) {
var e = this;
this.lines = {
1: [ 1, 1, 1, 1, 1 ],
2: [ 0, 0, 0, 0, 0 ],
3: [ 2, 2, 2, 2, 2 ],
4: [ 1, 1, 0, 1, 1 ],
5: [ 1, 1, 2, 1, 1 ],
6: [ 0, 0, 1, 0, 0 ],
7: [ 2, 2, 1, 2, 2 ],
8: [ 0, 2, 0, 2, 0 ],
9: [ 2, 0, 2, 0, 2 ],
10: [ 1, 0, 2, 0, 1 ],
11: [ 2, 1, 0, 1, 2 ],
12: [ 0, 1, 2, 1, 0 ],
13: [ 1, 2, 1, 0, 1 ],
14: [ 1, 0, 1, 2, 1 ],
15: [ 2, 1, 1, 1, 2 ],
16: [ 0, 1, 1, 1, 0 ],
17: [ 1, 2, 2, 2, 1 ],
18: [ 1, 0, 0, 0, 1 ],
19: [ 2, 2, 1, 0, 0 ],
20: [ 0, 0, 1, 2, 2 ]
};
this.RedT = t;
var i = this;
Promise.all(this.mainLine.children.map(function(t) {
return t.getComponent("TamHung_main_line").init(i.RedT);
})).then(function(t) {
e.mainLine = t;
});
this.selectAll(null, "1");
},
onOpen: function() {
cc.RedT.audio.playClick();
this.node.active = !0;
},
onClose: function() {
cc.RedT.audio.playUnClick();
this.node.active && this.data.length < 1 ? this.RedT.addNotice("Chọn ít nhất 1 dòng") : this.node.active = !1;
},
select: function(t) {
var e = t.target;
if (e.children[0].active) {
e.children[0].active = !1;
e.children[1].active = !0;
} else {
e.children[0].active = !0;
e.children[1].active = !1;
}
this.check();
},
check: function() {
var t = this;
Promise.all(this.nodeLine.children.map(function(t, e) {
return t.children[0].active ? e + 1 : void 0;
})).then(function(e) {
Promise.all(e.filter(function(t) {
return void 0 !== t;
})).then(function(e) {
t.data = e;
t.RedT.labelLine.string = e.length;
t.RedT.tong.string = n.numberWithCommas(e.length * n.getOnlyNumberInString(t.RedT.bet.string));
});
});
},
selectChan: function() {
var t = this;
Promise.all(this.nodeLine.children.map(function(t, e) {
var i = e + 1;
if (!(i % 2)) {
t.children[0].active = !1;
t.children[1].active = !0;
return i;
}
t.children[0].active = !0;
t.children[1].active = !1;
})).then(function(e) {
Promise.all(e.filter(function(t) {
return void 0 !== t;
})).then(function(e) {
t.data = e;
t.RedT.labelLine.string = e.length;
t.RedT.tong.string = n.numberWithCommas(e.length * n.getOnlyNumberInString(t.RedT.bet.string));
});
});
},
selectLe: function() {
var t = this;
Promise.all(this.nodeLine.children.map(function(t, e) {
var i = e + 1;
if (i % 2) {
t.children[0].active = !1;
t.children[1].active = !0;
return i;
}
t.children[0].active = !0;
t.children[1].active = !1;
})).then(function(e) {
Promise.all(e.filter(function(t) {
return void 0 !== t;
})).then(function(e) {
t.data = e;
t.RedT.labelLine.string = e.length;
t.RedT.tong.string = n.numberWithCommas(e.length * n.getOnlyNumberInString(t.RedT.bet.string));
});
});
},
selectAll: function(t, e) {
var i = this;
Promise.all(this.nodeLine.children.map(function(t, i) {
var n = "1" == e;
t.children[0].active = n;
t.children[1].active = !n;
return n ? i + 1 : void 0;
})).then(function(t) {
Promise.all(t.filter(function(t, e) {
return void 0 !== t;
})).then(function(t) {
i.data = t;
i.RedT.labelLine.string = t.length;
i.RedT.tong.string = n.numberWithCommas(t.length * n.getOnlyNumberInString(i.RedT.bet.string));
});
});
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
TamHung_main_line: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "e41fbzeEnxFFZpTHsY5k5xb", "TamHung_main_line");
cc.Class({
extends: cc.Component,
init: function(t) {
this.RedT = t;
return this;
},
onEnable: function() {
this.node.on(cc.Node.EventType.MOUSE_ENTER, this.onhover, this);
this.node.on(cc.Node.EventType.MOUSE_LEAVE, this.offhover, this);
},
onDisable: function() {
this.node.off(cc.Node.EventType.MOUSE_ENTER, this.onhover, this);
this.node.off(cc.Node.EventType.MOUSE_LEAVE, this.offhover, this);
},
onhover: function() {
this.node.children[0].active = !0;
},
offhover: function() {
this.node.children[0].active = !1;
},
onEf: function() {
this.onhover();
this.node.pauseSystemEvents();
},
offEf: function() {
this.offhover();
this.node.resumeSystemEvents();
}
});
cc._RF.pop();
}, {} ],
TamHung_playBonus: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "ca093vAwc9M0LAnWEKrgD4c", "TamHung_playBonus");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
numberBonus: cc.Label,
listBox: cc.Node,
notice: cc.Node,
numberWin: cc.Label
},
init: function(t) {
this.RedT = t;
},
onPlay: function() {
this.reset();
this.node.active = !0;
this.numberBonus.string = 10;
},
onClickBox: function(t, e) {
if (this.numberBonus.string) {
cc.RedT.audio.playClick();
this.onSend(e);
}
},
closeNotice: function() {
this.notice.active = this.node.active = !1;
this.RedT.hieuUng();
},
onData: function(t) {
if (void 0 !== t.box) {
var e = this.listBox.children[t.box];
e.children[0].active = !1;
e.children[1].active = e.children[2].active = !0;
e.children[2].getComponent(cc.Label).string = n.numberWithCommas(t.bet);
this.numberBonus.string = t.bonus;
}
if (void 0 !== t.win) {
this.notice.active = !0;
this.numberWin.string = n.numberWithCommas(t.win);
this.RedT.vuathang.string = n.numberWithCommas(1 * n.getOnlyNumberInString(this.RedT.vuathang.string) + t.win);
}
},
onSend: function(t) {
cc.RedT.send({
g: {
tamhung: {
bonus: {
box: t
}
}
}
});
},
reset: function() {
Promise.all(this.listBox.children.map(function(t) {
t.children[0].active = !0;
t.children[1].active = t.children[2].active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
TamHung_reel: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "e545fq3Rq1E3pVmCCgjeR9n", "TamHung_reel");
cc.Class({
extends: cc.Component,
init: function(t) {
var e = this;
this.RedT = t;
this.icons = [];
var i = this;
Promise.all([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ].map(function(t, e) {
var n = cc.instantiate(i.RedT.iconPrefab);
i.node.addChild(n);
(n = n.getComponent("TamHung_item")).init(i.RedT);
return n;
})).then(function(t) {
e.icons = t;
e.icons[e.icons.length - 1].setIcon(e.icons[4].random());
e.icons[e.icons.length - 2].setIcon(e.icons[3].random());
e.icons[e.icons.length - 3].setIcon(e.icons[2].random());
e.icons[e.icons.length - 4].setIcon(e.icons[1].random());
e.icons[e.icons.length - 5].setIcon(e.icons[0].random());
});
},
spin: function(t, e) {
this.node.stopAllActions();
var i = cc.moveTo(e, cc.v2(this.node.x, -(this.node.height - 382))).easing(cc.easeInOut(3)), n = cc.callFunc(function() {
0 === t && this.RedT.copy();
this.node.y = 0;
}, this);
if (4 === t) {
var o = cc.callFunc(function() {
this.RedT.EF_vuathang();
this.node.y = 0;
this.RedT.random();
this.RedT.hieuUng();
}, this);
this.node.runAction(cc.sequence(cc.delayTime(.1 * t), i, o));
} else this.node.runAction(cc.sequence(cc.delayTime(.1 * t), i, n));
},
stop: function() {
this.node.stopAllActions();
this.RedT.copy();
this.node.y = 0;
}
});
cc._RF.pop();
}, {} ],
TamHung_top: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "73648OCxmJKR6YBgnOzKRZa", "TamHung_top");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
item: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
onEnable: function() {
this.get_data();
},
get_data: function() {
arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
cc.RedT.send({
g: {
tamhung: {
top: this.red
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
this.content.removeAllChildren();
var e = this;
Promise.all(t.map(function(t, i) {
var o = cc.instantiate(e.item), c = o.getComponent("VQRed_history_item");
c.time.string = n.getStringDateByTime(t.time);
c.phien.string = t.name;
c.cuoc.string = n.numberWithCommas(t.bet);
c.line.string = n.numberWithCommas(t.win);
c.win.string = 2 == t.type ? "Nổ Hũ" : "Thắng lớn";
o.children[0].active = !(1 & i);
e.content.addChild(o);
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
TamHung: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "183b7PV7kZCjKs6uIxokVn0", "TamHung");
var n = t("Helper"), o = t("TamHung_reel"), c = t("TamHung_lines"), s = t("TamHung_playBonus"), a = t("Notice"), h = t("TamHung_dialog");
cc.Class({
extends: cc.Component,
properties: {
gameBonus: s,
audioBG: cc.AudioSource,
audioClick: cc.AudioSource,
redhat: {
default: null,
type: cc.Node
},
reels: {
default: [],
type: o
},
icons: {
default: [],
type: cc.SpriteFrame
},
iconAudios: {
default: [],
type: cc.SpriteFrame
},
betString: {
default: [],
type: cc.String
},
iconPrefab: {
default: null,
type: cc.Prefab
},
BigWin: cc.Animation,
BigWin_Label: cc.Label,
NoHu: cc.Animation,
NoHu_Label: cc.Label,
EF_Bonus: cc.Animation,
EF_Free: cc.Animation,
buttonCoint: cc.Node,
buttonLine: cc.Node,
buttonSpin: cc.Node,
buttonSpinSpeed: cc.Node,
buttonFree: cc.Node,
freeLabel: cc.Label,
buttonAuto: cc.Node,
buttonStop: cc.Node,
buttonAudio: cc.Sprite,
nodeRed: {
default: null,
type: cc.Node
},
nodeXu: {
default: null,
type: cc.Node
},
bet: {
default: null,
type: cc.Label
},
nodeNotice: {
default: null,
type: cc.Node
},
prefabNotice: {
default: null,
type: cc.Prefab
},
MiniPanel: cc.Prefab,
loading: {
default: null,
type: cc.Node
},
notice: a,
dialog: h,
Line: c,
hu: cc.Label,
taikhoan: cc.Label,
tong: cc.Label,
vuathang: cc.Label,
labelLine: cc.Label,
bangThuong: cc.Node,
efline: cc.Node,
isAuto: !1,
isSpin: !1,
isFreeSpin: !1,
isAudio: !1,
red: !0,
isSpeed: !1,
isForceSpeed: !1,
chonCuoc: cc.Node,
game: cc.Node,
hu100: cc.Label,
hu1000: cc.Label,
hu10000: cc.Label,
fontThang: cc.Font,
betSelect: 0
},
onLoad: function() {
cc.RedT.inGame = this;
this.BigWin.on("finished", this.BigWinFinish, this);
this.BigWin.on("play", this.BigWinPlay, this);
this.NoHu.on("finished", this.NoHuFinish, this);
this.NoHu.on("play", this.NoHuPlay, this);
this.EF_Bonus.on("finished", this.EF_BonusFinish, this);
this.EF_Free.on("finished", this.EF_FreeFinish, this);
var t = this;
this.gameBonus.init(this);
this.Line.init(this);
this.dialog.init();
this.isAudio = !0;
Promise.all(this.reels.map(function(e) {
e.init(t);
}));
cc.RedT.send({
scene: "tamhung"
});
this.taikhoan.string = n.numberWithCommas(cc.RedT.user.red);
this.speed = 400;
this.onGetAllHu();
this.chonCuoc.active = !0;
this.game.active = !1;
this.resetSpin();
if (cc.RedT.isSoundBackground()) {
cc.RedT.setSoundBackground(!0);
this.playMusic();
}
},
OnChangerNhacNen: function() {
if (this.isAudio) {
this.audioBG.volume = 0;
this.audioClick.volume = 0;
this.buttonAudio.spriteFrame = this.iconAudios[1];
this.isAudio = !1;
} else {
this.audioBG.volume = 1;
this.audioClick.volume = 1;
this.buttonAudio.spriteFrame = this.iconAudios[0];
this.isAudio = !0;
}
},
BigWinPlay: function() {
var t = cc.callFunc(function() {
cc.RedT.audio.playEf("megaWin");
n.numberTo(this.BigWin_Label, 0, this.H_win, 2e3, !0);
}, this);
this.BigWin.node.runAction(cc.sequence(cc.delayTime(.3), t));
},
BigWinFinish: function() {
this.isBigWin = !1;
this.BigWin.node.active = !1;
this.BigWin_Label.string = "";
this.showLineWin(!1);
this.hieuUng();
},
NoHuPlay: function() {
var t = cc.callFunc(function() {
cc.RedT.audio.playEf("jackpot");
n.numberTo(this.NoHu_Label, 0, this.H_win, 2e3, !0);
}, this);
this.NoHu.node.runAction(cc.sequence(cc.delayTime(.3), t));
},
NoHuFinish: function() {
this.isNoHu = !1;
this.NoHu.node.active = !1;
this.NoHu_Label.string = "";
this.isAuto && this.onAuto();
this.showLineWin(!1);
this.hieuUng();
},
EF_BonusFinish: function() {
this.isBonus = !1;
this.EF_Bonus.node.active = !1;
this.gameBonus.onPlay();
this.showLineWin(!1);
},
EF_FreeFinish: function() {
this.isFree = !1;
this.EF_Free.node.active = !1;
this.showLineWin(!1);
this.hieuUng();
},
EF_vuathang: function() {
this.showLineWin(!0);
this.vuathang.string = n.numberWithCommas(this.H_win);
this.buttonFree.active = !!this.H_free;
this.buttonSpin.active = !this.H_free;
this.buttonSpinSpeed.active = !this.H_free;
this.freeLabel.string = this.H_free;
},
onChangerBet: function(t, e) {
cc.RedT.IS_SOUND && this.audioClick.play();
this.bet.string = e;
this.tong.string = n.numberWithCommas(this.Line.data.length * n.getOnlyNumberInString(this.bet.string));
this.game.active = !0;
this.chonCuoc.active = !1;
this.resetSpin();
this.onStop();
this.onGetHu();
},
onSelectBet: function() {
this.game.active = !1;
this.chonCuoc.active = !0;
this.onGetAllHu();
this.onGetHu();
},
changerCoint: function() {
this.red = !this.red;
this.nodeRed.active = !this.nodeRed.active;
this.nodeXu.active = !this.nodeXu.active;
this.userData(cc.RedT.user);
this.onGetHu();
},
onClickSpin: function() {
cc.RedT.IS_SOUND && this.audioClick.play();
this.isSpeed = !1;
this.onSpin();
},
onClickSpinSpeed: function() {
cc.RedT.IS_SOUND && this.audioClick.play();
this.isSpeed = !0;
this.isAuto && (this.isForceSpeed = !0);
this.onSpin();
},
onAutoSpin: function() {
cc.RedT.IS_SOUND && this.audioClick.play();
this.onGetSpin();
},
onClickAuto: function() {
cc.RedT.audio.playClick();
this.onAuto();
},
onClickStop: function() {
cc.RedT.audio.playClick();
this.onStop();
},
onSpin: function() {
if (this.Line.data.length < 1) this.addNotice("Chọn ít nhất 1 dòng"); else {
this.setSpin();
if (!this.isSpin) {
this.node.stopAllActions();
void 0 !== this.eflineN && void 0 !== this.H_line_win && this.H_line_win.length && this.efOneLineWin(this.eflineN, !1);
this.eflineO = this.eflineN = 0;
this.isSpin = !0;
this.onGetSpin();
}
}
},
onAuto: function() {
this.isAuto = !this.isAuto;
this.buttonAuto.color = this.isAuto ? cc.Color.WHITE : cc.color(200, 200, 200);
this.buttonStop.active = this.isSpin;
},
onStop: function() {
this.isAuto = this.buttonStop.active = !1;
this.buttonAuto.active = !0;
this.isForceSpeed = !1;
this.buttonAuto.color = cc.color(200, 200, 200);
},
setSpin: function() {
this.buttonLine.pauseSystemEvents();
this.buttonSpin.pauseSystemEvents();
this.buttonSpinSpeed.pauseSystemEvents();
this.buttonCoint.pauseSystemEvents();
},
resetSpin: function() {
this.isAuto && this.onAuto();
this.isForceSpeed = !1;
this.isSpeed = !1;
this.isSpin = this.buttonStop.active = !1;
this.buttonAuto.active = !0;
this.buttonLine.resumeSystemEvents();
this.buttonSpin.resumeSystemEvents();
this.buttonSpinSpeed.resumeSystemEvents();
this.buttonCoint.resumeSystemEvents();
},
runReels: function(t) {
var e = this;
Promise.all(this.reels.map(function(i, n) {
t || e.isForceSpeed ? i.spin(n, .25) : i.spin(n, 1);
}));
e.isSpeed = !1;
},
copy: function() {
Promise.all(this.reels.map(function(t) {
t.icons[t.icons.length - 1].setIcon(t.icons[2].data);
t.icons[t.icons.length - 2].setIcon(t.icons[1].data);
t.icons[t.icons.length - 3].setIcon(t.icons[0].data);
}));
},
random: function() {
Promise.all(this.reels.map(function(t) {
Promise.all(t.icons.map(function(e, i) {
i > 2 && i < t.icons.length - 3 && e.random();
}));
}));
},
onLineWin: function(t) {
var e = this;
Promise.all(this.H_line_win.map(function(i) {
Promise.all(e.Line.lines[i.line].map(function(i, n) {
e.efline.children[n].children[i].active = t;
}));
var n = e.Line.mainLine[i.line - 1];
if (t) {
n.onhover();
n.node.pauseSystemEvents();
} else {
n.offhover();
n.node.resumeSystemEvents();
}
}));
},
showLineWin: function(t) {
this.onLineWin(t);
if (!(t || this.isNoHu || this.isBigWin || this.isAuto || this.isFreeSpin)) {
this.eflineN = 0;
this.efLineWin();
}
},
efLineWin: function(t) {
if (this.H_line_win.length) {
this.node.stopAllActions();
void 0 === this.H_line_win[this.eflineN] && (this.eflineN = 0);
this.efOneLineWin(this.eflineN, !0);
var e = cc.callFunc(function() {
this.efOneLineWin(this.eflineN, !1);
this.eflineN += 1;
this.efLineWin();
}, this);
this.node.runAction(cc.sequence(cc.delayTime(1.5), e));
}
},
efOneLineWin: function(t, e) {
var i = this;
t = this.H_line_win[this.eflineN].line;
Promise.all(this.Line.lines[t].map(function(t, n) {
i.efline.children[n].children[t].active = e;
}));
var n = this.Line.mainLine[t - 1];
if (e) {
n.onhover();
n.node.pauseSystemEvents();
} else {
n.offhover();
n.node.resumeSystemEvents();
}
},
hieuUng: function() {
if (this.isBigWin && !this.isNoHu) {
this.BigWin.node.active = !0;
this.BigWin.play();
} else if (this.isNoHu) {
this.NoHu.node.active = !0;
this.NoHu.play();
} else if (this.isBonus) {
this.EF_Bonus.node.active = !0;
this.EF_Bonus.play();
cc.RedT.audio.playEf("bonus");
} else if (this.isFree) {
this.EF_Free.node.active = !0;
this.EF_Free.play();
} else if (this.H_win > 0) {
if (this.game.active) {
var t = new cc.Node();
t.addComponent(cc.Label);
(t = t.getComponent(cc.Label)).string = n.numberWithCommas(this.H_win);
t.font = this.fontThang;
t.lineHeight = 130;
t.fontSize = 25;
t.node.position = cc.v2(0, 21);
this.nodeNotice.addChild(t.node);
t.node.runAction(cc.sequence(cc.moveTo(1.2, cc.v2(0, 105)), cc.callFunc(function() {
this.speed = 0;
t.node.destroy();
this.hieuUng();
this.showLineWin(!1);
}, this)));
}
this.H_win = 0;
} else this.isAuto || this.isFreeSpin ? this.timeOut = setTimeout(function() {
this.onAutoSpin();
this.speed = 400;
}.bind(this), this.speed) : this.resetSpin();
},
onData: function(t) {
if (void 0 !== t.user) {
this.userData(t.user);
cc.RedT.userData(t.user);
}
void 0 !== t.tamhung && this.TamHung(t.tamhung);
void 0 !== t.mini && null != cc.RedT.minigame && cc.RedT.minigame.onData(t.mini);
void 0 !== t.TopHu && cc.RedT.MiniPanel.TopHu.onData(t.TopHu);
void 0 !== t.taixiu && null != cc.RedT.minigame && cc.RedT.minigame.isLoadTaiXiu && cc.RedT.minigame.TaiXiu.TX_Main.onData(t.taixiu);
},
userData: function(t) {
this.red ? this.taikhoan.string = n.numberWithCommas(t.red) : this.taikhoan.string = n.numberWithCommas(t.xu);
},
TamHung: function(t) {
var e = this;
if (void 0 !== t.status) if (1 === t.status) {
this.buttonStop.active = !!this.isAuto;
this.buttonAuto.active = !this.buttonStop.active;
Promise.all(t.cel.map(function(t, i) {
Promise.all(t.map(function(t, n) {
e.reels[i].icons[n].setIcon(t, !0);
}));
}));
this.runReels(this.isSpeed);
this.H_line_win = t.line_win;
this.H_win = t.win;
this.H_free = t.free;
this.isBonus = t.isBonus;
this.isNoHu = t.isNoHu;
this.isBigWin = t.isBigWin;
this.isFree = t.isFree;
this.isFreeSpin = !!t.free;
} else this.resetSpin();
void 0 !== t.bonus && this.gameBonus.onData(t.bonus);
void 0 !== t.log && this.dialog.history.onData(t.log);
void 0 !== t.top && this.dialog.top.onData(t.top);
void 0 !== t.notice && this.addNotice(t.notice);
},
onGetSpin: function() {
cc.RedT.send({
g: {
tamhung: {
spin: {
cuoc: n.getOnlyNumberInString(this.bet.string),
line: this.Line.data
}
}
}
});
},
addNotice: function(t) {
var e = cc.instantiate(this.prefabNotice);
e.getComponent("mini_warning").text.string = t;
this.nodeNotice.addChild(e);
},
backGame: function() {
cc.RedT.inGame.notice.show({
title: "Thoát game",
text: "Xác nhận hành động.\nHành động thực hiện thoát khỏi game này?",
button: {
type: "exit_game",
text: "Thoát"
}
});
},
signOut: function() {
cc.director.preloadScene("MainGame", function() {
cc.director.loadScene("MainGame", function() {
cc.RedT.inGame.signOut();
});
});
},
onGetHu: function() {
var t = this;
if (void 0 !== cc.RedT.setting.topHu.data) {
var e = this, i = n.getOnlyNumberInString(e.bet.string);
Promise.all(cc.RedT.setting.topHu.data.tamhung.filter(function(t) {
return t.type == i && t.red == e.red;
})).then(function(e) {
var i = n.getOnlyNumberInString(t.hu.string), o = e[0].bet;
i - o != 0 && n.numberTo(t.hu, i, o, 2e3, !0);
});
}
},
onGetAllHu: function() {
var t = this;
if (void 0 !== cc.RedT.setting.topHu.data) {
n.getOnlyNumberInString(this.bet.string);
Promise.all(cc.RedT.setting.topHu.data.tamhung.filter(function(t) {
return 1 == t.red;
})).then(function(e) {
var i = e.filter(function(t) {
return 100 == t.type;
}), o = e.filter(function(t) {
return 1e3 == t.type;
}), c = e.filter(function(t) {
return 1e4 == t.type;
}), s = n.getOnlyNumberInString(t.hu100.string), a = n.getOnlyNumberInString(t.hu1000.string), h = n.getOnlyNumberInString(t.hu10000.string);
s - i[0].bet != 0 && n.numberTo(t.hu100, n.getOnlyNumberInString(t.hu100.string), i[0].bet, 4900, !0);
a - o[0].bet != 0 && n.numberTo(t.hu1000, n.getOnlyNumberInString(t.hu1000.string), o[0].bet, 4900, !0);
h - c[0].bet != 0 && n.numberTo(t.hu10000, n.getOnlyNumberInString(t.hu10000.string), c[0].bet, 4900, !0);
});
}
},
BangThuongToggle: function() {
cc.RedT.audio.playClick();
this.bangThuong.active = !this.bangThuong.active;
},
playMusic: function() {
this.audioBG.play();
},
pauseMusic: function() {
this.audioBG.pause();
}
});
cc._RF.pop();
}, {
Helper: "Helper",
Notice: "Notice",
TamHung_dialog: "TamHung_dialog",
TamHung_lines: "TamHung_lines",
TamHung_playBonus: "TamHung_playBonus",
TamHung_reel: "TamHung_reel"
} ],
TestController: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "39e0cwUUd5N0oJ4PPSPHVS/", "TestController");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("./networks/Network.NetworkClient"), o = t("./common/Configs"), c = t("./networks/Network.Cmd"), s = cc._decorator, a = s.ccclass, h = s.property, r = function(t) {
__extends(e, t);
function e() {
var e = null !== t && t.apply(this, arguments) || this;
e.label = null;
e.text = "hello";
return e;
}
e.prototype.start = function() {
for (var t = this, e = function(e) {
var i = function() {
var e = new n.default();
e.isUseWSS = !0;
e.addOnOpen(function() {
t.send(e.ws, new c.default.SendLogin(o.default.Login.Nickname, o.default.Login.AccessToken));
}, t);
e.addOnClose(function() {
setTimeout(function() {
i();
}, 2e3);
}, t);
e.connect(o.default.App.HOST_MINIGAME.host, o.default.App.HOST_MINIGAME.port);
};
i();
}, i = 0; i < 500; i++) e();
};
e.prototype.send = function(t, e) {
for (var i = new Int8Array(e._length), n = 0; n < e._length; n++) i[n] = e._data[n];
t.send(i.buffer);
};
__decorate([ h(cc.Label) ], e.prototype, "label", void 0);
__decorate([ h ], e.prototype, "text", void 0);
return e = __decorate([ a ], e);
}(cc.Component);
i.default = r;
cc._RF.pop();
}, {
"./common/Configs": "Configs",
"./networks/Network.Cmd": "Network.Cmd",
"./networks/Network.NetworkClient": "Network.NetworkClient"
} ],
TheCao_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "6bcb3yYhadCDJYjR6a7bVNL", "TheCao_item");
cc.Class({
extends: cc.Component,
properties: {
NhaMang: {
default: null,
type: cc.Label
},
MenhGia: {
default: null,
type: cc.Label
},
SoThe: {
default: null,
type: cc.Label
},
Seri: {
default: null,
type: cc.Label
},
HetHan: {
default: null,
type: cc.Label
}
}
});
cc._RF.pop();
}, {} ],
TheCao: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "676e1K7f8tL+pOgcGRRKm5C", "TheCao");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {},
init: function() {
var t = this;
Promise.all(this.node.children.map(function(t) {
return t.getComponent("TheCao_item");
})).then(function(e) {
t.TheCao = e;
});
},
onEnable: function() {
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
},
onDisable: function() {
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
},
onData: function(t) {
this.setData(t);
cc.RedT.inGame.loading.active = !1;
if (cc.RedT.inGame.dialog.objShow) {
cc.RedT.inGame.dialog.objShow.active = !1;
this.node.previous = cc.RedT.inGame.dialog.objShow;
}
this.node.active = cc.RedT.inGame.dialog.node.active = !0;
cc.RedT.inGame.dialog.objShow = this.node;
},
getData: function(t) {
cc.RedT.inGame.loading.active = !0;
cc.RedT.send({
user: {
history: {
the_cao: t
}
}
});
},
setData: function(t) {
Promise.all(this.TheCao.map(function(e, i) {
var o = t[i];
if (void 0 !== o) {
e.node.active = !0;
e.NhaMang.string = o.nhaMang;
e.MenhGia.string = n.numberWithCommas(o.menhGia);
e.SoThe.string = o.maThe;
e.Seri.string = o.seri;
e.HetHan.string = o.time;
} else e.node.active = !1;
}));
},
onBack: function(t) {
if (cc.RedT.inGame.dialog.objShow) {
cc.RedT.inGame.dialog.objShow.active = !1;
this.node.active = !1;
}
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
ThongBaoNoHu: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "2032a+ToBpAt7K48nuzmY5R", "ThongBaoNoHu");
t("ThongBaoNoHu");
cc.Class({
extends: cc.Component,
properties: {
animation: cc.Animation,
title: cc.Label,
users: cc.Label,
bet: cc.Label
},
init: function(t) {
this.RedT = t;
},
onLoad: function() {
this.node.y = -133;
this.node.runAction(cc.sequence(cc.moveTo(2, cc.v2(0, 77)), cc.callFunc(function() {}, this), cc.delayTime(7), cc.callFunc(function() {
this.RedT.pushNotice();
this.node.destroy();
}, this)));
}
});
cc._RF.pop();
}, {
ThongBaoNoHu: "ThongBaoNoHu"
} ],
ThongTin: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "f0dcc15DbFOmrOGpmu1vuqt", "ThongTin");
cc.Class({
extends: cc.Component,
properties: {
editOTP: cc.EditBox,
thongtin: cc.Node,
xoasdt: cc.Node
},
onload: function() {
this.thongtin.active = !0;
this.xoasdt.active = !1;
},
onClickXoa: function() {
this.xoasdt.active = !0;
this.thongtin.active = !1;
},
onSubmit: function() {
cc.RedT.send({
user: {
security: {
delete: {
otp: this.editOTP.string
}
}
}
});
},
onClickOTP: function() {
cc.RedT.send({
otp: {
type: 1
}
});
}
});
cc._RF.pop();
}, {} ],
TienLenNetworkClient: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "ace2fOmXkREULE7CCaicJmQ", "TienLenNetworkClient");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = t("./CardGameNetworkClient"), o = t("../common/Configs"), c = function(t) {
__extends(e, t);
function e() {
return t.call(this) || this;
}
e.getInstance = function() {
null == this.instance && (this.instance = new e());
return this.instance;
};
e.prototype._connect = function() {
t.prototype.connect.call(this, o.default.App.HOST_TLMN.host, o.default.App.HOST_TLMN.port);
};
e.prototype.onOpen = function(e) {
t.prototype.onOpen.call(this, e);
console.log("tlmn connected");
};
return e;
}(n.default);
i.default = c;
cc._RF.pop();
}, {
"../common/Configs": "Configs",
"./CardGameNetworkClient": "CardGameNetworkClient"
} ],
TieuRed: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "00244bdHdZHHoauw7/tgQlF", "TieuRed");
cc.Class({
extends: cc.Component,
properties: {
header: {
default: null,
type: cc.Node
},
head: {
default: null,
type: cc.Node
},
body: {
default: null,
type: cc.Node
},
RutBank: {
default: null,
type: cc.Node
},
MuaTheCao: {
default: null,
type: cc.Node
}
},
init: function() {
this.RutBank = this.RutBank.getComponent("bankRut");
this.MuaTheCao = this.MuaTheCao.getComponent("shopMuaTheCao");
this.MuaTheCao.init();
this.RutBank.init();
},
onEnable: function() {
this.heade = this.header;
this.head.active = !0;
this.body.active = !1;
this.heade.active = !1;
},
onSelectHead: function(t, e) {
this.head.active = !1;
this.heade.active = !0;
this.body.active = !0;
Promise.all(this.header.children.map(function(t) {
t.name == e ? t.getComponent("itemContentMenu").select() : t.getComponent("itemContentMenu").unselect();
}));
Promise.all(this.body.children.map(function(t) {
t.name == e ? t.active = !0 : t.active = !1;
}));
}
});
cc._RF.pop();
}, {} ],
TimeUtils: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "761c4r7fCZLrIcT4qTFRPgo", "TimeUtils");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = cc._decorator, o = n.ccclass, c = (n.property, function() {
function t() {}
t.currentTimeMillis = function() {
return Date.now();
};
t.serverTime = function() {
return Math.ceil(this.currentTimeMillis() - this.minDistanceTime + this.minPing / 2);
};
t.ping = 0;
t.minPing = -1;
t.minDistanceTime = 0;
return t = __decorate([ o ], t);
}());
i.default = c;
cc._RF.pop();
}, {} ],
TopPhuHo_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "2a71fGfqchAzYFiVmM4Ci/T", "TopPhuHo_item");
t("Helper");
cc.Class({
extends: cc.Component,
properties: {
Avatar: cc.Sprite,
NickName: cc.Label,
RankName: cc.Label,
Money: cc.Label
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
TopPhuHo: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "3eec7z/+D5Dd5l7dVHhXKRd", "TopPhuHo");
t("BrowserUtil");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
itemTemplate: cc.Node,
header: cc.Node,
body: cc.Node,
sfTops: [ cc.SpriteFrame ],
sfRanks: [ cc.SpriteFrame ]
},
start: function() {
var t = this;
Promise.all(this.header.children.map(function(t) {
return t.getComponent("itemContentMenu");
})).then(function(e) {
t.header = e;
});
},
onEnable: function() {
for (var t = 0; t < this.itemTemplate.parent.childrenCount; t++) this.itemTemplate.parent.children[t].active = !0;
},
onDisable: function() {
for (var t = 0; t < this.itemTemplate.parent.childrenCount; t++) this.itemTemplate.parent.children[t].active = !1;
},
getItem: function() {
for (var t = null, e = 0; e < this.itemTemplate.parent.childrenCount; e++) {
var i = this.itemTemplate.parent.children[e];
if (i != this.itemTemplate && !i.active) {
t = i;
break;
}
}
null == t && ((t = cc.instantiate(this.itemTemplate)).parent = this.itemTemplate.parent);
t.active = !0;
return t;
},
onData: function(t) {
if (t.top.length) for (var e = 0; e < t.top.length; e++) {
var i = this.getItem();
i.getChildByName("sprite").active = !0;
i.getChildByName("selected").active = !0;
i.getChildByName("DONGXU").active = !0;
i.getChildByName("lbrank").active = !1;
i.getChildByName("lbname").active = !1;
i.getChildByName("lbmoney").active = !1;
i.getChildByName("nickname").active = !0;
i.getChildByName("rank").active = !0;
i.getChildByName("money").active = !0;
i.getChildByName("sprite").getComponent(cc.Sprite).spriteFrame = cc.RedT.Avatars[t.top[e].Avatar >> 0];
i.getChildByName("fame").active = !0;
i.getChildByName("nickname").getComponent(cc.Label).string = t.top[e].Name;
i.getChildByName("rank").getComponent(cc.Label).string = t.top[e].RankName;
i.getChildByName("money").getComponent(cc.Label).string = n.numberWithCommas(t.top[e].RedPlay);
t.top[e].Name == cc.RedT.user.name ? i.getChildByName("selected").active = !0 : i.getChildByName("selected").active = !1;
if ("KIM CƯƠNG" == t.top[e].RankName) {
i.getChildByName("SprRank").active = !0;
i.getChildByName("SprRank").getComponent(cc.Sprite).spriteFrame = this.sfRanks[0];
} else if ("BẠCH KIM" == t.top[e].RankName) {
i.getChildByName("SprRank").active = !0;
i.getChildByName("SprRank").getComponent(cc.Sprite).spriteFrame = this.sfRanks[1];
} else if ("VÀNG" == t.top[e].RankName) {
i.getChildByName("SprRank").active = !0;
i.getChildByName("SprRank").getComponent(cc.Sprite).spriteFrame = this.sfRanks[2];
} else if ("BẠC" == t.top[e].RankName) {
i.getChildByName("SprRank").active = !0;
i.getChildByName("SprRank").getComponent(cc.Sprite).spriteFrame = this.sfRanks[3];
} else if ("ĐỒNG" == t.top[e].RankName) {
i.getChildByName("SprRank").active = !0;
i.getChildByName("SprRank").getComponent(cc.Sprite).spriteFrame = this.sfRanks[4];
} else if ("SẮT" == t.top[e].RankName) {
i.getChildByName("SprRank").active = !0;
i.getChildByName("SprRank").getComponent(cc.Sprite).spriteFrame = this.sfRanks[5];
}
}
},
onSelectHead: function(t, e) {
Promise.all(this.header.map(function(t) {
t.node.name == e ? t.select() : t.unselect();
}));
Promise.all(this.body.children.map(function(t) {
t.name == e ? t.active = !0 : t.active = !1;
}));
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
TranDau_Item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "7de3fHUe/lBsYgwizXqaoFi", "TranDau_Item");
t("BrowserUtil"), t("Helper");
cc.Class({
extends: cc.Component,
properties: {
TenDoiBong: [ cc.Label ],
TrangThai: cc.Label,
NguoiThamGia: cc.Label,
KetQua: cc.Label
},
init: function(t, e, i) {
this.controll = t;
this.data = e;
this.TenDoiBong[0].string = e.team1;
this.TenDoiBong[1].string = e.team2;
if (e.status) {
this.TrangThai.string = "ĐÃ KẾT THÚC";
this.KetQua.string = "KẾT QUẢ: " + e.ketqua;
this.TrangThai.node.color = cc.Color.RED;
} else {
this.KetQua.string = "";
this.TrangThai.string = "ĐANG DIỄN RA";
this.TrangThai.node.color = cc.Color.CYAN;
}
this.NguoiThamGia.string = "99";
},
onThamGia: function() {
cc.RedT.audio.playClick();
cc.RedT.MiniPanel.Dialog.showBongDaLichSuPhien();
cc.RedT.MiniPanel.Dialog.BongDaLichSuPhien.onInfo(this.data);
cc.RedT.send({
g: {
bongda: {
getphien: this.data.phien
}
}
});
},
onChiTiet: function() {
cc.RedT.audio.playClick();
cc.RedT.MiniPanel.Dialog.showBongDaChiTiet();
cc.RedT.MiniPanel.Dialog.BongDaChiTiet.onData(this.data.giaidau);
},
onKetQua: function() {
cc.RedT.audio.playClick();
cc.RedT.MiniPanel.Dialog.showBongDaChiTiet();
cc.RedT.MiniPanel.Dialog.BongDaChiTiet.onDienbien(this.data.dienbien);
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
Tween: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "b463e/ybFpMl6HKyeG5WLZz", "Tween");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n, o = t("./Utils"), c = cc._decorator, s = c.ccclass;
c.property;
(function(t) {
var e = function() {
return function() {
this.target = null;
this.duration = 0;
this.curDuration = 0;
this.callback = null;
};
}();
t.TweenListener = e;
var i = function(t) {
__extends(i, t);
function i() {
var e = null !== t && t.apply(this, arguments) || this;
e.skeepFrame = !1;
e.countSkeep = 1;
e.curCountSkeep = 0;
e.delta = 0;
return e;
}
n = i;
i.getInstance = function() {
if (null == this.instance) {
var t = new cc.Node();
t.name = "Tween";
cc.game.addPersistRootNode(t);
this.instance = t.addComponent(n);
}
return this.instance;
};
i.prototype.update = function(t) {
if (this.skeepFrame) {
this.curCountSkeep++;
this.delta += t;
if (this.curCountSkeep >= this.countSkeep) {
this.curCountSkeep = 0;
this.skeepFrame = !1;
}
} else {
for (var e = 0; e < n.listeners.length; e++) {
var i = n.listeners[e];
if (i.target && i.target instanceof cc.Component && i.target.node) {
i.curDuration = Math.min(i.duration, i.curDuration + t + this.delta);
i.callback(i.curDuration / i.duration);
i.curDuration >= i.duration && n.listeners.splice(e--, 1);
} else n.listeners.splice(e--, 1);
}
this.skeepFrame = !0;
this.delta = 0;
}
};
i.numberTo = function(t, i, c, s) {
void 0 === s && (s = function(t) {
return o.default.formatNumber(t);
});
this.getInstance();
for (var a = null, h = 0; h < n.listeners.length; h++) {
var r = n.listeners[h];
if (r.target == t) {
a = r;
break;
}
}
if (null == a) {
a = new e();
this.listeners.push(a);
}
var l = o.default.stringToInt(t.string), u = i - l;
a.curDuration = 0;
a.duration = c;
a.target = t;
a.callback = function(e) {
t.string = s(parseInt("" + (l + u * e)));
};
};
var n;
i.instance = null;
i.listeners = new Array();
return i = n = __decorate([ s ], i);
}(cc.Component);
t.Tween = i;
})(n || (n = {}));
i.default = n.Tween;
cc._RF.pop();
}, {
"./Utils": "Utils"
} ],
Utils: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "e86efcy15xCqJ8SuQDPKLzT", "Utils");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n, o = cc._decorator;
o.ccclass, o.property;
(function(t) {
var e = function() {
function t() {}
t.degreesToVec2 = function(e) {
return t.radianToVec2(e * t.Deg2Rad);
};
t.radianToVec2 = function(t) {
return cc.v2(Math.cos(t), Math.sin(t));
};
t.numberToEnum = function(t, e) {
return e[e[t]];
};
t.loadSpriteFrameFromBase64 = function(t, e) {
var i = new Image();
i.onload = function() {
var t = new cc.Texture2D();
t.initWithElement(i);
t.handleLoadedTexture();
var n = new cc.SpriteFrame(t);
e(n);
}.bind(this);
i.src = "data:image/png;base64," + t;
};
t.formatNumber = function(t) {
return t.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1.");
};
t.formatNumberMin = function(t) {
if (t >= 1e9) {
t = Math.ceil(t / 1e3);
return this.formatNumber(t) + "B";
}
if (t >= 1e6) {
t = Math.ceil(t / 1e3);
return this.formatNumber(t) + "M";
}
if (t >= 1e3) {
t = Math.ceil(t / 1e3);
return this.formatNumber(t) + "K";
}
return this.formatNumber(t);
};
t.stringToInt = function(t) {
var e = parseInt(t.replace(/\./g, "").replace(/,/g, ""));
isNaN(e) && (e = 0);
return e;
};
t.randomRangeInt = function(t, e) {
return Math.floor(Math.random() * (e - t)) + t;
};
t.randomRange = function(t, e) {
return Math.random() * (e - t) + t;
};
t.v2Distance = function(t, e) {
return Math.sqrt(Math.pow(e.x - t.x, 2) + Math.pow(e.y - t.y, 2));
};
t.v2Degrees = function(t, e) {
return 180 * Math.atan2(e.y - t.y, e.x - t.x) / Math.PI;
};
t.dateToYYYYMMdd = function(t) {
var e = t.getMonth() + 1, i = t.getDate();
return [ t.getFullYear(), (e > 9 ? "" : "0") + e, (i > 9 ? "" : "0") + i ].join("-");
};
t.dateToYYYYMM = function(t) {
var e = t.getMonth() + 1;
t.getDate();
return [ t.getFullYear(), (e > 9 ? "" : "0") + e ].join("-");
};
t.removeDups = function(t) {
var e = {};
t.forEach(function(t) {
e[t] || (e[t] = !0);
});
return Object.keys(e);
};
t.Rad2Deg = 57.2957795;
t.Deg2Rad = .0174532925;
return t;
}();
t.Utils = e;
})(n = i.common || (i.common = {}));
i.default = n.Utils;
cc._RF.pop();
}, {} ],
VQMM_history_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "0c1afxzRh9PpZoRx0KQKE6f", "VQMM_history_item");
cc.Class({
extends: cc.Component,
properties: {
bg: cc.Node,
time: cc.Label,
game: cc.Label,
kq: cc.Label,
thuong: cc.Label
}
});
cc._RF.pop();
}, {} ],
VQMM_history: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "059134JbAlEl7vEuTYJHCNR", "VQMM_history");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
header: cc.Node,
body: cc.Node,
quay: cc.Node,
nhanve: cc.Node,
select: ""
},
init: function(t) {
this.RedT = t;
},
onLoad: function() {
var t = this;
this.page = cc.instantiate(this.page);
this.page.y = -300.91;
this.node.addChild(this.page);
this.page = this.page.getComponent("Pagination");
Promise.all(this.quay.children.map(function(t) {
return t.getComponent("MegaJ_history_item");
})).then(function(e) {
t.quay = e;
});
Promise.all(this.nhanve.children.map(function(t) {
return t.getComponent("MegaJ_top_item");
})).then(function(e) {
t.nhanve = e;
});
this.page.init(this);
},
headSelect: function(t) {
this.select = t.target.name;
this.header.children.forEach(function(t) {
if (t.name === this.select) {
t.children[0].active = !1;
t.children[1].active = !0;
t.pauseSystemEvents();
} else {
t.children[0].active = !0;
t.children[1].active = !1;
t.resumeSystemEvents();
}
}.bind(this));
this.body.children.forEach(function(t) {
t.name === this.select ? t.active = !0 : t.active = !1;
}.bind(this));
this.get_data();
},
onEnable: function() {
this.get_data();
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
if (!this.RedT.isSpin) {
var e = {};
e[this.select] = t;
cc.RedT.send({
g: {
megaj: {
history: e
}
}
});
}
},
onData: function(t) {
console.log(t);
t.quay && this.quayData(t.quay);
t.nhanve && this.nhanveData(t.nhanve);
},
quayData: function(t) {
this.page.onSet(t.page, t.kmess, t.total);
this.quay.forEach(function(e, i) {
var o = t.data[i];
if (void 0 !== o) {
e.node.active = !0;
e.bg.active = i % 2;
e.time.string = n.getStringDateByTime(o.time);
e.game.string = 100 === o.room ? "Thanh đồng" : 100 === o.room ? "Bạch kim" : "Hoàng kim";
e.kq.string = 5 === o.kq ? "Thêm lượt" : 7 === o.kq ? "50%" : n.numberWithCommas(o.win);
e.thuong.string = n.numberWithCommas(o.win);
} else e.node.active = !1;
}.bind(this));
},
nhanveData: function(t) {
this.page.onSet(t.page, t.kmess, t.total);
this.nhanve.forEach(function(e, i) {
var o = t.data[i];
if (void 0 !== o) {
e.node.active = !0;
e.bg.active = i % 2;
e.time.string = n.getStringDateByTime(o.time);
e.game.string = this.nameGame(o.to);
e.room.string = 100 === o.room ? "Thanh đồng" : 100 === o.room ? "Bạch kim" : "Hoàng kim";
e.sl.string = o.sl;
e.status.string = o.status ? "Đã nhận" : "Chưa nhận";
var c = e.status.node;
o.status ? c.color = c.color.fromHEX("#47FF00") : c.color = c.color.fromHEX("#FF9900");
} else e.node.active = !1;
}.bind(this));
},
nameGame: function(t) {
switch (t) {
case 100:
return "Angrybird";

case 101:
return "BigBabol";

case 102:
return "Candy";

case 103:
return "Long Lân";

case 104:
return "Mini 3Cây";

case 105:
return "Vương Quốc Red";

case 106:
return "Mini Poker";
}
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
VQMM_top_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "bffed4lH/5JO7idJX8ui+eW", "VQMM_top_item");
cc.Class({
extends: cc.Component,
properties: {
bg: cc.Node,
time: cc.Label,
game: cc.Label,
room: cc.Label,
sl: cc.Label,
status: cc.Label
}
});
cc._RF.pop();
}, {} ],
VQMM_top: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "ef8e28BotpFx6IKVSz0Twg0", "VQMM_top");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
content: cc.Node
},
init: function(t) {
this.RedT = t;
},
onLoad: function() {
var t = this;
this.page = cc.instantiate(this.page);
this.page.y = -267.605;
this.node.addChild(this.page);
this.page = this.page.getComponent("Pagination");
Promise.all(this.content.children.map(function(t) {
return t.getComponent("MegaJ_history_item");
})).then(function(e) {
t.content = e;
});
this.page.init(this);
},
onEnable: function() {
this.get_data();
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
this.RedT.isSpin || cc.RedT.send({
g: {
megaj: {
top: t
}
}
});
},
onData: function(t) {
this.page.onSet(t.page, t.kmess, t.total);
this.content.forEach(function(e, i) {
var o = t.data[i];
if (void 0 !== o) {
e.node.active = !0;
e.bg.active = i % 2;
e.time.string = n.getStringDateByTime(o.time);
e.game.string = o.name;
e.kq.string = 100 === o.room ? "Thanh đồng" : 100 === o.room ? "Bạch kim" : "Hoàng kim";
e.thuong.string = n.numberWithCommas(o.win);
} else e.node.active = !1;
}.bind(this));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
VQMM: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "782d6uJYXZLNpDgCyTpPe5u", "VQMM");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
bg_move: cc.Node,
bgVQ: cc.Node,
imgVQ: cc.Sprite,
luot: cc.Label,
notice: cc.Node,
noticePrefab: cc.Prefab,
spinNode: cc.Node,
spinSprite: cc.Sprite,
isSpin: !1
},
init: function(t) {
this.RedT = t;
this.game = 100;
cc.RedT.setting.vqmm = cc.RedT.setting.vqmm || {
scale: 1
};
this.node.runScale = !1;
},
onEnable: function() {
this.regUpdate();
this.bg_move.on(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.bg_move.on(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.bg_move.on(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.bg_move.on(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.bg_move.on(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
},
onDisable: function() {
this.bg_move.off(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.bg_move.off(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.bg_move.off(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.bg_move.off(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.bg_move.off(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
},
eventStart: function(t) {
this.setTop();
this.ttOffset = cc.v2(t.touch.getLocationX() - this.node.position.x, t.touch.getLocationY() - this.node.position.y);
},
eventMove: function(t) {
this.node.position = cc.v2(t.touch.getLocationX() - this.ttOffset.x, t.touch.getLocationY() - this.ttOffset.y);
},
eventEnd: function() {
cc.RedT.setting.vqmm.position = this.node.position;
},
setTop: function() {
cc.RedT.setting.vqmm.scale = 1;
this.node.parent.insertChild(this.node);
},
changerGame: function(t, e) {},
openGame: function() {
cc.RedT.audio.playClick();
if (cc.RedT.IS_LOGIN) {
this.node.active = !0;
localStorage.setItem("VongQuayMM", !0);
this.setTop();
} else cc.RedT.inGame.dialog.showSignIn();
},
closeGame: function() {
this.node.active = !1;
localStorage.setItem("VongQuayMM", !1);
},
spin: function() {
this.spinNode.pauseSystemEvents();
this.isSpin || cc.RedT.send({
g: {
vqmm: {
spin: this.game
}
}
});
},
onData: function(t) {
t.status && this.updateStatus(t.status);
t.notice && this.addNotice(t.notice);
if (t.info) {
this.luot.string = t.info;
this.setCount(t.info);
}
},
updateStatus: function(t) {
if (!0 === t.status) {
this.isSpin = !0;
this.oldData = t;
var e = cc.rotateTo(10, -2520 + t.data.position).easing(cc.easeQuinticActionOut()), i = cc.rotateTo(10, 2520 + t.data.pos).easing(cc.easeQuinticActionOut()), n = cc.callFunc(function() {
this.bgVQ.angle = -360 + this.oldData.data.position;
this.imgVQ.node.angle = 360 + this.oldData.data.pos;
this.isSpin = !1;
this.spinNode.resumeSystemEvents();
this.bgVQ.stopAllActions();
this.imgVQ.node.stopAllActions();
this.updateKQ();
}, this);
this.bgVQ.runAction(e);
this.imgVQ.node.runAction(cc.sequence(i, n));
} else {
this.isSpin = !1;
this.spinNode.resumeSystemEvents();
}
},
updateKQ: function() {
if (5 === this.oldData.kq) ; else if (12 === this.oldData.kq) ; else {
var t = new cc.Node();
t.addComponent(cc.Label);
(t = t.getComponent(cc.Label)).string = n.numberWithCommas(this.oldData.data.thuong);
t.font = cc.RedT.util.fontCong;
t.lineHeight = 130;
t.fontSize = 20;
t.node.position = cc.v2(0, 30);
this.notice.addChild(t.node);
t.node.runAction(cc.sequence(cc.moveTo(2.5, cc.v2(0, 150)), cc.callFunc(function() {
t.node.destroy();
}, this)));
}
},
setCount: function(t) {
this.luot.string = t;
},
regUpdate: function() {
cc.RedT.send({
g: {
vqmm: {
update: !0
}
}
});
},
addNotice: function(t) {
var e = cc.instantiate(this.noticePrefab);
e.getComponent("mini_warning").text.string = t;
this.notice.addChild(e);
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
VQRed_dialog: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "bbbb3PXVVZETqpYijqFqO6r", "VQRed_dialog");
var n = t("VQRed_history"), o = t("VQRed_top"), c = t("VQRed_setting");
cc.Class({
extends: cc.Component,
properties: {
history: n,
top: o,
setting: c
},
init: function() {
this.actionShow = cc.spawn(cc.scaleTo(.5, 1).easing(cc.easeBackOut(2.5)), cc.fadeTo(.5, 255));
this.objShow = null;
this.objTmp = null;
},
onClickBack: function() {
cc.RedT.audio.playUnClick();
this.onBack();
},
onBack: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = !1;
this.node.active = !1;
this.objShow = null;
} else {
this.objTmp = this.objShow;
this.objShow = this.objShow.previous;
this.objTmp.previous = null;
this.objTmp.active = !1;
this.objShow.active = !0;
this.objTmp = null;
} else this.node.active = !1;
},
onClosePrevious: function(t) {
if (void 0 !== t.previous && null !== t.previous) {
this.onClosePrevious(t.previous);
delete t.previous;
}
t.active = !1;
},
onCloseDialog: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = this.node.active = !1;
this.objShow = null;
} else {
this.onClosePrevious(this.objShow.previous);
this.objShow.active = this.node.active = !1;
delete this.objShow.previous;
this.objShow = null;
} else this.node.active = !1;
},
resetSizeDialog: function(t) {
t.stopAllActions();
t.scale = .5;
t.opacity = 0;
},
showHistory: function() {
this.objShow.active = !1;
this.history.node.previous = this.objShow;
this.node.active = this.history.node.active = !0;
this.objShow = this.history.node;
},
showTop: function() {
this.node.active = this.top.node.active = !0;
this.objShow = this.top.node;
},
showSetting: function() {
this.node.active = this.setting.node.active = !0;
this.objShow = this.setting.node;
}
});
cc._RF.pop();
}, {
VQRed_history: "VQRed_history",
VQRed_setting: "VQRed_setting",
VQRed_top: "VQRed_top"
} ],
VQRed_history_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "95d5aIW7xZHfKL9yYH2NHME", "VQRed_history_item");
cc.Class({
extends: cc.Component,
properties: {
time: cc.Label,
phien: cc.Label,
cuoc: cc.Label,
line: cc.Label,
win: cc.Label,
kq: cc.Label
}
});
cc._RF.pop();
}, {} ],
VQRed_history: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "66e9cqNtPFCw6Q48VfYKZ/M", "VQRed_history");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
onLoad: function() {
var t = this, e = cc.instantiate(this.page);
e.y = -315;
this.node.addChild(e);
this.page = e.getComponent("Pagination");
Promise.all(this.content.children.map(function(t) {
return t.getComponent("VQRed_history_item");
})).then(function(e) {
t.content = e;
});
this.page.init(this);
},
onEnable: function() {
this.get_data();
},
onDisable: function() {},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
g: {
vq_red: {
log: {
red: this.red,
page: t
}
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
this.page.onSet(t.page, t.kmess, t.total);
Promise.all(this.content.map(function(e, i) {
var o = t.data[i];
if (void 0 !== o) {
e.node.active = !0;
e.time.string = n.getStringDateByTime(o.time);
e.phien.string = o.id;
e.cuoc.string = n.numberWithCommas(o.bet);
e.line.string = o.kq + " Dòng";
e.win.string = n.numberWithCommas(o.win);
} else e.node.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
VQRed_main_line: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "3a5fblcwjpEZ7XEnO1IJ3kk", "VQRed_main_line");
cc.Class({
extends: cc.Component,
init: function(t) {
this.RedT = t;
return this;
},
onEnable: function() {
this.node.on(cc.Node.EventType.MOUSE_ENTER, this.onhover, this);
this.node.on(cc.Node.EventType.MOUSE_LEAVE, this.offhover, this);
},
onDisable: function() {
this.node.off(cc.Node.EventType.MOUSE_ENTER, this.onhover, this);
this.node.off(cc.Node.EventType.MOUSE_LEAVE, this.offhover, this);
},
onhover: function() {
this.node.children[1].active = !0;
this.defColor = this.node.children[0].children[1].color;
this.node.children[0].children[0].active = !0;
this.node.children[0].children[1].color = this.node.color.fromHEX(this.RedT.onColor);
},
offhover: function() {
this.node.children[1].active = !1;
this.node.children[0].children[0].active = !1;
this.node.children[0].children[1].color = this.defColor;
},
onEf: function() {
this.onhover();
this.node.pauseSystemEvents();
},
offEf: function() {
this.offhover();
this.node.resumeSystemEvents();
}
});
cc._RF.pop();
}, {} ],
VQRed_setting: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "3d99bnmP4tPiIMEZDUmt8Ls", "VQRed_setting");
var n = t("CheckOut");
cc.Class({
extends: cc.Component,
properties: {
NhacNen: n,
NhacGame: n
},
onLoad: function() {
cc.RedT.isSoundBackground() || this.NhacNen.OnChangerClick();
cc.RedT.isSoundGame() || this.NhacGame.OnChangerClick();
},
onEnable: function() {
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
},
onDisable: function() {
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
},
OnChangerNhacNen: function() {
cc.RedT.setSoundBackground(this.NhacNen.isChecked);
this.NhacNen.isChecked ? cc.RedT.inGame.playMusic() : cc.RedT.inGame.pauseMusic();
},
OnChangerNhacGame: function() {
cc.RedT.setSoundGame(this.NhacGame.isChecked);
this.NhacGame.isChecked ? cc.RedT.IS_SOUND = !0 : cc.RedT.IS_SOUND = !1;
}
});
cc._RF.pop();
}, {
CheckOut: "CheckOut"
} ],
VQRed_top: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "f06e8UHmbpN76XdRUrDkJvM", "VQRed_top");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
item: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
onEnable: function() {
this.get_data();
},
get_data: function() {
arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
cc.RedT.send({
g: {
vq_red: {
top: this.red
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
this.content.removeAllChildren();
var e = this;
Promise.all(t.map(function(t, i) {
var o = cc.instantiate(e.item), c = o.getComponent("VQRed_history_item");
c.time.string = n.getStringDateByTime(t.time);
c.phien.string = t.name;
c.cuoc.string = n.numberWithCommas(t.bet);
c.line.string = n.numberWithCommas(t.win);
c.win.string = 2 == t.type ? "Nổ Hũ" : "Thắng lớn";
o.children[0].active = !(1 & i);
e.content.addChild(o);
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
VersionConfig: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "4432dTxaiNCLKzaQM0wvnBN", "VersionConfig");
Object.defineProperty(i, "__esModule", {
value: !0
});
var n = function() {
function t() {}
t.CP_NAME_F69 = "F69";
t.ENV_DEV = "dev";
t.ENV_PROD = "prod";
t.ENV_LOCAL = "local";
t.DOMAIN_DEV = "kingwin.vin";
t.DOMAIN_LOCAL = "localhost";
t.DOMAIN_PRO = "kingwin.vin";
t.VersionName = "";
t.CPName = "";
t.ENV = t.ENV_DEV;
return t;
}();
i.default = n;
if (cc.sys.isNative) {
var o = cc.sys.localStorage.getItem("VersionConfig");
if (null != o) {
o = JSON.parse(o);
n.VersionName = o.VersionName;
n.CPName = o.CPName;
} else {
n.VersionName = "1.0.0";
n.CPName = n.CP_NAME_F69;
}
} else {
n.VersionName = "1.0.0";
n.CPName = n.CP_NAME_F69;
}
cc._RF.pop();
}, {} ],
VuongQuocRed_bigWin: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "ff622y7T/JKaZl38DVd0WTJ", "VuongQuocRed_bigWin");
cc.Class({
extends: cc.Component,
properties: {},
start: function() {}
});
cc._RF.pop();
}, {} ],
VuongQuocRed_items: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "aab4d3N+XxIp75z3i5xXpS8", "VuongQuocRed_items");
cc.Class({
extends: cc.Component,
properties: {
icon: {
default: null,
type: cc.Sprite
}
},
init: function(t) {
this.RedT = t;
},
stop: function() {
Promise.all(this.node.children.map(function(t) {
var e = t.getComponents(cc.Animation);
Promise.all(e.map(function(e) {
t.removeComponent(e);
}));
}));
},
random: function() {
var t = ~~(7 * Math.random());
this.setIcon(t);
return t;
},
setIcon: function(t) {
var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
if (4 == t) {
this.node.children[1].active = !0;
this.node.children[0].active = this.node.children[2].active = !1;
} else if (6 == t) {
this.node.children[2].active = !0;
this.node.children[0].active = this.node.children[1].active = !1;
} else {
this.node.children[0].active = !0;
this.node.children[1].active = this.node.children[2].active = !1;
this.icon.spriteFrame = 5 == t ? this.RedT.icons[t - 1] : this.RedT.icons[t];
}
e && (this.data = t);
}
});
cc._RF.pop();
}, {} ],
VuongQuocRed_line: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "70127RbBKFG06+Pa5WThYLM", "VuongQuocRed_line");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
nodeEfLine: cc.Node,
nodeLine: cc.Node,
mainLine: cc.Node
},
init: function(t) {
var e = this;
this.lines = {
1: [ 1, 1, 1, 1, 1 ],
2: [ 0, 0, 0, 0, 0 ],
3: [ 2, 2, 2, 2, 2 ],
4: [ 1, 1, 0, 1, 1 ],
5: [ 1, 1, 2, 1, 1 ],
6: [ 0, 0, 1, 0, 0 ],
7: [ 2, 2, 1, 2, 2 ],
8: [ 0, 2, 0, 2, 0 ],
9: [ 2, 0, 2, 0, 2 ],
10: [ 1, 0, 2, 0, 1 ],
11: [ 2, 1, 0, 1, 2 ],
12: [ 0, 1, 2, 1, 0 ],
13: [ 1, 2, 1, 0, 1 ],
14: [ 1, 0, 1, 2, 1 ],
15: [ 2, 1, 1, 1, 2 ],
16: [ 0, 1, 1, 1, 0 ],
17: [ 1, 2, 2, 2, 1 ],
18: [ 1, 0, 0, 0, 1 ],
19: [ 2, 2, 1, 0, 0 ],
20: [ 0, 0, 1, 2, 2 ]
};
this.RedT = t;
var i = this;
Promise.all(this.mainLine.children.map(function(t) {
return t.getComponent("VQRed_main_line").init(i.RedT);
})).then(function(t) {
e.mainLine = t;
});
this.selectAll(null, "1");
},
onOpen: function() {
cc.RedT.audio.playClick();
this.node.active = !0;
},
onClose: function() {
cc.RedT.audio.playUnClick();
this.node.active && this.data.length < 1 ? this.RedT.addNotice("Chọn ít nhất 1 dòng") : this.node.active = !1;
},
select: function(t) {
var e = t.target;
if (e.children[0].active) {
e.children[0].active = !1;
e.children[1].active = !0;
} else {
e.children[0].active = !0;
e.children[1].active = !1;
}
this.check();
},
check: function() {
var t = this;
Promise.all(this.nodeLine.children.map(function(t, e) {
return t.children[0].active ? e + 1 : void 0;
})).then(function(e) {
Promise.all(e.filter(function(t) {
return void 0 !== t;
})).then(function(e) {
t.data = e;
t.RedT.labelLine.string = e.length;
t.RedT.tong.string = n.numberWithCommas(e.length * n.getOnlyNumberInString(t.RedT.bet.string));
});
});
},
selectChan: function() {
var t = this;
Promise.all(this.nodeLine.children.map(function(t, e) {
var i = e + 1;
if (!(i % 2)) {
t.children[0].active = !1;
t.children[1].active = !0;
return i;
}
t.children[0].active = !0;
t.children[1].active = !1;
})).then(function(e) {
Promise.all(e.filter(function(t) {
return void 0 !== t;
})).then(function(e) {
t.data = e;
t.RedT.labelLine.string = e.length;
t.RedT.tong.string = n.numberWithCommas(e.length * n.getOnlyNumberInString(t.RedT.bet.string));
});
});
},
selectLe: function() {
var t = this;
Promise.all(this.nodeLine.children.map(function(t, e) {
var i = e + 1;
if (i % 2) {
t.children[0].active = !1;
t.children[1].active = !0;
return i;
}
t.children[0].active = !0;
t.children[1].active = !1;
})).then(function(e) {
Promise.all(e.filter(function(t) {
return void 0 !== t;
})).then(function(e) {
t.data = e;
t.RedT.labelLine.string = e.length;
t.RedT.tong.string = n.numberWithCommas(e.length * n.getOnlyNumberInString(t.RedT.bet.string));
});
});
},
selectAll: function(t, e) {
var i = this;
Promise.all(this.nodeLine.children.map(function(t, i) {
var n = "1" == e;
t.children[0].active = n;
t.children[1].active = !n;
return n ? i + 1 : void 0;
})).then(function(t) {
Promise.all(t.filter(function(t, e) {
return void 0 !== t;
})).then(function(t) {
i.data = t;
i.RedT.labelLine.string = t.length;
i.RedT.tong.string = n.numberWithCommas(t.length * n.getOnlyNumberInString(i.RedT.bet.string));
});
});
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
VuongQuocRed_playBonus: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "f4a82MExGBOZIu6dvi480mF", "VuongQuocRed_playBonus");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
numberBonus: cc.Label,
listBox: cc.Node,
notice: cc.Node,
numberWin: cc.Label
},
init: function(t) {
this.RedT = t;
},
onPlay: function() {
this.reset();
this.node.active = !0;
this.numberBonus.string = 10;
},
onClickBox: function(t, e) {
if (this.numberBonus.string) {
cc.RedT.audio.playClick();
this.onSend(e);
}
},
closeNotice: function() {
this.notice.active = this.node.active = !1;
this.RedT.hieuUng();
},
onData: function(t) {
if (void 0 !== t.box) {
var e = this.listBox.children[t.box];
e.children[0].active = !1;
e.children[1].active = e.children[2].active = !0;
e.children[2].getComponent(cc.Label).string = n.numberWithCommas(t.bet);
this.numberBonus.string = t.bonus;
}
if (void 0 !== t.win) {
this.notice.active = !0;
this.numberWin.string = n.numberWithCommas(t.win);
this.RedT.vuathang.string = n.numberWithCommas(1 * n.getOnlyNumberInString(this.RedT.vuathang.string) + t.win);
}
},
onSend: function(t) {
cc.RedT.send({
g: {
vq_red: {
bonus: {
box: t
}
}
}
});
},
reset: function() {
Promise.all(this.listBox.children.map(function(t) {
t.children[0].active = !0;
t.children[1].active = t.children[2].active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
VuongQuocRed_reel: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "d81dcoZgsNLupexKbEe58JH", "VuongQuocRed_reel");
cc.Class({
extends: cc.Component,
init: function(t) {
var e = this;
this.RedT = t;
this.icons = [];
var i = this, n = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
Promise.all(n.map(function(t, e) {
var o = cc.instantiate(i.RedT.iconPrefab);
i.node.addChild(o);
(o = o.getComponent("VuongQuocRed_items")).init(i.RedT);
if (e > 2 && e < n.length - 3) {
o.stop();
o.random();
}
return o;
})).then(function(t) {
e.icons = t;
e.icons[e.icons.length - 1].setIcon(e.icons[4].random());
e.icons[e.icons.length - 2].setIcon(e.icons[3].random());
e.icons[e.icons.length - 3].setIcon(e.icons[2].random());
e.icons[e.icons.length - 4].setIcon(e.icons[1].random());
e.icons[e.icons.length - 5].setIcon(e.icons[0].random());
});
},
spin: function(t) {
this.node.stopAllActions();
var e = cc.moveTo(1, cc.v2(this.node.x, -(this.node.height - 418))).easing(cc.easeInOut(3)), i = cc.callFunc(function() {
0 === t && this.RedT.copy();
this.node.y = 0;
}, this);
if (4 === t) {
var n = cc.callFunc(function() {
this.RedT.EF_vuathang();
this.node.y = 0;
this.RedT.random();
this.RedT.hieuUng();
}, this);
this.node.runAction(cc.sequence(cc.delayTime(.1 * t), e, n));
} else this.node.runAction(cc.sequence(cc.delayTime(.1 * t), e, i));
},
stop: function() {
this.node.stopAllActions();
this.RedT.copy();
this.node.y = 0;
}
});
cc._RF.pop();
}, {} ],
VuongQuocRed: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "23064kjFttJ5pk+vT43QFXz", "VuongQuocRed");
var n = t("Helper"), o = t("VuongQuocRed_reel"), c = t("VuongQuocRed_line"), s = t("VuongQuocRed_playBonus"), a = t("Notice"), h = t("VQRed_dialog");
cc.Class({
extends: cc.Component,
properties: {
gameBonus: s,
audioBG: cc.AudioSource,
audioClick: cc.AudioSource,
redhat: {
default: null,
type: cc.Node
},
reels: {
default: [],
type: o
},
icons: {
default: [],
type: cc.SpriteFrame
},
betString: {
default: [],
type: cc.String
},
iconPrefab: {
default: null,
type: cc.Prefab
},
BigWin: cc.Animation,
BigWin_Label: cc.Label,
NoHu: cc.Animation,
NoHu_Label: cc.Label,
EF_Bonus: cc.Animation,
EF_Free: cc.Animation,
buttonCoint: cc.Node,
buttonLine: cc.Node,
buttonSpin: cc.Node,
buttonFree: cc.Node,
freeLabel: cc.Label,
buttonAuto: cc.Node,
buttonStop: cc.Node,
nodeChangerBetL: cc.Node,
nodeChangerBetR: cc.Node,
nodeRed: {
default: null,
type: cc.Node
},
nodeXu: {
default: null,
type: cc.Node
},
bet: {
default: null,
type: cc.Label
},
betL: {
default: null,
type: cc.Node
},
betR: {
default: null,
type: cc.Node
},
nodeNotice: {
default: null,
type: cc.Node
},
prefabNotice: {
default: null,
type: cc.Prefab
},
MiniPanel: cc.Prefab,
loading: {
default: null,
type: cc.Node
},
notice: a,
dialog: h,
Line: c,
hu: cc.Label,
taikhoan: cc.Label,
tong: cc.Label,
vuathang: cc.Label,
labelLine: cc.Label,
bangThuong: cc.Node,
efline: cc.Node,
onColor: "",
offColor: "",
isAuto: !1,
isSpin: !1,
isFreeSpin: !1,
red: !0,
betSelect: 0
},
onLoad: function() {
cc.RedT.inGame = this;
this.BigWin.on("finished", this.BigWinFinish, this);
this.BigWin.on("play", this.BigWinPlay, this);
this.NoHu.on("finished", this.NoHuFinish, this);
this.NoHu.on("play", this.NoHuPlay, this);
this.EF_Bonus.on("finished", this.EF_BonusFinish, this);
this.EF_Free.on("finished", this.EF_FreeFinish, this);
var t = this;
this.gameBonus.init(this);
this.Line.init(this);
this.dialog.init();
Promise.all(this.reels.map(function(e) {
e.init(t);
}));
cc.RedT.send({
scene: "vq_red"
});
this.taikhoan.string = n.numberWithCommas(cc.RedT.user.red);
this.speed = 400;
if (cc.RedT.isSoundBackground()) {
cc.RedT.setSoundBackground(!0);
this.playMusic();
}
},
BigWinPlay: function() {
var t = cc.callFunc(function() {
cc.RedT.audio.playEf("megaWin");
n.numberTo(this.BigWin_Label, 0, this.H_win, 2e3, !0);
}, this);
this.BigWin.node.runAction(cc.sequence(cc.delayTime(.3), t));
},
BigWinFinish: function() {
this.isBigWin = !1;
this.BigWin.node.active = !1;
this.BigWin_Label.string = "";
this.showLineWin(!1);
this.hieuUng();
},
NoHuPlay: function() {
var t = cc.callFunc(function() {
cc.RedT.audio.playEf("jackpot");
n.numberTo(this.NoHu_Label, 0, this.H_win, 2e3, !0);
}, this);
this.NoHu.node.runAction(cc.sequence(cc.delayTime(.3), t));
},
NoHuFinish: function() {
this.isNoHu = !1;
this.NoHu.node.active = !1;
this.NoHu_Label.string = "";
this.isAuto && this.onAuto();
this.showLineWin(!1);
this.hieuUng();
},
EF_BonusFinish: function() {
this.isBonus = !1;
this.EF_Bonus.node.active = !1;
this.gameBonus.onPlay();
this.showLineWin(!1);
},
EF_FreeFinish: function() {
this.isFree = !1;
this.EF_Free.node.active = !1;
this.showLineWin(!1);
this.hieuUng();
},
EF_vuathang: function() {
this.showLineWin(!0);
this.vuathang.string = n.numberWithCommas(this.H_win);
this.buttonFree.active = !!this.H_free;
this.buttonSpin.active = !this.H_free;
this.freeLabel.string = this.H_free;
},
onChangerBetR: function() {
cc.RedT.audio.playClick();
this.betSelect++;
this.betSelect > 2 && (this.betSelect = 0);
this.bet.string = this.betString[this.betSelect];
this.tong.string = n.numberWithCommas(this.Line.data.length * n.getOnlyNumberInString(this.bet.string));
this.onGetHu();
},
onChangerBetL: function() {
cc.RedT.audio.playClick();
this.betSelect--;
this.betSelect < 0 && (this.betSelect = 2);
this.bet.string = this.betString[this.betSelect];
this.tong.string = n.numberWithCommas(this.Line.data.length * n.getOnlyNumberInString(this.bet.string));
this.onGetHu();
},
changerCoint: function() {
this.red = !this.red;
this.nodeRed.active = !this.nodeRed.active;
this.nodeXu.active = !this.nodeXu.active;
this.userData(cc.RedT.user);
this.onGetHu();
},
onClickSpin: function() {
cc.RedT.IS_SOUND && this.audioClick.play();
this.onSpin();
},
onAutoSpin: function() {
cc.RedT.IS_SOUND && this.audioClick.play();
this.onGetSpin();
},
onClickAuto: function() {
cc.RedT.audio.playClick();
this.onAuto();
},
onClickStop: function() {
cc.RedT.audio.playClick();
this.onStop();
},
onSpin: function() {
if (this.Line.data.length < 1) this.addNotice("Chọn ít nhất 1 dòng"); else {
this.setSpin();
if (!this.isSpin) {
this.node.stopAllActions();
void 0 !== this.eflineN && void 0 !== this.H_line_win && this.H_line_win.length && this.efOneLineWin(this.eflineN, !1);
this.eflineO = this.eflineN = 0;
this.isSpin = !0;
this.onGetSpin();
}
}
},
onAuto: function() {
this.isAuto = !this.isAuto;
this.buttonAuto.color = this.isAuto ? cc.Color.WHITE : cc.color(200, 200, 200);
this.buttonStop.active = this.isSpin;
},
onStop: function() {
this.isAuto = this.buttonStop.active = !1;
this.buttonAuto.active = !0;
this.buttonAuto.color = cc.color(200, 200, 200);
},
setSpin: function() {
this.buttonLine.pauseSystemEvents();
this.buttonSpin.pauseSystemEvents();
this.buttonCoint.pauseSystemEvents();
this.nodeChangerBetL.pauseSystemEvents();
this.nodeChangerBetR.pauseSystemEvents();
},
resetSpin: function() {
this.isAuto && this.onAuto();
this.isSpin = this.buttonStop.active = !1;
this.buttonAuto.active = !0;
this.buttonLine.resumeSystemEvents();
this.buttonSpin.resumeSystemEvents();
this.buttonCoint.resumeSystemEvents();
this.nodeChangerBetL.resumeSystemEvents();
this.nodeChangerBetR.resumeSystemEvents();
},
runReels: function() {
Promise.all(this.reels.map(function(t, e) {
t.spin(e);
}));
},
copy: function() {
Promise.all(this.reels.map(function(t) {
t.icons[t.icons.length - 1].setIcon(t.icons[2].data);
t.icons[t.icons.length - 2].setIcon(t.icons[1].data);
t.icons[t.icons.length - 3].setIcon(t.icons[0].data);
}));
},
random: function() {
Promise.all(this.reels.map(function(t) {
Promise.all(t.icons.map(function(e, i) {
i > 2 && i < t.icons.length - 3 && e.random();
}));
}));
},
onLineWin: function(t) {
var e = this;
Promise.all(this.H_line_win.map(function(i) {
Promise.all(e.Line.lines[i.line].map(function(i, n) {
e.efline.children[n].children[i].active = t;
}));
var n = e.Line.mainLine[i.line - 1];
if (t) {
n.onhover();
n.node.pauseSystemEvents();
} else {
n.offhover();
n.node.resumeSystemEvents();
}
}));
},
showLineWin: function(t) {
this.onLineWin(t);
if (!(t || this.isNoHu || this.isBigWin || this.isAuto || this.isFreeSpin)) {
this.eflineN = 0;
this.efLineWin();
}
},
efLineWin: function(t) {
if (this.H_line_win.length) {
this.node.stopAllActions();
void 0 === this.H_line_win[this.eflineN] && (this.eflineN = 0);
this.efOneLineWin(this.eflineN, !0);
var e = cc.callFunc(function() {
this.efOneLineWin(this.eflineN, !1);
this.eflineN += 1;
this.efLineWin();
}, this);
this.node.runAction(cc.sequence(cc.delayTime(1.5), e));
}
},
efOneLineWin: function(t, e) {
var i = this;
t = this.H_line_win[this.eflineN].line;
Promise.all(this.Line.lines[t].map(function(t, n) {
i.efline.children[n].children[t].active = e;
}));
var n = this.Line.mainLine[t - 1];
if (e) {
n.onhover();
n.node.pauseSystemEvents();
} else {
n.offhover();
n.node.resumeSystemEvents();
}
},
hieuUng: function() {
if (this.isBigWin && !this.isNoHu) {
this.BigWin.node.active = !0;
this.BigWin.play();
} else if (this.isNoHu) {
this.NoHu.node.active = !0;
this.NoHu.play();
} else if (this.isBonus) {
this.EF_Bonus.node.active = !0;
this.EF_Bonus.play();
cc.RedT.audio.playEf("bonus");
} else if (this.isFree) {
this.EF_Free.node.active = !0;
this.EF_Free.play();
} else if (this.H_win > 0) {
var t = new cc.Node();
t.addComponent(cc.Label);
(t = t.getComponent(cc.Label)).string = "+" + n.numberWithCommas(this.H_win);
t.font = cc.RedT.util.fontCong;
t.lineHeight = 130;
t.fontSize = 25;
t.node.position = cc.v2(0, 21);
this.nodeNotice.addChild(t.node);
t.node.runAction(cc.sequence(cc.moveTo(1.2, cc.v2(0, 105)), cc.callFunc(function() {
this.speed = 0;
t.node.destroy();
this.hieuUng();
this.showLineWin(!1);
}, this)));
this.H_win = 0;
} else this.isAuto || this.isFreeSpin ? this.timeOut = setTimeout(function() {
this.onAutoSpin();
this.speed = 400;
}.bind(this), this.speed) : this.resetSpin();
},
onData: function(t) {
if (void 0 !== t.user) {
this.userData(t.user);
cc.RedT.userData(t.user);
}
void 0 !== t.VuongQuocRed && this.VuongQuocRed(t.VuongQuocRed);
void 0 !== t.mini && null != cc.RedT.minigame && cc.RedT.minigame.onData(t.mini);
void 0 !== t.TopHu && cc.RedT.MiniPanel.TopHu.onData(t.TopHu);
void 0 !== t.taixiu && null != cc.RedT.minigame && cc.RedT.minigame.isLoadTaiXiu && cc.RedT.minigame.TaiXiu.TX_Main.onData(t.taixiu);
},
userData: function(t) {
this.red ? this.taikhoan.string = n.numberWithCommas(t.red) : this.taikhoan.string = n.numberWithCommas(t.xu);
},
VuongQuocRed: function(t) {
var e = this;
if (void 0 !== t.status) if (1 === t.status) {
this.buttonStop.active = !!this.isAuto;
this.buttonAuto.active = !this.buttonStop.active;
Promise.all(t.cel.map(function(t, i) {
Promise.all(t.map(function(t, n) {
e.reels[i].icons[n].setIcon(t, !0);
}));
}));
this.runReels();
this.H_line_win = t.line_win;
this.H_win = t.win;
this.H_free = t.free;
this.isBonus = t.isBonus;
this.isNoHu = t.isNoHu;
this.isBigWin = t.isBigWin;
this.isFree = t.isFree;
this.isFreeSpin = !!t.free;
} else this.resetSpin();
void 0 !== t.bonus && this.gameBonus.onData(t.bonus);
void 0 !== t.log && this.dialog.history.onData(t.log);
void 0 !== t.top && this.dialog.top.onData(t.top);
void 0 !== t.notice && this.addNotice(t.notice);
},
onGetSpin: function() {
cc.RedT.send({
g: {
vq_red: {
spin: {
cuoc: n.getOnlyNumberInString(this.bet.string),
red: this.red,
line: this.Line.data
}
}
}
});
},
addNotice: function(t) {
var e = cc.instantiate(this.prefabNotice);
e.getComponent("mini_warning").text.string = t;
this.nodeNotice.addChild(e);
},
backGame: function() {
this.loading.active = !0;
void 0 !== this.timeOut && clearTimeout(this.timeOut);
cc.director.loadScene("MainGame");
},
signOut: function() {
cc.director.loadScene("MainGame", function() {
cc.RedT.inGame.signOut();
});
},
onGetHu: function() {
var t = this;
if (void 0 !== cc.RedT.setting.topHu.data) {
var e = this, i = n.getOnlyNumberInString(e.bet.string);
Promise.all(cc.RedT.setting.topHu.data.vq_red.filter(function(t) {
return t.type == i && t.red == e.red;
})).then(function(e) {
var i = n.getOnlyNumberInString(t.hu.string), o = e[0].bet;
i - o != 0 && n.numberTo(t.hu, i, o, 2e3, !0);
});
}
},
BangThuongToggle: function() {
cc.RedT.audio.playClick();
this.bangThuong.active = !this.bangThuong.active;
},
playMusic: function() {
this.audioBG.play();
},
pauseMusic: function() {
this.audioBG.pause();
}
});
cc._RF.pop();
}, {
Helper: "Helper",
Notice: "Notice",
VQRed_dialog: "VQRed_dialog",
VuongQuocRed_line: "VuongQuocRed_line",
VuongQuocRed_playBonus: "VuongQuocRed_playBonus",
VuongQuocRed_reel: "VuongQuocRed_reel"
} ],
XengMain: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "e33c09tODtId6Xi8NGagYwa", "XengMain");
cc.Class({
extends: cc.Component,
properties: {
AnimationArrayItem: {
default: [],
type: [ cc.Animation ],
tooltip: "Biểu tượng mờ dần hoạt ảnh"
},
AudioSourceArrayItem: {
default: [],
type: [ cc.AudioSource ],
tooltip: "Hiệu ứng âm thanh chiến thắng của biểu tượng"
},
JiaSuDu_QiDong: {
default: 3,
tooltip: "Bắt đầu tăng tốc (cần đi qua một vài biểu tượng để tăng tốc đến tốc độ tối đa)"
},
JiaSuDu_ZhiDong: {
default: 3,
tooltip: "Tăng tốc của phanh (cần phải đi qua một số biểu tượng để giảm tốc và dừng lại)"
},
SpeedChangeForOneStep: {
default: .1,
tooltip: "Trong quá trình tăng hoặc giảm tốc, lượng thay đổi về tốc độ (thời gian) sau khi hoàn thành mỗi bước"
},
MaxSpeed: {
default: 12,
tooltip: "Số lượng biểu tượng nhấp nháy mỗi giây"
},
AudioSourceLaunch: {
default: null,
type: cc.AudioSource,
tooltip: "Kích hoạt âm thanh"
},
AudioSourcePaoMa: {
default: null,
type: cc.AudioSource,
tooltip: "Âm thanh đua ngựa"
},
AudioSourceStop: {
default: null,
type: cc.AudioSource,
tooltip: "Dừng âm thanh"
},
AudioSourceDaQiang: {
default: null,
type: cc.AudioSource,
tooltip: "Tiếng súng"
},
TimeIntervalDaQiang: {
default: .8,
tooltip: "Thời gian giữa hai lần chụp (giây)"
}
},
start: function() {
this._arrayLength = this.AnimationArrayItem.length;
this._currentIndex = 0;
this._timeForOneItem = 1 / this.MaxSpeed;
this._accTime = 0;
this._timeArrayJiaSu = new Array(this.JiaSuDu_QiDong);
this._timeArrayJianSu = new Array(this.JiaSuDu_ZhiDong);
for (var t = this._timeForOneItem, e = this.JiaSuDu_QiDong - 1; e > -1; e--) {
t += this.SpeedChangeForOneStep;
this._timeArrayJiaSu[e] = t;
}
t = this._timeForOneItem;
for (e = 0; e < this.JiaSuDu_ZhiDong; e++) {
t += this.SpeedChangeForOneStep;
this._timeArrayJianSu[e] = t;
}
this._indexJiaSu = -1;
this._indexJianSu = -1;
this._isMove = !1;
},
update: function(t) {
if (this._isJianSu && this._currentIndex === this._indexZhiDong) {
this._indexJiaSu = -1;
this._indexJianSu = 0;
this._isJianSu = !1;
this.AudioSourceStop.play();
}
if (this._indexJiaSu >= 0 || this._indexJianSu >= 0) {
if (this._indexJiaSu >= 0) {
this._accTime += t;
if (this._accTime > this._timeArrayJiaSu[this._indexJiaSu]) {
this._accTime = 0;
this.MoveAStep();
this._indexJiaSu++;
if (this._indexJiaSu >= this.JiaSuDu_QiDong) {
this._isMove = !0;
this._indexJiaSu = -1;
}
}
}
if (this._indexJianSu >= 0) {
this._accTime += t;
if (this._accTime > this._timeArrayJianSu[this._indexJianSu]) {
this._accTime = 0;
this.MoveAStep();
this._indexJianSu++;
if (this._indexJianSu >= this.JiaSuDu_ZhiDong) {
this._isMove = !1;
this._indexJianSu = -1;
this.AnimationArrayItem[this._currentIndex].stop();
this.AnimationArrayItem[this._currentIndex].node.opacity = 255;
this.AudioSourcePaoMa.stop();
this.AudioSourceArrayItem[this._currentIndex].play();
this.HandleLucky();
}
}
}
} else if (this._isMove) {
this._accTime += t;
if (this._accTime > this._timeForOneItem) {
this._accTime = 0;
this.MoveAStep();
}
}
},
Launch: function() {
for (var t = 0; t < this.AnimationArrayItem.length; t++) this.AnimationArrayItem[t].play();
this._indexJiaSu = 0;
this._indexJianSu = -1;
this.AudioSourceLaunch.play();
this.AudioSourcePaoMa.play();
},
Stop: function(t) {
this._indexZhiDong = (this._arrayLength + t - this.JiaSuDu_ZhiDong) % this._arrayLength;
this._isJianSu = !0;
},
StopLucky: function(t) {
var e = t[0];
this._indexZhiDong = (this._arrayLength + e - this.JiaSuDu_ZhiDong) % this._arrayLength;
this._isJianSu = !0;
this._itemArray = t;
this._itemArrayIndex = 0;
},
MoveAStep: function() {
this._currentIndex++;
this._currentIndex %= this._arrayLength;
this.AnimationArrayItem[this._currentIndex].play();
},
DispatchEvent: function() {
this.node.dispatchEvent(new cc.Event.EventCustom("Event_ZhuanPanStop", !0));
},
HandleLucky: function() {
if (0 === this._currentIndex || 12 === this._currentIndex) {
var t = 0;
console.log("处理Lucky的情况:", this._itemArray);
for (var e = 0; e < this._itemArray.length; e++) {
t += this.TimeIntervalDaQiang;
this.scheduleOnce(function() {
this.AudioSourceDaQiang.play();
this.AudioSourceArrayItem[this._itemArray[this._itemArrayIndex]].play();
this.AnimationArrayItem[this._itemArray[this._itemArrayIndex]].node.opacity = 255;
this._itemArrayIndex++;
}, t);
}
this.scheduleOnce(function() {
this.DispatchEvent();
}, t);
} else this.DispatchEvent();
}
});
cc._RF.pop();
}, {} ],
Xeng: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "392cffaeENJoIx/S2gWNMRb", "Xeng");
var n = t("XengMain"), o = t("stateMachine"), c = t("Helper"), s = null;
cc.Class({
extends: cc.Component,
properties: {
ZhuanPan: n,
MaxXiaZhu: {
default: 99,
tooltip: "Số lượng cược tối đa"
},
Interval: {
default: 2,
tooltip: "Khoảng thời gian (giây) phải chờ từ trạng thái bắt đầu đến trạng thái dừng"
},
ShowTime: {
default: 5,
tooltip: "Thời gian hiển thị chiến thắng (giây)"
},
Timeout: {
default: 10,
tooltip: "Đếm ngược thời gian chờ kết nối (giây)"
},
LabelJinBi: {
default: null,
type: cc.Label,
tooltip: "Văn bản tiền vàng"
},
LabelJiangLi: {
default: null,
type: cc.Label,
tooltip: "Văn bản trao giải"
},
PanelXinXi: {
default: null,
type: cc.Node,
tooltip: "Giao diện thông tin"
},
PanelQianBuGou: {
default: null,
type: cc.Node,
tooltip: "Giao diện không đủ tiền"
},
PanelQingXiaZhu: {
default: null,
type: cc.Node,
tooltip: "Vui lòng đặt cược giao diện"
},
NodeAudioParent: cc.Node,
stateMachine: o,
BtnArrayInteraction: {
default: [],
type: [ cc.Button ],
tooltip: "Tập hợp tất cả các nút cần thay đổi tính tương tác khi trạng thái thay đổi"
},
LabelArrayXiaZhu: {
default: [],
type: cc.Label,
tooltip: "Mảng nhãn của văn bản đặt cược"
},
ServerDataToLocalData: {
default: [],
type: [ cc.Integer ],
tooltip: "Dữ liệu chỉ mục máy chủ thành dữ liệu chỉ mục cục bộ"
},
show_duzhu: {
default: null,
type: cc.Label,
tooltip: "Lượng tiêm"
},
show_yazhu: {
default: null,
type: cc.Label,
tooltip: "Số tiền đặt cược đơn"
},
show_beilv: {
default: null,
type: cc.Label,
tooltip: "phóng đại"
},
icon: {
default: [],
type: cc.SpriteFrame
},
show_history: {
default: null,
type: cc.Node,
tooltip: "Nút lịch sử"
},
history_shuiguo: {
default: null,
type: cc.Prefab,
tooltip: "Biểu tượng trái cây lịch sử"
}
},
onDestroy: function() {},
onLoad: function() {
cc.RedT.inGame = this;
},
start: function() {
cc.RedT.send({
scene: "xeng"
});
s = {
playerCoin: cc.RedT.user.red
};
this.LabelJinBi.string = c.numberWithCommas(cc.RedT.user.red);
this._itemArrayLength = this.LabelArrayXiaZhu.length;
this._intArrayXiaZhu = new Array(this._itemArrayLength);
this.duzhuMoney = 1e3;
this.beilv = 1;
this.show_yazhu.string = this.duzhuMoney;
for (var t = 0; t < this._itemArrayLength; t++) this._intArrayXiaZhu[t] = 0;
this.RefreshLabel();
this._autoFlag = !1;
var e = this;
this.node.on("Event_ZhuanPanStop", function(t) {
t.stopPropagation();
e._winCoin > 0 ? e.stateMachine.Input_Ready(e.ShowTime) : e.stateMachine.Input_Ready(.01);
});
this.node.on("Event_StateChange", function(t) {
t.stopPropagation();
switch (t.detail) {
case 0:
e.SetPanelInteraction(!0);
break;

case 1:
e.SetPanelInteraction(!1);
e.ZhuanPan.Launch();
for (var i = [], n = 0; n < e._intArrayXiaZhu.length; n++) i[n] = e._intArrayXiaZhu[n] * e.duzhuMoney * e.beilv;
cc.RedT.send({
g: {
xeng: {
spin: {
nBetList: i
}
}
}
});
s.playerCoin = s.playerCoin - e.GetDuZhu();
e.LabelJinBi.string = c.numberWithCommas(s.playerCoin);
break;

case 2:
if (e._listWinLines.length > 1) {
for (var o = e._listWinLines.length, a = new Array(o), h = 0; h < o; h++) a[h] = e.ServerDataToLocalData[e._listWinLines[h]];
e.ZhuanPan.StopLucky(a);
} else e.ZhuanPan.Stop(e.ServerDataToLocalData[e._listWinLines[0]]);
e.history(e._listWinLines[0]);
break;

case 3:
e.LabelJinBi.string = c.numberWithCommas(s.playerCoin);
e.LabelJiangLi.string = e._winCoin;
e._winCoin > 0 && cc.loader.loadRes("WinCoins", function(t, i) {
var n = cc.instantiate(i);
n.parent = cc.find("Canvas");
n.x = 0;
n.y = 0;
var o = n.getPosition(), c = n.convertToWorldSpaceAR(cc.v2(0, 0)), s = e.LabelJinBi.node.convertToWorldSpaceAR(cc.v2(0, 0)), a = new cc.Vec2(s.x - c.x, s.y - c.y), h = a.x;
a.x = a.y;
a.y = -h;
var r = new cc.Vec2(o.x + a.x, o.y + a.y);
n.getComponent("winCoins").Initialize(e._winCoin, o, r);
});
break;

case 4:
e.ZhuanPan.Stop(0);
}
});
},
update: function(t) {
0 === this.stateMachine.GetState() && this._autoFlag && this.onBtnClick_KaiShi();
},
onData: function(t) {
void 0 !== t.xeng && this.Xeng(t.xeng);
},
Xeng: function(t) {
if (void 0 !== t.Result && void 0 !== t.Result.status && 1 === t.Result.status) {
var e = {
red: t.Result.userscore
};
cc.RedT.userData(e);
this.onBet(null, t.Result.dictAnalyseResult, t.Result);
}
},
onBtnClick_XinXi: function() {
this.PanelXinXi.active = !this.PanelXinXi.active;
},
onBtnClick_KaiShi: function() {
var t = this.GetDuZhu();
t <= 0 ? this.PanelQingXiaZhu.active = !0 : t > s.playerCoin ? this.PanelQianBuGou.active = !0 : this.stateMachine.Input_Start(this.Interval, this.Timeout);
},
onBtnClick_xiazhu: function(t, e) {
if (this._intArrayXiaZhu[e] < this.MaxXiaZhu) {
this._intArrayXiaZhu[e]++;
this.RefreshLabel();
}
},
onBtnClick_addMoney: function() {
if (!(this.duzhuMoney > 900)) {
this.duzhuMoney += 100;
this.show_yazhu.string = this.duzhuMoney;
}
},
onBtnClick_delMoney: function() {
if (!(this.duzhuMoney <= 100)) {
this.duzhuMoney -= 100;
this.show_yazhu.string = this.duzhuMoney;
}
},
onBtnClick_addBeiLv: function() {
this.beilv >= 10 || this.beilv++;
},
onBtnClick_delBeiLv: function() {
this.beilv <= 1 || this.beilv--;
},
onBtnClick_xiazhu_all: function() {
for (var t = 0; t < this._itemArrayLength; t++) this._intArrayXiaZhu[t] < this.MaxXiaZhu && this._intArrayXiaZhu[t]++;
this.RefreshLabel();
},
onBtnClick_clear: function() {
for (var t = 0; t < this._itemArrayLength; t++) this._intArrayXiaZhu[t] = 0;
this.RefreshLabel();
},
RefreshLabel: function() {
for (var t, e = 0; e < this._itemArrayLength; e++) {
t = this._intArrayXiaZhu[e] < 10 ? "0" + this._intArrayXiaZhu[e] : this._intArrayXiaZhu[e];
this.LabelArrayXiaZhu[e].string = t;
}
},
onToggleClick_ZiDong: function(t, e) {
this._autoFlag = !t.isChecked;
},
onToggleClick_ShengYin: function(t, e) {
if (!0 === t.isChecked) for (var i = 0; i < this.NodeAudioParent.children.length; i++) this.NodeAudioParent.children[i].getComponent(cc.AudioSource).volume = 1; else for (i = 0; i < this.NodeAudioParent.children.length; i++) this.NodeAudioParent.children[i].getComponent(cc.AudioSource).volume = 0;
},
onBtnClick_BackHall: function() {
void 0 !== this.timeOut && clearTimeout(this.timeOut);
cc.director.loadScene("MainGame");
},
signOut: function() {
cc.director.loadScene("MainGame", function() {
cc.RedT.inGame.signOut();
});
},
onBtnClick_closePanel: function(t, e) {
t.target.parent.active = !1;
},
onBet: function(t, e, i) {
this._winCoin = e.win;
this._listWinLines = e.nWinLines;
this.stateMachine.Input_Stop();
s.playerCoin = i.userscore;
},
SetPanelInteraction: function(t) {
for (var e = this.BtnArrayInteraction.length, i = 0; i < e; i++) this.BtnArrayInteraction[i].interactable = t;
},
GetDuZhu: function() {
for (var t = 0, e = 0; e < this._itemArrayLength; e++) t += this._intArrayXiaZhu[e] * this.duzhuMoney * this.beilv;
return t;
},
onFreeTime: function(t) {},
history: function(t) {
if (null != this._winCoin && 0 != this._winCoin) {
var e = this.show_history.children;
e.length >= 8 && e[7].destroy();
e.length > 0 && (e[0].zIndex = 0);
var i = cc.instantiate(this.history_shuiguo);
i.getComponent(cc.Sprite).spriteFrame = this.icon[t];
i.zIndex = -1;
i.parent = this.show_history;
}
}
});
cc._RF.pop();
}, {
Helper: "Helper",
XengMain: "XengMain",
stateMachine: "stateMachine"
} ],
XoSo_History: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "6525embjElLuYUiOmITMU6B", "XoSo_History");
var n = t("XoSo_MBHistory");
cc.Class({
extends: cc.Component,
properties: {
MienBac: n
},
onData: function(t) {
if (void 0 !== t.mb) {
console.log(t.mb);
this.MienBac.onData(t.mb);
}
}
});
cc._RF.pop();
}, {
XoSo_MBHistory: "XoSo_MBHistory"
} ],
XoSo_KetQua: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "05eacVPi8xBKbT1lt1xSw6v", "XoSo_KetQua");
var n = t("kq_xsmb");
cc.Class({
extends: cc.Component,
properties: {
MienBac: n
},
onData: function(t) {
void 0 !== t.mb && this.MienBac.onData(t.mb);
}
});
cc._RF.pop();
}, {
kq_xsmb: "kq_xsmb"
} ],
XoSo_MBHistory_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "ac3343HcChC0o2BYBlNuPKt", "XoSo_MBHistory_item");
cc.Class({
extends: cc.Component,
properties: {
bg: cc.Node,
time: cc.Label,
loai: cc.Label,
so: cc.Label,
diem: cc.Label,
cuoc: cc.Label,
win: cc.Label,
status: cc.Label
}
});
cc._RF.pop();
}, {} ],
XoSo_MBHistory: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "06a9fZAyFBBtKSyOPZt3z5t", "XoSo_MBHistory");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
content: cc.Node
},
onLoad: function() {
var t = this, e = cc.instantiate(this.page);
e.y = -324;
this.node.addChild(e);
this.page = e.getComponent("Pagination");
this.page.init(this);
Promise.all(this.content.children.map(function(t) {
return t.getComponent("XoSo_MBHistory_item");
})).then(function(e) {
t.content = e;
});
this.get_data();
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
g: {
xs: {
mb: {
history: t
}
}
}
});
},
onData: function(t) {
var e = this;
this.page.onSet(t.page, t.kmess, t.total);
this.content.forEach(function(i, o) {
var c = t.data[o];
if (void 0 !== c) {
i.node.active = !0;
i.bg.active = o % 2;
i.time.string = n.getStringDateByTime(c.time);
i.loai.string = e.getLoai(c.type);
i.so.string = c.so.join(", ");
i.diem.string = n.numberWithCommas(c.diem);
i.cuoc.string = n.numberWithCommas(c.cuoc);
i.win.string = n.numberWithCommas(c.win);
i.status.string = c.thanhtoan ? "Đã Sổ" : "Chờ Sổ";
i.status.node.color = c.thanhtoan ? cc.color(0, 255, 0, 255) : cc.color(255, 214, 0, 255);
} else i.node.active = !1;
});
},
getLoai: function(t) {
switch (t) {
case "lo2":
return "Lô 2 Số";

case "lo21k":
return "Lô 2 Số 1k";

case "lo3":
return "Lô 3 Số";

case "lo4":
return "Lô 4 Số";

case "xien2":
return "Xiên 2";

case "xien3":
return "Xiên 3";

case "xien4":
return "Xiên 4";

case "de":
return "Đề";

case "daude":
return "Đầu Đề";

case "degiai7":
return "Đề Giải 7";

case "degiai1":
return "Đề Giải Nhất";

case "3cang":
return "3 Càng";

case "4cang":
return "4 Càng";

case "dau":
return "Đầu";

case "duoi":
return "Đuôi";

case "truot4":
return "Trượt 4";

case "truot8":
return "Trượt 8";

case "truot10":
return "Trượt 10";
}
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
XoSo_MBThongKe_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "d09d3pLxFVMZZHNxiijYAiT", "XoSo_MBThongKe_item");
cc.Class({
extends: cc.Component,
properties: {
bg: cc.Node,
time: cc.Label,
loai: cc.Label,
so: cc.Label,
diem: cc.Label,
cuoc: cc.Label,
win: cc.Label,
nickname: cc.Label,
status: cc.Label
}
});
cc._RF.pop();
}, {} ],
XoSo_MBThongKe: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "16a88bSBVZNGKbjiobDL3qK", "XoSo_MBThongKe");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
content: cc.Node
},
onLoad: function() {
var t = this, e = cc.instantiate(this.page);
e.y = -324;
this.node.addChild(e);
this.page = e.getComponent("Pagination");
this.page.init(this);
Promise.all(this.content.children.map(function(t) {
return t.getComponent("XoSo_MBThongKe_item");
})).then(function(e) {
t.content = e;
});
this.get_data();
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
g: {
xs: {
mb: {
thongke: t
}
}
}
});
},
onData: function(t) {
var e = this;
this.page.onSet(t.page, t.kmess, t.total);
this.content.forEach(function(i, o) {
var c = t.data[o];
if (void 0 !== c) {
i.node.active = !0;
i.bg.active = o % 2;
i.time.string = n.getStringDateByTime(c.time);
i.loai.string = e.getLoai(c.type);
i.so.string = c.so.join(", ");
i.diem.string = n.numberWithCommas(c.diem);
i.nickname.string = c.name;
i.cuoc.string = n.numberWithCommas(c.cuoc);
i.win.string = n.numberWithCommas(c.win);
} else i.node.active = !1;
});
},
getLoai: function(t) {
switch (t) {
case "lo2":
return "Lô 2 Số";

case "lo21k":
return "Lô 2 Số 1k";

case "lo3":
return "Lô 3 Số";

case "lo4":
return "Lô 4 Số";

case "xien2":
return "Xiên 2";

case "xien3":
return "Xiên 3";

case "xien4":
return "Xiên 4";

case "de":
return "Đề";

case "daude":
return "Đầu Đề";

case "degiai7":
return "Đề Giải 7";

case "degiai1":
return "Đề Giải Nhất";

case "3cang":
return "3 Càng";

case "4cang":
return "4 Càng";

case "dau":
return "Đầu";

case "duoi":
return "Đuôi";

case "truot4":
return "Trượt 4";

case "truot8":
return "Trượt 8";

case "truot10":
return "Trượt 10";
}
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
XoSo_Main_Main: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "e57d5GbJYdPJaTehdXI/JqM", "XoSo_Main_Main");
var n = t("Helper").numberPad;
cc.Class({
extends: cc.Component,
properties: {
time_mb: cc.Label
},
update: function(t) {
var e = new Date();
e.setHours(18, 0, 0, 0, 0);
var i = (e = e.getTime()) - new Date().getTime(), o = Math.floor(i % 864e5 / 36e5), c = Math.floor(i % 36e5 / 6e4), s = Math.floor(i % 6e4 / 1e3);
this.time_mb.string = i < 0 ? "" : n(o, 2) + ":" + n(c, 2) + ":" + n(s, 2);
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
XoSo_Main: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "949d6KzSglCXrlqSMpvyQvX", "XoSo_Main");
var n = t("XoSo_History"), o = t("XoSo_KetQua"), c = t("XoSo_ThongKe");
cc.Class({
extends: cc.Component,
properties: {
right: cc.Node,
History: n,
KetQua: o,
ThongKe: c
},
init: function(t) {
this.RedT = t;
},
showMain: function() {
this.right.children.forEach(function(t) {
"Main" === t.name ? t.active = !0 : t.active = !1;
});
},
onHistoryClick: function(t, e) {
this.RedT.position = "History";
this.right.children.forEach(function(t) {
if ("History" === t.name) {
t.active = !0;
t.children.forEach(function(t) {
t.name === e ? t.active = !0 : t.active = !1;
});
} else t.active = !1;
});
},
onThongKeClick: function(t, e) {
this.RedT.position = "ThongKe";
this.right.children.forEach(function(t) {
if ("ThongKe" === t.name) {
t.active = !0;
t.children.forEach(function(t) {
t.name === e ? t.active = !0 : t.active = !1;
});
} else t.active = !1;
});
},
onKetQuaClick: function(t, e) {
this.RedT.position = "KetQua";
this.right.children.forEach(function(t) {
if ("KetQua" === t.name) {
t.active = !0;
t.children.forEach(function(t) {
t.name === e ? t.active = !0 : t.active = !1;
});
} else t.active = !1;
});
}
});
cc._RF.pop();
}, {
XoSo_History: "XoSo_History",
XoSo_KetQua: "XoSo_KetQua",
XoSo_ThongKe: "XoSo_ThongKe"
} ],
XoSo_MienBac: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "479d04nY+1D8at8J2cAuNJP", "XoSo_MienBac");
cc.Class({
extends: cc.Component,
properties: {
header: cc.Node,
body: cc.Node
},
onSelectType: function(t) {
var e = t.target.name;
this.header.children.forEach(function(t) {
if (t.name === e) {
t.pauseSystemEvents();
t.opacity = 255;
} else {
t.resumeSystemEvents();
t.opacity = 99;
}
});
this.body.children.forEach(function(t) {
t.name === e ? t.active = !0 : t.active = !1;
});
}
});
cc._RF.pop();
}, {} ],
XoSo_ThongKe: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "34990YZxuRMmIa219cL5tCj", "XoSo_ThongKe");
var n = t("XoSo_MBThongKe");
cc.Class({
extends: cc.Component,
properties: {
MienBac: n
},
onData: function(t) {
if (void 0 !== t.mb) {
console.log(t.mb);
this.MienBac.onData(t.mb);
}
}
});
cc._RF.pop();
}, {
XoSo_MBThongKe: "XoSo_MBThongKe"
} ],
XoSo_select_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "61675TPqG5KgLFHTaCss4/w", "XoSo_select_item");
cc.Class({
extends: cc.Component,
properties: {
nodeOn: cc.Node,
nodeOff: cc.Node,
text: cc.Label,
select: !1
},
init: function(t) {
this.RedT = t;
},
onChanger: function() {
this.select = !this.select;
this.nodeOn.active = this.select;
this.nodeOff.active = !this.select;
},
onClickSelect: function() {
this.onChanger();
this.RedT.refreshH(this);
},
selectOn: function() {
this.select = !0;
this.nodeOn.active = !0;
this.nodeOff.active = !1;
},
selectOff: function() {
this.select = !1;
this.nodeOn.active = !1;
this.nodeOff.active = !0;
}
});
cc._RF.pop();
}, {} ],
XoSo: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "69933PZVIFBOZhrxWlp0GLT", "XoSo");
var n = t("Helper"), o = t("Notice"), c = t("XoSo_Main");
cc.Class({
extends: cc.Component,
properties: {
redhat: cc.Node,
balans: cc.Label,
username: cc.Label,
today: cc.Label,
nodeNotice: cc.Node,
prefabNotice: cc.Prefab,
MiniPanel: cc.Prefab,
loading: cc.Node,
notice: o,
XoSo_Main: c,
games: cc.Node,
position: ""
},
onLoad: function() {
cc.RedT.inGame = this;
cc.RedT.send({
scene: "xo_so"
});
this.username.string = cc.RedT.user.name;
this.balans.string = n.numberWithCommas(cc.RedT.user.red);
this.XoSo_Main.init(this);
},
onData: function(t) {
console.log(t);
if (void 0 !== t.user) {
this.userData(t.user);
cc.RedT.userData(t.user);
}
void 0 !== t.XoSo && this.XoSo(t.XoSo);
void 0 !== t.mini && null != cc.RedT.minigame && cc.RedT.minigame.onData(t.mini);
void 0 !== t.TopHu && cc.RedT.MiniPanel.TopHu.onData(t.TopHu);
void 0 !== t.taixiu && null != cc.RedT.minigame && cc.RedT.minigame.isLoadTaiXiu && cc.RedT.minigame.TaiXiu.TX_Main.onData(t.taixiu);
void 0 !== t.notice && this.notice.show(t.notice);
},
XoSo: function(t) {
void 0 !== t.notice && this.addNotice(t.notice);
void 0 !== t.history && this.XoSo_Main.History.onData(t.history);
void 0 !== t.kq && this.XoSo_Main.KetQua.onData(t.kq);
void 0 !== t.thongke && this.XoSo_Main.ThongKe.onData(t.thongke);
},
userData: function(t) {
this.balans.string = n.numberWithCommas(t.red);
},
addNotice: function(t) {
var e = cc.instantiate(this.prefabNotice);
e.getComponent("mini_warning").text.string = t;
this.nodeNotice.addChild(e);
},
backGame: function() {
switch (this.position) {
case "Main":
this.loading.active = !0;
void 0 !== this.timeOut && clearTimeout(this.timeOut);
cc.director.loadScene("MainGame");
break;

case "MienBac":
this.onSelectDat(null, "Main");
break;

case "History":
case "ThongKe":
case "KetQua":
this.XoSo_Main.showMain();
this.onSelectDat(null, "Main");
}
},
signOut: function() {
cc.director.loadScene("MainGame", function() {
cc.RedT.inGame.signOut();
});
},
update: function() {
var t = new Date();
this.today.string = this.day(t.getDay()) + " " + n.addZero10(t.getDate()) + "/" + n.addZero10(t.getMonth() + 1) + "/" + t.getFullYear() + " " + n.addZero10(t.getHours()) + ":" + n.addZero10(t.getMinutes()) + ":" + n.addZero10(t.getSeconds());
},
day: function(t) {
var e = new Array(7);
e[0] = "CN";
e[1] = "T2";
e[2] = "T3";
e[3] = "T4";
e[4] = "T5";
e[5] = "T6";
e[6] = "T7";
return e[t];
},
onSelectDat: function(t, e) {
this.position = e;
this.games.children.forEach(function(t) {
t.name === e ? t.active = !0 : t.active = !1;
});
}
});
cc._RF.pop();
}, {
Helper: "Helper",
Notice: "Notice",
XoSo_Main: "XoSo_Main"
} ],
XocXoc_dialog: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "c4aaeEmL4tMTYKZKZDHN9hV", "XocXoc_dialog");
var n = t("XocXoc_history"), o = t("XocXoc_top");
cc.Class({
extends: cc.Component,
properties: {
history: n,
top: o
},
init: function() {
this.actionShow = cc.spawn(cc.scaleTo(.5, 1).easing(cc.easeBackOut(2.5)), cc.fadeTo(.5, 255));
this.objShow = null;
this.objTmp = null;
},
onClickBack: function() {
cc.RedT.audio.playUnClick();
this.onBack();
},
onBack: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = !1;
this.node.active = !1;
this.objShow = null;
} else {
this.objTmp = this.objShow;
this.objShow = this.objShow.previous;
this.objTmp.previous = null;
this.objTmp.active = !1;
this.objShow.active = !0;
this.objTmp = null;
} else this.node.active = !1;
},
onClosePrevious: function(t) {
if (void 0 !== t.previous && null !== t.previous) {
this.onClosePrevious(t.previous);
delete t.previous;
}
t.active = !1;
},
onCloseDialog: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = this.node.active = !1;
this.objShow = null;
} else {
this.onClosePrevious(this.objShow.previous);
this.objShow.active = this.node.active = !1;
delete this.objShow.previous;
this.objShow = null;
} else this.node.active = !1;
},
resetSizeDialog: function(t) {
t.stopAllActions();
t.scale = .5;
t.opacity = 0;
},
showHistory: function() {
this.node.active = this.history.node.active = !0;
this.objShow = this.history.node;
},
showTop: function() {
this.node.active = this.top.node.active = !0;
this.objShow = this.top.node;
}
});
cc._RF.pop();
}, {
XocXoc_history: "XocXoc_history",
XocXoc_top: "XocXoc_top"
} ],
XocXoc_history_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "281e41bbTJA6rvy6BRfTh1a", "XocXoc_history_item");
cc.Class({
extends: cc.Component,
properties: {
bg: cc.Node,
time: cc.Label,
phien: cc.Label,
kqSprite: cc.Sprite,
kqLabel: cc.Label,
chan: cc.Label,
le: cc.Label,
red3: cc.Label,
red4: cc.Label,
white3: cc.Label,
white4: cc.Label,
win: cc.Label
}
});
cc._RF.pop();
}, {} ],
XocXoc_history: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "358d0RyfQlNvKbc/4deKLy1", "XocXoc_history");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
iconRed: cc.SpriteFrame,
iconWhite: cc.SpriteFrame,
red: !0
},
onLoad: function() {
var t = this, e = cc.instantiate(this.page);
e.y = -263;
this.node.addChild(e);
this.page = e.getComponent("Pagination");
Promise.all(this.content.children.map(function(t) {
return t.getComponent("XocXoc_history_item");
})).then(function(e) {
t.content = e;
});
this.page.init(this);
},
onEnable: function() {
this.get_data();
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
g: {
xocxoc: {
log: {
red: this.red,
page: t
}
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
var e = this;
this.page.onSet(t.page, t.kmess, t.total);
Promise.all(this.content.map(function(i, o) {
var c = t.data[o];
if (void 0 !== c) {
i.node.active = !0;
i.bg.active = o % 2;
i.time.string = n.getStringDateByTime(c.time);
i.phien.string = c.phien;
var s = 0;
c.kq.forEach(function(t) {
t && s++;
});
i.kqSprite.spriteFrame = 0 === s ? e.iconRed : s % 2 ? e.iconRed : e.iconWhite;
i.kqLabel.string = 0 === s ? 4 : s;
i.chan.string = n.numberWithCommas(c.chan);
i.le.string = n.numberWithCommas(c.le);
i.red3.string = n.numberWithCommas(c.red3);
i.red4.string = n.numberWithCommas(c.red4);
i.white3.string = n.numberWithCommas(c.white3);
i.white4.string = n.numberWithCommas(c.white4);
i.win.string = n.numberWithCommas(c.betwin);
if (s % 2) {
i.le.node.color = cc.Color.YELLOW;
i.chan.node.color = cc.Color.WHITE;
} else {
i.chan.node.color = cc.Color.YELLOW;
i.le.node.color = cc.Color.WHITE;
}
i.white4.node.color = 0 === s ? cc.Color.YELLOW : cc.Color.WHITE;
i.white3.node.color = 1 === s ? cc.Color.YELLOW : cc.Color.WHITE;
i.red3.node.color = 3 === s ? cc.Color.YELLOW : cc.Color.WHITE;
i.red4.node.color = 4 === s ? cc.Color.YELLOW : cc.Color.WHITE;
} else i.node.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
XocXoc_top: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "b5de3R6mw5PGbEgZCU2QLsG", "XocXoc_top");
cc.Class({
extends: cc.Component,
properties: {},
start: function() {}
});
cc._RF.pop();
}, {} ],
XocXoc: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "24723lmj75OaaA5CAEsELDw", "XocXoc");
var n = function() {
function t(t, e) {
var i = [], n = !0, o = !1, c = void 0;
try {
for (var s, a = t[Symbol.iterator](); !(n = (s = a.next()).done); n = !0) {
i.push(s.value);
if (e && i.length === e) break;
}
} catch (t) {
o = !0;
c = t;
} finally {
try {
!n && a.return && a.return();
} finally {
if (o) throw c;
}
}
return i;
}
return function(e, i) {
if (Array.isArray(e)) return e;
if (Symbol.iterator in Object(e)) return t(e, i);
throw new TypeError("Invalid attempt to destructure non-iterable instance");
};
}(), o = t("Helper"), c = t("Notice"), s = t("XocXoc_dialog");
cc.Class({
extends: cc.Component,
properties: {
audioMoBat: cc.AudioSource,
audioSingleChip: cc.AudioSource,
audioMultiChip: cc.AudioSource,
audioXocDia: cc.AudioSource,
audioMultiChip2: cc.AudioSource,
audioMultiChip3: cc.AudioSource,
audioMultiChip4: cc.AudioSource,
audioMultiChip5: cc.AudioSource,
effect_chan: cc.Node,
effect_le: cc.Node,
box_chan: cc.Node,
box_le: cc.Node,
box_red3: cc.Node,
box_red4: cc.Node,
box_white3: cc.Node,
box_white4: cc.Node,
total_chan: cc.Label,
total_le: cc.Label,
total_red3: cc.Label,
total_red4: cc.Label,
total_white3: cc.Label,
total_white4: cc.Label,
me_chan: cc.Label,
me_le: cc.Label,
me_red3: cc.Label,
me_red4: cc.Label,
me_white3: cc.Label,
me_white4: cc.Label,
me_name: cc.Label,
me_balans: cc.Label,
nodeTime: {
type: cc.Node,
default: null
},
labelTime: {
type: cc.Label,
default: null
},
timeWait: {
type: cc.Label,
default: null
},
nodeWait: {
type: cc.Node,
default: null
},
box_chip: cc.Node,
users_bg: cc.Node,
users_count: cc.Label,
nodeBat: cc.Node,
chip_1000: cc.SpriteFrame,
chip_5000: cc.SpriteFrame,
chip_20000: cc.SpriteFrame,
chip_50000: cc.SpriteFrame,
chip_100000: cc.SpriteFrame,
chip_500000: cc.SpriteFrame,
dot_red: cc.SpriteFrame,
dot_white: cc.SpriteFrame,
dot: {
default: [],
type: cc.Sprite
},
log_chan: cc.Label,
log_le: cc.Label,
log_top: cc.Node,
logMain: cc.Node,
redH: cc.Node,
miniNotice: cc.Node,
Animation: cc.Animation,
prefabNotice: cc.Prefab,
bet: cc.Node,
nodeRed: cc.Node,
nodeXu: cc.Node,
MiniPanel: cc.Prefab,
loading: cc.Node,
notice: c,
dialog: s,
red: !0
},
ctor: function() {
this.logs = [];
this.nan = !1;
this.cuoc = "1000";
this.actionBatOpen = cc.moveTo(.5, cc.v2(170, 120));
this.actionBatClose = cc.sequence(cc.callFunc(function() {
this.resetData();
}, this), cc.moveTo(.5, cc.v2(0, 0)), cc.delayTime(.5), cc.callFunc(function() {
this.audioXocDia.play();
this.Animation.play();
}, this));
this.maxDot = {
x: 44,
y: 44
};
this.maxBox1_3 = {
x: 40,
y: 40
};
this.maxBox1_1 = {
x: 90,
y: 90
};
this.clients = {
red: {
chan: 0,
le: 0,
red3: 0,
red4: 0,
white3: 0,
white4: 0
},
xu: {
chan: 0,
le: 0,
red3: 0,
red4: 0,
white3: 0,
white4: 0
}
};
this.logcuoc = {
red: {
chan: 0,
le: 0,
red3: 0,
red4: 0,
white3: 0,
white4: 0
}
};
this.users = {
red: {
chan: 0,
le: 0,
red3: 0,
red4: 0,
white3: 0,
white4: 0
},
xu: {
chan: 0,
le: 0,
red3: 0,
red4: 0,
white3: 0,
white4: 0
}
};
},
onLoad: function() {
cc.RedT.inGame = this;
this.logMain = this.logMain.children.map(function(t) {
return t.children[0].getComponent(cc.Sprite);
});
this.logMain.reverse();
this.log_top = this.log_top.children.map(function(t) {
var e = {
cell: t
}, i = t.children.map(function(t) {
return {
c: t.children[0].getComponent(cc.Sprite),
t: t.children[1].getComponent(cc.Label)
};
});
i.reverse();
e.data = i;
return e;
});
this.log_top.reverse();
this.me_name.string = cc.RedT.user.name;
this.me_balans.string = o.numberWithCommas(cc.RedT.user.red);
cc.RedT.send({
scene: "xocxoc",
g: {
xocxoc: {
ingame: !0
}
}
});
},
onData: function(t) {
if (void 0 !== t.user) {
this.userData(t.user);
cc.RedT.userData(t.user);
}
void 0 !== t.xocxoc && this.xocxoc(t.xocxoc);
void 0 !== t.mini && null != cc.RedT.minigame && cc.RedT.minigame.onData(t.mini);
void 0 !== t.TopHu && cc.RedT.MiniPanel.TopHu.onData(t.TopHu);
void 0 !== t.taixiu && null != cc.RedT.minigame && cc.RedT.minigame.isLoadTaiXiu && cc.RedT.minigame.TaiXiu.TX_Main.onData(t.taixiu);
},
backGame: function() {
clearInterval(this.timeInterval);
cc.RedT.send({
g: {
xocxoc: {
outgame: !0
}
}
});
cc.RedT.inGame.notice.show({
title: "Thoát game",
text: "Xác nhận hành động.\nHành động thực hiện thoát khỏi game này?",
button: {
type: "exit_game",
text: "Thoát"
}
});
},
signOut: function() {
clearInterval(this.timeInterval);
cc.director.preloadScene("MainGame", function() {
cc.director.loadScene("MainGame", function() {
cc.RedT.inGame.signOut();
});
});
},
userData: function(t) {
this.red && (this.me_balans.string = o.numberWithCommas(t.red));
},
xocxoc: function(t) {
t.ingame && this.xocxocIngame(t.ingame);
t.finish && this.xocxocFinish(t.finish);
t.history && this.dialog.history.onData(t.history);
t.top;
t.status && this.status(t.status);
t.chip && this.clientsChip(t.chip);
t.mechip;
t.client && this.updateClient(t.client);
t.me && this.updateMe(t.me);
void 0 !== t.notice && this.addNotice(t.notice);
},
xocxocIngame: function(t) {
t.client && this.countClient(t.client);
t.chip && this.ingameChip(t.chip);
if (t.time) {
this.time_remain = t.time - 1;
this.playTime();
if (this.time_remain > 32 && t.logs.length) {
this.nodeBat.position = cc.v2(0, 246);
this.setDot([ t.logs[0].red1, t.logs[0].red2, t.logs[0].red3, t.logs[0].red4 ]);
}
}
t.data && this.updateData(t.data);
if (t.logs) {
this.logs = t.logs;
this.setLogs();
}
t.me && this.updateMe(t.me);
t.chats;
},
ingameChip: function(t) {
var e = !0, i = !1, o = void 0;
try {
for (var c, s = Object.entries(t)[Symbol.iterator](); !(e = (c = s.next()).done); e = !0) {
var a = c.value, h = n(a, 2), r = h[0], l = h[1], u = this.maxBox1_3;
switch (t.box) {
case "chan":
case "le":
u = this.maxBox1_1;
}
var d = !0, p = !1, g = void 0;
try {
for (var m, f = Object.entries(l)[Symbol.iterator](); !(d = (m = f.next()).done); d = !0) {
var v = m.value, b = n(v, 2), T = b[0], _ = b[1];
if (_ > 0) for (;_; ) {
var C = Math.random() * (u.x + 1) >> 0, y = Math.random() * (u.y + 1) >> 0, S = new cc.Node();
(S = S.addComponent(cc.Sprite)).spriteFrame = this["chip_" + T];
S.node.position = cc.v2(C, y);
S.node.scale = 1;
this["box_" + r].children[1].addChild(S.node);
_--;
}
}
} catch (t) {
p = !0;
g = t;
} finally {
try {
!d && f.return && f.return();
} finally {
if (p) throw g;
}
}
}
} catch (t) {
i = !0;
o = t;
} finally {
try {
!e && s.return && s.return();
} finally {
if (i) throw o;
}
}
},
xocxocFinish: function(t) {
var e = {
red1: t[0],
red2: t[1],
red3: t[2],
red4: t[3]
};
this.logs.unshift(e);
this.logs.length > 48 && this.logs.pop();
this.setDot(t);
this.nodeTime[0].active = !1;
this.time_remain = 43;
this.playTime();
this.nan || this.FinishTT();
},
FinishTT: function() {
this.audioMoBat.play();
this.nodeBat.runAction(cc.sequence(this.actionBatOpen, cc.callFunc(this.showKQ, this), cc.delayTime(1), cc.callFunc(this.showKQ2, this)));
this.setLogs();
},
showKQ: function() {
var t = 0;
Object.values(this.logs[0]).forEach(function(e) {
e && t++;
});
if (t % 2) {
this.box_le.children[0].active = !0;
this.effect_le.active = !0;
} else {
this.box_chan.children[0].active = !0;
this.effect_chan.active = !0;
}
switch (t) {
case 0:
this.box_white4.children[0].active = !0;
break;

case 1:
this.box_white3.children[0].active = !0;
break;

case 3:
this.box_red3.children[0].active = !0;
break;

case 4:
this.box_red4.children[0].active = !0;
}
},
showKQ2: function() {
var t = 0, e = 0, i = null, n = null, o = 0;
Object.values(this.logs[0]).forEach(function(t) {
t && o++;
});
var c = this.box_chip.parent.convertToWorldSpaceAR(this.box_chip.position), s = null;
if (o % 2) {
i = this.box_le.children[1];
t += this.box_chan.children[1].children.length;
s = this.box_chan.children[1].convertToNodeSpaceAR(c);
Promise.all(this.box_chan.children[1].children.map(function(t) {
t.runAction(cc.spawn(cc.scaleTo(.4, 1), cc.moveTo(.4, s)));
}));
} else {
i = this.box_chan.children[1];
t += this.box_le.children[1].children.length;
s = this.box_le.children[1].convertToNodeSpaceAR(c);
Promise.all(this.box_le.children[1].children.map(function(t) {
t.runAction(cc.spawn(cc.scaleTo(.4, 1), cc.moveTo(.4, s)));
}));
}
var a = this.box_red3.children[1].convertToNodeSpaceAR(c), h = this.box_red4.children[1].convertToNodeSpaceAR(c), r = this.box_white3.children[1].convertToNodeSpaceAR(c), l = this.box_white4.children[1].convertToNodeSpaceAR(c);
switch (o) {
case 0:
n = this.box_white4.children[1];
t += this.box_red3.children[1].children.length + this.box_red4.children[1].children.length + this.box_white3.children[1].children.length;
Promise.all(this.box_red3.children[1].children.map(function(t) {
t.runAction(cc.spawn(cc.scaleTo(.4, 1), cc.moveTo(.4, a)));
}));
Promise.all(this.box_red4.children[1].children.map(function(t) {
t.runAction(cc.spawn(cc.scaleTo(.4, 1), cc.moveTo(.4, h)));
}));
Promise.all(this.box_white3.children[1].children.map(function(t) {
t.runAction(cc.spawn(cc.scaleTo(.4, 1), cc.moveTo(.4, r)));
}));
break;

case 1:
n = this.box_white3.children[1];
t += this.box_red3.children[1].children.length + this.box_red4.children[1].children.length + this.box_white4.children[1].children.length;
Promise.all(this.box_red3.children[1].children.map(function(t) {
t.runAction(cc.spawn(cc.scaleTo(.4, 1), cc.moveTo(.4, a)));
}));
Promise.all(this.box_red4.children[1].children.map(function(t) {
t.runAction(cc.spawn(cc.scaleTo(.4, 1), cc.moveTo(.4, h)));
}));
Promise.all(this.box_white4.children[1].children.map(function(t) {
t.runAction(cc.spawn(cc.scaleTo(.4, 1), cc.moveTo(.4, l)));
}));
break;

case 2:
t += this.box_red3.children[1].children.length + this.box_red4.children[1].children.length + this.box_white3.children[1].children.length + this.box_white4.children[1].children.length;
Promise.all(this.box_red3.children[1].children.map(function(t) {
t.runAction(cc.spawn(cc.scaleTo(.4, 1), cc.moveTo(.4, a)));
}));
Promise.all(this.box_red4.children[1].children.map(function(t) {
t.runAction(cc.spawn(cc.scaleTo(.4, 1), cc.moveTo(.4, h)));
}));
Promise.all(this.box_white3.children[1].children.map(function(t) {
t.runAction(cc.spawn(cc.scaleTo(.4, 1), cc.moveTo(.4, l)));
}));
Promise.all(this.box_white4.children[1].children.map(function(t) {
t.runAction(cc.spawn(cc.scaleTo(.4, 1), cc.moveTo(.4, l)));
}));
break;

case 3:
n = this.box_red3.children[1];
t += this.box_white3.children[1].children.length + this.box_red4.children[1].children.length + this.box_white4.children[1].children.length;
Promise.all(this.box_white3.children[1].children.map(function(t) {
t.runAction(cc.spawn(cc.scaleTo(.4, 1), cc.moveTo(.4, r)));
}));
Promise.all(this.box_red4.children[1].children.map(function(t) {
t.runAction(cc.spawn(cc.scaleTo(.4, 1), cc.moveTo(.4, h)));
}));
Promise.all(this.box_white4.children[1].children.map(function(t) {
t.runAction(cc.spawn(cc.scaleTo(.4, 1), cc.moveTo(.4, l)));
}));
break;

case 4:
n = this.box_red4.children[1];
t += this.box_white3.children[1].children.length + this.box_red3.children[1].children.length + this.box_white4.children[1].children.length;
Promise.all(this.box_white3.children[1].children.map(function(t) {
t.runAction(cc.spawn(cc.scaleTo(.4, 1), cc.moveTo(.4, r)));
}));
Promise.all(this.box_red3.children[1].children.map(function(t) {
t.runAction(cc.spawn(cc.scaleTo(.4, 1), cc.moveTo(.4, a)));
}));
Promise.all(this.box_white4.children[1].children.map(function(t) {
t.runAction(cc.spawn(cc.scaleTo(.4, 1), cc.moveTo(.4, l)));
}));
}
t && this.audioMultiChip.play();
setTimeout(function() {
var t = this;
e += i.children.length;
i.children.forEach(function(e) {
var n = cc.instantiate(e);
n.position = s;
n.scale = .5;
var o = Math.random() * (t.maxBox1_1.x + 1) >> 0, c = Math.random() * (t.maxBox1_1.y + 1) >> 0;
i.addChild(n);
n.runAction(cc.sequence(cc.spawn(cc.scaleTo(.4, 1), cc.moveTo(.4, cc.v2(o, c))), cc.sequence(cc.moveTo(.1, cc.v2(o, c - 6)), cc.moveTo(.1, cc.v2(o, c)))));
});
if (n) {
e += n.children.length;
var o = n.convertToNodeSpaceAR(c);
n.children.forEach(function(e) {
var i = cc.instantiate(e);
i.position = o;
i.scale = .5;
var c = Math.random() * (t.maxBox1_3.x + 1) >> 0, s = Math.random() * (t.maxBox1_3.y + 1) >> 0;
n.addChild(i);
i.runAction(cc.sequence(cc.spawn(cc.scaleTo(.4, 1), cc.moveTo(.4, cc.v2(c, s))), cc.sequence(cc.moveTo(.1, cc.v2(c, s - 6)), cc.moveTo(.1, cc.v2(c, s)))));
});
}
e && Promise.all([ 1, 2, 3, 4, 5 ].map(function(e) {
1 !== e ? t["audioMultiChip" + e].play() : t.audioMultiChip.play();
}));
setTimeout(function() {
var t = this.users_bg.parent.convertToWorldSpaceAR(this.users_bg.position), e = i.convertToNodeSpaceAR(t);
i.children.forEach(function(t) {
t.runAction(cc.spawn(cc.scaleTo(.4, 1), cc.moveTo(.4, e)));
});
if (n) {
var o = n.convertToNodeSpaceAR(t);
n.children.forEach(function(t) {
t.runAction(cc.spawn(cc.scaleTo(.4, 1), cc.moveTo(.4, o)));
});
}
}.bind(this), 3e3);
}.bind(this), 1500);
},
setDot: function(t) {
var e = this, i = Math.random() * (this.maxDot.x + 1) >> 0, n = Math.random() * (this.maxDot.y + 1) >> 0, o = n - i;
o > 22 && (n -= n / 1.4);
this.dot[0].node.position = cc.v2(i, n);
i = Math.random() * (this.maxDot.x + 1) >> 0;
(o = (n = Math.random() * (this.maxDot.y + 1) >> 0) - i) > 22 && (n -= n / 1.4);
this.dot[1].node.position = cc.v2(i, n);
i = Math.random() * (this.maxDot.x + 1) >> 0;
(o = (n = Math.random() * (this.maxDot.y + 1) >> 0) - i) > 22 && (n -= n / 1.4);
this.dot[2].node.position = cc.v2(i, n);
i = Math.random() * (this.maxDot.x + 1) >> 0;
(o = (n = Math.random() * (this.maxDot.y + 1) >> 0) - i) > 22 && (n -= n / 1.4);
this.dot[3].node.position = cc.v2(i, n);
this.dot.forEach(function(i, n) {
var o = t[n];
i.spriteFrame = o ? e.dot_red : e.dot_white;
});
},
playTime: function() {
var t = this;
void 0 !== t.timeInterval && clearInterval(t.timeInterval);
t.timeInterval = setInterval(function() {
if (t.time_remain > 32) {
var e = o.numberPad(t.time_remain - 33, 2);
t.timeWait.string = e;
t.nodeTime[0].active = !1;
t.nodeWait[0].active = !0;
} else if (t.time_remain > 30) {
t.nodeTime[0].active = !1;
t.nodeWait[0].active = !1;
32 === t.time_remain && t.nodeBat.runAction(t.actionBatClose);
} else if (t.time_remain > -1) {
e = o.numberPad(t.time_remain, 2);
t.nodeTime[0].active = !0;
t.nodeWait[0].active = !1;
t.labelTime.string = e;
t.time_remain < 11 ? t.labelTime.color = cc.Color.RED : t.labelTime.color = cc.Color.WHITE;
} else clearInterval(t.timeInterval);
this.time_remain--;
}.bind(this), 1e3);
},
countClient: function(t) {
this.users_count.string = t;
},
updateData: function(t) {
if (this.red) {
this.total_chan.string = t.red.chan > 0 ? o.numberWithCommas(t.red.chan) : "";
this.total_le.string = t.red.le > 0 ? o.numberWithCommas(t.red.le) : "";
this.total_red3.string = t.red.red3 > 0 ? o.numberWithCommas(t.red.red3) : "";
this.total_red4.string = t.red.red4 > 0 ? o.numberWithCommas(t.red.red4) : "";
this.total_white3.string = t.red.white3 > 0 ? o.numberWithCommas(t.red.white3) : "";
this.total_white4.string = t.red.white4 > 0 ? o.numberWithCommas(t.red.white4) : "";
} else {
this.total_chan.string = t.xu.chan > 0 ? o.numberWithCommas(t.xu.chan) : "";
this.total_le.string = t.xu.le > 0 ? o.numberWithCommas(t.xu.le) : "";
this.total_red3.string = t.xu.red3 > 0 ? o.numberWithCommas(t.xu.red3) : "";
this.total_red4.string = t.xu.red4 > 0 ? o.numberWithCommas(t.xu.red4) : "";
this.total_white3.string = t.xu.white3 > 0 ? o.numberWithCommas(t.xu.white3) : "";
this.total_white4.string = t.xu.white4 > 0 ? o.numberWithCommas(t.xu.white4) : "";
}
},
resetData: function() {
this.box_chan.children[1].removeAllChildren();
this.box_le.children[1].removeAllChildren();
this.box_white4.children[1].removeAllChildren();
this.box_white3.children[1].removeAllChildren();
this.box_red3.children[1].removeAllChildren();
this.box_red4.children[1].removeAllChildren();
this.effect_chan.active = !1;
this.effect_le.active = !1;
this.box_chan.children[0].active = !1;
this.box_le.children[0].active = !1;
this.box_white4.children[0].active = !1;
this.box_white3.children[0].active = !1;
this.box_red3.children[0].active = !1;
this.box_red4.children[0].active = !1;
this.total_chan.string = "";
this.total_le.string = "";
this.total_red3.string = "";
this.total_red4.string = "";
this.total_white3.string = "";
this.total_white4.string = "";
this.me_chan.string = "";
this.me_le.string = "";
this.me_red3.string = "";
this.me_red4.string = "";
this.me_white3.string = "";
this.me_white4.string = "";
this.users.red.chan = 0;
this.users.red.le = 0;
this.users.red.red3 = 0;
this.users.red.red4 = 0;
this.users.red.white3 = 0;
this.users.red.white4 = 0;
this.users.xu.chan = 0;
this.users.xu.le = 0;
this.users.xu.red3 = 0;
this.users.xu.red4 = 0;
this.users.xu.white3 = 0;
this.users.xu.white4 = 0;
this.clients.red.chan = 0;
this.clients.red.le = 0;
this.clients.red.red3 = 0;
this.clients.red.red4 = 0;
this.clients.red.white3 = 0;
this.clients.red.white4 = 0;
this.clients.xu.chan = 0;
this.clients.xu.le = 0;
this.clients.xu.red3 = 0;
this.clients.xu.red4 = 0;
this.clients.xu.white3 = 0;
this.clients.xu.white4 = 0;
this.logcuoc.red.chan = 0;
this.logcuoc.red.le = 0;
this.logcuoc.red.red3 = 0;
this.logcuoc.red.red4 = 0;
this.logcuoc.red.white3 = 0;
this.logcuoc.red.white4 = 0;
},
setLogs: function() {
var t = this;
this.logMain.forEach(function(e, i) {
var n = t.logs[i];
if (n) {
e.node.active = !0;
var o = 0;
(n = Object.values(n)).forEach(function(t) {
t && o++;
});
e.spriteFrame = o % 2 ? t.dot_red : t.dot_white;
} else e.node.active = !1;
});
var e = -1, i = [], n = [], o = 0, c = 0, s = t.logs.slice();
s.reverse();
s.forEach(function(t) {
var o = 0;
Object.values(t).forEach(function(t) {
t && o++;
});
var c = !(o % 2);
-1 === e && (e = c);
if (c !== e || n.length > 3) {
e = c;
i.push(n);
n = [];
}
c === e && n.push(o);
});
i.push(n);
i.reverse();
i = i.slice(0, 12);
this.log_top.forEach(function(e, n) {
var s = i[n];
if (s) {
e.cell.active = !0;
e.data.forEach(function(e, i) {
var n = s[i];
if (void 0 !== n) {
e.c.node.parent.active = !0;
e.c.spriteFrame = n % 2 ? t.dot_red : 4 === n ? t.dot_red : t.dot_white;
e.t.string = 0 === n ? 4 : n;
n % 2 ? c++ : o++;
} else e.c.node.parent.active = !1;
});
} else e.cell.active = !1;
});
this.log_chan.string = o;
this.log_le.string = c;
},
changerBet: function(t, e) {
var i = t.target;
this.cuoc = i.name;
this.bet.children.forEach(function(t) {
if (t == i) {
t.children[0].active = !0;
t.children[1].active = !0;
t.pauseSystemEvents();
} else {
t.children[0].active = !0;
t.children[1].active = !1;
t.resumeSystemEvents();
}
});
},
changerCoint: function() {
this.red = !this.red;
this.nodeRed.active = !this.nodeRed.active;
this.nodeXu.active = !this.nodeXu.active;
this.updateMeCoint();
},
onCuoc: function(t, e) {
this.logcuoc.red[e] += parseInt(this.cuoc);
this.meChip({
box: e,
cuoc: parseInt(this.cuoc)
});
this.updateMe(this.logcuoc);
},
ClickCuoc: function() {
cc.RedT.send({
g: {
xocxoc: {
cuoc: {
cuoc: this.cuoc,
box: this.logcuoc
}
}
}
});
this.logcuoc.red.chan = 0;
this.logcuoc.red.le = 0;
this.logcuoc.red.red3 = 0;
this.logcuoc.red.red4 = 0;
this.logcuoc.red.white3 = 0;
this.logcuoc.red.white4 = 0;
this.me_chan.string = "";
this.me_le.string = "";
this.me_red3.string = "";
this.me_red4.string = "";
this.me_white3.string = "";
this.me_white4.string = "";
},
ClickReset: function() {
this.box_chan.children[1].removeAllChildren();
this.box_le.children[1].removeAllChildren();
this.box_white4.children[1].removeAllChildren();
this.box_white3.children[1].removeAllChildren();
this.box_red3.children[1].removeAllChildren();
this.box_red4.children[1].removeAllChildren();
this.me_chan.string = "";
this.me_le.string = "";
this.me_red3.string = "";
this.me_red4.string = "";
this.me_white3.string = "";
this.me_white4.string = "";
this.logcuoc.red.chan = 0;
this.logcuoc.red.le = 0;
this.logcuoc.red.red3 = 0;
this.logcuoc.red.red4 = 0;
this.logcuoc.red.white3 = 0;
this.logcuoc.red.white4 = 0;
},
addNotice: function(t) {
var e = cc.instantiate(this.prefabNotice);
e.getComponent("mini_warning").text.string = t;
this.miniNotice.addChild(e);
},
clientsChip: function(t) {
var e = null, i = this.maxBox1_3;
switch ([ "chan", "le", "red3", "red4", "white3", "white4" ][Math.floor(6 * Math.random()) + 0]) {
case "chan":
e = this.box_chan;
i = this.maxBox1_1;
break;

case "le":
e = this.box_le;
i = this.maxBox1_1;
break;

case "red3":
e = this.box_red3;
break;

case "red4":
e = this.box_red4;
break;

case "white3":
e = this.box_white3;
break;

case "white4":
e = this.box_white4;
}
var n = this.users_bg.parent.convertToWorldSpaceAR(this.users_bg.position);
n = e.children[1].convertToNodeSpaceAR(n);
var o = new cc.Node();
(o = o.addComponent(cc.Sprite)).spriteFrame = this[[ "chip_1000", "chip_5000", "chip_20000", "chip_50000", "chip_10000", "chip_50000" ][Math.floor(6 * Math.random()) + 0]];
o.node.position = n;
o.node.scale = .67;
var c = Math.random() * (i.x + 1) >> 0, s = Math.random() * (i.y + 1) >> 0;
e.children[1].addChild(o.node);
var a = cc.instantiate(this.audioSingleChip.node);
o.node.addChild(a);
a = a.getComponent(cc.AudioSource);
o.node.runAction(cc.sequence(cc.spawn(cc.scaleTo(.4, 1), cc.moveTo(.4, cc.v2(c, s))), cc.callFunc(function() {
this.play();
}, a), cc.sequence(cc.moveTo(.1, cc.v2(c, s - 6)), cc.moveTo(.1, cc.v2(c, s)))));
},
meChip: function(t) {
var e = null, i = null, n = this.maxBox1_3;
this.bet.children.forEach(function(i) {
i.name == t.cuoc && (e = i);
});
switch (t.box) {
case "chan":
i = this.box_chan;
n = this.maxBox1_1;
break;

case "le":
i = this.box_le;
n = this.maxBox1_1;
break;

case "red3":
i = this.box_red3;
break;

case "red4":
i = this.box_red4;
break;

case "white3":
i = this.box_white3;
break;

case "white4":
i = this.box_white4;
}
var o = e.parent.convertToWorldSpaceAR(e.position);
o = i.children[1].convertToNodeSpaceAR(o);
var c = new cc.Node();
(c = c.addComponent(cc.Sprite)).spriteFrame = this["chip_" + t.cuoc];
c.node.position = o;
var s = Math.random() * (n.x + 1) >> 0, a = Math.random() * (n.y + 1) >> 0;
i.children[1].addChild(c.node);
var h = cc.instantiate(this.audioSingleChip.node);
c.node.addChild(h);
h = h.getComponent(cc.AudioSource);
c.node.runAction(cc.sequence(cc.spawn(cc.scaleTo(.3, 1), cc.moveTo(.3, cc.v2(s, a))), cc.callFunc(function() {
this.play();
}, h), cc.sequence(cc.moveTo(.1, cc.v2(s, a + 6)), cc.moveTo(.1, cc.v2(s, a)))));
},
updateMe: function(t) {
t.red && this.updateMeRed(t.red);
t.xu && this.updateMeXu(t.xu);
},
updateMeRed: function(t) {
if (t.chan > 0) {
this.users.red.chan = t.chan;
this.red && (this.me_chan.string = o.numberWithCommas(t.chan));
}
if (t.le > 0) {
this.users.red.le = t.le;
this.red && (this.me_le.string = o.numberWithCommas(t.le));
}
if (t.red3 > 0) {
this.users.red.red3 = t.red3;
this.red && (this.me_red3.string = o.numberWithCommas(t.red3));
}
if (t.red4 > 0) {
this.users.red.red4 = t.red4;
this.red && (this.me_red4.string = o.numberWithCommas(t.red4));
}
if (t.white3 > 0) {
this.users.red.white3 = t.white3;
this.red && (this.me_white3.string = o.numberWithCommas(t.white3));
}
if (t.white4 > 0) {
this.users.red.white4 = t.white4;
this.red && (this.me_white4.string = o.numberWithCommas(t.white4));
}
},
updateMeXu: function(t) {
if (t.chan > 0) {
this.users.xu.chan = t.chan;
!this.red && (this.me_chan.string = o.numberWithCommas(t.chan));
}
if (t.le > 0) {
this.users.xu.le = t.le;
!this.red && (this.me_le.string = o.numberWithCommas(t.le));
}
if (t.red3 > 0) {
this.users.xu.red3 = t.red3;
!this.red && (this.me_red3.string = o.numberWithCommas(t.red3));
}
if (t.red4 > 0) {
this.users.xu.red4 = t.red4;
!this.red && (this.me_red4.string = o.numberWithCommas(t.red4));
}
if (t.white3 > 0) {
this.users.xu.white3 = t.white3;
!this.red && (this.me_white3.string = o.numberWithCommas(t.white3));
}
if (t.white4 > 0) {
this.users.xu.white4 = t.white4;
!this.red && (this.me_white4.string = o.numberWithCommas(t.white4));
}
},
updateClient: function(t) {
t.red && this.updateClientRed(t.red);
t.xu && this.updateClientXu(t.xu);
},
updateClientRed: function(t) {
if (t.chan > 0) {
this.clients.red.chan = t.chan;
this.red && (this.total_chan.string = o.numberWithCommas(t.chan));
}
if (t.le > 0) {
this.clients.red.le = t.le;
this.red && (this.total_le.string = o.numberWithCommas(t.le));
}
if (t.red3 > 0) {
this.clients.red.red3 = t.red3;
this.red && (this.total_red3.string = o.numberWithCommas(t.red3));
}
if (t.red4 > 0) {
this.clients.red.red4 = t.red4;
this.red && (this.total_red4.string = o.numberWithCommas(t.red4));
}
if (t.white3 > 0) {
this.clients.red.white3 = t.white3;
this.red && (this.total_white3.string = o.numberWithCommas(t.white3));
}
if (t.white4 > 0) {
this.clients.red.white4 = t.white4;
this.red && (this.total_white4.string = o.numberWithCommas(t.white4));
}
},
updateClientXu: function(t) {
if (t.chan > 0) {
this.clients.xu.chan = t.chan;
!this.red && (this.total_chan.string = o.numberWithCommas(t.chan));
}
if (t.le > 0) {
this.clients.xu.le = t.le;
!this.red && (this.total_le.string = o.numberWithCommas(t.le));
}
if (t.red3 > 0) {
this.clients.xu.red3 = t.red3;
!this.red && (this.total_red3.string = o.numberWithCommas(t.red3));
}
if (t.red4 > 0) {
this.clients.xu.red4 = t.red4;
!this.red && (this.total_red4.string = o.numberWithCommas(t.red4));
}
if (t.white3 > 0) {
this.clients.xu.white3 = t.white3;
!this.red && (this.total_white3.string = o.numberWithCommas(t.white3));
}
if (t.white4 > 0) {
this.clients.xu.white4 = t.white4;
!this.red && (this.total_white4.string = o.numberWithCommas(t.white4));
}
},
updateMeCoint: function() {
if (this.red) {
this.me_chan.string = this.users.red.chan > 0 ? o.numberWithCommas(this.users.red.chan) : "";
this.me_le.string = this.users.red.le > 0 ? o.numberWithCommas(this.users.red.le) : "";
this.me_red3.string = this.users.red.red3 > 0 ? o.numberWithCommas(this.users.red.red3) : "";
this.me_red4.string = this.users.red.red4 > 0 ? o.numberWithCommas(this.users.red.red4) : "";
this.me_white3.string = this.users.red.white3 > 0 ? o.numberWithCommas(this.users.red.white3) : "";
this.me_white4.string = this.users.red.white4 > 0 ? o.numberWithCommas(this.users.red.white4) : "";
this.total_chan.string = this.clients.red.chan > 0 ? o.numberWithCommas(this.clients.red.chan) : "";
this.total_le.string = this.clients.red.le > 0 ? o.numberWithCommas(this.clients.red.le) : "";
this.total_red3.string = this.clients.red.red3 > 0 ? o.numberWithCommas(this.clients.red.red3) : "";
this.total_red4.string = this.clients.red.red4 > 0 ? o.numberWithCommas(this.clients.red.red4) : "";
this.total_white3.string = this.clients.red.white3 > 0 ? o.numberWithCommas(this.clients.red.white3) : "";
this.total_white4.string = this.clients.red.white4 > 0 ? o.numberWithCommas(this.clients.red.white4) : "";
} else {
this.me_chan.string = this.users.xu.chan > 0 ? o.numberWithCommas(this.users.xu.chan) : "";
this.me_le.string = this.users.xu.le > 0 ? o.numberWithCommas(this.users.xu.le) : "";
this.me_red3.string = this.users.xu.red3 > 0 ? o.numberWithCommas(this.users.xu.red3) : "";
this.me_red4.string = this.users.xu.red4 > 0 ? o.numberWithCommas(this.users.xu.red4) : "";
this.me_white3.string = this.users.xu.white3 > 0 ? o.numberWithCommas(this.users.xu.white3) : "";
this.me_white4.string = this.users.xu.white4 > 0 ? o.numberWithCommas(this.users.xu.white4) : "";
this.total_chan.string = this.clients.xu.chan > 0 ? o.numberWithCommas(this.clients.xu.chan) : "";
this.total_le.string = this.clients.xu.le > 0 ? o.numberWithCommas(this.clients.xu.le) : "";
this.total_red3.string = this.clients.xu.red3 > 0 ? o.numberWithCommas(this.clients.xu.red3) : "";
this.total_red4.string = this.clients.xu.red4 > 0 ? o.numberWithCommas(this.clients.xu.red4) : "";
this.total_white3.string = this.clients.xu.white3 > 0 ? o.numberWithCommas(this.clients.xu.white3) : "";
this.total_white4.string = this.clients.xu.white4 > 0 ? o.numberWithCommas(this.clients.xu.white4) : "";
}
},
status: function(t) {
setTimeout(function() {
var e = new cc.Node();
e.addComponent(cc.Label);
(e = e.getComponent(cc.Label)).string = (t.win ? "+" : "-") + o.numberWithCommas(t.bet);
e.font = t.win ? cc.RedT.util.fontCong : cc.RedT.util.fontTru;
e.lineHeight = 130;
e.fontSize = 25;
e.node.position = cc.v2(0, 90);
this.miniNotice.addChild(e.node);
e.node.runAction(cc.sequence(cc.moveTo(4, cc.v2(0, 200)), cc.callFunc(function() {
this.node.destroy();
}, e)));
t.win && cc.RedT.send({
user: {
updateCoint: !0
}
});
if (void 0 !== t.thuong && t.thuong > 0) {
var i = new cc.Node();
i.addComponent(cc.Label);
(i = i.getComponent(cc.Label)).string = "+" + o.numberWithCommas(t.thuong);
i.font = cc.RedT.util.fontEffect;
i.lineHeight = 90;
i.fontSize = 14;
this.miniNotice.addChild(i.node);
i.node.runAction(cc.sequence(cc.moveTo(4, cc.v2(0, 100)), cc.callFunc(function() {
this.node.destroy();
}, i)));
}
}.bind(this), 4e3);
}
});
cc._RF.pop();
}, {
Helper: "Helper",
Notice: "Notice",
XocXoc_dialog: "XocXoc_dialog"
} ],
Zeus_bonus_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "eb2a0irwWFJL6cdSNcodBRb", "Zeus_bonus_item");
cc.Class({
extends: cc.Component,
properties: {
open: cc.Node,
close: cc.Node,
text: cc.Label
}
});
cc._RF.pop();
}, {} ],
Zeus_dialog: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "e6038C2wsxJW7aH8d1vsUiK", "Zeus_dialog");
var n = t("Zeus_history"), o = t("Zeus_top");
cc.Class({
extends: cc.Component,
properties: {
history: n,
top: o,
help: cc.Node
},
init: function() {
this.actionShow = cc.spawn(cc.scaleTo(.5, 1).easing(cc.easeBackOut(2.5)), cc.fadeTo(.5, 255));
this.objShow = null;
this.objTmp = null;
},
onClickBack: function() {
cc.RedT.audio.playUnClick();
this.onBack();
},
onBack: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = !1;
this.node.active = !1;
this.objShow = null;
} else {
this.objTmp = this.objShow;
this.objShow = this.objShow.previous;
this.objTmp.previous = null;
this.objTmp.active = !1;
this.objShow.active = !0;
this.objTmp = null;
} else this.node.active = !1;
},
onClosePrevious: function(t) {
if (void 0 !== t.previous && null !== t.previous) {
this.onClosePrevious(t.previous);
delete t.previous;
}
t.active = !1;
},
onCloseDialog: function() {
if (null != this.objShow) if (void 0 == this.objShow.previous || null == this.objShow.previous) {
this.objShow.active = this.node.active = !1;
this.objShow = null;
} else {
this.onClosePrevious(this.objShow.previous);
this.objShow.active = this.node.active = !1;
delete this.objShow.previous;
this.objShow = null;
} else this.node.active = !1;
},
resetSizeDialog: function(t) {
t.stopAllActions();
t.scale = .5;
t.opacity = 0;
},
showHistory: function() {
this.node.active = this.history.node.active = !0;
this.objShow = this.history.node;
},
showTop: function() {
this.node.active = this.top.node.active = !0;
this.objShow = this.top.node;
},
showHelp: function() {
this.node.active = this.help.active = !0;
this.objShow = this.help;
}
});
cc._RF.pop();
}, {
Zeus_history: "Zeus_history",
Zeus_top: "Zeus_top"
} ],
Zeus_history: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "341aezoH1lK1IIq/VUivU/o", "Zeus_history");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
page: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
onLoad: function() {
var t = this, e = cc.instantiate(this.page);
e.y = -232;
this.node.addChild(e);
this.page = e.getComponent("Pagination");
Promise.all(this.content.children.map(function(t) {
return t.getComponent("VQRed_history_item");
})).then(function(e) {
t.content = e;
});
this.page.init(this);
},
onEnable: function() {
this.get_data();
},
get_data: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
cc.RedT.send({
g: {
zeus: {
log: {
red: this.red,
page: t
}
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
this.page.onSet(t.page, t.kmess, t.total);
Promise.all(this.content.map(function(e, i) {
var o = t.data[i];
if (void 0 !== o) {
e.node.active = !0;
e.time.string = n.getStringDateByTime(o.time);
e.phien.string = o.id;
e.cuoc.string = n.numberWithCommas(o.bet);
e.win.string = o.line + " Dòng";
e.line.string = n.numberWithCommas(o.win);
} else e.node.active = !1;
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
Zeus_iline: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "f316ePvUxJIaKcH9dMK775a", "Zeus_iline");
cc.Class({
extends: cc.Component,
properties: {
line: cc.Node,
ef: !1
},
onEnable: function() {
this.node.on(cc.Node.EventType.MOUSE_ENTER, this.onShow, this);
this.node.on(cc.Node.EventType.MOUSE_LEAVE, this.onHidden, this);
},
onDisable: function() {
this.node.off(cc.Node.EventType.MOUSE_ENTER, this.onShow, this);
this.node.off(cc.Node.EventType.MOUSE_LEAVE, this.onHidden, this);
},
onShow: function() {
this.line.active = !0;
},
onHidden: function() {
!this.ef && (this.line.active = !1);
}
});
cc._RF.pop();
}, {} ],
Zeus_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "69bb4kwhbFJAopemQVH6x0A", "Zeus_item");
cc.Class({
extends: cc.Component,
properties: {
icons: {
default: [],
type: cc.Prefab
}
},
init: function(t) {
this.RedT = t;
},
random: function() {
var t = 11 * Math.random() >> 0;
this.setIcon(t);
return t;
},
setIcon: function(t) {
var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
this.node.removeAllChildren();
var i = cc.instantiate(this.icons[t]);
i.setScale(cc.v2(.9, .9));
this.node.addChild(i);
e && (this.data = t);
}
});
cc._RF.pop();
}, {} ],
Zeus_lines: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "14126PW9jxD15WpChakSO7E", "Zeus_lines");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
lines: cc.Node,
mainLines: cc.Node
},
init: function(t) {
var e = this;
this.RedT = t;
Promise.all(this.mainLines.children.map(function(t) {
return t.getComponent("Zeus_iline");
})).then(function(t) {
e.mainLines = t;
});
this.selectAll(null, "1");
},
onOpen: function() {
this.node.active = !0;
},
onClose: function() {
this.RedT.playClick();
this.node.active && this.data.length < 1 ? this.RedT.notice.show({
title: "CẢNH BÁO",
text: "Chọn ít nhất 1 dòng"
}) : this.node.active = !1;
},
select: function(t) {
this.RedT.playClick();
var e = t.target;
e.color._val != cc.Color.WHITE._val ? e.color = cc.Color.WHITE : e.color = e.color.fromHEX("#8A8A8A");
this.check();
},
check: function() {
var t = this;
Promise.all(this.lines.children.map(function(t, e) {
return t.color._val == cc.Color.WHITE._val ? e + 1 : void 0;
})).then(function(e) {
Promise.all(e.filter(function(t) {
return void 0 !== t;
})).then(function(e) {
t.data = e;
t.RedT.labelLine.string = e.length;
t.RedT.tong.string = n.numberWithCommas(e.length * n.getOnlyNumberInString(t.RedT.bet.string));
});
});
},
selectChan: function() {
var t = this;
Promise.all(this.lines.children.map(function(t, e) {
var i = e + 1;
if (!(i % 2)) {
t.color = cc.Color.WHITE;
return i;
}
t.color = t.color.fromHEX("#8A8A8A");
})).then(function(e) {
Promise.all(e.filter(function(t) {
return void 0 !== t;
})).then(function(e) {
t.data = e;
t.RedT.labelLine.string = e.length;
t.RedT.tong.string = n.numberWithCommas(e.length * n.getOnlyNumberInString(t.RedT.bet.string));
});
});
},
selectLe: function() {
var t = this;
Promise.all(this.lines.children.map(function(t, e) {
var i = e + 1;
if (i % 2) {
t.color = cc.Color.WHITE;
return i;
}
t.color = t.color.fromHEX("#8A8A8A");
})).then(function(e) {
Promise.all(e.filter(function(t) {
return void 0 !== t;
})).then(function(e) {
t.data = e;
t.RedT.labelLine.string = e.length;
t.RedT.tong.string = n.numberWithCommas(e.length * n.getOnlyNumberInString(t.RedT.bet.string));
});
});
},
selectAll: function(t, e) {
var i = this;
Promise.all(this.lines.children.map(function(t, i) {
var n = "1" == e;
t.color = n ? cc.Color.WHITE : t.color.fromHEX("#8A8A8A");
return n ? i + 1 : void 0;
})).then(function(t) {
Promise.all(t.filter(function(t, e) {
return void 0 !== t;
})).then(function(t) {
i.data = t;
i.RedT.labelLine.string = t.length;
i.RedT.tong.string = n.numberWithCommas(t.length * n.getOnlyNumberInString(i.RedT.bet.string));
});
});
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
Zeus_playBonus: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "2f66d/4hnFBH52OMOITl7hl", "Zeus_playBonus");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
numberBonus: cc.Label,
listBox: cc.Node,
notice: cc.Node,
numberWin: cc.Label,
icons: {
default: [],
type: cc.SpriteFrame
}
},
init: function(t) {
var e = this;
this.RedT = t;
Promise.all(this.listBox.children.map(function(t) {
return t.getComponent("Zeus_bonus_item");
})).then(function(t) {
e.listBox = t;
});
},
onPlay: function(t) {
this.reset();
this.node.active = !0;
this.numberBonus.string = t;
},
onClickBox: function(t) {
if (this.numberBonus.string) {
this.RedT.playClick();
this.onSend(t.target.name);
}
},
closeNotice: function() {
this.notice.active = this.node.active = !1;
this.RedT.hieuUng();
},
onData: function(t) {
if (void 0 !== t.box) {
var e = this.listBox[t.box];
e.open.active = !0;
e.close.active = !1;
e.text.string = n.numberWithCommas(t.bet);
this.numberBonus.string = t.bonus;
this.scheduleOnce(function() {
e.open.active = !1;
}, 1.5);
}
if (void 0 !== t.win) {
this.notice.active = !0;
this.numberWin.string = n.numberWithCommas(t.win);
this.RedT.vuathang.string = n.numberWithCommas(1 * n.getOnlyNumberInString(this.RedT.vuathang.string) + t.win);
}
},
onSend: function(t) {
cc.RedT.send({
g: {
zeus: {
bonus: {
box: t
}
}
}
});
},
reset: function() {
Promise.all(this.listBox.map(function(t) {
t.open.active = !1;
t.close.active = !0;
t.text.string = "";
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
Zeus_reel: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "cfbabmLtKlEpIH6Z4SOgJ9w", "Zeus_reel");
cc.Class({
extends: cc.Component,
init: function(t) {
var e = this;
this.RedT = t;
this.icons = [];
var i = this, n = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
Promise.all(n.map(function(t, e) {
var o = cc.instantiate(i.RedT.icon);
i.node.addChild(o);
(o = o.getComponent("Zeus_item")).init(i.RedT);
e > 2 && e < n.length - 3 && o.random();
return o;
})).then(function(t) {
e.icons = t;
e.icons[e.icons.length - 1].setIcon(e.icons[4].random());
e.icons[e.icons.length - 2].setIcon(e.icons[3].random());
e.icons[e.icons.length - 3].setIcon(e.icons[2].random());
e.icons[e.icons.length - 4].setIcon(e.icons[1].random());
e.icons[e.icons.length - 5].setIcon(e.icons[0].random());
});
},
spin: function(t, e) {
this.node.stopAllActions();
var i = cc.moveTo(e, cc.v2(this.node.x, -(this.node.height - 396))).easing(cc.easeInOut(3)), n = cc.callFunc(function() {
0 === t && this.RedT.copy();
this.node.y = 0;
}, this);
if (4 === t) {
var o = cc.callFunc(function() {
this.RedT.EF_vuathang();
this.node.y = 0;
this.RedT.random();
this.RedT.hieuUng();
}, this);
this.node.runAction(cc.sequence(cc.delayTime(.1 * t), i, o));
} else this.node.runAction(cc.sequence(cc.delayTime(.1 * t), i, n));
},
stop: function() {
this.node.stopAllActions();
this.RedT.copy();
this.node.y = 0;
}
});
cc._RF.pop();
}, {} ],
Zeus_top: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "16e083VlxRHlYpusln5jRrS", "Zeus_top");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
item: cc.Prefab,
content: cc.Node,
cointRed: cc.Node,
cointXu: cc.Node,
red: !0
},
onEnable: function() {
this.get_data();
},
get_data: function() {
arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
cc.RedT.send({
g: {
zeus: {
top: this.red
}
}
});
},
changerCoint: function() {
this.red = !this.red;
this.cointRed.active = !this.cointRed.active;
this.cointXu.active = !this.cointXu.active;
this.get_data();
},
onData: function(t) {
this.content.removeAllChildren();
var e = this;
Promise.all(t.map(function(t, i) {
var o = cc.instantiate(e.item), c = o.getComponent("VQRed_history_item");
c.time.string = n.getStringDateByTime(t.time);
c.phien.string = t.name;
c.cuoc.string = n.numberWithCommas(t.bet);
c.line.string = n.numberWithCommas(t.win);
c.win.string = 2 == t.type ? "Nổ Hũ" : "Thắng lớn";
o.children[0].active = !(1 & i);
e.content.addChild(o);
}));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
Zeus: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "9e5a3gmlfZAEZBJ1mCqGYsC", "Zeus");
var n = t("Helper"), o = t("Zeus_reel"), c = t("Zeus_lines"), s = t("Zeus_playBonus"), a = t("Notice"), h = t("Zeus_dialog");
cc.Class({
extends: cc.Component,
properties: {
gameBonus: s,
audioBG: cc.AudioSource,
audioClickSpin: {
default: null,
type: cc.AudioClip
},
audioClick: {
default: null,
type: cc.AudioClip
},
audioWin: {
default: null,
type: cc.AudioClip
},
audioBigWin: {
default: null,
type: cc.AudioClip
},
audioJackpot: {
default: null,
type: cc.AudioClip
},
redhat: cc.Node,
reels: {
default: [],
type: o
},
icon: cc.Prefab,
icons: {
default: [],
type: cc.SpriteFrame
},
betString: {
default: [],
type: cc.String
},
audioIcons: {
default: [],
type: cc.SpriteFrame
},
audioIcon: cc.Sprite,
nodeRed: cc.Node,
nodeXu: cc.Node,
nodeNotice: cc.Node,
prefabNotice: cc.Prefab,
MiniPanel: cc.Prefab,
loading: cc.Node,
notice: a,
dialog: h,
Line: c,
hu: cc.Label,
taikhoan: cc.Label,
tong: cc.Label,
vuathang: cc.Label,
labelLine: cc.Label,
bet: cc.Label,
freeLabel: cc.Label,
phien: cc.Label,
BigWin: cc.Animation,
BigWin_Label: cc.Label,
NoHu_close: cc.Node,
NoHu: cc.Animation,
NoHu_Label: cc.Label,
EF_Bonus: cc.Animation,
EF_Free: cc.Animation,
buttonCoint: cc.Node,
buttonLine: cc.Node,
buttonSpin: cc.Node,
buttonSpinSpeed: cc.Node,
buttonBet: cc.Node,
buttonAuto: cc.Node,
Game: cc.Node,
ChonCuoc: cc.Node,
hu100: cc.Label,
hu1000: cc.Label,
hu10000: cc.Label,
isSpeed: !1,
isForceSpeed: !1,
isAuto: !1,
isSpin: !1,
isFreeSpin: !1,
red: !0,
betSelect: 0
},
onLoad: function() {
cc.RedT.inGame = this;
var t = this;
this.Line.init(this);
this.BigWin.on("finished", this.BigWinFinish, this);
this.BigWin.on("play", this.BigWinPlay, this);
this.EF_Free.on("finished", this.EF_FreeFinish, this);
this.NoHu.on("play", this.NoHuPlay, this);
this.EF_Bonus.on("finished", this.EF_BonusFinish, this);
this.gameBonus.init(this);
this.dialog.init();
Promise.all(this.reels.map(function(e) {
e.init(t);
}));
this.Game.active = !1;
this.ChonCuoc.active = !0;
this.onGetAllHu();
cc.RedT.send({
scene: "zeus"
});
this.taikhoan.string = n.numberWithCommas(cc.RedT.user.red);
this.speed = 400;
this.resetSpin();
if (cc.RedT.isSoundBackground()) {
this.playMusic();
this.audioIcon.spriteFrame = this.audioIcons[1];
} else this.audioIcon.spriteFrame = this.audioIcons[0];
},
_playSFX: function(t) {
cc.RedT.IS_SOUND && cc.audioEngine.playEffect(t, !1);
},
playClick: function() {
this._playSFX(this.audioClick);
},
BigWinPlay: function() {
var t = cc.callFunc(function() {
this._playSFX(this.audioBigWin);
n.numberTo(this.BigWin_Label, 0, this.H_win, 2e3, !0);
}, this);
this.BigWin.node.runAction(cc.sequence(cc.delayTime(.3), t));
},
BigWinFinish: function() {
this.isBigWin = !1;
this.BigWin.node.active = !1;
this.BigWin_Label.string = "";
this.showLineWin(!1);
this.hieuUng();
},
NoHuPlay: function() {
this.NoHu_Label.string = "";
var t = cc.callFunc(function() {
this._playSFX(this.audioJackpot);
n.numberTo(this.NoHu_Label, 0, this.H_win, 2e3, !0);
}, this);
this.NoHu.node.runAction(cc.sequence(cc.delayTime(.3), t));
var e = cc.callFunc(function() {
this.NoHu_close.active = !0;
}, this);
this.NoHu.node.runAction(cc.sequence(cc.delayTime(4), e));
},
NoHuFinish: function() {
this.isNoHu = !1;
this.isAuto && this.onAuto();
this.showLineWin(!1);
this.hieuUng();
},
NoHuClose: function() {
this.NoHu.node.active = this.NoHu_close.active = !1;
this.NoHuFinish();
},
EF_BonusFinish: function() {
this.EF_Bonus.node.active = !1;
this.gameBonus.onPlay(this.isBonus);
this.isBonus = 0;
this.showLineWin(!1);
},
EF_FreeFinish: function() {
this.isFree = !1;
this.EF_Free.node.active = !1;
this.showLineWin(!1);
this.hieuUng();
},
onData: function(t) {
if (void 0 !== t.user) {
this.userData(t.user);
cc.RedT.userData(t.user);
}
void 0 !== t.Zeus && this.Zeus(t.Zeus);
void 0 !== t.mini && null != cc.RedT.minigame && cc.RedT.minigame.onData(t.mini);
void 0 !== t.TopHu && cc.RedT.MiniPanel.TopHu.onData(t.TopHu);
void 0 !== t.taixiu && null != cc.RedT.minigame && cc.RedT.minigame.isLoadTaiXiu && cc.RedT.minigame.TaiXiu.TX_Main.onData(t.taixiu);
},
userData: function(t) {
this.red ? this.taikhoan.string = n.numberWithCommas(t.red) : this.taikhoan.string = n.numberWithCommas(t.xu);
},
Zeus: function(t) {
var e = this;
if (void 0 !== t.status) if (1 === t.status) {
Promise.all(t.cel.map(function(t, i) {
Promise.all(t.map(function(t, n) {
e.reels[i].icons[n].setIcon(t, !0);
}));
}));
this.runReels(this.isSpeed);
this.H_line_win = t.line_win;
this.H_win = t.win;
this.H_free = t.free;
this.isBonus = t.isBonus;
this.isNoHu = t.isNoHu;
this.isBigWin = t.isBigWin;
this.isFree = t.isFree;
this.isFreeSpin = !!t.free;
} else this.resetSpin();
t.phien && (this.phien.string = "#" + t.phien);
t.bonus && this.gameBonus.onData(t.bonus);
t.log && this.dialog.history.onData(t.log);
t.top && this.dialog.top.onData(t.top);
t.notice && this.addNotice(t.notice);
},
EF_vuathang: function() {
this.showLineWin(!0);
this.vuathang.string = n.numberWithCommas(this.H_win);
this.buttonSpin.active = !this.H_free;
this.buttonSpinSpeed.active = !this.H_free;
this.freeLabel.string = "Free: " + this.H_free;
this.freeLabel.node.active = !!this.H_free;
},
onLineWin: function(t) {
var e = this;
Promise.all(this.H_line_win.map(function(i) {
var n = e.Line.mainLines[i.line - 1];
if (t) {
n.ef = !0;
n.onShow();
} else {
n.ef = !1;
n.onHidden();
}
}));
},
showLineWin: function(t) {
this.onLineWin(t);
if (!(t || this.isNoHu || this.isBigWin || this.isAuto || this.isFreeSpin)) {
this.eflineN = 0;
this.efLineWin();
}
},
efLineWin: function(t) {
if (this.H_line_win.length) {
this.node.stopAllActions();
void 0 === this.H_line_win[this.eflineN] && (this.eflineN = 0);
this.efOneLineWin(this.eflineN, !0);
var e = cc.callFunc(function() {
this.efOneLineWin(this.eflineN, !1);
this.eflineN += 1;
this.efLineWin();
}, this);
this.node.runAction(cc.sequence(cc.delayTime(1.5), e));
}
},
efOneLineWin: function(t, e) {
t = this.H_line_win[this.eflineN].line;
var i = this.Line.mainLines[t - 1];
if (e) {
i.ef = !0;
i.onShow();
} else {
i.ef = !1;
i.onHidden();
}
},
hieuUng: function() {
if (this.isBigWin && !this.isNoHu) {
this.BigWin.node.active = !0;
this.BigWin.play();
this.oldBigWin = !0;
} else if (this.isNoHu) {
this.NoHu.node.active = !0;
this.NoHu.play();
} else if (this.isBonus) {
this.EF_Bonus.node.active = !0;
this.EF_Bonus.play();
cc.RedT.audio.playEf("bonus");
} else if (this.isFree) {
this.EF_Free.node.active = !0;
this.EF_Free.play();
} else if (this.H_win > 0) {
var t = new cc.Node();
t.addComponent(cc.Label);
(t = t.getComponent(cc.Label)).string = n.numberWithCommas(this.H_win);
t.font = cc.RedT.util.fontCong;
t.lineHeight = 130;
t.fontSize = 25;
t.node.position = cc.v2(0, 21);
this.nodeNotice.addChild(t.node);
!this.oldBigWin && this._playSFX(this.audioWin);
t.node.runAction(cc.sequence(cc.moveTo(1.2, cc.v2(0, 105)), cc.callFunc(function() {
this.speed = 0;
t.node.destroy();
this.hieuUng();
this.showLineWin(!1);
}, this)));
this.H_win = 0;
this.oldBigWin = !1;
} else this.isAuto || this.isFreeSpin ? this.timeOut = setTimeout(function() {
this.onAutoSpin();
this.speed = 400;
}.bind(this), this.speed) : this.resetSpin();
},
onChangerBet: function(t, e) {
this._playSFX(this.audioClick);
this.betSelect++;
this.betSelect > 2 && (this.betSelect = 0);
this.bet.string = e;
this.tong.string = n.numberWithCommas(this.Line.data.length * n.getOnlyNumberInString(this.bet.string));
this.Game.active = !0;
this.ChonCuoc.active = !1;
this.resetSpin();
this.onGetHu();
},
onSelectBet: function() {
this.Game.active = !1;
this.ChonCuoc.active = !0;
this.onGetAllHu();
this.onGetHu();
},
changerCoint: function() {
this.red = !this.red;
this.nodeRed.active = !this.nodeRed.active;
this.nodeXu.active = !this.nodeXu.active;
this.userData(cc.RedT.user);
this.onGetHu();
},
onClickAuto: function() {
this._playSFX(this.audioClick);
this.onAuto();
},
onAuto: function() {
this.isAuto = !this.isAuto;
this.isAuto ? this.buttonAuto.color = cc.Color.WHITE : this.buttonAuto.color = this.buttonAuto.color.fromHEX("#8A8A8A");
},
onClickSpin: function() {
this.isSpeed = !1;
this.onSpin();
},
onClickSpinSpeed: function() {
this.isSpeed = !0;
this.isAuto && (this.isForceSpeed = !0);
this.onSpin();
},
onAutoSpin: function() {
this._playSFX(this.audioClickSpin);
this.onGetSpin();
},
onSpin: function() {
if (this.Line.data.length < 1) this.addNotice("Chọn ít nhất 1 dòng"); else if (!this.isSpin) {
this._playSFX(this.audioClickSpin);
this.node.stopAllActions();
void 0 !== this.eflineN && void 0 !== this.H_line_win && this.H_line_win.length && this.efOneLineWin(this.eflineN, !1);
this.eflineO = this.eflineN = 0;
this.isSpin = !0;
this.setSpin();
this.onGetSpin();
}
},
setSpin: function() {
this.buttonLine.pauseSystemEvents();
this.buttonSpin.pauseSystemEvents();
this.buttonSpinSpeed.pauseSystemEvents();
this.buttonCoint.pauseSystemEvents();
this.buttonBet.pauseSystemEvents();
},
resetSpin: function() {
this.isAuto && this.onAuto();
this.isSpin = !1;
this.isForceSpeed = !1;
this.buttonLine.resumeSystemEvents();
this.buttonSpin.resumeSystemEvents();
this.buttonSpinSpeed.resumeSystemEvents();
this.buttonCoint.resumeSystemEvents();
this.buttonBet.resumeSystemEvents();
},
runReels: function(t) {
var e = this;
Promise.all(this.reels.map(function(i, n) {
t || e.isForceSpeed ? i.spin(n, .25) : i.spin(n, 1);
}));
this.isSpeed = !1;
},
copy: function() {
Promise.all(this.reels.map(function(t) {
t.icons[t.icons.length - 1].setIcon(t.icons[2].data);
t.icons[t.icons.length - 2].setIcon(t.icons[1].data);
t.icons[t.icons.length - 3].setIcon(t.icons[0].data);
}));
},
random: function() {
Promise.all(this.reels.map(function(t) {
Promise.all(t.icons.map(function(e, i) {
i > 2 && i < t.icons.length - 3 && e.random();
}));
}));
},
onGetSpin: function() {
cc.RedT.send({
g: {
zeus: {
spin: {
cuoc: n.getOnlyNumberInString(this.bet.string),
red: this.red,
line: this.Line.data
}
}
}
});
},
addNotice: function(t) {
var e = cc.instantiate(this.prefabNotice);
e.getComponent("mini_warning").text.string = t;
this.nodeNotice.addChild(e);
},
backGame: function() {
cc.RedT.inGame.notice.show({
title: "Thoát game",
text: "Xác nhận hành động.\nHành động thực hiện thoát khỏi game này?",
button: {
type: "exit_game",
text: "Thoát"
}
});
},
signOut: function() {
cc.director.preloadScene("MainGame", function() {
cc.director.loadScene("MainGame", function() {
cc.RedT.inGame.signOut();
});
});
},
onGetHu: function() {
var t = this;
if (void 0 !== cc.RedT.setting.topHu.data) {
var e = this, i = n.getOnlyNumberInString(e.bet.string);
Promise.all(cc.RedT.setting.topHu.data.zeus.filter(function(t) {
return t.type == i && t.red == e.red;
})).then(function(e) {
var i = n.getOnlyNumberInString(t.hu.string), o = e[0].bet;
i - o != 0 && n.numberTo(t.hu, i, o, 2e3, !0);
});
}
},
onGetAllHu: function() {
var t = this;
if (void 0 !== cc.RedT.setting.topHu.data) {
n.getOnlyNumberInString(this.bet.string);
Promise.all(cc.RedT.setting.topHu.data.zeus.filter(function(t) {
return 1 == t.red;
})).then(function(e) {
var i = e.filter(function(t) {
return 100 == t.type;
}), o = e.filter(function(t) {
return 1e3 == t.type;
}), c = e.filter(function(t) {
return 1e4 == t.type;
}), s = n.getOnlyNumberInString(t.hu100.string), a = n.getOnlyNumberInString(t.hu1000.string), h = n.getOnlyNumberInString(t.hu10000.string);
s - i[0].bet != 0 && n.numberTo(t.hu100, n.getOnlyNumberInString(t.hu100.string), i[0].bet, 4900, !0);
a - o[0].bet != 0 && n.numberTo(t.hu1000, n.getOnlyNumberInString(t.hu1000.string), o[0].bet, 4900, !0);
h - c[0].bet != 0 && n.numberTo(t.hu10000, n.getOnlyNumberInString(t.hu10000.string), c[0].bet, 4900, !0);
});
}
},
playMusic: function() {
this.audioBG.play();
},
pauseMusic: function() {
this.audioBG.pause();
},
onSetAudio: function() {
if (cc.RedT.isSoundBackground()) {
cc.RedT.setSoundBackground(!1);
this.pauseMusic();
cc.RedT.IS_SOUND = !1;
cc.RedT.setSoundGame(!1);
this.audioIcon.spriteFrame = this.audioIcons[0];
} else {
cc.RedT.setSoundBackground(!0);
this.playMusic();
cc.RedT.IS_SOUND = !0;
cc.RedT.setSoundGame(!0);
this.audioIcon.spriteFrame = this.audioIcons[1];
}
}
});
cc._RF.pop();
}, {
Helper: "Helper",
Notice: "Notice",
Zeus_dialog: "Zeus_dialog",
Zeus_lines: "Zeus_lines",
Zeus_playBonus: "Zeus_playBonus",
Zeus_reel: "Zeus_reel"
} ],
bankNap: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "72fdbys1l5HW7J4wCB8Lxax", "bankNap");
var n = t("BrowserUtil"), o = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
labelBank: cc.Label,
labelNumber: cc.Label,
labelName: cc.Label,
labelBranch: cc.Label,
labelUID: cc.Label,
moreBank: cc.Node,
scrollviewBank: {
default: null,
type: cc.ScrollView
},
prefab: {
default: null,
type: cc.Prefab
},
isLoad: !1,
moreHinhThuc: cc.Node,
bodyNap: cc.Node,
labelHinhthuc: cc.Label,
inputTien: cc.EditBox,
inputName: cc.EditBox,
inputKhop: cc.EditBox,
inputSTK: cc.EditBox,
inputNameGo: cc.EditBox,
hinhThuc: ""
},
onLoad: function() {
this.isLoad || cc.RedT.send({
shop: {
bank: {
list: !0
}
}
});
var t = this;
this.editboxs = [ this.inputTien, this.inputName ];
this.keyHandle = function(e) {
return e.keyCode === cc.macro.KEY.tab ? (t.isTop() && t.changeNextFocusEditBox(), 
e.preventDefault && e.preventDefault(), !1) : e.keyCode === cc.macro.KEY.enter ? (n.focusGame(), 
t.onNapClick(), e.preventDefault && e.preventDefault(), !1) : void 0;
};
},
onEnable: function() {
this.labelUID.string = cc.RedT.user.UID;
cc.sys.isBrowser && this.addEvent();
},
onDisable: function() {
this.moreBank.active = this.moreHinhThuc.active = !1;
cc.sys.isBrowser && this.removeEvent();
this.clean();
},
addEvent: function() {
cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
for (var t in this.editboxs) n.getHTMLElementByEditBox(this.editboxs[t]).addEventListener("keydown", this.keyHandle, !1);
},
removeEvent: function() {
for (var t in this.editboxs) n.getHTMLElementByEditBox(this.editboxs[t]).removeEventListener("keydown", this.keyHandle, !1);
cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
},
onKeyDown: function(t) {
switch (t.keyCode) {
case cc.macro.KEY.tab:
this.isTop() && this.changeNextFocusEditBox();
break;

case cc.macro.KEY.enter:
this.isTop() && this.onNapClick();
}
},
changeNextFocusEditBox: function() {
for (var t = !1, e = 0, i = this.editboxs.length; e < i; e++) if (n.checkEditBoxFocus(this.editboxs[e])) {
n.focusEditBox(this.editboxs[e]);
t = !0;
break;
}
!t && 0 < this.editboxs.length && n.focusEditBox(this.editboxs[0]);
},
isTop: function() {
return !cc.RedT.inGame.notice.node.active && !cc.RedT.inGame.loading.active;
},
clean: function() {
this.inputTien.string = this.inputName.string = this.inputSTK.string = this.inputKhop.string = this.inputNameGo.string = "";
},
toggleMoreBank: function() {
this.moreBank.active = !this.moreBank.active;
},
toggleHinhThuc: function() {
this.moreHinhThuc.active = !this.moreHinhThuc.active;
},
onData: function(t) {
var e = this;
this.isLoad = !0;
var i = this;
t.length > 0 && Promise.all(t.map(function(t, e) {
var n = cc.instantiate(i.prefab), o = n.getComponent("NapRed_itemOne");
o.init(i, "i_arg", "labelBank");
o.text.string = t.bank;
i.scrollviewBank.content.addChild(n);
o.data = t;
return o;
})).then(function(t) {
e.i_arg = t;
});
},
backT: function(t) {
this.labelNumber.string = t.number;
this.labelName.string = t.name;
this.labelBranch.string = t.branch;
},
hinhThucSelect: function(t, e) {
this.hinhThuc = e;
t.target.parent.children.forEach(function(t) {
if (t.name === e) {
t.children[0].active = !0;
this.labelHinhthuc.string = t.children[1].getComponent(cc.Label).string;
} else t.children[0].active = !1;
this.moreHinhThuc.active = !1;
}.bind(this));
switch (e) {
case "1":
this.bodyNap.children[0].active = !0;
this.bodyNap.children[1].active = !1;
this.bodyNap.children[2].active = !1;
break;

case "2":
this.bodyNap.children[0].active = !1;
this.bodyNap.children[1].active = !0;
this.bodyNap.children[2].active = !1;
break;

case "3":
this.bodyNap.children[0].active = !1;
this.bodyNap.children[1].active = !1;
this.bodyNap.children[2].active = !0;
}
},
onChangerRed: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
t = o.numberWithCommas(o.getOnlyNumberInString(t));
this.inputTien.string = 0 == t ? "" : t;
},
onClickNap: function() {
if (this.labelNumber.string.length) if ("1" === this.hinhThuc && this.inputKhop.string.length < 6) cc.RedT.inGame.notice.show({
title: "NẠP RIK",
text: "Nhập mã giao dịch ngân hàng..."
}); else if ("2" === this.hinhThuc && this.inputSTK.string.length < 6) cc.RedT.inGame.notice.show({
title: "NẠP RIK",
text: "Vui lòng nhập chính xác số tài khoản của bạn."
}); else if ("3" === this.hinhThuc && this.inputNameGo.string.length < 6) cc.RedT.inGame.notice.show({
title: "NẠP RIK",
text: "Vui lòng nhập Họ Tên người đi chuyển tiền."
}); else if (o.getOnlyNumberInString(this.inputTien.string) >> 0 < 2e5) cc.RedT.inGame.notice.show({
title: "NẠP RIK",
text: "Nạp tối thiểu 200.000, tối đa 1.000.000.000"
}); else if (this.inputName.string.length < 6) cc.RedT.inGame.notice.show({
title: "NẠP RIK",
text: "Vui lòng nhập chính xác Họ Tên người gửi"
}); else {
var t = {
hinhthuc: this.hinhThuc,
bank: this.labelNumber.string,
money: o.getOnlyNumberInString(this.inputTien.string),
name: this.inputName.string
};
"1" === this.hinhThuc && (t.khop = this.inputKhop.string);
"2" === this.hinhThuc && (t.stk = this.inputSTK.string);
"3" === this.hinhThuc && (t.namego = this.inputNameGo.string);
t = {
shop: {
bank: {
nap: t
}
}
};
cc.RedT.send(t);
} else cc.RedT.inGame.notice.show({
title: "NẠP RIK",
text: "Vui lòng chọn ngân hàng muốn nạp."
});
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
bankRut: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "e6e82lXaWpFFKSeuqaCN4Qt", "bankRut");
var n = t("BrowserUtil"), o = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
moreBank: cc.Node,
textBank: cc.Label,
ThucNhan: cc.Label,
scrollviewBank: {
default: null,
type: cc.ScrollView
},
prefabRight: {
default: null,
type: cc.Prefab
},
editNumber: cc.EditBox,
editName: cc.EditBox,
editRut: cc.EditBox,
editOTP: cc.EditBox,
typeOTP: "",
bankCode: ""
},
init: function() {
var t = this;
this.editboxs = [ this.editNumber, this.editName, this.editRut, this.editOTP ];
this.keyHandle = function(e) {
return e.keyCode === cc.macro.KEY.tab ? (t.isTop() && t.changeNextFocusEditBox(), 
e.preventDefault && e.preventDefault(), !1) : e.keyCode === cc.macro.KEY.enter ? (n.focusGame(), 
t.onNapClick(), e.preventDefault && e.preventDefault(), !1) : void 0;
};
},
onEnable: function() {
cc.sys.isBrowser && this.addEvent();
this.isLoaded || cc.RedT.send({
shop: {
info_rut: !0
}
});
},
toggleMoreBank: function() {
this.moreBank.active = !this.moreBank.active;
},
onDisable: function() {
this.moreBank.active = !1;
cc.sys.isBrowser && this.removeEvent();
this.clean();
},
addEvent: function() {
cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
for (var t in this.editboxs) n.getHTMLElementByEditBox(this.editboxs[t]).addEventListener("keydown", this.keyHandle, !1);
},
removeEvent: function() {
for (var t in this.editboxs) n.getHTMLElementByEditBox(this.editboxs[t]).removeEventListener("keydown", this.keyHandle, !1);
cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
},
onKeyDown: function(t) {
switch (t.keyCode) {
case cc.macro.KEY.tab:
this.isTop() && this.changeNextFocusEditBox();
break;

case cc.macro.KEY.enter:
this.isTop() && this.onNapClick();
}
},
changeNextFocusEditBox: function() {
for (var t = !1, e = 0, i = this.editboxs.length; e < i; e++) if (n.checkEditBoxFocus(this.editboxs[e])) {
n.focusEditBox(this.editboxs[e]);
t = !0;
break;
}
!t && 0 < this.editboxs.length && n.focusEditBox(this.editboxs[0]);
},
isTop: function() {
return !cc.RedT.inGame.notice.node.active && !cc.RedT.inGame.loading.active && !this.moreBank.active;
},
clean: function() {
this.editNumber.string = this.editName.string = this.editRut.string = this.editOTP.string = this.ThucNhan.string = "";
},
onClickOTP: function() {
cc.RedT.send({
otp: {
type: "1"
}
});
},
changerTypeOTP: function(t) {
this.typeOTP = t.node.name;
},
infoSet: function(t, e, i) {
var n = this, o = arguments.length > 3 && void 0 !== arguments[3] && arguments[3], c = this;
t.length > 0 && Promise.all(t.map(function(t, n) {
var s = cc.instantiate(c.prefabRight), a = s.getComponent("NapRed_itemOne");
a.init(c, e, i);
if (o) {
a.text.string = t.name;
a.code = t.code;
c.scrollviewBank.content.addChild(s);
}
return a;
})).then(function(t) {
n[e] = t;
});
},
onData: function(t) {
if (void 0 !== t.data && !this.isLoaded) {
this.isLoaded = !0;
void 0 !== t.data && this.infoSet(t.data, "nhamangList", "textBank", !0);
}
},
onChangerRed: function() {
var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
t = o.numberWithCommas(o.getOnlyNumberInString(t));
this.editRut.string = 0 == t ? "" : t;
var e = o.getOnlyNumberInString(t);
this.ThucNhan.string = o.numberWithCommas(Math.floor(1 * e / 1));
},
onClick: function() {
var t = null;
o.isEmpty(this.editNumber.string) || o.isEmpty(this.editName.string) || o.isEmpty(this.editRut.string) || o.isEmpty(this.editOTP.string) ? t = "Kiểm tra lại các thông tin..." : o.getOnlyNumberInString(this.editRut.string) < 25e4 && (t = "Số tiền RÚT tối thiểu là 250.000.");
t ? cc.RedT.inGame.notice.show({
title: "LỖI",
text: t
}) : cc.RedT.send({
shop: {
bank: {
rut: {
bank: this.bankCode,
number: this.editNumber.string,
name: this.editName.string,
rut: o.getOnlyNumberInString(this.editRut.string),
otp: this.editOTP.string
}
}
}
});
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
bgLoading: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "b29c3M7ShVDkKHKf+49LVQZ", "bgLoading");
cc.Class({
extends: cc.Component,
properties: {
text: cc.Label
},
onDisable: function() {
this.text.string = "";
},
onData: function(t) {
void 0 !== t.active && (this.node.active = t.active);
void 0 !== t.text && (this.text.string = t.text);
}
});
cc._RF.pop();
}, {} ],
candy_reel_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "b4e909CNdZP+6qJOWfTDfrb", "candy_reel_item");
cc.Class({
extends: cc.Component,
properties: {
icon: cc.Sprite
},
init: function(t) {
this.RedT = t;
},
random: function() {
var t = ~~(7 * Math.random());
this.setIcon(t);
return t;
},
setIcon: function(t) {
var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
this.icon.spriteFrame = this.RedT.icons[t];
e && (this.data = t);
}
});
cc._RF.pop();
}, {} ],
coinMove: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "3d87aC++gdBp5DXsSzdNYOj", "coinMove");
cc.Class({
extends: cc.Component,
properties: {
Distance: {
default: 60,
tooltip: "在起点附近随机位置生成金币的最大距离"
},
Delay: {
default: .4,
tooltip: "从生成到开始移动的延迟（秒）"
},
Time: {
default: .3,
tooltip: "金币从起点到终点运动的总时间（秒）"
}
},
SetData: function(t, e) {
this._posStart = new cc.Vec2(t.x + (2 * Math.random() - 1) * this.Distance, t.y + (2 * Math.random() - 1) * this.Distance);
this._posEnd = e;
this._direction = new cc.Vec2(this._posEnd.x - this._posStart.x, this._posEnd.y - this._posStart.y);
this._move = !1;
this._accMoveTime = 0;
this.node.x = this._posStart.x;
this.node.y = this._posStart.y;
this.scheduleOnce(function() {
this._move = !0;
}, this.Delay);
var i = this.getComponent(cc.Animation);
i.playAdditive("coinScale");
i.playAdditive("coinSpin");
},
update: function(t) {
if (this._move) {
this._accMoveTime += t;
if (this._accMoveTime > this.Time) {
this.node.x = this._posEnd.x;
this.node.y = this._posEnd.y;
this._move = !1;
this.node.destroy();
return;
}
var e = this._accMoveTime / this.Time, i = new cc.Vec2(e * this._direction.x, e * this._direction.y);
this.node.x = this._posStart.x + i.x;
this.node.y = this._posStart.y + i.y;
}
}
});
cc._RF.pop();
}, {} ],
dialogHuongDan: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "495d5jwe0pGBIw/joWKvc/9", "dialogHuongDan");
cc.Class({
extends: cc.Component,
properties: {
game: cc.Node,
content: cc.Node,
title: cc.Label
},
init: function() {},
selectGame: function(t, e) {
this.select(e);
},
select: function(t) {
cc.RedT.audio.playClick();
var e = this;
Promise.all(this.game.map(function(i) {
var n = i.node.parent;
if (n.name == t) {
n.children[0].active = !0;
n.pauseSystemEvents();
e.title.string = i.string;
} else {
n.children[0].active = !1;
n.resumeSystemEvents();
}
}));
Promise.all(this.content.children.map(function(e) {
e.name == t ? e.active = !0 : e.active = !1;
}));
}
});
cc._RF.pop();
}, {} ],
hoverScale: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "d8e56/FW3FDTab9UduKTQcx", "hoverScale");
cc.Class({
extends: cc.Component,
properties: {
pressedScale: 1,
transDuration: 0
},
onLoad: function() {
this.initScale = this.node.scale;
this.scaleOnAction = cc.scaleTo(this.transDuration, this.pressedScale);
this.scaleOffAction = cc.scaleTo(this.transDuration, this.initScale);
},
onEnable: function() {
this.node.on(cc.Node.EventType.MOUSE_ENTER, this.eventOnHover, this);
this.node.on(cc.Node.EventType.MOUSE_LEAVE, this.eventOffHover, this);
},
onDisable: function() {
this.node.off(cc.Node.EventType.MOUSE_ENTER, this.eventOnHover, this);
this.node.off(cc.Node.EventType.MOUSE_LEAVE, this.eventOffHover, this);
},
eventOnHover: function(t) {
this.node.stopAllActions();
this.node.runAction(this.scaleOnAction);
},
eventOffHover: function(t) {
this.node.stopAllActions();
this.node.runAction(this.scaleOffAction);
}
});
cc._RF.pop();
}, {} ],
iMessage_item: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "08764g9eU1CrrI+WH3GeclU", "iMessage_item");
cc.Class({
extends: cc.Component,
properties: {
dot: cc.Node,
bg: cc.Node,
title: cc.Label,
time: cc.Label
},
init: function(t) {
this.RedT = t;
},
onClick: function() {
this.RedT.onContentClick(this);
}
});
cc._RF.pop();
}, {} ],
iMessage: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "70701e+jWpDjIG4eqgLNgmQ", "iMessage");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
news: cc.Label,
text: cc.Label,
item: cc.Prefab,
content: cc.Node,
message: ""
},
onLoad: function() {},
onEnable: function() {
cc.RedT.send({
message: {
update: !0
}
});
this.node.runAction(cc.RedT.inGame.dialog.actionShow);
},
onDisable: function() {
cc.RedT.inGame.dialog.resetSizeDialog(this.node);
},
onBackPopup: function() {
cc.RedT.inGame.dialog.onClickBack();
},
onData: function(t) {
if (t.list) {
this.list(t.list);
this.countNews(t.list);
}
t.text && (this.text.string = t.text);
if (t.news) if (t.news > 0) {
this.news.node.active = !0;
this.news.string = t.news;
} else this.news.node.active = !1;
},
list: function(t) {
this.content.removeAllChildren();
var e = this;
Promise.all(t.map(function(t) {
var i = cc.instantiate(e.item);
(i = i.getComponent("iMessage_item")).init(e);
i.title.string = t.title;
i.time.string = n.getStringDateByTime(t.time);
i.bg.active = !t.read;
i.dot.active = e.message == t._id;
i.message = t._id;
e.content.addChild(i.node);
}));
},
onContentClick: function(t) {
var e = this;
if (t.message != this.message) {
t.bg.active = !1;
cc.RedT.audio.playClick();
this.message = t.message;
this.getContent();
t.dot.active = !0;
Promise.all(this.content.children.filter(function(e) {
e != t.node && (e.children[0].active = !1);
return e.children[1].active;
})).then(function(t) {
if ((t = t.length) > 0) {
e.news.node.active = !0;
e.news.string = t;
} else e.news.node.active = !1;
});
}
},
getContent: function(t) {
cc.RedT.send({
message: {
view: this.message
}
});
},
reset: function() {
this.content.removeAllChildren();
this.text.string = this.news.string = "";
this.news.node.active = !1;
},
countNews: function(t) {
var e = t.filter(function(t) {
return !t.read;
});
if ((e = e.length) > 0) {
this.news.node.active = !0;
this.news.string = e;
} else this.news.node.active = !1;
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
iconGameBai: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "fbc3eTUdt9BmbNrv1zsHCzT", "iconGameBai");
cc.Class({
extends: cc.Component,
properties: {
title: "",
game: "",
table2: !0
},
openGame: function() {
cc.RedT.IS_LOGIN ? cc.RedT.inGame.MenuRoom.openGame(this) : cc.RedT.inGame.dialog.showSignIn();
}
});
cc._RF.pop();
}, {} ],
iconGameHu: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "b464brTuF9Jkai40xgtDiaq", "iconGameHu");
cc.Class({
extends: cc.Component,
properties: {
hu100: cc.Label,
hu1k: cc.Label,
hu10k: cc.Label
}
});
cc._RF.pop();
}, {} ],
iconGameTaiXiu: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "f5d22VsrEZLuKko/Zky02F3", "iconGameTaiXiu");
cc.Class({
extends: cc.Component,
properties: {
tai: cc.Label,
xiu: cc.Label
}
});
cc._RF.pop();
}, {} ],
iconGame: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "a98fahA/phPCZvYv2bUDP1B", "iconGame");
cc.Class({
extends: cc.Component,
properties: {
slot: !1,
mini: !1,
bai: !1,
khac: !1
}
});
cc._RF.pop();
}, {} ],
inputNumber: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "b256eN/SStPwZz/lPd3MUDm", "inputNumber");
var n = t("BrowserUtil");
cc.Class({
extends: cc.Component,
properties: {},
onLoad: function() {
var t = this;
this.editbox = this.node.getComponent(cc.EditBox);
this.onShift = !1;
this.eventKeyDown = function(e) {
if (16 === e.keyCode) {
t.onShift = !0;
e.preventDefault();
}
!t.onShift && (e.keyCode >= 48 && e.keyCode <= 57 || e.keyCode >= 96 && e.keyCode <= 105 || e.keyCode >= 37 && e.keyCode <= 40 || 107 === e.keyCode || 109 === e.keyCode || 189 === e.keyCode || 8 === e.keyCode || 13 === e.keyCode) || e.preventDefault();
};
this.eventKeyUp = function(e) {
if (16 === e.keyCode) {
e.preventDefault();
t.onShift = !1;
}
};
},
onEnable: function() {
cc.sys.isBrowser && this.addEventTT();
},
onDisable: function() {
cc.sys.isBrowser && this.removeEventTT();
},
addEventTT: function() {
n.getHTMLElementByEditBox(this.editbox).addEventListener("keydown", this.eventKeyDown, !1);
n.getHTMLElementByEditBox(this.editbox).addEventListener("keyup", this.eventKeyUp, !1);
},
removeEventTT: function() {
n.getHTMLElementByEditBox(this.editbox).removeEventListener("keydown", this.eventKeyDown, !1);
n.getHTMLElementByEditBox(this.editbox).removeEventListener("keyup", this.eventKeyUp, !1);
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil"
} ],
itemContentMenu: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "ef328suSpdNvq+JTw+borMJ", "itemContentMenu");
cc.Class({
extends: cc.Component,
properties: {
nodeUnSelect: {
default: null,
type: cc.Node
},
nodeSelect: {
default: null,
type: cc.Node
},
text: {
default: null,
type: cc.Node
}
},
select: function() {
this.nodeUnSelect.active = !1;
this.nodeSelect.active = !0;
this.node.pauseSystemEvents();
},
unselect: function() {
this.nodeUnSelect.active = !0;
this.nodeSelect.active = !1;
this.node.resumeSystemEvents();
}
});
cc._RF.pop();
}, {} ],
itemHeadMenuV2: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "df31dXhPchIEaRZsNPv0W4n", "itemHeadMenuV2");
cc.Class({
extends: cc.Component,
properties: {
nodeUnSelect: {
default: null,
type: cc.Node
},
nodeSelect: {
default: null,
type: cc.Node
},
textSelect: {
default: null,
type: cc.Node
},
textUnSelect: {
default: null,
type: cc.Node
}
},
select: function() {
this.nodeUnSelect.active = !1;
this.nodeSelect.active = !0;
this.textUnSelect.active = !1;
this.textSelect.active = !0;
this.node.pauseSystemEvents();
},
unselect: function() {
this.nodeUnSelect.active = !0;
this.nodeSelect.active = !1;
this.textUnSelect.active = !0;
this.textSelect.active = !1;
this.node.resumeSystemEvents();
}
});
cc._RF.pop();
}, {} ],
itemHeadMenu: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "b32dagCeD1MVp59ygCz6Tsa", "itemHeadMenu");
cc.Class({
extends: cc.Component,
properties: {
nodeUnSelect: {
default: null,
type: cc.Node
},
nodeSelect: {
default: null,
type: cc.Node
}
},
select: function() {
this.nodeUnSelect.active = !1;
this.nodeSelect.active = !0;
this.node.pauseSystemEvents();
},
unselect: function() {
this.nodeUnSelect.active = !0;
this.nodeSelect.active = !1;
this.node.resumeSystemEvents();
}
});
cc._RF.pop();
}, {} ],
kq_xsmb: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "be9a6IySFBEu49sR6oBJMoM", "kq_xsmb");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
date_count: 0,
date: cc.Label,
datePre: cc.Label,
dateNext: cc.Label,
gdb: cc.Label,
g1: cc.Label,
g2: {
default: [],
type: cc.Label
},
g3: {
default: [],
type: cc.Label
},
g4: {
default: [],
type: cc.Label
},
g5: {
default: [],
type: cc.Label
},
g6: {
default: [],
type: cc.Label
},
g7: {
default: [],
type: cc.Label
},
tk0: cc.Label,
tk1: cc.Label,
tk2: cc.Label,
tk3: cc.Label,
tk4: cc.Label,
tk5: cc.Label,
tk6: cc.Label,
tk7: cc.Label,
tk8: cc.Label,
tk9: cc.Label
},
onLoad: function() {
var t = new Date();
this.date.string = n.numberPad(t.getDate(), 2) + "/" + n.numberPad(t.getMonth() + 1, 2) + "/" + t.getFullYear();
this.get_data();
(t = new Date()).setDate(t.getDate() + 1);
this.dateNext.string = n.numberPad(t.getDate(), 2) + "/" + n.numberPad(t.getMonth() + 1, 2) + "/" + t.getFullYear();
(t = new Date()).setDate(t.getDate() - 1);
this.datePre.string = n.numberPad(t.getDate(), 2) + "/" + n.numberPad(t.getMonth() + 1, 2) + "/" + t.getFullYear();
},
get_data: function() {
cc.RedT.send({
g: {
xs: {
mb: {
kq: this.date.string
}
}
}
});
},
onDatePre: function() {
this.date_count--;
this.onDateChanget();
},
onDateNext: function() {
this.date_count++;
this.onDateChanget();
},
onDateChanget: function() {
this.reset();
var t = new Date();
t.setDate(t.getDate() + this.date_count);
this.date.string = n.numberPad(t.getDate(), 2) + "/" + n.numberPad(t.getMonth() + 1, 2) + "/" + t.getFullYear();
this.get_data();
(t = new Date()).setDate(t.getDate() + this.date_count + 1);
this.dateNext.string = n.numberPad(t.getDate(), 2) + "/" + n.numberPad(t.getMonth() + 1, 2) + "/" + t.getFullYear();
(t = new Date()).setDate(t.getDate() + this.date_count - 1);
this.datePre.string = n.numberPad(t.getDate(), 2) + "/" + n.numberPad(t.getMonth() + 1, 2) + "/" + t.getFullYear();
},
reset: function() {
this.gdb.string = "-----";
this.g1.string = "-----";
this.g2.forEach(function(t) {
t.string = "-----";
});
this.g3.forEach(function(t) {
t.string = "-----";
});
this.g4.forEach(function(t) {
t.string = "----";
});
this.g5.forEach(function(t) {
t.string = "----";
});
this.g6.forEach(function(t) {
t.string = "---";
});
this.g7.forEach(function(t) {
t.string = "--";
});
this.tk0.string = "-";
this.tk1.string = "-";
this.tk2.string = "-";
this.tk3.string = "-";
this.tk4.string = "-";
this.tk5.string = "-";
this.tk6.string = "-";
this.tk7.string = "-";
this.tk8.string = "-";
this.tk9.string = "-";
},
onData: function(t) {
t.gdb && (this.gdb.string = t.gdb);
t.g1 && (this.g1.string = t.g1);
this.g2.forEach(function(e, i) {
t.g2[i] && (e.string = t.g2[i]);
});
this.g3.forEach(function(e, i) {
t.g3[i] && (e.string = t.g3[i]);
});
this.g4.forEach(function(e, i) {
t.g4[i] && (e.string = t.g4[i]);
});
this.g5.forEach(function(e, i) {
t.g5[i] && (e.string = t.g5[i]);
});
this.g6.forEach(function(e, i) {
t.g6[i] && (e.string = t.g6[i]);
});
this.g7.forEach(function(e, i) {
t.g7[i] && (e.string = t.g7[i]);
});
var e = [ t.g1.substring(t.g1.length - 2), t.gdb.substring(t.gdb.length - 2) ].concat(t.g2.map(function(t) {
return t.substring(t.length - 2);
}), t.g3.map(function(t) {
return t.substring(t.length - 2);
}), t.g4.map(function(t) {
return t.substring(t.length - 2);
}), t.g5.map(function(t) {
return t.substring(t.length - 2);
}), t.g6.map(function(t) {
return t.substring(t.length - 2);
}), t.g7.map(function(t) {
return t.substring(t.length - 2);
})), i = e.filter(function(t) {
return "0" === t.charAt();
}), n = e.filter(function(t) {
return "1" === t.charAt();
}), o = e.filter(function(t) {
return "2" === t.charAt();
}), c = e.filter(function(t) {
return "3" === t.charAt();
}), s = e.filter(function(t) {
return "4" === t.charAt();
}), a = e.filter(function(t) {
return "5" === t.charAt();
}), h = e.filter(function(t) {
return "6" === t.charAt();
}), r = e.filter(function(t) {
return "7" === t.charAt();
}), l = e.filter(function(t) {
return "8" === t.charAt();
}), u = e.filter(function(t) {
return "9" === t.charAt();
});
i.length > 0 && (this.tk0.string = i.join(", "));
n.length > 0 && (this.tk1.string = n.join(", "));
o.length > 0 && (this.tk2.string = o.join(", "));
c.length > 0 && (this.tk3.string = c.join(", "));
s.length > 0 && (this.tk4.string = s.join(", "));
a.length > 0 && (this.tk5.string = a.join(", "));
h.length > 0 && (this.tk6.string = h.join(", "));
r.length > 0 && (this.tk7.string = r.join(", "));
l.length > 0 && (this.tk8.string = l.join(", "));
u.length > 0 && (this.tk9.string = u.join(", "));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
miniBigWin: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "1b515XdufZBFaOcG7quJClg", "miniBigWin");
var n = t("Helper").numberTo;
cc.Class({
extends: cc.Component,
properties: {
bet: cc.Label
},
onLoad: function() {
this.bet.font = this.node.red ? cc.RedT.util.fontCong : cc.RedT.util.fontTru;
this.node.runAction(cc.sequence(cc.delayTime(.2), cc.callFunc(function() {
cc.RedT.audio.playEf("moneywin");
n(this.bet, 0, this.node.bet, 1e3, !0);
}, this)));
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
mini_warning: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "c832drPwXtFyrxiOXSF7olJ", "mini_warning");
cc.Class({
extends: cc.Component,
properties: {
text: {
default: null,
type: cc.Label
}
},
onEnable: function() {
this.node.runAction(cc.sequence(cc.spawn(cc.scaleTo(.09, 1), cc.fadeTo(.09, 255)), cc.delayTime(2.5), cc.spawn(cc.scaleTo(.09, 1.5), cc.fadeTo(.09, 0)), cc.callFunc(function() {
this.node.destroyAllChildren();
this.node.destroy();
}, this)));
}
});
cc._RF.pop();
}, {} ],
minigame: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "c4886akWsJFlLcOCddLtayj", "minigame");
var n = m(t("TaiXiu")), o = m(t("MiniPoker")), c = m(t("BigBabol")), s = m(t("BauCua")), a = m(t("Mini3Cay")), h = m(t("CaoThap")), r = m(t("AngryBirds")), l = (m(t("popupTopHu")), 
m(t("MiniDialog"))), u = m(t("MegaJackpot")), d = m(t("BongDa")), p = m(t("VQMM")), g = m(t("../../Game/OanTuTi/OanTuTi.OanTuTiController"));
function m(t) {
return t && t.__esModule ? t : {
default: t
};
}
cc.Class({
extends: cc.Component,
properties: {
minigame: {
default: null,
type: cc.Node
},
TaiXiu: n.default,
MiniPoker: o.default,
BigBabol: c.default,
BauCua: s.default,
BaCay: a.default,
BongDa: d.default,
CaoThap: h.default,
AngryBirds: r.default,
OanTuTi: g.default,
MegaJackpot: u.default,
VQMM: p.default,
Dialog: l.default,
nodeEfect: cc.Node,
PrefabNoHu: cc.Prefab,
prefabBigWin: cc.Prefab
},
onLoad: function() {
var t = this;
this.isLoadTaiXiu = !1;
this.isLoadMiniPoker = !1;
this.isLoadBigBabol = !1;
this.isLoadBauCua = !1;
this.isLoadBaCay = !1;
this.isLoadCaoThap = !1;
this.isLoadAngryBirds = !1;
this.isLoadMegaJackpot = !1;
this.isLoadOanTuTi = !1;
this.isLoadVQMM = !1;
this.isLoadBongDa = !1;
cc.game.addPersistRootNode(this.node);
this.node._onPreDestroy = function() {
t.onDestroy();
};
cc.RedT.IS_LOGIN && this.signIn();
},
init: function(t) {
this;
this.Dialog = this.Dialog;
this.Dialog.init(t);
},
onInitMiniGame: function(t, e) {
console.log("name", e);
var i = e;
"BaCay" == e ? i = "Mini3Cay" : "OanTuTi" == e && (i = "OanTuTi.OanTuTiController");
this[e] = t.getComponent(i);
this[e].init(this);
this["isLoad" + e] = !0;
},
signIn: function() {
this.TaiXiu.signIn();
},
newGame: function() {
this.Dialog.onCloseDialog();
this.TaiXiu.newGame();
this.BauCua.newGame();
this.CaoThap.newGame();
},
onData: function(t) {
void 0 !== t.vqmm && this.isLoadVQMM && this.VQMM.onData(t.vqmm);
void 0 !== t.bongda && this.isLoadBongDa && this.BongDa.onData(t.bongda);
void 0 !== t.poker && this.isLoadMiniPoker && this.MiniPoker.onData(t.poker);
void 0 !== t.big_babol && this.isLoadBigBabol && this.BigBabol.onData(t.big_babol);
void 0 !== t.baucua && this.isLoadBauCua && this.BauCua.onData(t.baucua);
void 0 !== t.bacay && this.isLoadBaCay && this.BaCay.onData(t.bacay);
void 0 !== t.caothap && this.isLoadCaoThap && this.CaoThap.onData(t.caothap);
void 0 !== t.arb && this.isLoadAngryBirds && this.AngryBirds.onData(t.arb);
void 0 !== t.megaj && this.isLoadMegaJackpot && this.MegaJackpot.onData(t.megaj);
},
onDestroy: function() {
null != cc.RedT.minigame && cc.RedT.minigame.isLoadTaiXiu && void 0 !== this.TaiXiu.TX_Main.timeInterval && clearInterval(this.TaiXiu.TX_Main.timeInterval);
null != cc.RedT.minigame && cc.RedT.minigame.isLoadBauCua && void 0 !== this.BauCua.timeInterval && clearInterval(this.BauCua.timeInterval);
null != cc.RedT.minigame && cc.RedT.minigame.isLoadCaoThap && void 0 !== this.CaoThap.timeInterval && clearInterval(this.CaoThap.timeInterval);
null != cc.RedT.minigame && (cc.RedT.minigame = null);
}
});
cc._RF.pop();
}, {
"../../Game/OanTuTi/OanTuTi.OanTuTiController": "OanTuTi.OanTuTiController",
AngryBirds: "AngryBirds",
BauCua: "BauCua",
BigBabol: "BigBabol",
BongDa: "BongDa",
CaoThap: "CaoThap",
MegaJackpot: "MegaJackpot",
Mini3Cay: "Mini3Cay",
MiniDialog: "MiniDialog",
MiniPoker: "MiniPoker",
TaiXiu: "TaiXiu",
VQMM: "VQMM",
popupTopHu: "popupTopHu"
} ],
popupIconSieuZon: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "5f89eKQLstPOL9/Abq4xwFP", "popupIconSieuZon");
cc.Class({
extends: cc.Component,
properties: {
panel: {
default: null,
type: cc.Node
}
},
onLoad: function() {
this.ttOffset = null;
this.ttOffset2 = null;
this.toggleRuning = !1;
},
onEnable: function() {
this.panel.on(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.panel.on(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.panel.on(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.panel.on(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
},
onDisable: function() {
this.panel.off(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.panel.off(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.panel.off(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.panel.off(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
},
eventStart: function(t) {
this.ttOffset = cc.v2(t.touch.getLocationX() - this.node.position.x, t.touch.getLocationY() - this.node.position.y);
this.ttOffset2 = cc.v2(t.touch.getLocationX() - (t.touch.getLocationX() - this.node.position.x), t.touch.getLocationY() - (t.touch.getLocationY() - this.node.position.y));
},
eventMove: function(t) {
this.node.position = cc.v2(t.touch.getLocationX() - this.ttOffset.x, t.touch.getLocationY() - this.ttOffset.y);
},
eventEnd: function(t) {
this.xChanger = this.ttOffset2.x - (t.touch.getLocationX() - this.ttOffset.x);
this.yChanger = this.ttOffset2.y - (t.touch.getLocationY() - this.ttOffset.y);
this.xChanger < 5 && this.xChanger > -5 && this.yChanger < 5 && this.yChanger > -5 && this.toggle();
},
toggle: function() {
if (cc.RedT.IS_LOGIN) {
cc.RedT.inGame.loading.active = !0;
cc.RedT.inGame.dialog.showSieuZon();
} else cc.RedT.inGame.dialog.showSignIn();
}
});
cc._RF.pop();
}, {} ],
popupMinigame: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "acd26OFlQpFU6xTJ63KhBKq", "popupMinigame");
cc.Class({
extends: cc.Component,
properties: {
list: {
default: null,
type: cc.Node
},
time: {
default: null,
type: cc.Label
},
nodeTime: {
default: null,
type: cc.Node
},
panel: {
default: null,
type: cc.Node
}
},
onLoad: function() {
cc.RedT.setting.popupMini = cc.RedT.setting.popupMini || {};
this.ttOffset = null;
this.ttOffset2 = null;
this.toggleRuning = !1;
void 0 !== cc.RedT.setting.popupMini.position && (this.node.position = cc.RedT.setting.popupMini.position);
if (void 0 !== cc.RedT.setting.popupMini.open) if (cc.RedT.setting.popupMini.open) {
this.list.active = !0;
this.nodeTime.position = cc.v2(40, 40);
this.list.scale = 1;
} else {
this.nodeTime.position = cc.v2(40, 40);
this.list.scale = .2;
this.list.active = !1;
}
},
onEnable: function() {
this.panel.on(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.panel.on(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.panel.on(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.panel.on(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.panel.on(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
},
onDisable: function() {
this.panel.off(cc.Node.EventType.TOUCH_START, this.eventStart, this);
this.panel.off(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
this.panel.off(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
this.panel.off(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
this.panel.off(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
},
eventStart: function(t) {
this.setTop();
this.ttOffset = cc.v2(t.touch.getLocationX() - this.node.position.x, t.touch.getLocationY() - this.node.position.y);
this.ttOffset2 = cc.v2(t.touch.getLocationX() - (t.touch.getLocationX() - this.node.position.x), t.touch.getLocationY() - (t.touch.getLocationY() - this.node.position.y));
},
eventMove: function(t) {
this.node.position = cc.v2(t.touch.getLocationX() - this.ttOffset.x, t.touch.getLocationY() - this.ttOffset.y);
},
eventEnd: function(t) {
cc.RedT.setting.popupMini.position = this.node.position;
this.xChanger = this.ttOffset2.x - (t.touch.getLocationX() - this.ttOffset.x);
this.yChanger = this.ttOffset2.y - (t.touch.getLocationY() - this.ttOffset.y);
this.xChanger < 5 && this.xChanger > -5 && this.yChanger < 5 && this.yChanger > -5 && this.toggle();
},
toggle: function() {
cc.RedT.audio.playClick();
if (!this.toggleRuning) {
this.toggleRuning = !0;
this.list.stopAllActions();
if (this.list.active) {
cc.RedT.setting.popupMini.open = !1;
this.nodeTime.active ? this.nodeTime.runAction(cc.moveTo(.3, cc.v2(40, 40))) : this.nodeTime.position = cc.v2(40, 40);
this.list.runAction(cc.sequence(cc.spawn(cc.scaleTo(.3, .2).easing(cc.easeBackIn(3)), cc.rotateTo(.3, -720)), cc.callFunc(function() {
this.toggleRuning = this.list.active = !1;
}, this)));
} else {
this.list.active = cc.RedT.setting.popupMini.open = !0;
this.nodeTime.active ? this.nodeTime.runAction(cc.moveTo(.3, cc.v2(40, 40))) : this.nodeTime.position = cc.v2(40, 40);
this.list.runAction(cc.sequence(cc.spawn(cc.scaleTo(.3, 1).easing(cc.easeBackOut(3)), cc.rotateTo(.3, 720)), cc.callFunc(function() {
this.toggleRuning = !1;
}, this)));
}
}
},
setTop: function() {
this.node.parent.insertChild(this.node);
}
});
cc._RF.pop();
}, {} ],
popupTopHu: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "60851P7puJFtJI47yoz+HGT", "popupTopHu");
var n = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
content: {
default: null,
type: cc.Node
},
body: {
default: null,
type: cc.Node
},
nodeRed: {
default: null,
type: cc.Node
},
nodeXu: {
default: null,
type: cc.Node
},
header: {
default: null,
type: cc.Node
},
panel: {
default: null,
type: cc.Node
},
x: {
default: [],
type: cc.SpriteFrame
},
red: !1,
bet: "",
spriteBetON: {
default: [],
type: cc.SpriteFrame
},
spriteBetOFF: {
default: [],
type: cc.SpriteFrame
}
},
init: function(t) {
this.RedT = t;
cc.RedT.setting.topHu = cc.RedT.setting.topHu || {};
void 0 !== cc.RedT.setting.topHu.position && (this.node.position = cc.RedT.setting.topHu.position);
void 0 !== cc.RedT.setting.topHu.open && (this.body.active = cc.RedT.setting.topHu.open);
void 0 !== cc.RedT.setting.topHu.data && this.onData(cc.RedT.setting.topHu.data);
},
onLoad: function() {
this.ttOffset = null;
this.ttOffset2 = null;
this.toggleRuning = !1;
Promise.all(this.content.children.map(function(t) {
t.hu = t.children[3].getComponent(cc.Label);
t.xHu = t.children[0].getComponent(cc.Sprite);
}));
},
onEnable: function() {
this.panel.on(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
this.onChangerBet(null, "100");
},
onDisable: function() {
this.panel.off(cc.Node.EventType.MOUSE_ENTER, this.setTop, this);
},
eventStart: function(t) {
this.setTop();
this.ttOffset = cc.v2(t.touch.getLocationX() - this.node.position.x, t.touch.getLocationY() - this.node.position.y);
this.ttOffset2 = cc.v2(t.touch.getLocationX() - (t.touch.getLocationX() - this.node.position.x), t.touch.getLocationY() - (t.touch.getLocationY() - this.node.position.y));
},
eventMove: function(t) {
this.node.position = cc.v2(t.touch.getLocationX() - this.ttOffset.x, t.touch.getLocationY() - this.ttOffset.y);
},
eventEnd: function(t) {
cc.RedT.setting.topHu.position = this.node.position;
this.xChanger = this.ttOffset2.x - (t.touch.getLocationX() - this.ttOffset.x);
this.yChanger = this.ttOffset2.y - (t.touch.getLocationY() - this.ttOffset.y);
this.xChanger < 5 && this.xChanger > -5 && this.yChanger < 5 && this.yChanger > -5 && this.toggle();
},
toggle: function() {
cc.RedT.audio.playClick();
this.body.active = cc.RedT.setting.topHu.open = !this.body.active;
this.onChangerData();
},
onChangerCoint: function() {
this.red = !this.red;
this.nodeRed.active = !this.nodeRed.active;
this.nodeXu.active = !this.nodeXu.active;
this.onChangerData();
},
onChangerBet: function(t, e) {
this.bet = e;
this.header.children[0].children[0].getComponent(cc.Sprite).spriteFrame = this.spriteBetOFF[0];
this.header.children[1].children[0].getComponent(cc.Sprite).spriteFrame = this.spriteBetOFF[1];
this.header.children[2].children[0].getComponent(cc.Sprite).spriteFrame = this.spriteBetOFF[2];
switch (e) {
case "100":
this.header.children[0].children[0].getComponent(cc.Sprite).spriteFrame = this.spriteBetON[0];
break;

case "1000":
this.header.children[1].children[0].getComponent(cc.Sprite).spriteFrame = this.spriteBetON[1];
break;

case "10000":
this.header.children[2].children[0].getComponent(cc.Sprite).spriteFrame = this.spriteBetON[2];
}
this.onChangerData();
},
onData: function(t) {
cc.RedT.setting.topHu.data = t;
this.body.active && this.onChangerData();
this.onChangerGame();
},
onChangerData: function() {
if (void 0 !== cc.RedT.setting.topHu.data) {
var t = this, e = [];
Promise.all(this.content.children.map(function(i) {
var n = i.name, o = cc.RedT.setting.topHu.data[n].filter(function(e) {
return e.type == t.bet && e.red == t.red;
});
e[n] = i;
o.length ? o[0].name = n : o[0] = {
name: n,
bet: 0
};
return o[0];
})).then(function(i) {
var o = i.sort(function(t, e) {
return e.bet - t.bet;
});
Promise.all(o.map(function(i, o) {
var c = e[i.name];
c.stopAllActions();
var s = -(75 * (o + 1) - 37.5);
c.runAction(cc.moveTo(.2, cc.v2(0, s)));
n.getOnlyNumberInString(c._children[3]._components[0].string) - i.bet != 0 && n.numberTo(c._children[3]._components[0], n.getOnlyNumberInString(c._children[3]._components[0].string), i.bet, 4900, !0);
if (i.balans > 0 && t.x[i.x - 2]) {
c._children[0]._components[0].node.active = !0;
c._children[0]._components[0].spriteFrame = t.x[i.x - 2];
} else c._children[0]._components[0].node.active = !1;
}));
});
}
},
onChangerGame: function() {
if (null != cc.RedT.minigame) {
cc.RedT.minigame.isLoadMiniPoker && cc.RedT.minigame.MiniPoker.onGetHu();
cc.RedT.minigame.isLoadMiniBaCay && cc.RedT.minigame.BaCay.onGetHu();
cc.RedT.minigame.isLoadBigBabol && cc.RedT.minigame.BigBabol.onGetHu();
cc.RedT.minigame.isLoadCaoThap && cc.RedT.minigame.CaoThap.onGetHu();
cc.RedT.minigame.isLoadAngryBirds && cc.RedT.minigame.AngryBirds.onGetHu();
cc.RedT.minigame.isLoadMegaJackpot && cc.RedT.minigame.MegaJackpot.onGetHu();
}
void 0 !== cc.RedT.inGame.onGetHu && cc.RedT.inGame.onGetHu();
},
setTop: function() {
this.node.parent.insertChild(this.node);
}
});
cc._RF.pop();
}, {
Helper: "Helper"
} ],
ruttien: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "1a558HqQAZIvJCav2OB+DnX", "ruttien");
var n = t("Bank");
cc.Class({
extends: cc.Component,
properties: {
header: {
default: null,
type: cc.Node
},
NapRed: {
default: null,
type: cc.Node
},
TieuRed: {
default: null,
type: cc.Node
},
ChuyenRed: {
default: null,
type: cc.Node
},
Bank: n
},
init: function() {
var t = this;
this.NapRed = this.NapRed.getComponent("NapRed");
this.TieuRed = this.TieuRed.getComponent("TieuRed");
this.ChuyenRed = this.ChuyenRed.getComponent("ChuyenRed");
this.NapRed.init();
this.TieuRed.init();
this.ChuyenRed.init();
this.Bank.init();
this.body = [ this.NapRed, this.TieuRed, this.ChuyenRed, this.Bank ];
Promise.all(this.header.children.map(function(t) {
return t.getComponent("itemHeadMenu");
})).then(function(e) {
t.header = e;
});
},
onEnable: function() {
cc.RedT.inGame.header.node.active = !1;
},
onDisable: function() {
cc.RedT.inGame.header.node.active = !0;
},
onSelectHead: function(t, e) {
Promise.all(this.header.map(function(t) {
t.node.name == e ? t.select() : t.unselect();
}));
Promise.all(this.body.map(function(t) {
t.node.name == e ? t.node.active = !0 : t.node.active = !1;
}));
},
superView: function(t) {
if ("NapRed" == t || "ThongTinNapRed" == t || "QuyDinhNapRed" == t) {
this.onSelectHead(null, "NapRed");
"NapRed" != t && this.NapRed.onSelectHead(null, t);
} else if ("TieuRed" == t || "MuaXu" == t || "MuaTheNap" == t) {
this.onSelectHead(null, "TieuRed");
"TieuRed" != t && this.TieuRed.onSelectHead(null, t);
} else "ChuyenRed" == t && this.onSelectHead(null, "ChuyenRed");
},
onData: function(t) {
void 0 !== t.nap_red && this.NapRed.onData(t.nap_red);
void 0 !== t.mua_the_nap && this.TieuRed.MuaTheCao.onData(t.mua_the_nap);
void 0 !== t.chuyen_red && this.ChuyenRed.onData(t.chuyen_red);
t.bank && this.Bank.onData(t.bank);
}
});
cc._RF.pop();
}, {
Bank: "Bank"
} ],
shopMuaTheCao: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "36ec7BUYDJJTorK1lfR1/DA", "shopMuaTheCao");
var n = t("BrowserUtil"), o = t("Helper");
cc.Class({
extends: cc.Component,
properties: {
NhanhMang: {
default: null,
type: cc.Label
},
MenhGia: {
default: null,
type: cc.Label
},
editSoLuong: {
default: null,
type: cc.EditBox
},
editOTP: {
default: null,
type: cc.EditBox
},
moreNhaMang: {
default: null,
type: cc.Node
},
moreMenhGia: {
default: null,
type: cc.Node
},
scrollviewNhaMang: {
default: null,
type: cc.ScrollView
},
scrollviewMenhGia: {
default: null,
type: cc.ScrollView
},
bangGia: {
default: null,
type: cc.ScrollView
},
prefabLeft: {
default: null,
type: cc.Prefab
},
prefabRight: {
default: null,
type: cc.Prefab
},
typeOTP: ""
},
init: function() {
var t = this;
this.isLoaded = !1;
this.editboxs = [ this.editSoLuong, this.editOTP ];
this.keyHandle = function(e) {
return e.keyCode === cc.macro.KEY.tab ? (t.isTop() && t.changeNextFocusEditBox(), 
e.preventDefault && e.preventDefault(), !1) : e.keyCode === cc.macro.KEY.enter ? (n.focusGame(), 
t.onClickMua(), e.preventDefault && e.preventDefault(), !1) : void 0;
};
},
onEnable: function() {
cc.sys.isBrowser && this.addEvent();
this.isLoaded || cc.RedT.send({
shop: {
info_mua: !0
}
});
},
onDisable: function() {
this.moreNhaMang.active = this.moreMenhGia.active = !1;
cc.sys.isBrowser && this.removeEvent();
this.clean();
},
addEvent: function() {
cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
for (var t in this.editboxs) n.getHTMLElementByEditBox(this.editboxs[t]).addEventListener("keydown", this.keyHandle, !1);
},
removeEvent: function() {
for (var t in this.editboxs) n.getHTMLElementByEditBox(this.editboxs[t]).removeEventListener("keydown", this.keyHandle, !1);
cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
},
onKeyDown: function(t) {
switch (t.keyCode) {
case cc.macro.KEY.tab:
this.isTop() && this.changeNextFocusEditBox();
break;

case cc.macro.KEY.enter:
this.isTop() && this.onClickMua();
}
},
changeNextFocusEditBox: function() {
for (var t = !1, e = 0, i = this.editboxs.length; e < i; e++) if (n.checkEditBoxFocus(this.editboxs[e])) {
n.focusEditBox(this.editboxs[e]);
t = !0;
break;
}
!t && 0 < this.editboxs.length && n.focusEditBox(this.editboxs[0]);
},
isTop: function() {
return !(this.moreNhaMang.active || this.moreMenhGia.active || cc.RedT.inGame.notice.node.active || cc.RedT.inGame.loading.active);
},
clean: function() {
this.editSoLuong.string = "";
},
toggleMoreNhaMang: function() {
this.moreNhaMang.active = !this.moreNhaMang.active;
this.moreMenhGia.active = !1;
},
toggleMoreMenhGia: function() {
this.moreMenhGia.active = !this.moreMenhGia.active;
},
infoSet: function(t, e, i) {
var n = this, c = arguments.length > 3 && void 0 !== arguments[3] && arguments[3], s = this;
t.length > 0 && Promise.all(t.map(function(t, n) {
var a = cc.instantiate(s.prefabLeft), h = a.getComponent("NapRed_itemOne");
h.init(s, e, i);
if (c) {
if (0 == n) {
h.background.active = !0;
s.NhanhMang.string = t.name;
}
h.text.string = t.name;
s.scrollviewNhaMang.content.addChild(a);
} else {
var r = o.numberWithCommas(t.name), l = o.numberWithCommas(t.values);
if (0 == n) {
h.background.active = !0;
s.MenhGia.string = r;
}
h.text.string = r;
s.scrollviewMenhGia.content.addChild(a);
var u = cc.instantiate(s.prefabRight);
u.getComponent("NapRed_itemTT").init(r, l);
s.bangGia.content.addChild(u);
}
return h;
})).then(function(t) {
n[e] = t;
});
},
onData: function(t) {
if (void 0 !== t.info && !this.isLoaded) {
this.isLoaded = !0;
void 0 !== t.info.nhamang && this.infoSet(t.info.nhamang, "nhamangList", "NhanhMang", !0);
void 0 !== t.info.menhgia && this.infoSet(t.info.menhgia, "menhgiaList", "MenhGia");
}
},
onClickMua: function() {
var t = this.editSoLuong.string >> 0;
t > 3 || t < 0 ? cc.RedT.inGame.notice.show({
title: "MUA THẺ",
text: "Số lượng không hợp lệ..."
}) : this.editOTP.string.length < 4 || this.editOTP.string.length > 6 ? cc.RedT.inGame.notice.show({
title: "LỖI",
text: "Mã OTP không đúng..."
}) : cc.RedT.send({
shop: {
mua_the: {
nhamang: this.NhanhMang.string,
menhgia: o.getOnlyNumberInString(this.MenhGia.string),
soluong: this.editSoLuong.string,
otp: this.editOTP.string
}
}
});
},
onClickOTP: function() {
cc.RedT.send({
otp: {
type: "1"
}
});
},
changerTypeOTP: function(t) {
this.typeOTP = t.node.name;
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
shopMuaXu: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "e3d68ruZCVJyZezBdPhX4eo", "shopMuaXu");
var n = t("Helper"), o = t("BrowserUtil");
cc.Class({
extends: cc.Component,
properties: {
xu: {
default: null,
type: cc.Label
},
red: {
default: null,
type: cc.EditBox
},
captcha: {
default: null,
type: cc.EditBox
},
capchaSprite: cc.Sprite
},
onLoad: function() {
var t = this;
this.editboxs = [ this.red, this.captcha ];
this.keyHandle = function(e) {
return e.keyCode === cc.macro.KEY.tab ? (t.changeNextFocusEditBox(), e.preventDefault && e.preventDefault(), 
!1) : e.keyCode === cc.macro.KEY.enter ? (o.focusGame(), t.onClickMua(), e.preventDefault && e.preventDefault(), 
!1) : void 0;
};
},
onEnable: function() {
cc.sys.isBrowser && this.addEvent();
this.reCaptcha();
},
onDisable: function() {
cc.sys.isBrowser && this.removeEvent();
this.clean();
},
addEvent: function() {
cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
for (var t in this.editboxs) o.getHTMLElementByEditBox(this.editboxs[t]).addEventListener("keydown", this.keyHandle, !1);
},
removeEvent: function() {
for (var t in this.editboxs) o.getHTMLElementByEditBox(this.editboxs[t]).removeEventListener("keydown", this.keyHandle, !1);
cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
},
onKeyDown: function(t) {
switch (t.keyCode) {
case cc.macro.KEY.tab:
this.isTop() && this.changeNextFocusEditBox();
break;

case cc.macro.KEY.enter:
this.isTop() && this.onClickMua();
}
},
changeNextFocusEditBox: function() {
for (var t = !1, e = 0, i = this.editboxs.length; e < i; e++) if (o.checkEditBoxFocus(this.editboxs[e])) {
o.focusEditBox(this.editboxs[e]);
t = !0;
break;
}
!t && 0 < this.editboxs.length && o.focusEditBox(this.editboxs[0]);
},
isTop: function() {
return !cc.RedT.inGame.notice.node.active && !cc.RedT.inGame.loading.active;
},
clean: function() {
this.red.string = this.xu.string = this.captcha.string = "";
},
onChanger: function(t) {
var e = n.getOnlyNumberInString(t), i = n.numberWithCommas(e);
this.xu.string = n.numberWithCommas(3 * e);
this.red.string = "0" == i ? "" : i;
},
onClickMua: function() {
parseInt(n.isEmpty(this.red.string) || n.getOnlyNumberInString(this.red.string)) < 1e3 ? cc.RedT.inGame.notice.show({
title: "MUA XU",
text: "Số RIK mua XU tối thiểu là 1.000"
}) : n.isEmpty(this.captcha.string) ? cc.RedT.inGame.notice.show({
title: "MUA XU",
text: "Vui lòng nhập chính xác mã xác nhận."
}) : cc.RedT.send({
shop: {
mua_xu: {
red: n.getOnlyNumberInString(this.red.string),
captcha: this.captcha.string
}
}
});
},
initCaptcha: function(t) {
var e = this, i = new Image();
i.src = t, i.width = 150, i.height = 50, setTimeout(function() {
var t = new cc.Texture2D();
t.initWithElement(i), t.handleLoadedTexture();
var n = new cc.SpriteFrame(t);
e.capchaSprite.spriteFrame = n;
}, 10);
},
reCaptcha: function() {
cc.RedT.send({
captcha: "withdrawXu"
});
}
});
cc._RF.pop();
}, {
BrowserUtil: "BrowserUtil",
Helper: "Helper"
} ],
stateMachine: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "005e6zwEVNBPKq4wWssD20o", "stateMachine");
cc.Class({
extends: cc.Component,
properties: {
_state: 0,
_receiveStop: !1,
_interval: !1
},
Input_Error: function() {
if (1 === this._state) {
this.unscheduleAllCallbacks();
this._receiveStop = !1;
this._interval = !1;
this.SetState(4);
}
},
Input_Start: function(t, e) {
if (0 === this._state) {
this.SetState(1);
this.scheduleOnce(function() {
this._interval = !0;
}, t);
this.scheduleOnce(this.Input_Error, e);
}
},
Input_Stop: function() {
if (1 === this._state) {
this._receiveStop = !0;
this.unschedule(this.Input_Error);
}
},
Input_Ready: function(t) {
if (2 === this._state) {
this.SetState(3);
this.scheduleOnce(function() {
this.SetState(0);
}, t);
} else 4 === this._state && this.SetState(0);
},
SetState: function(t) {
this._state = t;
var e = new cc.Event.EventCustom("Event_StateChange", !0);
e.setUserData(this._state);
this.node.dispatchEvent(e);
},
GetState: function() {
return this._state;
},
update: function() {
if (1 === this._state && this._receiveStop && this._interval) {
this.SetState(2);
this._receiveStop = !1;
this._interval = !1;
}
}
});
cc._RF.pop();
}, {} ],
subMenuControll: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "84987GimdhLo67g4TdXG7dM", "subMenuControll");
cc.Class({
extends: cc.Component,
properties: {
items: {
default: [],
type: cc.Node
},
body: {
default: [],
type: cc.Node
}
},
onLoad: function() {
for (var t in this.items) this.items[t] = this.items[t].getComponent("subMenuItem");
},
onClickItem: function(t) {
var e = !0, i = !1, n = void 0;
try {
for (var o, c = this.items[Symbol.iterator](); !(e = (o = c.next()).done); e = !0) {
var s = o.value;
s.node == t.target ? s.onSelect() : s.offSelect();
}
} catch (t) {
i = !0;
n = t;
} finally {
try {
!e && c.return && c.return();
} finally {
if (i) throw n;
}
}
var a = !0, h = !1, r = void 0;
try {
for (var l, u = this.body[Symbol.iterator](); !(a = (l = u.next()).done); a = !0) {
var d = l.value;
d.name === t.target.name ? d.active = !0 : d.active = !1;
}
} catch (t) {
h = !0;
r = t;
} finally {
try {
!a && u.return && u.return();
} finally {
if (h) throw r;
}
}
}
});
cc._RF.pop();
}, {} ],
subMenuItem: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "19618U18J5J55/yKtlBzkGh", "subMenuItem");
cc.Class({
extends: cc.Component,
properties: {
background: cc.Node,
background2: cc.Node,
text: cc.Node
},
onSelect: function() {
this.background.active = !1;
this.background2.active = !0;
this.text.color = cc.Color.BLACK;
},
offSelect: function() {
this.background.active = !0;
this.background2.active = !1;
this.text.color = cc.Color.WHITE;
}
});
cc._RF.pop();
}, {} ],
use_reversed_rotateTo: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "9ed0cYh5dlBVbB3Rw9dFEe0", "use_reversed_rotateTo");
cc.RotateTo._reverse = !0;
cc._RF.pop();
}, {} ],
"use_v2.1.x_cc.Action": [ function(t, e, i) {
"use strict";
cc._RF.push(e, "c5c32AkWmNMf6JIQRB+AGw8", "use_v2.1.x_cc.Action");
cc.macro.ROTATE_ACTION_CCW = !0;
cc._RF.pop();
}, {} ],
winCoins: [ function(t, e, i) {
"use strict";
cc._RF.push(e, "6631c7iCtlBWqxkG4SpWG5x", "winCoins");
var n = t("coinMove");
cc.Class({
extends: cc.Component,
properties: {
Label_coins: {
default: null,
type: cc.Label,
tooltip: "金币文字"
},
Prefab_coin: {
default: null,
type: cc.Prefab,
tooltip: "金币预制件"
},
MaxPrefabCoinNum: {
default: 20,
tooltip: "最多可以生成多少个金币预制件"
},
ShowTime: {
default: 2,
tooltip: "展示中奖金币的时长（秒）"
},
Time: {
default: 3,
tooltip: "加金币动画的总时长（秒）"
},
ValueOfPrefabCoin: {
default: 100,
tooltip: "一个金币预制件代表的价值"
},
_winCoins: 0,
_currentAdd: 0,
_addSpeed: 0,
_continueAdd: !1
},
Initialize: function(t, e, i) {
if (!(t <= 0)) {
this._winCoins = t;
this._posStart = e;
this._posEnd = i;
this._addSpeed = Math.ceil(t / this.Time);
var n = Math.ceil(t / this.ValueOfPrefabCoin);
this._prefabCoinNum = Math.min(n, this.MaxPrefabCoinNum);
this._prefabCoinsArray = new Array();
this.Label_coins.string = this._currentAdd;
this._continueAdd = !0;
}
},
update: function(t) {
if (this._continueAdd) {
var e = Math.ceil(this._addSpeed * t);
this._currentAdd += e;
this.Label_coins.string = this._currentAdd;
if (this._prefabCoinsArray.length < this._prefabCoinNum) {
var i = Math.ceil(this._currentAdd / this.ValueOfPrefabCoin);
if (i > this._prefabCoinsArray.length) for (var o = i - this._prefabCoinsArray.length, c = 0; c < o; c++) {
var s = cc.instantiate(this.Prefab_coin);
s.parent = this.node.parent;
s.getComponent(n).SetData(this._posStart, this._posEnd);
this._prefabCoinsArray.push(s.getComponent(n));
}
}
if (this._currentAdd >= this._winCoins) {
this.Label_coins.string = this._winCoins;
this._continueAdd = !1;
this.scheduleOnce(function() {
this.node.active = !1;
this.node.destroy();
}, this.ShowTime);
}
}
}
});
cc._RF.pop();
}, {
coinMove: "coinMove"
} ]
}, {}, [ "BaseControll", "CanvasHelper", "CanvasResizer", "3Cay", "3Cay_cuoc", "3Cay_player", "3Cay_touchCard", "AngryBird_history", "AngryBird_history_item", "AngryBird_top", "AngryBirds-item", "AngryBirds-itemR", "AngryBirds", "AngryBirds_reelsL", "AngryBirds_reelsR", "BauCua", "BauCua_LichSu", "BauCua_ls_item", "BauCua_linhVat", "BauCua_logMini", "BauCua_top", "BauCua_top_item", "BigBabol", "BigBabol_LichSu", "BigBabol_Top", "BigBabol_line", "BigBabol_main_line", "BigBabol_reel", "BigBabol_reel_item", "BongDa", "BongDaLichSuPhien", "BongDaLichSuPhien_item", "BongDa_ChiTiet", "BongDa_Top", "TranDau_Item", "Candy", "Candy_bonus_item", "Candy_playBonus", "Candy_dialog", "Candy_history", "Candy_iLine", "Candy_line", "Candy_reel", "Candy_top", "candy_reel_item", "CaoThap", "CaoThap_history", "CaoThap_history_item", "CaoThap_reels", "CaoThap_top", "CaoThap_top_item", "CoTrang", "CoTrang_history", "CoTrang_top", "CoTrang_dialog", "CoTrang_iline", "CoTrang_lines", "CoTrang_bonus_item", "CoTrang_playBonus", "CoTrang_item", "CoTrang_reel", "HaiTac", "HaiTac_history", "HaiTac_top", "HaiTac_dialog", "HaiTac_iline", "HaiTac_lines", "HaiTac_bonus_item", "HaiTac_playBonus", "HaiTac_item", "HaiTac_reel", "DongMauAnhHung", "DongMauAnhHung_history", "DongMauAnhHung_top", "DongMauAnhHung_dialog", "DongMauAnhHung_iline", "DongMauAnhHung_lines", "DongMauAnhHung_bonus_item", "DongMauAnhHung_playBonus", "DongMauAnhHung_item", "DongMauAnhHung_reel", "MainPopup", "MU", "MU_history", "MU_top", "MU_dialog", "MU_iline", "MU_lines", "MU_bonus_item", "MU_playBonus", "MU_item", "MU_reel", "MegaJ_history", "MegaJ_history_item", "MegaJ_top", "MegaJ_top_item", "MegaJackpot", "Mini3Cay", "Mini3Cay_history", "Mini3Cay_ihistory", "Mini3Cay_reel", "Mini3Cay_top", "MiniPoker", "MiniPoker_LichSu", "MiniPoker_Top", "MiniPoker_reel", "MyNhan", "MyNhan_history", "MyNhan_top", "MyNhan_dialog", "MyNhan_iline", "MyNhan_lines", "MyNhan_bonus_item", "MyNhan_playBonus", "MyNhan_item", "MyNhan_reel", "OanTuTi.OanTuTiController", "OanTuTi.PopupCoinTransfer", "OanTuTi.PopupHistory", "OanTuTi.PopupHonors", "Poker_dialog", "Poker_Player", "Poker", "PokerNapGame", "PokerTo", "RongHo", "RongHo_dialog", "RongHo_history", "RongHo_history_item", "RongHo_top", "SexAndZen", "SexAndZen_history", "SexAndZen_top", "SexAndZen_dialog", "SexAndZen_iline", "SexAndZen_lines", "SexAndZen_bonus_item", "SexAndZen_playBonus", "SexAndZen_item", "SexAndZen_reel", "Lobby.Cmd", "MiniGame", "ShootFish.Bullet", "ShootFish.CoinEffect", "ShootFish.EffectBigWin", "ShootFish.EffectJackpot", "ShootFish.Fish", "ShootFish.Lobby", "ShootFish.PanelMenu", "ShootFish.Play", "ShootFish.Player", "ShootFish.PopupCoinTransfer", "ShootFish.PopupGuide", "TestController", "CardGame_ItemRoom", "AlertDialog", "App", "BgResizer", "BroadcastReceiver", "Common.AudioManager", "Common.CPLabel", "Common.CPSprite", "Configs", "ConfirmDialog", "Dialog2", "Dropdown", "DropdownItem", "HandlerButton", "Http", "Language.Label", "Language.LanguageManager", "Language.Sprite", "NodeScaler", "Random", "SPUtils", "SubpackageDownloader", "TimeUtils", "Tween", "Utils", "VersionConfig", "CustomUI.Dropdown", "CustomUI.PageView", "GameData", "CardGame.Cmd", "CardGameNetworkClient", "MiniGameNetworkClient", "Network.Cmd", "Network.InPacket", "Network.NetworkClient", "Network.NetworkListener", "Network.OutPacket", "PacketHeaderAnalyze", "SamNetworkClient", "ShootFishNetworkClient", "SlotNetworkClient", "TX2NetworkClient", "TienLenNetworkClient", "Sicbo", "Sicbo_dialog", "Sicbo_history", "Sicbo_history_item", "TaiXiu", "TaiXiuBoard", "TaiXiuBoard_item", "TaiXiuChat", "TaiXiuLichSuPhien", "TaiXiuLichSuPhien_item", "TaiXiuLichSu", "TaiXiuLichSu_item", "TaiXiuMain", "TaiXiuMain_logTips", "TaiXiu_DiaNan", "TaiXiu_efScale", "TaiXiuThongKe", "TaiXiuDuaTop", "TaiXiuTop", "TamHung", "TamHung_history", "TamHung_top", "TamHung_dialog", "TamHung_lines", "TamHung_main_line", "TamHung_bonus_item", "TamHung_playBonus", "TamHung_item", "TamHung_reel", "VQMM", "VQMM_history", "VQMM_history_item", "VQMM_top", "VQMM_top_item", "VQRed_dialog", "VQRed_history", "VQRed_history_item", "VQRed_setting", "VQRed_top", "VuongQuocRed", "VuongQuocRed_items", "VQRed_main_line", "VuongQuocRed_line", "VuongQuocRed_playBonus", "VuongQuocRed_reel", "VuongQuocRed_bigWin", "Xeng", "XengMain", "XoSo_MBHistory", "XoSo_MBHistory_item", "kq_xsmb", "MienBac_lo", "MienBac_dauduoi", "MienBac_lo2so", "MienBac_lo3so", "MienBac_lo4so", "MienBac_loxien", "XoSo_MBThongKe", "XoSo_MBThongKe_item", "XoSo_MienBac", "XoSo", "XoSo_History", "XoSo_KetQua", "XoSo_Main", "XoSo_Main_Main", "XoSo_ThongKe", "XoSo_select_item", "XocXoc", "XocXoc_dialog", "XocXoc_history", "XocXoc_history_item", "XocXoc_top", "Zeus", "Zeus_history", "Zeus_top", "Zeus_dialog", "Zeus_iline", "Zeus_lines", "Zeus_bonus_item", "Zeus_playBonus", "Zeus_item", "Zeus_reel", "BrowserUtil", "CheckOut", "Config", "DisableClick", "Card", "Helper", "MainAudio", "iconGame", "iconGameBai", "iconGameHu", "iconGameTaiXiu", "itemContentMenu", "itemHeadMenu", "itemHeadMenuV2", "Message", "Pagination", "Pagination_item", "hoverScale", "ThongBaoNoHu", "miniBigWin", "mini_warning", "inputNumber", "stateMachine", "subMenuControll", "subMenuItem", "MainGame", "MainGame1", "BonusNap", "BonusNap_Item", "DEvent", "EventAngrybird", "EventBigBabol", "EventMiniPoker", "EventTaiXiu", "EventTaiXiu_item", "DaiLy", "DaiLyItem", "Dialog", "ForGotPass", "GiftCode", "NhiemVu", "NhiemVu_Item", "BaoMat", "DangKyOTP", "ThongTin", "DoiMatKhau", "BaoMatGame", "BaoMatTaiKhoan", "CaNhan", "ChangeAvatar", "KetSat", "LichSu", "LichSuBank", "LichSuBank_item", "LichSuChuyen", "LichSuChuyen_item", "LichSuMuaXu", "LichSuNap", "LichSuNap_item", "LichSuRut", "LichSuRut_item", "Profile", "Settings", "Bank", "bankNap", "bankRut", "BankingController", "ChuyenRed", "ChuyenRed_daily", "MomoController", "NapRIK", "NapRed", "NapRed_itemOne", "NapRed_itemTT", "Shop", "shopMuaTheCao", "shopMuaXu", "TieuRed", "ruttien", "SieuZon", "SieuZon_item", "SignIn", "SignName", "SignOut", "SignUp", "TheCao", "TheCao_item", "TopPhuHo", "TopPhuHo_item", "iMessage", "iMessage_item", "Header", "Menu", "MenuRoom", "MiniPanel", "dialogHuongDan", "MiniDialog", "PokerNap", "minigame", "popupIconSieuZon", "popupMinigame", "popupTopHu", "NewsContents", "NewsItem", "Notice", "bgLoading", "Splash", "EF_NoHu", "PushNohu", "use_reversed_rotateTo", "use_v2.1.x_cc.Action", "coinMove", "winCoins" ]);